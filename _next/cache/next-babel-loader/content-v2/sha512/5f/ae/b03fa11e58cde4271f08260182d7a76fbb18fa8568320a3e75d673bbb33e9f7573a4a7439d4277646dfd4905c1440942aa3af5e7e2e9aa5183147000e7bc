{"ast":null,"code":"import _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/render-types/GroupPerPageSurvey.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport RadioOption from '../options/Radio';\nimport NoteOption from '../options/Note';\nimport TextAreaOption from '../options/TextArea';\nimport ColorOption from '../options/Color';\nimport PrivacyInfoOption from '../options/PrivacyInfo';\nimport TimeOption from '../options/Time';\nimport CounterOption from '../options/Counter';\nimport CurrencyOption from '../options/Currency';\nimport TextOption from '../options/Text';\nimport SpinEditOption from '../options/SpinEdit';\nimport SelectOption from '../options/Select';\nimport ScoreOption from '../options/Score';\nimport DateOption from '../options/Date';\nimport SubQuestionOption from '../options/SubQuestion';\nimport CheckOption from '../options/Check';\nimport GroupOption from '../options/Group';\nimport SurveyOption from '../options/Survey';\nimport SubGroupOption from '../options/SubGroup';\nimport QuestionOption from '../options/Question';\n\nfunction getOnlySameTypes(typ, options) {\n  var onlySameTypes = [];\n  options.map(function (x) {\n    if (x.typ === typ) {\n      onlySameTypes.push(x);\n    }\n  });\n  return onlySameTypes;\n}\n\nexport default function GroupPerPageSurvey(props) {\n  var _this = this;\n\n  var options = props.options,\n      index = props.index,\n      displayType = props.displayType,\n      isHorzintal = props.isHorzintal;\n  var state = {\n    survey: {\n      typ: 'SURVEY'\n    },\n    subGroup: {\n      typ: 'SUBGROUP'\n    },\n    question: {\n      typ: 'QUESTION'\n    },\n    note: {\n      typ: 'NOTE'\n    },\n    subQuestion: {\n      typ: 'SUBQUESTION'\n    },\n    date: {\n      typ: 'DATE'\n    },\n    score: {\n      typ: 'SCORE'\n    },\n    spinEdit: {\n      typ: 'SPINEDIT'\n    },\n    text: {\n      typ: 'TEXT'\n    },\n    textArea: {\n      typ: 'TEXTAREA'\n    },\n    currencyEdit: {\n      typ: 'CURRENCYEDIT'\n    },\n    counter: {\n      typ: 'COUNTER'\n    },\n    time: {\n      typ: 'TIME'\n    },\n    privacyInfo: {\n      typ: 'PRIVACY-INFO'\n    },\n    color: {\n      typ: 'COLOR'\n    },\n    //<--- GROUPED OPTIONS--->\n    group: {\n      typ: 'GROUP',\n      isRendered: false\n    },\n    check: {\n      typ: 'CHECK',\n      isRendered: false\n    },\n    selectOption: {\n      typ: 'SELECT-OPTION',\n      isRendered: false\n    },\n    radio: {\n      typ: 'RADIO',\n      isRendered: false\n    }\n  };\n  return options.map(function (option, i) {\n    //calculate index numbers\n    var indexValue;\n\n    if (index) {\n      if (option.typ === state.question.typ || option.typ === state.subQuestion.typ) {\n        indexValue = String(index) + '.' + String(i + 1);\n      } else {\n        indexValue = String(index);\n      }\n    } else {\n      indexValue = String(i + 1);\n    }\n\n    if (option.typ === state.survey.typ) {\n      return __jsx(SurveyOption, {\n        option: option,\n        optionTyp: state.survey.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.subGroup.typ) {\n      return __jsx(SubGroupOption, {\n        option: option,\n        optionTyp: state.subGroup.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.question.typ) {\n      return __jsx(QuestionOption, {\n        option: option,\n        optionTyp: state.question.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.note.typ) {\n      return __jsx(NoteOption, {\n        option: option,\n        optionTyp: state.note.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.subQuestion.typ) {\n      return __jsx(SubQuestionOption, {\n        option: option,\n        optionTyp: state.subQuestion.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.date.typ) {\n      return __jsx(DateOption, {\n        option: option,\n        optionTyp: state.date.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.score.typ) {\n      return __jsx(ScoreOption, {\n        option: option,\n        optionTyp: state.score.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.text.typ) {\n      return __jsx(TextOption, {\n        option: option,\n        optionTyp: state.text.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.textArea.typ) {\n      return __jsx(TextAreaOption, {\n        option: option,\n        optionTyp: state.textArea.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.currencyEdit.typ) {\n      return __jsx(CurrencyOption, {\n        option: option,\n        optionTyp: state.currencyEdit.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.time.typ) {\n      return __jsx(TimeOption, {\n        option: option,\n        optionTyp: state.time.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.privacyInfo.typ) {\n      return __jsx(PrivacyInfoOption, {\n        option: option,\n        optionTyp: state.privacyInfo.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.color.typ) {\n      return __jsx(ColorOption, {\n        option: option,\n        optionTyp: state.color.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.spinEdit.typ) {\n      return __jsx(SpinEditOption, {\n        option: option,\n        optionTyp: state.spinEdit.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 20\n        }\n      });\n    } else if (option.typ === state.counter.typ) {\n      return __jsx(CounterOption, {\n        option: option,\n        optionTyp: state.counter.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 20\n        }\n      }); //<--- GROUPED OPTIONS--->\n    } else if (option.typ === state.group.typ && !state.group.isRendered) {\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        group: _objectSpread(_objectSpread({}, state.group), {}, {\n          isRendered: true\n        })\n      });\n      return __jsx(GroupOption, {\n        options: getOnlySameTypes(state.group.typ, options),\n        optionTyp: state.group.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      });\n    } else if (option.typ === state.check.typ && !state.check.isRendered) {\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        check: _objectSpread(_objectSpread({}, state.check), {}, {\n          isRendered: true\n        })\n      });\n      return __jsx(CheckOption, {\n        isHorzintal: isHorzintal,\n        options: getOnlySameTypes(state.check.typ, options),\n        optionTyp: state.check.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      });\n    } else if (option.typ === state.selectOption.typ && !state.selectOption.isRendered) {\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        selectOption: _objectSpread(_objectSpread({}, state.selectOption), {}, {\n          isRendered: true\n        })\n      });\n      return __jsx(SelectOption, {\n        options: getOnlySameTypes(state.selectOption.typ, options),\n        optionTyp: state.selectOption.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      });\n    } else if (option.typ === state.radio.typ && !state.radio.isRendered) {\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        radio: _objectSpread(_objectSpread({}, state.radio), {}, {\n          isRendered: true\n        })\n      });\n      return __jsx(RadioOption, {\n        isHorzintal: isHorzintal,\n        options: getOnlySameTypes(state.radio.typ, options),\n        optionTyp: state.radio.typ,\n        index: indexValue,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }\n      });\n    }\n  });\n}\n_c = GroupPerPageSurvey;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupPerPageSurvey\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/render-types/GroupPerPageSurvey.js"],"names":["React","RadioOption","NoteOption","TextAreaOption","ColorOption","PrivacyInfoOption","TimeOption","CounterOption","CurrencyOption","TextOption","SpinEditOption","SelectOption","ScoreOption","DateOption","SubQuestionOption","CheckOption","GroupOption","SurveyOption","SubGroupOption","QuestionOption","getOnlySameTypes","typ","options","onlySameTypes","map","x","push","GroupPerPageSurvey","props","index","displayType","isHorzintal","state","survey","subGroup","question","note","subQuestion","date","score","spinEdit","text","textArea","currencyEdit","counter","time","privacyInfo","color","group","isRendered","check","selectOption","radio","option","i","indexValue","String"],"mappings":"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","sourcesContent":["import React from 'react'\nimport RadioOption from '../options/Radio'\nimport NoteOption from '../options/Note'\nimport TextAreaOption from '../options/TextArea'\nimport ColorOption from '../options/Color'\nimport PrivacyInfoOption from '../options/PrivacyInfo'\nimport TimeOption from '../options/Time'\nimport CounterOption from '../options/Counter'\nimport CurrencyOption from '../options/Currency'\nimport TextOption from '../options/Text'\nimport SpinEditOption from '../options/SpinEdit'\nimport SelectOption from '../options/Select'\nimport ScoreOption from '../options/Score'\nimport DateOption from '../options/Date'\nimport SubQuestionOption from '../options/SubQuestion'\nimport CheckOption from '../options/Check'\nimport GroupOption from '../options/Group'\nimport SurveyOption from '../options/Survey'\nimport SubGroupOption from '../options/SubGroup'\nimport QuestionOption from '../options/Question'\n\nfunction getOnlySameTypes(typ, options) {\n    const onlySameTypes = []\n    options.map((x) => {\n        if (x.typ === typ) {\n            onlySameTypes.push(x)\n        }\n    })\n    return onlySameTypes\n}\n\nexport default function GroupPerPageSurvey(props) {\n    const { options, index, displayType, isHorzintal } = props\n\n    let state = {\n        survey: { typ: 'SURVEY' },\n        subGroup: { typ: 'SUBGROUP' },\n        question: { typ: 'QUESTION' },\n        note: { typ: 'NOTE' },\n        subQuestion: { typ: 'SUBQUESTION' },\n        date: { typ: 'DATE' },\n        score: { typ: 'SCORE' },\n        spinEdit: { typ: 'SPINEDIT' },\n        text: { typ: 'TEXT' },\n        textArea: { typ: 'TEXTAREA' },\n        currencyEdit: { typ: 'CURRENCYEDIT' },\n        counter: { typ: 'COUNTER' },\n        time: { typ: 'TIME' },\n        privacyInfo: { typ: 'PRIVACY-INFO' },\n        color: { typ: 'COLOR' },\n        //<--- GROUPED OPTIONS--->\n        group: { typ: 'GROUP', isRendered: false },\n        check: { typ: 'CHECK', isRendered: false },\n        selectOption: { typ: 'SELECT-OPTION', isRendered: false },\n        radio: { typ: 'RADIO', isRendered: false },\n    }\n\n    return options.map((option, i) => {\n        //calculate index numbers\n        let indexValue\n        if (index) {\n            if (option.typ === state.question.typ || option.typ === state.subQuestion.typ) {\n                indexValue = String(index) + '.' + String(i + 1)\n            } else {\n                indexValue = String(index)\n            }\n        } else {\n            indexValue = String(i + 1)\n        }\n\n        if (option.typ === state.survey.typ) {\n            return <SurveyOption option={option} optionTyp={state.survey.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.subGroup.typ) {\n            return <SubGroupOption option={option} optionTyp={state.subGroup.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.question.typ) {\n            return <QuestionOption option={option} optionTyp={state.question.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.note.typ) {\n            return <NoteOption option={option} optionTyp={state.note.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.subQuestion.typ) {\n            return <SubQuestionOption option={option} optionTyp={state.subQuestion.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.date.typ) {\n            return <DateOption option={option} optionTyp={state.date.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.score.typ) {\n            return <ScoreOption option={option} optionTyp={state.score.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.text.typ) {\n            return <TextOption option={option} optionTyp={state.text.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.textArea.typ) {\n            return <TextAreaOption option={option} optionTyp={state.textArea.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.currencyEdit.typ) {\n            return <CurrencyOption option={option} optionTyp={state.currencyEdit.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.time.typ) {\n            return <TimeOption option={option} optionTyp={state.time.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.privacyInfo.typ) {\n            return <PrivacyInfoOption option={option} optionTyp={state.privacyInfo.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.color.typ) {\n            return <ColorOption option={option} optionTyp={state.color.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.spinEdit.typ) {\n            return <SpinEditOption option={option} optionTyp={state.spinEdit.typ} index={indexValue} key={i} />\n        } else if (option.typ === state.counter.typ) {\n            return <CounterOption option={option} optionTyp={state.counter.typ} index={indexValue} key={i} />\n            //<--- GROUPED OPTIONS--->\n        } else if (option.typ === state.group.typ && !state.group.isRendered) {\n            state = {\n                ...state,\n                group: { ...state.group, isRendered: true },\n            }\n            return (\n                <GroupOption\n                    options={getOnlySameTypes(state.group.typ, options)}\n                    optionTyp={state.group.typ}\n                    index={indexValue}\n                    key={i}\n                />\n            )\n        } else if (option.typ === state.check.typ && !state.check.isRendered) {\n            state = {\n                ...state,\n                check: { ...state.check, isRendered: true },\n            }\n            return (\n                <CheckOption\n                    isHorzintal={isHorzintal}\n                    options={getOnlySameTypes(state.check.typ, options)}\n                    optionTyp={state.check.typ}\n                    index={indexValue}\n                    key={i}\n                />\n            )\n        } else if (option.typ === state.selectOption.typ && !state.selectOption.isRendered) {\n            state = {\n                ...state,\n                selectOption: { ...state.selectOption, isRendered: true },\n            }\n            return (\n                <SelectOption\n                    options={getOnlySameTypes(state.selectOption.typ, options)}\n                    optionTyp={state.selectOption.typ}\n                    index={indexValue}\n                    key={i}\n                />\n            )\n        } else if (option.typ === state.radio.typ && !state.radio.isRendered) {\n            state = {\n                ...state,\n                radio: { ...state.radio, isRendered: true },\n            }\n            return (\n                <RadioOption\n                    isHorzintal={isHorzintal}\n                    options={getOnlySameTypes(state.radio.typ, options)}\n                    optionTyp={state.radio.typ}\n                    index={indexValue}\n                    key={i}\n                />\n            )\n        }\n    })\n}\n"]},"metadata":{},"sourceType":"module"}