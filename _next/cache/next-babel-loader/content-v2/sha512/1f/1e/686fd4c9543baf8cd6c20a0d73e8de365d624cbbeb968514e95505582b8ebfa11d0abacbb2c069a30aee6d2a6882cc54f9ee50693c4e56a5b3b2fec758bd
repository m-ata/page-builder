{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider/AddSlider.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport 'regenerator-runtime/runtime';\nimport { toast } from 'react-toastify';\nimport validator from 'validator';\nimport axios from 'axios'; //material ui imports\n\nimport Card from '@material-ui/core/Card';\nimport IconButton from '@material-ui/core/IconButton';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport LoadingSpinner from '../../../../../../LoadingSpinner';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { FormControlLabel, MenuItem, Radio, RadioGroup } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport Divider from '@material-ui/core/Divider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputColor from 'react-input-color';\nimport { DropzoneDialog } from 'material-ui-dropzone'; //custom imports\n\nimport { PercentageSlider } from '../../../../../../../model/slider';\nimport { getSliderImages, patchListSliderImage } from '../../../../helpers/slider';\nimport TextEditor from '../text-editor';\nimport { COLORS, DELETE_SUCCESS, PERCENTAGE_VALUES, SAVED_SUCCESS, UPLOAD_SUCCESS } from '../../../../constants';\nimport { FIELDTYPE, isErrorMsg, OREST_ENDPOINT, OREST_UPLOAD, REQUEST_METHOD_CONST } from '../../../../../../../model/orest/constants';\nimport { Delete, Insert, Patch, UseOrest, ViewList } from '@webcms/orest';\nimport WebCmsGlobal from 'components/webcms-global';\nimport BorderColorSharpIcon from '@material-ui/icons/BorderColorSharp';\nimport { toSelfName } from './../../../../../../../lib/helpers/useFunction';\nimport { DatePicker, LocalizationProvider } from '@material-ui/pickers';\nimport MomentAdapter from '@date-io/moment';\nimport moment from 'moment';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  },\n  submit: {\n    marginRight: theme.spacing(3),\n    marginTop: theme.spacing(1),\n    borderRadius: 20,\n    float: 'right'\n  },\n  disableUpload: {\n    pointerEvents: 'none',\n    opacity: 0.5\n  },\n  paperBlock: {\n    height: 350,\n    border: `2px solid ${COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary}`,\n    overflow: 'auto'\n  },\n  disableEvent: {\n    pointerEvents: 'none',\n    opacity: 0.5\n  },\n  uploadButton: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    borderRadius: 20,\n    float: 'right'\n  },\n  card: {\n    height: 200,\n    width: 300,\n    margin: theme.spacing(1),\n    cursor: 'pointer'\n  },\n  alignText: {\n    textAlign: 'right',\n    color: 'red'\n  },\n  text: {\n    marginTop: 16,\n    fontWeight: 'bold',\n    fontSize: 15\n  },\n  labelFont: {\n    fontSize: 14\n  }\n}));\n\nconst AddSlider = props => {\n  var _state$assets, _state$assets$meta, _state$assets2, _state$assets2$colors, _state$assets2$colors2, _state$assets3, _state$assets3$colors, _state$assets3$colors2, _router$query2, _router$query3, _router$query4, _router$query5, _router$query6;\n\n  const {\n    state,\n    handleSectionComponent,\n    handleNextDisable,\n    handleApplyDisable,\n    handleSliderValues\n  } = props;\n  const router = useRouter();\n  const companyId = router.query.companyID;\n  const {\n    GENERAL_SETTINGS,\n    token\n  } = useContext(WebCmsGlobal);\n  const authToken = token || router.query.authToken; //local state\n\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n  const {\n    0: sliderGID,\n    1: setSliderGID\n  } = useState('');\n  const {\n    0: sliderID,\n    1: setSliderID\n  } = useState('');\n  const {\n    0: isCta,\n    1: setIsCta\n  } = useState(false);\n  const {\n    0: ctaTitle,\n    1: setCtaTitle\n  } = useState('');\n  const {\n    0: ctaLink,\n    1: setCtaLink\n  } = useState('');\n  const {\n    0: cta,\n    1: setCta\n  } = useState('');\n  const {\n    0: isSaving,\n    1: setIsSaving\n  } = useState(false);\n  const {\n    0: isItemDesc,\n    1: setItemDesc\n  } = useState(false);\n  const {\n    0: isDialogOpen,\n    1: setDialogOpen\n  } = useState(false);\n  const {\n    0: isRequested,\n    1: setIsRequested\n  } = useState(false);\n  const {\n    0: itemCount,\n    1: setItemCount\n  } = useState(1);\n  const {\n    0: sliderImages,\n    1: setSliderImages\n  } = useState([]);\n  const {\n    0: imageGID,\n    1: setImageGID\n  } = useState('');\n  const {\n    0: showDeleteBtn,\n    1: setShowDeleteBtn\n  } = useState(false);\n  const {\n    0: selectedIndex,\n    1: setSelectedIndex\n  } = useState(null);\n  const {\n    0: isImageSelected,\n    1: setImageSelected\n  } = useState(false);\n  const {\n    0: selectImageRequest,\n    1: setSelectImageReq\n  } = useState(false);\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState();\n  const {\n    0: gappID,\n    1: setGappID\n  } = useState('');\n  const {\n    0: isOptimizeImages,\n    1: setOptimizeImages\n  } = useState(false);\n  const {\n    0: quality,\n    1: setQuality\n  } = useState(state !== null && state !== void 0 && (_state$assets = state.assets) !== null && _state$assets !== void 0 && (_state$assets$meta = _state$assets.meta) !== null && _state$assets$meta !== void 0 && _state$assets$meta.imageQuality ? state.assets.meta.imageQuality * 100 : 50);\n  const {\n    0: catId,\n    1: setCatId\n  } = useState(null);\n  const {\n    0: categories,\n    1: setCategories\n  } = useState([]);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: textColor,\n    1: setTextColor\n  } = useState(state !== null && state !== void 0 && (_state$assets2 = state.assets) !== null && _state$assets2 !== void 0 && (_state$assets2$colors = _state$assets2.colors) !== null && _state$assets2$colors !== void 0 && (_state$assets2$colors2 = _state$assets2$colors.slider) !== null && _state$assets2$colors2 !== void 0 && _state$assets2$colors2.main ? state.assets.colors.slider.main : '#fff');\n  const {\n    0: buttonColor,\n    1: setButtonColor\n  } = useState(state !== null && state !== void 0 && (_state$assets3 = state.assets) !== null && _state$assets3 !== void 0 && (_state$assets3$colors = _state$assets3.colors) !== null && _state$assets3$colors !== void 0 && (_state$assets3$colors2 = _state$assets3$colors.button) !== null && _state$assets3$colors2 !== void 0 && _state$assets3$colors2.main ? state.assets.colors.button.main : '#fff');\n  const {\n    0: localState,\n    1: setLocalState\n  } = useState({\n    isTextEditorDialogOpen: false,\n    editorValue: '',\n    dialogType: '',\n    ctaLinkType: 'external',\n    pageData: [],\n    expiryDate: moment().format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n  });\n  const {\n    dialogType,\n    editorValue,\n    isTextEditorDialogOpen,\n    ctaLinkType,\n    pageData,\n    expiryDate\n  } = localState;\n  const classes = useStyles();\n  useEffect(() => {\n    if (router.query.sliderOnly) {\n      handleSliderValues(title, description, cta, sliderGID, textColor, buttonColor);\n    }\n  }, [title, description, cta, sliderGID, textColor, buttonColor]);\n  useEffect(() => {\n    if (router.query.sliderOnly) {\n      sliderImages.length > 0 ? handleApplyDisable(false) : handleApplyDisable(true);\n    } else {\n      if (sliderImages.length === 0) {\n        setItemDesc(false);\n        handleNextDisable(true);\n      } else {\n        handleNextDisable(false);\n      }\n    }\n  }, [sliderImages]);\n  useEffect(() => {\n    handleSectionComponent && handleSectionComponent({\n      service: 'hcmitemsld',\n      type: 'slider',\n      gid: sliderGID,\n      textColor: textColor,\n      buttonColor: buttonColor\n    });\n  }, [textColor, buttonColor]);\n  useEffect(() => {\n    setIsSaving(true);\n\n    if (router.query.sliderOnly) {\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEM + '/' + OREST_ENDPOINT.GAPP,\n        token: authToken,\n        method: 'get'\n      }).then(res => {\n        var _res$data, _res$data$data;\n\n        if (res.status === 200 && res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && (_res$data$data = _res$data.data) !== null && _res$data$data !== void 0 && _res$data$data.id) {\n          setGappID(res.data.data.id);\n          ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMCAT,\n            token: authToken,\n            params: {\n              hotelrefno: Number(companyId)\n            }\n          }).then(res1 => {\n            if (res1.status === 200) {\n              var _res1$data, _res1$data$data, _res$data2, _res$data2$data, _router$query, _res1$data2, _res1$data2$data, _res1$data3, _res1$data3$data$;\n\n              if ((res1 === null || res1 === void 0 ? void 0 : (_res1$data = res1.data) === null || _res1$data === void 0 ? void 0 : (_res1$data$data = _res1$data.data) === null || _res1$data$data === void 0 ? void 0 : _res1$data$data.length) > 0) {\n                setCategories(res1.data.data);\n                setCatId(res1.data.data[0].id);\n              }\n\n              Insert({\n                // insert slider\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                data: {\n                  itemid: res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : _res$data2$data.id,\n                  hotelrefno: Number(companyId),\n                  masterid: router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.masterid,\n                  catid: (res1 === null || res1 === void 0 ? void 0 : (_res1$data2 = res1.data) === null || _res1$data2 === void 0 ? void 0 : (_res1$data2$data = _res1$data2.data) === null || _res1$data2$data === void 0 ? void 0 : _res1$data2$data.length) > 0 ? res1 === null || res1 === void 0 ? void 0 : (_res1$data3 = res1.data) === null || _res1$data3 === void 0 ? void 0 : (_res1$data3$data$ = _res1$data3.data[0]) === null || _res1$data3$data$ === void 0 ? void 0 : _res1$data3$data$.id : null\n                }\n              }).then(res2 => {\n                if (res2.status === 200 && res2.data.data) {\n                  setSliderGID(res2.data.data.gid);\n                  setSliderID(res2.data.data.id);\n                  setIsSaving(false);\n                } else {\n                  const retErr = isErrorMsg(res2);\n                  setIsSaving(false);\n                  toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                  });\n                }\n              });\n            } else {\n              const retErr = isErrorMsg(res1);\n              setIsSaving(false);\n              toast.error(retErr.errorMsg, {\n                position: toast.POSITION.TOP_RIGHT\n              });\n            }\n          });\n        } else {\n          const retErr = isErrorMsg(res);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    } else {\n      Insert({\n        // insert slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        data: {\n          itemid: state.hcmItemId,\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        if (res.status === 200 && res.data.data) {\n          setSliderGID(res.data.data.gid);\n          setSliderID(res.data.data.id);\n          setIsSaving(false);\n          handleSectionComponent({\n            service: 'hcmitemsld',\n            type: 'slider',\n            gid: res.data.data.gid,\n            textColor: textColor,\n            buttonColor: buttonColor\n          });\n        } else {\n          const retErr = isErrorMsg(res);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      }); //getting data from rafile\n\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.RAFILE,\n        token: authToken,\n        params: {\n          hotelrefno: Number(companyId),\n          query: `filetype::WEBPAGE,istemplate::false}`\n        }\n      }).then(res => {\n        var _res$data3;\n\n        if (res.status === 200 && res !== null && res !== void 0 && (_res$data3 = res.data) !== null && _res$data3 !== void 0 && _res$data3.data) {\n          setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n            pageData: res.data.data\n          }));\n        } else {\n          const retErr = isErrorMsg(res);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (ctaTitle && ctaLink) {\n      setCta(`<a target=\"_blank\" href=\"${ctaLink}\" > ${ctaTitle} </a>`);\n    }\n  }, [ctaTitle, ctaLink]);\n\n  const openDialog = () => {\n    //it opens dialog for image upload\n    setDialogOpen(true);\n  };\n\n  const closeDialog = () => {\n    ////it closes dialog for image upload\n    setDialogOpen(false);\n  };\n\n  const handleUpdate = () => {\n    // update slider/image descriptions\n    if (isItemDesc) {\n      if (isImageSelected) {\n        setIsRequested(true);\n        Patch({\n          // update image\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG,\n          token: authToken,\n          gid: imageGID,\n          params: {\n            hotelrefno: Number(companyId)\n          },\n          data: {\n            title: title,\n            description: description,\n            cta: cta\n          }\n        }).then(res => {\n          if (res.status === 200) {\n            setIsRequested(false);\n            toast.success(SAVED_SUCCESS, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          } else {\n            console.log(res);\n          }\n        });\n      } else {\n        toast.warn('Please Select Image', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    } else {\n      setIsRequested(true);\n      Patch({\n        // update slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        gid: sliderGID,\n        params: {\n          hotelrefno: Number(companyId)\n        },\n        data: {\n          title: title,\n          description: description,\n          cta: cta\n        }\n      }).then(res => {\n        setIsRequested(false);\n\n        if (res.status === 200) {\n          toast.success(SAVED_SUCCESS, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        } else {\n          console.log(res);\n        }\n      });\n    }\n  };\n\n  const saveImage = files => {\n    // save slider images\n    setIsSaving(true);\n    let orderNo = itemCount;\n    let requests = files.map(file => {\n      return new Promise(resolve => {\n        asyncUpload(file, orderNo, resolve);\n        orderNo++;\n      });\n    });\n    Promise.all(requests).then(async () => {\n      const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n      setIsSaving(false);\n\n      if (sldImages) {\n        let updatedImages = [];\n        sldImages.map(data => {\n          updatedImages.push(data);\n        });\n        setSliderImages(updatedImages);\n        setItemCount(updatedImages.length + 1);\n        toast.success(UPLOAD_SUCCESS, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n        closeDialog();\n      } else {\n        toast.warn('Images not found', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  function asyncUpload(file, itemTreated, callback) {\n    if (router.query.sliderOnly) {\n      if (gappID && sliderID) {\n        setTimeout(() => {\n          Insert({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            data: {\n              itemid: gappID,\n              sliderid: sliderID,\n              imgtype: FIELDTYPE.IMG,\n              orderno: itemTreated,\n              hotelrefno: Number(companyId),\n              masterid: router.query.masterid,\n              imgquality: quality / 100,\n              imgscale: quality / 100\n            }\n          }).then(r1 => {\n            if (r1.status === 200) {\n              ImageUpload(GENERAL_SETTINGS.OREST_URL, OREST_ENDPOINT.RAFILE, authToken, r1.data.data.mid, file).then(r => {\n                if (r.status === 200) {\n                  callback();\n                } else {\n                  callback();\n                }\n              });\n            } else {\n              callback();\n            }\n          });\n        }, 100);\n      }\n    } else {\n      if (state.hcmItemId && sliderID) {\n        setTimeout(() => {\n          Insert({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            data: {\n              itemid: state.hcmItemId,\n              sliderid: sliderID,\n              imgtype: FIELDTYPE.IMG,\n              orderno: itemTreated,\n              hotelrefno: Number(companyId),\n              imgquality: quality / 100,\n              imgscale: quality / 100\n            }\n          }).then(r1 => {\n            if (r1.status === 200) {\n              ImageUpload(GENERAL_SETTINGS.OREST_URL, OREST_ENDPOINT.RAFILE, authToken, r1.data.data.mid, file).then(r => {\n                if (r.status === 200) {\n                  callback();\n                } else {\n                  callback();\n                }\n              });\n            } else {\n              callback();\n            }\n          });\n        }, 100);\n      }\n    }\n  }\n\n  const ImageUpload = (apiUrl, endPoint, token, masterID, file) => {\n    const url = apiUrl + '/' + endPoint + OREST_UPLOAD;\n    let binaryData = [];\n    binaryData.push(file);\n    let formData = new FormData();\n    formData.append('file', new Blob(binaryData, {\n      type: file.type\n    }), toSelfName(file.name));\n    const options = {\n      url: url,\n      method: 'post',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      },\n      params: {\n        orsactive: true,\n        masterid: masterID,\n        hotelrefno: companyId,\n        quality: quality / 100,\n        scale: quality / 100\n      },\n      data: formData\n    };\n    return axios(options).then(response => {\n      return response;\n    }).catch(error => {\n      return error.response || {\n        status: 0\n      };\n    });\n  };\n\n  const handleDeleteImage = imageGid => {\n    // delete image against gid\n    setIsRequested(true);\n    Delete({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMIMG,\n      token: authToken,\n      gid: imageGid,\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(async res => {\n      if (res.status === 200) {\n        const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n        sldImages.sort((a, b) => a.orderno > b.orderno ? 1 : -1);\n        setIsRequested(false);\n\n        if (sldImages) {\n          let updatedImages = [];\n          sldImages.map((data, index) => {\n            data.orderno = index + 1;\n            updatedImages.push(data);\n          });\n          let requestPassed = true;\n\n          for (const sldImage of sldImages) {\n            const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {\n              orderno: sldImage.orderno\n            }, {\n              hotelrefno: Number(companyId)\n            }, sldImage.gid);\n            updatedSliderImage ? requestPassed = true : requestPassed = false;\n          }\n\n          setIsRequested(false);\n\n          if (requestPassed) {\n            setSliderImages(updatedImages);\n            setSelectedIndex(null);\n            setItemCount(updatedImages.length + 1);\n            toast.success(DELETE_SUCCESS, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          } else {\n            toast.error('Something went wrong while deleting image. Please check network tab.', {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        } else {\n          toast.error('Something went wrong while deleting image. Please check network tab.', {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      } else {\n        toast.error('Something went wrong while deleting image. Please check network tab.', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n        setIsRequested(false);\n      }\n    });\n  };\n\n  const handleSelectedImage = (index, image) => {\n    if (isItemDesc) {\n      setSelectedIndex(index);\n      setImageSelected(true);\n      setImageGID(image.gid);\n      setSelectImageReq(true);\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMIMG,\n        token: authToken,\n        params: {\n          query: `gid:${image.gid}`,\n          sort: 'orderno',\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        setSelectImageReq(false);\n\n        if (res.status === 200) {\n          var _res$data4, _res$data4$data;\n\n          if ((res === null || res === void 0 ? void 0 : (_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : (_res$data4$data = _res$data4.data) === null || _res$data4$data === void 0 ? void 0 : _res$data4$data.length) > 0) {\n            res.data.data[0].title ? setTitle(res.data.data[0].title) : setTitle('');\n            res.data.data[0].description ? setDescription(res.data.data[0].description) : setDescription('');\n            res.data.data[0].cta ? setCta(res.data.data[0].cta) : setCta('');\n\n            if (res.data.data[0].cta) {\n              setIsCta(true);\n              setCta(res.data.data[0].cta);\n              const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n              if ((matchs === null || matchs === void 0 ? void 0 : matchs.length) > 0) {\n                const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n                setCtaLink(matchs[0]);\n                setCtaTitle(cta_title);\n                setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                  ctaLinkType: 'external'\n                }));\n              } else {\n                const gid = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('\" >', '').replace('</a>', '').split(' ')[0];\n                const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(gid, '').replace('\" >', '').replace('</a>', '').trim();\n                setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                  ctaLinkType: 'internal'\n                }));\n                setCtaLink(gid);\n                setCtaTitle(cta_title);\n              }\n            } else {\n              setIsCta(false);\n              setCtaTitle('');\n              setCtaLink('');\n            }\n          }\n        } else {\n          const retErr = isErrorMsg(res);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    }\n  };\n\n  const handleUpdateOrderNo = async (gid, orderNo, orderType) => {\n    // update order no of slider images\n    if (orderNo <= 0 || orderNo > sliderImages.length) {\n      setSelectedIndex(null);\n      setImageSelected(false);\n    } else {\n      const tmpSliderImages = [...sliderImages];\n\n      if (orderType === 'increment') {\n        const tmp = tmpSliderImages[orderNo - 1];\n        tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo - 2];\n        tmpSliderImages[orderNo - 2] = tmp;\n      } else {\n        const tmp = tmpSliderImages[orderNo - 1];\n        tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo];\n        tmpSliderImages[orderNo] = tmp;\n      }\n\n      tmpSliderImages.map((data, index) => {\n        data.orderno = index + 1;\n      });\n      setIsRequested(true);\n      let requestPassed = true;\n\n      for (const sldImage of tmpSliderImages) {\n        const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {\n          orderno: sldImage.orderno\n        }, {\n          hotelrefno: Number(companyId)\n        }, sldImage.gid);\n        updatedSliderImage ? requestPassed = true : requestPassed = false;\n      }\n\n      setIsRequested(false);\n\n      if (requestPassed) {\n        setSliderImages(tmpSliderImages);\n        setItemCount(sliderImages.length + 1);\n        handleResetState();\n        toast.success('Order No Updated Successfully', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      } else {\n        toast.error('Something went wrong while updating order no. Please check network tab.', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }\n  };\n\n  const handleResetState = () => {\n    setSelectedIndex(null);\n    setImageSelected(false);\n    setTitle('');\n    setDescription('');\n    setIsCta(false);\n    setCtaTitle('');\n    setCtaLink('');\n    setCta('');\n  };\n\n  const handleItemDescription = () => {\n    if (isItemDesc) {\n      setSelectImageReq(true);\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        params: {\n          query: `gid:${sliderGID}`,\n          sort: 'orderno',\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        var _res$data5, _res$data5$data;\n\n        setSelectImageReq(false);\n\n        if ((res === null || res === void 0 ? void 0 : res.status) === 200 && (res === null || res === void 0 ? void 0 : (_res$data5 = res.data) === null || _res$data5 === void 0 ? void 0 : (_res$data5$data = _res$data5.data) === null || _res$data5$data === void 0 ? void 0 : _res$data5$data.length) > 0) {\n          var _res$data$data$, _res$data$data$2;\n\n          setTitle((_res$data$data$ = res.data.data[0]) === null || _res$data$data$ === void 0 ? void 0 : _res$data$data$.title);\n          setDescription((_res$data$data$2 = res.data.data[0]) === null || _res$data$data$2 === void 0 ? void 0 : _res$data$data$2.description);\n\n          if (res.data.data[0].cta) {\n            setIsCta(true);\n            setCta(res.data.data[0].cta);\n            const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n            if ((matchs === null || matchs === void 0 ? void 0 : matchs.length) > 0) {\n              const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n              setCtaLink(matchs[0]);\n              setCtaTitle(cta_title);\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLinkType: 'external'\n              }));\n            } else {\n              const gid = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('\" >', '').replace('</a>', '').split(' ')[0];\n              const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(gid, '').replace('\" >', '').replace('</a>', '').trim();\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLinkType: 'internal'\n              }));\n              setCtaLink(gid);\n              setCtaTitle(cta_title);\n            }\n          } else {\n            setIsCta(false);\n            setCtaTitle('');\n            setCtaLink('');\n            setCta('');\n          }\n        }\n      });\n      handleResetState();\n    } else {\n      var _sliderImages$, _sliderImages$2;\n\n      setSelectedIndex(0);\n      setImageSelected(true);\n      setImageGID((_sliderImages$ = sliderImages[0]) === null || _sliderImages$ === void 0 ? void 0 : _sliderImages$.gid);\n      setSelectImageReq(true);\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMIMG,\n        token: authToken,\n        params: {\n          query: `gid:${(_sliderImages$2 = sliderImages[0]) === null || _sliderImages$2 === void 0 ? void 0 : _sliderImages$2.gid}`,\n          sort: 'orderno',\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        setSelectImageReq(false);\n\n        if (res.status === 200) {\n          if (res.data && res.data.data && res.data.data.length > 0) {\n            res.data.data[0].title ? setTitle(res.data.data[0].title) : setTitle('');\n            res.data.data[0].description ? setDescription(res.data.data[0].description) : setDescription('');\n            res.data.data[0].cta ? setCta(res.data.data[0].cta) : setCta('');\n\n            if (res.data.data[0].cta) {\n              setIsCta(true);\n              setCta(res.data.data[0].cta);\n              const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n              if ((matchs === null || matchs === void 0 ? void 0 : matchs.length) > 0) {\n                const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n                setCtaLink(matchs[0]);\n                setCtaTitle(cta_title);\n                setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                  ctaLinkType: 'external'\n                }));\n              } else {\n                const gid = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('\" >', '').replace('</a>', '').split(' ')[0];\n                const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(gid, '').replace('\" >', '').replace('</a>', '').trim();\n                setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                  ctaLinkType: 'internal'\n                }));\n                setCtaLink(gid);\n                setCtaTitle(cta_title);\n              }\n            } else {\n              setIsCta(false);\n              setCtaTitle('');\n              setCtaLink('');\n            }\n          }\n        } else {\n          const retErr = isErrorMsg(res);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    }\n\n    setItemDesc(!isItemDesc);\n  };\n\n  const handleImageQualityChange = value => {\n    if (value >= 10 && value <= 100 && value % 10 === 0) {\n      if (sliderImages.length) {\n        setIsSaving(true);\n        const gids = sliderImages.map(image => {\n          return {\n            gid: image.gid,\n            imgquality: value / 100,\n            imgscale: value / 100\n          };\n        });\n        UseOrest({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n          token: authToken,\n          method: REQUEST_METHOD_CONST.PATCH,\n          data: gids,\n          params: {\n            hotelrefno: Number(companyId)\n          }\n        }).then(res => {\n          var _res$data6;\n\n          if ((res === null || res === void 0 ? void 0 : res.status) === 200 && res !== null && res !== void 0 && (_res$data6 = res.data) !== null && _res$data6 !== void 0 && _res$data6.data) {\n            setQuality(value);\n            setIsSaving(false);\n          } else {\n            const retErr = isErrorMsg(res);\n            toast.error(retErr.errorMsg, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        });\n      } else {\n        setQuality(value);\n      }\n    }\n  };\n\n  const handleTextEditorValue = value => {\n    if (dialogType === 'title') {\n      setTitle(value);\n    }\n\n    if (dialogType === 'description') {\n      setDescription(value);\n    }\n\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isTextEditorDialogOpen: false,\n      dialogType: '',\n      editorValue: ''\n    }));\n  };\n\n  const handleCancelEditor = () => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isTextEditorDialogOpen: false,\n      dialogType: '',\n      editorValue: ''\n    }));\n  };\n\n  const handleDialogOpen = type => {\n    if (type === 'title') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isTextEditorDialogOpen: true,\n        dialogType: type,\n        editorValue: title\n      }));\n    }\n\n    if (type === 'description') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isTextEditorDialogOpen: true,\n        dialogType: type,\n        editorValue: description\n      }));\n    }\n  };\n\n  const handleChangeDatePicker = date => {\n    const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE);\n    setLocalState(_objectSpread(_objectSpread({}, localState), {}, {\n      expiryDate: dateValue\n    }));\n\n    if (dateValue !== 'Invalid date') {\n      Patch({\n        // update slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        gid: sliderGID,\n        params: {\n          hotelrefno: Number(companyId)\n        },\n        data: {\n          expiredt: dateValue\n        }\n      }).then(res => {\n        setIsRequested(false);\n\n        if (res.status === 200) {\n          toast.success(SAVED_SUCCESS, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        } else {\n          console.log(res);\n        }\n      });\n    }\n  };\n\n  if (isSaving) {\n    return __jsx(LoadingSpinner, {\n      style: {\n        color: COLORS.secondary\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 937,\n      columnNumber: 9\n    }\n  }, state.hcmItemId && __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 17\n    }\n  }, !router.query.sliderOnly && __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 943,\n      columnNumber: 33\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 37\n    }\n  }, __jsx(DatePicker, {\n    id: \"sliderExpiryDate\",\n    name: \"sliderExpiryDate\",\n    label: 'Select Expiry',\n    value: expiryDate,\n    inputFormat: \"DD/MM/YYYY HH:MM:SS\",\n    disablePast: true,\n    onChange: handleChangeDatePicker,\n    renderInput: props => __jsx(TextField, _extends({\n      fullWidth: true\n    }, props, {\n      variant: 'filled',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 69\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 41\n    }\n  })))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    className: isRequested ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 964,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: router !== null && router !== void 0 && (_router$query2 = router.query) !== null && _router$query2 !== void 0 && _router$query2.sliderOnly ? 8 : 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 965,\n      columnNumber: 25\n    }\n  }, __jsx(FormControlLabel, {\n    className: classes.labelFont,\n    control: __jsx(Checkbox, {\n      size: 'small',\n      checked: isItemDesc,\n      onChange: handleItemDescription,\n      name: \"isitem\",\n      color: \"primary\",\n      disabled: sliderImages.length === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 37\n      }\n    }),\n    label: \"Items Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 966,\n      columnNumber: 29\n    }\n  }), __jsx(FormControlLabel, {\n    className: classes.labelFont,\n    control: __jsx(Checkbox, {\n      size: 'small',\n      checked: isOptimizeImages,\n      onChange: () => setOptimizeImages(!isOptimizeImages),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983,\n        columnNumber: 37\n      }\n    }),\n    label: \"Optimize Images\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 29\n    }\n  }), (router === null || router === void 0 ? void 0 : (_router$query3 = router.query) === null || _router$query3 === void 0 ? void 0 : _router$query3.sliderOnly) && __jsx(React.Fragment, null, __jsx(FormControlLabel, {\n    className: classes.labelFont,\n    control: __jsx(Checkbox, {\n      size: 'small',\n      checked: isActive,\n      onChange: () => {\n        setIsActive(!isActive);\n        Patch({\n          // update slider\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMSLD,\n          token: authToken,\n          gid: sliderGID,\n          params: {\n            hotelrefno: Number(companyId)\n          },\n          data: {\n            isactive: !isActive\n          }\n        }).then(res => {\n          if (res.status !== 200) {\n            const retErr = isErrorMsg(res);\n            toast.error(retErr.errorMsg, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        });\n      },\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997,\n        columnNumber: 45\n      }\n    }),\n    label: \"Active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 994,\n      columnNumber: 37\n    }\n  }), __jsx(FormControl, {\n    size: 'small',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 37\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1029,\n      columnNumber: 41\n    }\n  }, \"Category\"), __jsx(Select, {\n    native: true,\n    name: \"cat_id\",\n    variant: 'outlined',\n    value: catId,\n    onChange: e => {\n      setCatId(e.target.value);\n      Patch({\n        // update slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        gid: sliderGID,\n        params: {\n          hotelrefno: Number(companyId)\n        },\n        data: {\n          catid: e.target.value\n        }\n      }).then(res => {\n        if (res.status !== 200) {\n          const retErr = isErrorMsg(res);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1030,\n      columnNumber: 41\n    }\n  }, __jsx(\"option\", {\n    style: {\n      display: 'none'\n    },\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1059,\n      columnNumber: 45\n    }\n  }), categories.length > 0 && categories.map(cat => {\n    return __jsx(\"option\", {\n      key: cat.id,\n      value: cat.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063,\n        columnNumber: 57\n      }\n    }, cat.description);\n  }))))), !(router !== null && router !== void 0 && (_router$query4 = router.query) !== null && _router$query4 !== void 0 && _router$query4.sliderOnly) && __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1074,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1075,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 1,\n    style: {\n      marginTop: 6,\n      marginLeft: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1076,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    style: {\n      marginLeft: -8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1077,\n      columnNumber: 41\n    }\n  }, \"Text\")), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1081,\n      columnNumber: 37\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setTextColor(color.hex),\n    placement: \"right\",\n    initialValue: textColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1088,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1089,\n      columnNumber: 41\n    }\n  }, \"Button\")), __jsx(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1091,\n      columnNumber: 37\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setButtonColor(color.hex),\n    placement: \"right\",\n    initialValue: buttonColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1092,\n      columnNumber: 41\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: router !== null && router !== void 0 && (_router$query5 = router.query) !== null && _router$query5 !== void 0 && _router$query5.sliderOnly ? 4 : 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1101,\n      columnNumber: 25\n    }\n  }, router !== null && router !== void 0 && (_router$query6 = router.query) !== null && _router$query6 !== void 0 && _router$query6.sliderOnly ? __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1103,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 1,\n    style: {\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1104,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    style: {\n      marginLeft: -8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1105,\n      columnNumber: 41\n    }\n  }, \"Text\")), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1109,\n      columnNumber: 37\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setTextColor(color.hex),\n    placement: \"right\",\n    initialValue: textColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1110,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1116,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1117,\n      columnNumber: 41\n    }\n  }, \"Button\")), __jsx(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1119,\n      columnNumber: 37\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setButtonColor(color.hex),\n    placement: \"right\",\n    initialValue: buttonColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1120,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1126,\n      columnNumber: 37\n    }\n  }, __jsx(Button, {\n    onClick: openDialog,\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"upload\",\n    className: classes.uploadButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1127,\n      columnNumber: 41\n    }\n  }, __jsx(CloudUploadIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1135,\n      columnNumber: 45\n    }\n  }), \"UPLOAD\"))) : __jsx(Button, {\n    onClick: openDialog,\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"upload\",\n    className: classes.uploadButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1141,\n      columnNumber: 33\n    }\n  }, __jsx(CloudUploadIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1149,\n      columnNumber: 37\n    }\n  }), \"UPLOAD\"))), isOptimizeImages && __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1156,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1157,\n      columnNumber: 29\n    }\n  }, __jsx(PercentageSlider, {\n    marks: PERCENTAGE_VALUES,\n    value: quality,\n    onChange: (e, value) => handleImageQualityChange(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1158,\n      columnNumber: 33\n    }\n  }))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    spacing: 3,\n    className: isRequested ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1166,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1172,\n      columnNumber: 25\n    }\n  }, __jsx(Paper, {\n    className: classes.paperBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1173,\n      columnNumber: 29\n    }\n  }, sliderImages.map((value, index) => {\n    return __jsx(Grid, {\n      key: index,\n      container: true,\n      justify: 'center',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 41\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 45\n      }\n    }, __jsx(Card, {\n      className: classes.card,\n      style: {\n        border: index === selectedIndex ? '2px solid red' : `1px solid ${COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178,\n        columnNumber: 49\n      }\n    }, __jsx(\"div\", {\n      style: {\n        backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL + value.fileurl})`,\n        height: '100%',\n        width: '100%',\n        backgroundSize: 'cover',\n        borderRadius: 5\n      },\n      onMouseEnter: () => {\n        setShowDeleteBtn(true);\n        setHoverIndex(index);\n      },\n      onMouseLeave: () => {\n        setShowDeleteBtn(false);\n        setHoverIndex(index);\n      },\n      onClick: () => handleSelectedImage(index, value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187,\n        columnNumber: 53\n      }\n    }, showDeleteBtn && hoverIndex === index && __jsx(IconButton, {\n      disabled: isRequested,\n      component: \"span\",\n      color: 'primary',\n      className: index === sliderImages.length - 1 ? classes.disableEvent : '',\n      onClick: () => handleUpdateOrderNo(value.gid, value.orderno + 1, 'increment'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208,\n        columnNumber: 61\n      }\n    }, __jsx(AddCircleIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 65\n      }\n    })), showDeleteBtn && hoverIndex === index && __jsx(Typography, {\n      component: \"span\",\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229,\n        columnNumber: 61\n      }\n    }, value.orderno), showDeleteBtn && hoverIndex === index && __jsx(IconButton, {\n      disabled: isRequested,\n      component: \"span\",\n      color: 'primary',\n      className: index === 0 ? classes.disableEvent : '',\n      onClick: () => handleUpdateOrderNo(value.gid, value.orderno - 1, 'decrement'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1234,\n        columnNumber: 61\n      }\n    }, __jsx(RemoveCircleIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1247,\n        columnNumber: 65\n      }\n    })), showDeleteBtn && hoverIndex === index && __jsx(IconButton, {\n      onClick: () => handleDeleteImage(value.gid),\n      disabled: isRequested,\n      \"aria-label\": \"upload picture\",\n      component: \"span\",\n      style: {\n        float: 'right'\n      },\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1251,\n        columnNumber: 61\n      }\n    }, __jsx(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1259,\n        columnNumber: 65\n      }\n    }))))));\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 7,\n    className: selectImageRequest ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1270,\n      columnNumber: 25\n    }\n  }, __jsx(Paper, {\n    className: classes.paperBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1271,\n      columnNumber: 29\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1272,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1273,\n      columnNumber: 37\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1274,\n      columnNumber: 41\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1275,\n      columnNumber: 45\n    }\n  }, \"Title\")), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1279,\n      columnNumber: 41\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit Title\",\n    color: \"primary\",\n    onClick: () => handleDialogOpen('title'),\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1280,\n      columnNumber: 45\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1286,\n      columnNumber: 49\n    }\n  }))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1291,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1292,\n      columnNumber: 37\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1293,\n      columnNumber: 41\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1294,\n      columnNumber: 45\n    }\n  }, \"Description\")), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1298,\n      columnNumber: 41\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit Title\",\n    color: \"primary\",\n    onClick: () => handleDialogOpen('description'),\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1299,\n      columnNumber: 45\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1305,\n      columnNumber: 49\n    }\n  }))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1310,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1311,\n      columnNumber: 37\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1312,\n      columnNumber: 41\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1313,\n      columnNumber: 45\n    }\n  }, \"Do you want to add button for slider ?\")), __jsx(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1317,\n      columnNumber: 41\n    }\n  }, __jsx(Typography, {\n    component: 'div',\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1318,\n      columnNumber: 45\n    }\n  }, __jsx(Switch, {\n    size: 'small',\n    checked: isCta,\n    onChange: () => {\n      setIsCta(!isCta);\n      setCtaTitle('');\n      setCtaLink('');\n      setCta('');\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaLinkType: 'external'\n      }));\n    },\n    inputProps: {\n      'aria-label': 'secondary checkbox'\n    },\n    color: 'primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1319,\n      columnNumber: 49\n    }\n  }))))), isCta && __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1337,\n      columnNumber: 37\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1338,\n      columnNumber: 41\n    }\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1339,\n      columnNumber: 45\n    }\n  }, __jsx(RadioGroup, {\n    \"aria-label\": \"link-type\",\n    row: true,\n    value: ctaLinkType,\n    onChange: e => {\n      var _pageData$;\n\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaLinkType: value\n      }));\n      value === 'internal' ? setCtaLink((_pageData$ = pageData[0]) === null || _pageData$ === void 0 ? void 0 : _pageData$.code) : '';\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1340,\n      columnNumber: 49\n    }\n  }, __jsx(FormControlLabel, {\n    value: \"external\",\n    control: __jsx(Radio, {\n      color: 'primary',\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 66\n      }\n    }),\n    label: \"External Link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1353,\n      columnNumber: 53\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"internal\",\n    control: __jsx(Radio, {\n      color: 'primary',\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 66\n      }\n    }),\n    label: \"Internal Link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1358,\n      columnNumber: 53\n    }\n  })))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1366,\n      columnNumber: 41\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1367,\n      columnNumber: 45\n    }\n  }, __jsx(TextField, {\n    size: 'small',\n    id: \"button-title\",\n    variant: 'outlined',\n    label: 'Title',\n    value: ctaTitle,\n    fullWidth: true,\n    onChange: e => setCtaTitle(e.target.value),\n    style: {\n      marginTop: 8\n    },\n    helperText: ctaTitle && __jsx(Typography, {\n      variant: \"caption\",\n      className: classes.alignText,\n      display: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1379,\n        columnNumber: 61\n      }\n    }, `${ctaTitle === null || ctaTitle === void 0 ? void 0 : ctaTitle.length} < 100`),\n    inputProps: {\n      maxLength: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1368,\n      columnNumber: 49\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1391,\n      columnNumber: 45\n    }\n  }, ctaLinkType === 'external' && __jsx(TextField, {\n    size: 'small',\n    id: \"button-link\",\n    variant: 'outlined',\n    label: 'Link',\n    value: ctaLink,\n    error: ctaLink ? !validator.isURL(ctaLink) : false,\n    onChange: e => setCtaLink(e.target.value),\n    style: {\n      marginTop: 8\n    },\n    fullWidth: true,\n    helperText: ctaLink && __jsx(Typography, {\n      variant: \"caption\",\n      className: classes.alignText,\n      display: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1405,\n        columnNumber: 65\n      }\n    }, `${ctaLink === null || ctaLink === void 0 ? void 0 : ctaLink.length} < 100`),\n    inputProps: {\n      maxLength: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1393,\n      columnNumber: 53\n    }\n  }), ctaLinkType === 'internal' && __jsx(FormControl, {\n    variant: \"outlined\",\n    size: 'small',\n    style: {\n      marginTop: 8\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1418,\n      columnNumber: 53\n    }\n  }, __jsx(Select, {\n    value: ctaLink,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setCtaLink(value);\n    },\n    label: \"Web Pages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1424,\n      columnNumber: 57\n    }\n  }, pageData.map((option, index) => {\n    return __jsx(MenuItem, {\n      value: option.code,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1434,\n        columnNumber: 69\n      }\n    }, ' ', option.code, ' ');\n  })))))), __jsx(Divider, {\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1447,\n      columnNumber: 33\n    }\n  }), __jsx(Button, {\n    onClick: handleUpdate,\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1448,\n      columnNumber: 33\n    }\n  }, \"SUBMIT\")))), __jsx(DropzoneDialog, {\n    open: isDialogOpen,\n    onSave: saveImage,\n    acceptedFiles: ['image/jpeg', 'image/png', 'image/bmp'],\n    showPreviews: true,\n    maxFileSize: 5000000,\n    filesLimit: 5,\n    onClose: closeDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1461,\n      columnNumber: 21\n    }\n  }), isTextEditorDialogOpen && __jsx(TextEditor, {\n    handleSaveTextEditor: handleTextEditorValue,\n    handleCancelTextEditor: handleCancelEditor,\n    data: editorValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1471,\n      columnNumber: 25\n    }\n  })));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.pageBuilder\n  };\n};\n\nexport default connect(mapStateToProps)(AddSlider);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider/AddSlider.js"],"names":["React","useContext","useEffect","useState","useRouter","connect","toast","validator","axios","Card","IconButton","CancelIcon","LoadingSpinner","AddCircleIcon","RemoveCircleIcon","CloudUploadIcon","FormControlLabel","MenuItem","Radio","RadioGroup","Button","Paper","Grid","Switch","Divider","Checkbox","TextField","Typography","makeStyles","Container","InputLabel","Select","FormControl","InputColor","DropzoneDialog","PercentageSlider","getSliderImages","patchListSliderImage","TextEditor","COLORS","DELETE_SUCCESS","PERCENTAGE_VALUES","SAVED_SUCCESS","UPLOAD_SUCCESS","FIELDTYPE","isErrorMsg","OREST_ENDPOINT","OREST_UPLOAD","REQUEST_METHOD_CONST","Delete","Insert","Patch","UseOrest","ViewList","WebCmsGlobal","BorderColorSharpIcon","toSelfName","DatePicker","LocalizationProvider","MomentAdapter","moment","useStyles","theme","root","margin","spacing","submit","marginRight","marginTop","borderRadius","float","disableUpload","pointerEvents","opacity","paperBlock","height","border","secondary","overflow","disableEvent","uploadButton","marginBottom","marginLeft","card","width","cursor","alignText","textAlign","color","text","fontWeight","fontSize","labelFont","AddSlider","props","state","handleSectionComponent","handleNextDisable","handleApplyDisable","handleSliderValues","router","companyId","query","companyID","GENERAL_SETTINGS","token","authToken","title","setTitle","description","setDescription","sliderGID","setSliderGID","sliderID","setSliderID","isCta","setIsCta","ctaTitle","setCtaTitle","ctaLink","setCtaLink","cta","setCta","isSaving","setIsSaving","isItemDesc","setItemDesc","isDialogOpen","setDialogOpen","isRequested","setIsRequested","itemCount","setItemCount","sliderImages","setSliderImages","imageGID","setImageGID","showDeleteBtn","setShowDeleteBtn","selectedIndex","setSelectedIndex","isImageSelected","setImageSelected","selectImageRequest","setSelectImageReq","hoverIndex","setHoverIndex","gappID","setGappID","isOptimizeImages","setOptimizeImages","quality","setQuality","assets","meta","imageQuality","catId","setCatId","categories","setCategories","isActive","setIsActive","textColor","setTextColor","colors","slider","main","buttonColor","setButtonColor","button","localState","setLocalState","isTextEditorDialogOpen","editorValue","dialogType","ctaLinkType","pageData","expiryDate","format","DATEFORMAT_LOCALE","classes","sliderOnly","length","service","type","gid","apiUrl","OREST_URL","endpoint","HCMITEM","GAPP","method","then","res","status","data","id","HCMCAT","params","hotelrefno","Number","res1","HCMITEMSLD","itemid","masterid","catid","res2","retErr","error","errorMsg","position","POSITION","TOP_RIGHT","hcmItemId","RAFILE","prev","openDialog","closeDialog","handleUpdate","HCMITEMIMG","success","console","log","warn","saveImage","files","orderNo","requests","map","file","Promise","resolve","asyncUpload","all","sldImages","updatedImages","push","itemTreated","callback","setTimeout","sliderid","imgtype","IMG","orderno","imgquality","imgscale","r1","ImageUpload","mid","r","endPoint","masterID","url","binaryData","formData","FormData","append","Blob","name","options","headers","Authorization","orsactive","scale","response","catch","handleDeleteImage","imageGid","sort","a","b","index","requestPassed","sldImage","updatedSliderImage","handleSelectedImage","image","matchs","match","cta_title","replace","trim","split","handleUpdateOrderNo","orderType","tmpSliderImages","tmp","handleResetState","handleItemDescription","handleImageQualityChange","value","gids","LIST","PATCH","handleTextEditorValue","handleCancelEditor","handleDialogOpen","handleChangeDatePicker","date","dateValue","expiredt","isactive","e","target","display","cat","hex","backgroundImage","STATIC_URL","fileurl","backgroundSize","code","maxLength","isURL","option","mapStateToProps","formReducer","pageBuilder"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { connect } from 'react-redux'\nimport 'regenerator-runtime/runtime'\nimport { toast } from 'react-toastify'\nimport validator from 'validator'\nimport axios from 'axios'\n//material ui imports\nimport Card from '@material-ui/core/Card'\nimport IconButton from '@material-ui/core/IconButton'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport LoadingSpinner from '../../../../../../LoadingSpinner'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport { FormControlLabel, MenuItem, Radio, RadioGroup } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Switch from '@material-ui/core/Switch'\nimport Divider from '@material-ui/core/Divider'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Container from '@material-ui/core/Container'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputColor from 'react-input-color'\nimport { DropzoneDialog } from 'material-ui-dropzone'\n//custom imports\nimport { PercentageSlider } from '../../../../../../../model/slider'\nimport { getSliderImages, patchListSliderImage } from '../../../../helpers/slider'\nimport TextEditor from '../text-editor'\nimport { COLORS, DELETE_SUCCESS, PERCENTAGE_VALUES, SAVED_SUCCESS, UPLOAD_SUCCESS } from '../../../../constants'\nimport {\n    FIELDTYPE,\n    isErrorMsg,\n    OREST_ENDPOINT,\n    OREST_UPLOAD,\n    REQUEST_METHOD_CONST,\n} from '../../../../../../../model/orest/constants'\nimport { Delete, Insert, Patch, UseOrest, ViewList } from '@webcms/orest'\nimport WebCmsGlobal from 'components/webcms-global'\nimport BorderColorSharpIcon from '@material-ui/icons/BorderColorSharp';\nimport { toSelfName } from './../../../../../../../lib/helpers/useFunction';\nimport { DatePicker, LocalizationProvider } from '@material-ui/pickers'\nimport MomentAdapter from '@date-io/moment'\nimport moment from 'moment'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    submit: {\n        marginRight: theme.spacing(3),\n        marginTop: theme.spacing(1),\n        borderRadius: 20,\n        float: 'right',\n    },\n    disableUpload: {\n        pointerEvents: 'none',\n        opacity: 0.5,\n    },\n    paperBlock: {\n        height: 350,\n        border: `2px solid ${COLORS?.secondary}`,\n        overflow: 'auto',\n    },\n    disableEvent: {\n        pointerEvents: 'none',\n        opacity: 0.5,\n    },\n    uploadButton: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n        float: 'right',\n    },\n    card: {\n        height: 200,\n        width: 300,\n        margin: theme.spacing(1),\n        cursor: 'pointer',\n    },\n    alignText: {\n        textAlign: 'right',\n        color: 'red',\n    },\n    text: {\n        marginTop: 16,\n        fontWeight: 'bold',\n        fontSize: 15,\n    },\n    labelFont: {\n        fontSize: 14,\n    },\n}))\n\nconst AddSlider = (props) => {\n    const { state, handleSectionComponent, handleNextDisable, handleApplyDisable, handleSliderValues } = props\n\n    const router = useRouter()\n    const companyId = router.query.companyID\n    const { GENERAL_SETTINGS, token } = useContext(WebCmsGlobal)\n    const authToken = token || router.query.authToken\n    //local state\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [sliderGID, setSliderGID] = useState('')\n    const [sliderID, setSliderID] = useState('')\n    const [isCta, setIsCta] = useState(false)\n    const [ctaTitle, setCtaTitle] = useState('')\n    const [ctaLink, setCtaLink] = useState('')\n    const [cta, setCta] = useState('')\n    const [isSaving, setIsSaving] = useState(false)\n    const [isItemDesc, setItemDesc] = useState(false)\n    const [isDialogOpen, setDialogOpen] = useState(false)\n    const [isRequested, setIsRequested] = useState(false)\n    const [itemCount, setItemCount] = useState(1)\n    const [sliderImages, setSliderImages] = useState([])\n    const [imageGID, setImageGID] = useState('')\n    const [showDeleteBtn, setShowDeleteBtn] = useState(false)\n    const [selectedIndex, setSelectedIndex] = useState(null)\n    const [isImageSelected, setImageSelected] = useState(false)\n    const [selectImageRequest, setSelectImageReq] = useState(false)\n    const [hoverIndex, setHoverIndex] = useState()\n    const [gappID, setGappID] = useState('')\n    const [isOptimizeImages, setOptimizeImages] = useState(false)\n    const [quality, setQuality] = useState(\n        state?.assets?.meta?.imageQuality ? state.assets.meta.imageQuality * 100 : 50\n    )\n    const [catId, setCatId] = useState(null)\n    const [categories, setCategories] = useState([])\n    const [isActive, setIsActive] = useState(false)\n    const [textColor, setTextColor] = useState(\n        state?.assets?.colors?.slider?.main ? state.assets.colors.slider.main : '#fff'\n    )\n    const [buttonColor, setButtonColor] = useState(\n        state?.assets?.colors?.button?.main ? state.assets.colors.button.main : '#fff'\n    )\n    const [localState, setLocalState] = useState({\n        isTextEditorDialogOpen: false,\n        editorValue: '',\n        dialogType: '',\n        ctaLinkType: 'external',\n        pageData: [],\n        expiryDate: moment().format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n    })\n\n    const { dialogType, editorValue, isTextEditorDialogOpen, ctaLinkType, pageData, expiryDate } = localState\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        if (router.query.sliderOnly) {\n            handleSliderValues(title, description, cta, sliderGID, textColor, buttonColor)\n        }\n    }, [title, description, cta, sliderGID, textColor, buttonColor])\n\n    useEffect(() => {\n        if (router.query.sliderOnly) {\n            sliderImages.length > 0 ? handleApplyDisable(false) : handleApplyDisable(true)\n        } else {\n            if (sliderImages.length === 0) {\n                setItemDesc(false)\n                handleNextDisable(true)\n            } else {\n                handleNextDisable(false)\n            }\n        }\n    }, [sliderImages])\n\n    useEffect(() => {\n        handleSectionComponent &&\n            handleSectionComponent({\n                service: 'hcmitemsld',\n                type: 'slider',\n                gid: sliderGID,\n                textColor: textColor,\n                buttonColor: buttonColor,\n            })\n    }, [textColor, buttonColor])\n\n    useEffect(() => {\n        setIsSaving(true)\n        if (router.query.sliderOnly) {\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEM + '/' + OREST_ENDPOINT.GAPP,\n                token: authToken,\n                method: 'get',\n            }).then((res) => {\n                if (res.status === 200 && res?.data?.data?.id) {\n                    setGappID(res.data.data.id)\n                    ViewList({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.HCMCAT,\n                        token: authToken,\n                        params: {\n                            hotelrefno: Number(companyId),\n                        },\n                    }).then((res1) => {\n                        if (res1.status === 200) {\n                            if (res1?.data?.data?.length > 0) {\n                                setCategories(res1.data.data)\n                                setCatId(res1.data.data[0].id)\n                            }\n                            Insert({\n                                // insert slider\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                                token: authToken,\n                                data: {\n                                    itemid: res?.data?.data?.id,\n                                    hotelrefno: Number(companyId),\n                                    masterid: router?.query?.masterid,\n                                    catid: res1?.data?.data?.length > 0 ? res1?.data?.data[0]?.id : null,\n                                },\n                            }).then((res2) => {\n                                if (res2.status === 200 && res2.data.data) {\n                                    setSliderGID(res2.data.data.gid)\n                                    setSliderID(res2.data.data.id)\n                                    setIsSaving(false)\n                                } else {\n                                    const retErr = isErrorMsg(res2)\n                                    setIsSaving(false)\n                                    toast.error(retErr.errorMsg, {\n                                        position: toast.POSITION.TOP_RIGHT,\n                                    })\n                                }\n                            })\n                        } else {\n                            const retErr = isErrorMsg(res1)\n                            setIsSaving(false)\n                            toast.error(retErr.errorMsg, {\n                                position: toast.POSITION.TOP_RIGHT,\n                            })\n                        }\n                    })\n                } else {\n                    const retErr = isErrorMsg(res)\n                    toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            })\n        } else {\n            Insert({\n                // insert slider\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                data: {\n                    itemid: state.hcmItemId,\n                    hotelrefno: Number(companyId),\n                },\n            }).then((res) => {\n                if (res.status === 200 && res.data.data) {\n                    setSliderGID(res.data.data.gid)\n                    setSliderID(res.data.data.id)\n                    setIsSaving(false)\n                    handleSectionComponent({\n                        service: 'hcmitemsld',\n                        type: 'slider',\n                        gid: res.data.data.gid,\n                        textColor: textColor,\n                        buttonColor: buttonColor,\n                    })\n                } else {\n                    const retErr = isErrorMsg(res)\n                    toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            })\n\n            //getting data from rafile\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.RAFILE,\n                token: authToken,\n                params: {\n                    hotelrefno: Number(companyId),\n                    query: `filetype::WEBPAGE,istemplate::false}`,\n                },\n            }).then((res) => {\n                if (res.status === 200 && res?.data?.data) {\n                    setLocalState((prev) => ({ ...prev, pageData: res.data.data }))\n                } else {\n                    const retErr = isErrorMsg(res)\n                    toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            })\n        }\n    }, [])\n\n    useEffect(() => {\n        if (ctaTitle && ctaLink) {\n            setCta(`<a target=\"_blank\" href=\"${ctaLink}\" > ${ctaTitle} </a>`)\n        }\n    }, [ctaTitle, ctaLink])\n\n    const openDialog = () => {\n        //it opens dialog for image upload\n        setDialogOpen(true)\n    }\n\n    const closeDialog = () => {\n        ////it closes dialog for image upload\n        setDialogOpen(false)\n    }\n\n    const handleUpdate = () => {\n        // update slider/image descriptions\n        if (isItemDesc) {\n            if (isImageSelected) {\n                setIsRequested(true)\n                Patch({\n                    // update image\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                    token: authToken,\n                    gid: imageGID,\n                    params: {\n                        hotelrefno: Number(companyId),\n                    },\n                    data: {\n                        title: title,\n                        description: description,\n                        cta: cta,\n                    },\n                }).then((res) => {\n                    if (res.status === 200) {\n                        setIsRequested(false)\n                        toast.success(SAVED_SUCCESS, {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    } else {\n                        console.log(res)\n                    }\n                })\n            } else {\n                toast.warn('Please Select Image', {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n            }\n        } else {\n            setIsRequested(true)\n            Patch({\n                // update slider\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                gid: sliderGID,\n                params: {\n                    hotelrefno: Number(companyId),\n                },\n                data: {\n                    title: title,\n                    description: description,\n                    cta: cta,\n                },\n            }).then((res) => {\n                setIsRequested(false)\n                if (res.status === 200) {\n                    toast.success(SAVED_SUCCESS, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                } else {\n                    console.log(res)\n                }\n            })\n        }\n    }\n\n    const saveImage = (files) => {\n        // save slider images\n        setIsSaving(true)\n        let orderNo = itemCount\n        let requests = files.map((file) => {\n            return new Promise((resolve) => {\n                asyncUpload(file, orderNo, resolve)\n                orderNo++\n            })\n        })\n\n        Promise.all(requests).then(async () => {\n            const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID)\n            setIsSaving(false)\n            if (sldImages) {\n                let updatedImages = []\n                sldImages.map((data) => {\n                    updatedImages.push(data)\n                })\n                setSliderImages(updatedImages)\n                setItemCount(updatedImages.length + 1)\n                toast.success(UPLOAD_SUCCESS, {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n                closeDialog()\n            } else {\n                toast.warn('Images not found', {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n            }\n        })\n    }\n\n    function asyncUpload(file, itemTreated, callback) {\n        if (router.query.sliderOnly) {\n            if (gappID && sliderID) {\n                setTimeout(() => {\n                    Insert({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                        token: authToken,\n                        data: {\n                            itemid: gappID,\n                            sliderid: sliderID,\n                            imgtype: FIELDTYPE.IMG,\n                            orderno: itemTreated,\n                            hotelrefno: Number(companyId),\n                            masterid: router.query.masterid,\n                            imgquality: quality / 100,\n                            imgscale: quality / 100,\n                        },\n                    }).then((r1) => {\n                        if (r1.status === 200) {\n                            ImageUpload(\n                                GENERAL_SETTINGS.OREST_URL,\n                                OREST_ENDPOINT.RAFILE,\n                                authToken,\n                                r1.data.data.mid,\n                                file\n                            ).then((r) => {\n                                if (r.status === 200) {\n                                    callback()\n                                } else {\n                                    callback()\n                                }\n                            })\n                        } else {\n                            callback()\n                        }\n                    })\n                }, 100)\n            }\n        } else {\n            if (state.hcmItemId && sliderID) {\n                setTimeout(() => {\n                    Insert({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                        token: authToken,\n                        data: {\n                            itemid: state.hcmItemId,\n                            sliderid: sliderID,\n                            imgtype: FIELDTYPE.IMG,\n                            orderno: itemTreated,\n                            hotelrefno: Number(companyId),\n                            imgquality: quality / 100,\n                            imgscale: quality / 100,\n                        },\n                    }).then((r1) => {\n                        if (r1.status === 200) {\n                            ImageUpload(\n                                GENERAL_SETTINGS.OREST_URL,\n                                OREST_ENDPOINT.RAFILE,\n                                authToken,\n                                r1.data.data.mid,\n                                file\n                            ).then((r) => {\n                                if (r.status === 200) {\n                                    callback()\n                                } else {\n                                    callback()\n                                }\n                            })\n                        } else {\n                            callback()\n                        }\n                    })\n                }, 100)\n            }\n        }\n    }\n\n    const ImageUpload = (apiUrl, endPoint, token, masterID, file) => {\n        const url = apiUrl + '/' + endPoint + OREST_UPLOAD\n        let binaryData = []\n        binaryData.push(file)\n        let formData = new FormData()\n        formData.append('file', new Blob(binaryData, { type: file.type }), toSelfName(file.name));\n\n        const options = {\n            url: url,\n            method: 'post',\n            headers: {\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'multipart/form-data',\n            },\n            params: {\n                orsactive: true,\n                masterid: masterID,\n                hotelrefno: companyId,\n                quality: quality / 100,\n                scale: quality / 100,\n            },\n            data: formData,\n        }\n\n        return axios(options)\n            .then((response) => {\n                return response\n            })\n            .catch((error) => {\n                return error.response || { status: 0 }\n            })\n    }\n\n    const handleDeleteImage = (imageGid) => {\n        // delete image against gid\n        setIsRequested(true)\n        Delete({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            gid: imageGid,\n            params: {\n                hotelrefno: Number(companyId),\n            },\n        }).then(async (res) => {\n            if (res.status === 200) {\n                const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID)\n                sldImages.sort((a, b) => (a.orderno > b.orderno ? 1 : -1))\n                setIsRequested(false)\n                if (sldImages) {\n                    let updatedImages = []\n                    sldImages.map((data, index) => {\n                        data.orderno = index + 1\n                        updatedImages.push(data)\n                    })\n                    let requestPassed = true\n                    for (const sldImage of sldImages) {\n                        const updatedSliderImage = patchListSliderImage(\n                            GENERAL_SETTINGS.OREST_URL,\n                            authToken,\n                            companyId,\n                            { orderno: sldImage.orderno },\n                            { hotelrefno: Number(companyId) },\n                            sldImage.gid\n                        )\n                        updatedSliderImage ? (requestPassed = true) : (requestPassed = false)\n                    }\n                    setIsRequested(false)\n                    if (requestPassed) {\n                        setSliderImages(updatedImages)\n                        setSelectedIndex(null)\n                        setItemCount(updatedImages.length + 1)\n                        toast.success(DELETE_SUCCESS, {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    } else {\n                        toast.error('Something went wrong while deleting image. Please check network tab.', {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    }\n                } else {\n                    toast.error('Something went wrong while deleting image. Please check network tab.', {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            } else {\n                toast.error('Something went wrong while deleting image. Please check network tab.', {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n                setIsRequested(false)\n            }\n        })\n    }\n\n    const handleSelectedImage = (index, image) => {\n        if (isItemDesc) {\n            setSelectedIndex(index)\n            setImageSelected(true)\n            setImageGID(image.gid)\n            setSelectImageReq(true)\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                token: authToken,\n                params: {\n                    query: `gid:${image.gid}`,\n                    sort: 'orderno',\n                    hotelrefno: Number(companyId),\n                },\n            }).then((res) => {\n                setSelectImageReq(false)\n                if (res.status === 200) {\n                    if (res?.data?.data?.length > 0) {\n                        res.data.data[0].title ? setTitle(res.data.data[0].title) : setTitle('')\n                        res.data.data[0].description ? setDescription(res.data.data[0].description) : setDescription('')\n                        res.data.data[0].cta ? setCta(res.data.data[0].cta) : setCta('')\n                        if (res.data.data[0].cta) {\n                            setIsCta(true)\n                            setCta(res.data.data[0].cta)\n                            const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                            if (matchs?.length > 0) {\n                                const cta_title = res.data.data[0].cta\n                                    .replace(`<a target=\"_blank\" href=\"`, '')\n                                    .replace(matchs[0], '')\n                                    .replace('>', '')\n                                    .replace('</a>', '')\n                                    .trim()\n                                setCtaLink(matchs[0])\n                                setCtaTitle(cta_title)\n                                setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                            } else {\n                                const gid = res.data.data[0].cta\n                                    .replace(`<a target=\"_blank\" href=\"`, '')\n                                    .replace('\" >', '')\n                                    .replace('</a>', '')\n                                    .split(' ')[0]\n                                const cta_title = res.data.data[0].cta\n                                    .replace(`<a target=\"_blank\" href=\"`, '')\n                                    .replace(gid, '')\n                                    .replace('\" >', '')\n                                    .replace('</a>', '')\n                                    .trim()\n                                setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                                setCtaLink(gid)\n                                setCtaTitle(cta_title)\n                            }\n                        } else {\n                            setIsCta(false)\n                            setCtaTitle('')\n                            setCtaLink('')\n                        }\n                    }\n                } else {\n                    const retErr = isErrorMsg(res)\n                    toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            })\n        }\n    }\n\n    const handleUpdateOrderNo = async (gid, orderNo, orderType) => {\n        // update order no of slider images\n\n        if (orderNo <= 0 || orderNo > sliderImages.length) {\n            setSelectedIndex(null)\n            setImageSelected(false)\n        } else {\n            const tmpSliderImages = [...sliderImages]\n            if (orderType === 'increment') {\n                const tmp = tmpSliderImages[orderNo - 1]\n                tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo - 2]\n                tmpSliderImages[orderNo - 2] = tmp\n            } else {\n                const tmp = tmpSliderImages[orderNo - 1]\n                tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo]\n                tmpSliderImages[orderNo] = tmp\n            }\n            tmpSliderImages.map((data, index) => {\n                data.orderno = index + 1\n            })\n            setIsRequested(true)\n            let requestPassed = true\n            for (const sldImage of tmpSliderImages) {\n                const updatedSliderImage = patchListSliderImage(\n                    GENERAL_SETTINGS.OREST_URL,\n                    authToken,\n                    companyId,\n                    { orderno: sldImage.orderno },\n                    { hotelrefno: Number(companyId) },\n                    sldImage.gid\n                )\n                updatedSliderImage ? (requestPassed = true) : (requestPassed = false)\n            }\n            setIsRequested(false)\n            if (requestPassed) {\n                setSliderImages(tmpSliderImages)\n                setItemCount(sliderImages.length + 1)\n                handleResetState()\n                toast.success('Order No Updated Successfully', {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n            } else {\n                toast.error('Something went wrong while updating order no. Please check network tab.', {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n            }\n        }\n    }\n\n    const handleResetState = () => {\n        setSelectedIndex(null)\n        setImageSelected(false)\n        setTitle('')\n        setDescription('')\n        setIsCta(false)\n        setCtaTitle('')\n        setCtaLink('')\n        setCta('')\n    }\n\n    const handleItemDescription = () => {\n        if (isItemDesc) {\n            setSelectImageReq(true)\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                params: {\n                    query: `gid:${sliderGID}`,\n                    sort: 'orderno',\n                    hotelrefno: Number(companyId),\n                },\n            }).then((res) => {\n                setSelectImageReq(false)\n                if (res?.status === 200 && res?.data?.data?.length > 0) {\n                    setTitle(res.data.data[0]?.title)\n                    setDescription(res.data.data[0]?.description)\n                    if (res.data.data[0].cta) {\n                        setIsCta(true)\n                        setCta(res.data.data[0].cta)\n                        const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                        if (matchs?.length > 0) {\n                            const cta_title = res.data.data[0].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace(matchs[0], '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .trim()\n                            setCtaLink(matchs[0])\n                            setCtaTitle(cta_title)\n                            setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                        } else {\n                            const gid = res.data.data[0].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace('\" >', '')\n                                .replace('</a>', '')\n                                .split(' ')[0]\n                            const cta_title = res.data.data[0].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace(gid, '')\n                                .replace('\" >', '')\n                                .replace('</a>', '')\n                                .trim()\n                            setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                            setCtaLink(gid)\n                            setCtaTitle(cta_title)\n                        }\n                    } else {\n                        setIsCta(false)\n                        setCtaTitle('')\n                        setCtaLink('')\n                        setCta('')\n                    }\n                }\n            })\n            handleResetState()\n        } else {\n            setSelectedIndex(0)\n            setImageSelected(true)\n            setImageGID(sliderImages[0]?.gid)\n            setSelectImageReq(true)\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                token: authToken,\n                params: {\n                    query: `gid:${sliderImages[0]?.gid}`,\n                    sort: 'orderno',\n                    hotelrefno: Number(companyId),\n                },\n            }).then((res) => {\n                setSelectImageReq(false)\n                if (res.status === 200) {\n                    if (res.data && res.data.data && res.data.data.length > 0) {\n                        res.data.data[0].title ? setTitle(res.data.data[0].title) : setTitle('')\n                        res.data.data[0].description ? setDescription(res.data.data[0].description) : setDescription('')\n                        res.data.data[0].cta ? setCta(res.data.data[0].cta) : setCta('')\n                        if (res.data.data[0].cta) {\n                            setIsCta(true)\n                            setCta(res.data.data[0].cta)\n                            const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                            if (matchs?.length > 0) {\n                                const cta_title = res.data.data[0].cta\n                                    .replace(`<a target=\"_blank\" href=\"`, '')\n                                    .replace(matchs[0], '')\n                                    .replace('>', '')\n                                    .replace('</a>', '')\n                                    .trim()\n                                setCtaLink(matchs[0])\n                                setCtaTitle(cta_title);\n                                setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }));\n                            } else {\n                                const gid = res.data.data[0].cta\n                                    .replace(`<a target=\"_blank\" href=\"`, '')\n                                    .replace('\" >', '')\n                                    .replace('</a>', '')\n                                    .split(' ')[0]\n                                const cta_title = res.data.data[0].cta\n                                    .replace(`<a target=\"_blank\" href=\"`, '')\n                                    .replace(gid, '')\n                                    .replace('\" >', '')\n                                    .replace('</a>', '')\n                                    .trim()\n                                setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                                setCtaLink(gid)\n                                setCtaTitle(cta_title)\n                            }\n                        } else {\n                            setIsCta(false)\n                            setCtaTitle('')\n                            setCtaLink('')\n                        }\n                    }\n                } else {\n                    const retErr = isErrorMsg(res)\n                    toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            })\n        }\n        setItemDesc(!isItemDesc)\n    }\n\n    const handleImageQualityChange = (value) => {\n        if (value >= 10 && value <= 100 && value % 10 === 0) {\n            if (sliderImages.length) {\n                setIsSaving(true)\n                const gids = sliderImages.map((image) => {\n                    return { gid: image.gid, imgquality: value / 100, imgscale: value / 100 }\n                })\n                UseOrest({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n                    token: authToken,\n                    method: REQUEST_METHOD_CONST.PATCH,\n                    data: gids,\n                    params: {\n                        hotelrefno: Number(companyId),\n                    },\n                }).then((res) => {\n                    if (res?.status === 200 && res?.data?.data) {\n                        setQuality(value)\n                        setIsSaving(false)\n                    } else {\n                        const retErr = isErrorMsg(res)\n                        toast.error(retErr.errorMsg, {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    }\n                })\n            } else {\n                setQuality(value)\n            }\n        }\n    }\n\n    const handleTextEditorValue = (value) => {\n        if (dialogType === 'title') {\n            setTitle(value)\n        }\n        if (dialogType === 'description') {\n            setDescription(value)\n        }\n        setLocalState((prev) => ({ ...prev, isTextEditorDialogOpen: false, dialogType: '', editorValue: '' }))\n    }\n\n    const handleCancelEditor = () => {\n        setLocalState((prev) => ({ ...prev, isTextEditorDialogOpen: false, dialogType: '', editorValue: '' }))\n    }\n\n    const handleDialogOpen = (type) => {\n        if (type === 'title') {\n            setLocalState((prev) => ({ ...prev, isTextEditorDialogOpen: true, dialogType: type, editorValue: title }))\n        }\n        if (type === 'description') {\n            setLocalState((prev) => ({\n                ...prev,\n                isTextEditorDialogOpen: true,\n                dialogType: type,\n                editorValue: description,\n            }))\n        }\n    }\n\n    const handleChangeDatePicker = (date) => {\n        const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n        setLocalState({...localState, expiryDate: dateValue});\n        if (dateValue !== 'Invalid date') {\n            Patch({\n                // update slider\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                gid: sliderGID,\n                params: {\n                    hotelrefno: Number(companyId),\n                },\n                data: {\n                    expiredt: dateValue,\n                },\n            }).then((res) => {\n                setIsRequested(false)\n                if (res.status === 200) {\n                    toast.success(SAVED_SUCCESS, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                } else {\n                    console.log(res)\n                }\n            })\n        }\n\n    }\n\n    if (isSaving) {\n        return <LoadingSpinner style={{ color: COLORS.secondary }} />\n    }\n\n    return (\n        <React.Fragment>\n            {state.hcmItemId && (\n                <React.Fragment>\n                    {\n                        !router.query.sliderOnly && (\n                            <Grid container={true}>\n                                <Grid item xs={4}>\n                                    <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                        <DatePicker\n                                            id=\"sliderExpiryDate\"\n                                            name=\"sliderExpiryDate\"\n                                            label={'Select Expiry'}\n                                            value={expiryDate}\n                                            inputFormat=\"DD/MM/YYYY HH:MM:SS\"\n                                            disablePast\n                                            onChange={handleChangeDatePicker}\n                                            renderInput={(props) => <TextField fullWidth\n                                                                               {...props}\n                                                                               variant={'filled'}\n                                                                               required={true}\n                                            />}\n                                        />\n                                    </LocalizationProvider>\n                                </Grid>\n                            </Grid>\n                        )\n                    }\n                    <Grid container={true} justify={'flex-start'} className={isRequested ? classes.disableEvent : ''}>\n                        <Grid item xs={router?.query?.sliderOnly ? 8 : 5}>\n                            <FormControlLabel\n                                className={classes.labelFont}\n                                control={\n                                    <Checkbox\n                                        size={'small'}\n                                        checked={isItemDesc}\n                                        onChange={handleItemDescription}\n                                        name=\"isitem\"\n                                        color=\"primary\"\n                                        disabled={sliderImages.length === 0}\n                                    />\n                                }\n                                label=\"Items Description\"\n                            />\n                            <FormControlLabel\n                                className={classes.labelFont}\n                                control={\n                                    <Checkbox\n                                        size={'small'}\n                                        checked={isOptimizeImages}\n                                        onChange={() => setOptimizeImages(!isOptimizeImages)}\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Optimize Images\"\n                            />\n                            {router?.query?.sliderOnly && (\n                                <>\n                                    <FormControlLabel\n                                        className={classes.labelFont}\n                                        control={\n                                            <Checkbox\n                                                size={'small'}\n                                                checked={isActive}\n                                                onChange={() => {\n                                                    setIsActive(!isActive)\n                                                    Patch({\n                                                        // update slider\n                                                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                                        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                                                        token: authToken,\n                                                        gid: sliderGID,\n                                                        params: {\n                                                            hotelrefno: Number(companyId),\n                                                        },\n                                                        data: {\n                                                            isactive: !isActive,\n                                                        },\n                                                    }).then((res) => {\n                                                        if (res.status !== 200) {\n                                                            const retErr = isErrorMsg(res)\n                                                            toast.error(retErr.errorMsg, {\n                                                                position: toast.POSITION.TOP_RIGHT,\n                                                            })\n                                                        }\n                                                    })\n                                                }}\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"Active\"\n                                    />\n                                    <FormControl size={'small'}>\n                                        <InputLabel htmlFor=\"age-native-simple\">Category</InputLabel>\n                                        <Select\n                                            native\n                                            name=\"cat_id\"\n                                            variant={'outlined'}\n                                            value={catId}\n                                            onChange={(e) => {\n                                                setCatId(e.target.value)\n                                                Patch({\n                                                    // update slider\n                                                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                                    endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                                                    token: authToken,\n                                                    gid: sliderGID,\n                                                    params: {\n                                                        hotelrefno: Number(companyId),\n                                                    },\n                                                    data: {\n                                                        catid: e.target.value,\n                                                    },\n                                                }).then((res) => {\n                                                    if (res.status !== 200) {\n                                                        const retErr = isErrorMsg(res)\n                                                        toast.error(retErr.errorMsg, {\n                                                            position: toast.POSITION.TOP_RIGHT,\n                                                        })\n                                                    }\n                                                })\n                                            }}\n                                        >\n                                            <option style={{ display: 'none' }} value=\"\"></option>\n                                            {categories.length > 0 &&\n                                                categories.map((cat) => {\n                                                    return (\n                                                        <option key={cat.id} value={cat.id}>\n                                                            {cat.description}\n                                                        </option>\n                                                    )\n                                                })}\n                                        </Select>\n                                    </FormControl>\n                                </>\n                            )}\n                        </Grid>\n                        {!router?.query?.sliderOnly && (\n                            <Grid item xs={5}>\n                                <Grid container spacing={1}>\n                                    <Grid item xs={1} style={{ marginTop: 6, marginLeft: 16 }}>\n                                        <Typography component={'span'} style={{ marginLeft: -8 }}>\n                                            Text\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs={2} style={{ marginTop: 8 }}>\n                                        <InputColor\n                                            onChange={(color) => setTextColor(color.hex)}\n                                            placement=\"right\"\n                                            initialValue={textColor}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={2} style={{ marginTop: 6 }}>\n                                        <Typography component={'span'}>Button</Typography>\n                                    </Grid>\n                                    <Grid item xs={3} style={{ marginTop: 8 }}>\n                                        <InputColor\n                                            onChange={(color) => setButtonColor(color.hex)}\n                                            placement=\"right\"\n                                            initialValue={buttonColor}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        )}\n                        <Grid item xs={router?.query?.sliderOnly ? 4 : 2}>\n                            {router?.query?.sliderOnly ? (\n                                <Grid container spacing={1}>\n                                    <Grid item xs={1} style={{ marginTop: 6 }}>\n                                        <Typography component={'span'} style={{ marginLeft: -8 }}>\n                                            Text\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs={2} style={{ marginTop: 8 }}>\n                                        <InputColor\n                                            onChange={(color) => setTextColor(color.hex)}\n                                            placement=\"right\"\n                                            initialValue={textColor}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={2} style={{ marginTop: 6 }}>\n                                        <Typography component={'span'}>Button</Typography>\n                                    </Grid>\n                                    <Grid item xs={3} style={{ marginTop: 8 }}>\n                                        <InputColor\n                                            onChange={(color) => setButtonColor(color.hex)}\n                                            placement=\"right\"\n                                            initialValue={buttonColor}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={4}>\n                                        <Button\n                                            onClick={openDialog}\n                                            variant=\"contained\"\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            aria-label=\"upload\"\n                                            className={classes.uploadButton}\n                                        >\n                                            <CloudUploadIcon />\n                                            UPLOAD\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            ) : (\n                                <Button\n                                    onClick={openDialog}\n                                    variant=\"contained\"\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    aria-label=\"upload\"\n                                    className={classes.uploadButton}\n                                >\n                                    <CloudUploadIcon />\n                                    UPLOAD\n                                </Button>\n                            )}\n                        </Grid>\n                    </Grid>\n                    {isOptimizeImages && (\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <PercentageSlider\n                                    marks={PERCENTAGE_VALUES}\n                                    value={quality}\n                                    onChange={(e, value) => handleImageQualityChange(value)}\n                                />\n                            </Grid>\n                        </Grid>\n                    )}\n                    <Grid\n                        container\n                        justify={'flex-start'}\n                        spacing={3}\n                        className={isRequested ? classes.disableEvent : ''}\n                    >\n                        <Grid item xs={5}>\n                            <Paper className={classes.paperBlock}>\n                                {sliderImages.map((value, index) => {\n                                    return (\n                                        <Grid key={index} container justify={'center'}>\n                                            <Grid item={true}>\n                                                <Card\n                                                    className={classes.card}\n                                                    style={{\n                                                        border:\n                                                            index === selectedIndex\n                                                                ? '2px solid red'\n                                                                : `1px solid ${COLORS?.secondary}`,\n                                                    }}\n                                                >\n                                                    <div\n                                                        style={{\n                                                            backgroundImage: `url(${\n                                                                GENERAL_SETTINGS.STATIC_URL + value.fileurl\n                                                            })`,\n                                                            height: '100%',\n                                                            width: '100%',\n                                                            backgroundSize: 'cover',\n                                                            borderRadius: 5,\n                                                        }}\n                                                        onMouseEnter={() => {\n                                                            setShowDeleteBtn(true)\n                                                            setHoverIndex(index)\n                                                        }}\n                                                        onMouseLeave={() => {\n                                                            setShowDeleteBtn(false)\n                                                            setHoverIndex(index)\n                                                        }}\n                                                        onClick={() => handleSelectedImage(index, value)}\n                                                    >\n                                                        {showDeleteBtn && hoverIndex === index && (\n                                                            <IconButton\n                                                                disabled={isRequested}\n                                                                component=\"span\"\n                                                                color={'primary'}\n                                                                className={\n                                                                    index === sliderImages.length - 1\n                                                                        ? classes.disableEvent\n                                                                        : ''\n                                                                }\n                                                                onClick={() =>\n                                                                    handleUpdateOrderNo(\n                                                                        value.gid,\n                                                                        value.orderno + 1,\n                                                                        'increment'\n                                                                    )\n                                                                }\n                                                            >\n                                                                <AddCircleIcon />\n                                                            </IconButton>\n                                                        )}\n                                                        {showDeleteBtn && hoverIndex === index && (\n                                                            <Typography component=\"span\" color={'primary'}>\n                                                                {value.orderno}\n                                                            </Typography>\n                                                        )}\n                                                        {showDeleteBtn && hoverIndex === index && (\n                                                            <IconButton\n                                                                disabled={isRequested}\n                                                                component=\"span\"\n                                                                color={'primary'}\n                                                                className={index === 0 ? classes.disableEvent : ''}\n                                                                onClick={() =>\n                                                                    handleUpdateOrderNo(\n                                                                        value.gid,\n                                                                        value.orderno - 1,\n                                                                        'decrement'\n                                                                    )\n                                                                }\n                                                            >\n                                                                <RemoveCircleIcon />\n                                                            </IconButton>\n                                                        )}\n                                                        {showDeleteBtn && hoverIndex === index && (\n                                                            <IconButton\n                                                                onClick={() => handleDeleteImage(value.gid)}\n                                                                disabled={isRequested}\n                                                                aria-label=\"upload picture\"\n                                                                component=\"span\"\n                                                                style={{ float: 'right' }}\n                                                                color={'primary'}\n                                                            >\n                                                                <CancelIcon />\n                                                            </IconButton>\n                                                        )}\n                                                    </div>\n                                                </Card>\n                                            </Grid>\n                                        </Grid>\n                                    )\n                                })}\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={7} className={selectImageRequest ? classes.disableEvent : ''}>\n                            <Paper className={classes.paperBlock}>\n                                <Container>\n                                    <Grid container justify={'flex-start'}>\n                                        <Grid item xs={3}>\n                                            <Typography component={'h6'} variant={'h6'} className={classes.text}>\n                                                Title\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}>\n                                            <IconButton\n                                                aria-label=\"Edit Title\"\n                                                color=\"primary\"\n                                                onClick={() => handleDialogOpen('title')}\n                                                style={{ float: 'right' }}\n                                            >\n                                                <BorderColorSharpIcon color=\"primary\" />\n                                            </IconButton>\n                                        </Grid>\n                                    </Grid>\n                                </Container>\n                                <Container>\n                                    <Grid container justify={'flex-start'}>\n                                        <Grid item xs={3}>\n                                            <Typography component={'h6'} variant={'h6'} className={classes.text}>\n                                                Description\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}>\n                                            <IconButton\n                                                aria-label=\"Edit Title\"\n                                                color=\"primary\"\n                                                onClick={() => handleDialogOpen('description')}\n                                                style={{ float: 'right' }}\n                                            >\n                                                <BorderColorSharpIcon color=\"primary\" />\n                                            </IconButton>\n                                        </Grid>\n                                    </Grid>\n                                </Container>\n                                <Container>\n                                    <Grid container justify={'flex-start'}>\n                                        <Grid item xs={11}>\n                                            <Typography component={'h6'} variant={'h6'} className={classes.text}>\n                                                Do you want to add button for slider ?\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={1}>\n                                            <Typography component={'div'} style={{ marginTop: 20 }}>\n                                                <Switch\n                                                    size={'small'}\n                                                    checked={isCta}\n                                                    onChange={() => {\n                                                        setIsCta(!isCta)\n                                                        setCtaTitle('')\n                                                        setCtaLink('')\n                                                        setCta('');\n                                                        setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                                                    }}\n                                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                    color={'primary'}\n                                                />\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                </Container>\n                                {isCta && (\n                                    <Container>\n                                        <Grid container>\n                                            <FormControl component=\"fieldset\">\n                                                <RadioGroup\n                                                    aria-label=\"link-type\"\n                                                    row\n                                                    value={ctaLinkType}\n                                                    onChange={(e) => {\n                                                        const { value } = e?.target\n                                                        setLocalState((prev) => ({\n                                                            ...prev,\n                                                            ctaLinkType: value,\n                                                        }))\n                                                        value === 'internal' ? setCtaLink(pageData[0]?.code) : ''\n                                                    }}\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"external\"\n                                                        control={<Radio color={'primary'} size={'small'} />}\n                                                        label=\"External Link\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"internal\"\n                                                        control={<Radio color={'primary'} size={'small'} />}\n                                                        label=\"Internal Link\"\n                                                    />\n                                                </RadioGroup>\n                                            </FormControl>\n                                        </Grid>\n                                        <Grid container justify={'flex-start'} spacing={3}>\n                                            <Grid item xs={6}>\n                                                <TextField\n                                                    size={'small'}\n                                                    id=\"button-title\"\n                                                    variant={'outlined'}\n                                                    label={'Title'}\n                                                    value={ctaTitle}\n                                                    fullWidth\n                                                    onChange={(e) => setCtaTitle(e.target.value)}\n                                                    style={{ marginTop: 8 }}\n                                                    helperText={\n                                                        ctaTitle && (\n                                                            <Typography\n                                                                variant=\"caption\"\n                                                                className={classes.alignText}\n                                                                display=\"block\"\n                                                            >\n                                                                {`${ctaTitle?.length} < 100`}\n                                                            </Typography>\n                                                        )\n                                                    }\n                                                    inputProps={{ maxLength: 99 }}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                {ctaLinkType === 'external' && (\n                                                    <TextField\n                                                        size={'small'}\n                                                        id=\"button-link\"\n                                                        variant={'outlined'}\n                                                        label={'Link'}\n                                                        value={ctaLink}\n                                                        error={ctaLink ? !validator.isURL(ctaLink) : false}\n                                                        onChange={(e) => setCtaLink(e.target.value)}\n                                                        style={{ marginTop: 8 }}\n                                                        fullWidth\n                                                        helperText={\n                                                            ctaLink && (\n                                                                <Typography\n                                                                    variant=\"caption\"\n                                                                    className={classes.alignText}\n                                                                    display=\"block\"\n                                                                >\n                                                                    {`${ctaLink?.length} < 100`}\n                                                                </Typography>\n                                                            )\n                                                        }\n                                                        inputProps={{ maxLength: 99 }}\n                                                    />\n                                                )}\n                                                {ctaLinkType === 'internal' && (\n                                                    <FormControl\n                                                        variant=\"outlined\"\n                                                        size={'small'}\n                                                        style={{ marginTop: 8 }}\n                                                        fullWidth\n                                                    >\n                                                        <Select\n                                                            value={ctaLink}\n                                                            onChange={(e) => {\n                                                                const { value } = e?.target\n                                                                setCtaLink(value)\n                                                            }}\n                                                            label=\"Web Pages\"\n                                                        >\n                                                            {pageData.map((option, index) => {\n                                                                return (\n                                                                    <MenuItem value={option.code} key={index}>\n                                                                        {' '}\n                                                                        {option.code}{' '}\n                                                                    </MenuItem>\n                                                                )\n                                                            })}\n                                                        </Select>\n                                                    </FormControl>\n                                                )}\n                                            </Grid>\n                                        </Grid>\n                                    </Container>\n                                )}\n                                <Divider style={{ marginTop: 8 }} />\n                                <Button\n                                    onClick={handleUpdate}\n                                    variant=\"contained\"\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    aria-label=\"add\"\n                                    className={classes.submit}\n                                >\n                                    SUBMIT\n                                </Button>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    <DropzoneDialog\n                        open={isDialogOpen}\n                        onSave={saveImage}\n                        acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\n                        showPreviews={true}\n                        maxFileSize={5000000}\n                        filesLimit={5}\n                        onClose={closeDialog}\n                    />\n                    {isTextEditorDialogOpen && (\n                        <TextEditor\n                            handleSaveTextEditor={handleTextEditorValue}\n                            handleCancelTextEditor={handleCancelEditor}\n                            data={editorValue}\n                        />\n                    )}\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.pageBuilder,\n    }\n}\n\nexport default connect(mapStateToProps)(AddSlider)\n"]},"metadata":{},"sourceType":"module"}