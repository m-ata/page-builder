{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/RaTagSelect/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useSelector } from 'react-redux';\nimport { Chip, TextField } from '@material-ui/core';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport WebCmsGlobal from \"../webcms-global\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport { UseOrest, ViewList } from '@webcms/orest';\nimport PropTypes from 'prop-types';\nimport { isErrorMsg, OREST_ENDPOINT } from \"../../model/orest/constants\";\nimport { SLASH } from \"../../model/globals\";\nimport { useSnackbar } from \"notistack\";\n\nfunction RaTagSelect(props) {\n  const filter = createFilterOptions();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    value,\n    variant,\n    chipVariant,\n    label,\n    mid,\n    id,\n    name,\n    onLoad,\n    onChange,\n    disabled,\n    required,\n    error,\n    helperText,\n    tableName\n  } = props; //context\n\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    t\n  } = useTranslation(); //redux\n\n  const token = useSelector(state => {\n    var _state$orest, _state$orest$currentU;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : _state$orest$currentU.auth.access_token) || false;\n  });\n  const hotelRefNo = useSelector(state => {\n    var _state$hotelinfo, _state$formReducer, _state$formReducer$gu;\n\n    return (state === null || state === void 0 ? void 0 : (_state$hotelinfo = state.hotelinfo) === null || _state$hotelinfo === void 0 ? void 0 : _state$hotelinfo.currentHotelRefNo) || (state === null || state === void 0 ? void 0 : (_state$formReducer = state.formReducer) === null || _state$formReducer === void 0 ? void 0 : (_state$formReducer$gu = _state$formReducer.guest) === null || _state$formReducer$gu === void 0 ? void 0 : _state$formReducer$gu.changeHotelRefno) || GENERAL_SETTINGS.HOTELREFNO;\n  });\n  const {\n    0: isTagListLoading,\n    1: setIsTaskListLoading\n  } = useState(false);\n  const {\n    0: isTableTagLoading,\n    1: setIsTableTagLoading\n  } = useState(false);\n  const {\n    0: tableTagList,\n    1: setTableTagList\n  } = useState([]);\n  useEffect(() => {\n    if (tableName) {\n      handleGetTableTagList(tableName);\n    }\n  }, [tableName]);\n  useEffect(() => {\n    if (mid) {\n      handleGetTagList(mid);\n    }\n  }, [mid]);\n\n  const handleGetTableTagList = tableName => {\n    setIsTableTagLoading(true);\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.RATAG + SLASH + 'taglist',\n      token,\n      params: {\n        tablename: tableName.toUpperCase(),\n        hotelrefno: hotelRefNo,\n        limit: 25\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        setTableTagList(res.data.data);\n      } else {\n        const error = isErrorMsg(res);\n        enqueueSnackbar(t(error.errMsg), {\n          variant: 'error'\n        });\n      }\n\n      setIsTableTagLoading(false);\n    });\n  };\n\n  const handleGetTagList = mid => {\n    setIsTaskListLoading(true);\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.RATAG,\n      token,\n      params: {\n        query: `masterid:${mid}`,\n        hotelrefno: hotelRefNo,\n        limit: 1\n      }\n    }).then(res => {\n      setIsTaskListLoading(false);\n\n      if (res.status === 200 && res.data.count > 0) {\n        let tempArray = [];\n        const array = res.data.data[0].tagstr.split(',');\n        array.map(item => {\n          const data = {\n            tagstr: item\n          };\n          tempArray.push(data);\n        });\n        onLoad(res.data.data[0], tempArray);\n      }\n    });\n  };\n\n  const handleOnChange = (event, newValue) => {\n    onChange(event, newValue);\n  };\n\n  return __jsx(Autocomplete, {\n    id: id,\n    name: name,\n    disabled: isTagListLoading || isTableTagLoading || disabled,\n    value: value,\n    onChange: (event, newValue) => {\n      const tagRegex = /\"(.*)\"/;\n      let data;\n      newValue.map((item, i) => {\n        data = tagRegex.exec(item.tagstr);\n\n        if (data) {\n          newValue[i].tagstr = data[1];\n        }\n      });\n      handleOnChange(event, newValue);\n    },\n    options: tableTagList,\n    getOptionLabel: option => option.tagstr,\n    filterSelectedOptions: true,\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          tagstr: `${t('str_add')} \"${params.inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    renderTags: (value, getTagProps) => value.map((option, index) => __jsx(Chip, _extends({\n      variant: chipVariant,\n      label: option.tagstr\n    }, getTagProps({\n      index\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }))),\n    renderInput: params => __jsx(TextField, _extends({\n      required: required,\n      error: error,\n      variant: variant\n    }, params, {\n      label: label,\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }\n        }, isTagListLoading || isTableTagLoading ? __jsx(LoadingSpinner, {\n          size: 18,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 74\n          }\n        }) : null, params.InputProps.endAdornment)\n      }),\n      helperText: helperText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    })),\n    multiple: true,\n    freeSolo: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default RaTagSelect;\nRaTagSelect.defaultProps = {\n  variant: 'outlined',\n  chipVariant: 'outlined',\n  value: [],\n  label: '',\n  id: 'raTag',\n  name: 'raTag'\n};\nRaTagSelect.propTypes = {\n  variant: PropTypes.string\n};","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/RaTagSelect/index.js"],"names":["React","useContext","useEffect","useState","useSelector","Chip","TextField","Autocomplete","createFilterOptions","LoadingSpinner","WebCmsGlobal","useTranslation","UseOrest","ViewList","PropTypes","isErrorMsg","OREST_ENDPOINT","SLASH","useSnackbar","RaTagSelect","props","filter","enqueueSnackbar","value","variant","chipVariant","label","mid","id","name","onLoad","onChange","disabled","required","error","helperText","tableName","GENERAL_SETTINGS","t","token","state","orest","currentUser","auth","access_token","hotelRefNo","hotelinfo","currentHotelRefNo","formReducer","guest","changeHotelRefno","HOTELREFNO","isTagListLoading","setIsTaskListLoading","isTableTagLoading","setIsTableTagLoading","tableTagList","setTableTagList","handleGetTableTagList","handleGetTagList","apiUrl","OREST_URL","endpoint","RATAG","params","tablename","toUpperCase","hotelrefno","limit","then","res","status","data","errMsg","query","count","tempArray","array","tagstr","split","map","item","push","handleOnChange","event","newValue","tagRegex","i","exec","option","options","filtered","inputValue","getTagProps","index","InputProps","endAdornment","defaultProps","propTypes","string"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from \"react\";\nimport {useSelector} from 'react-redux'\nimport {Chip, TextField} from '@material-ui/core'\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport WebCmsGlobal from \"../webcms-global\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport {UseOrest, ViewList} from '@webcms/orest'\nimport PropTypes from 'prop-types'\nimport {isErrorMsg, OREST_ENDPOINT} from \"../../model/orest/constants\";\nimport {SLASH} from \"../../model/globals\";\nimport {useSnackbar} from \"notistack\";\n\n\nfunction RaTagSelect(props) {\n    const filter = createFilterOptions();\n    const { enqueueSnackbar } = useSnackbar()\n\n    const { value, variant, chipVariant, label, mid, id, name, onLoad, onChange, disabled, required, error, helperText, tableName } = props\n\n    //context\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal);\n    const { t } = useTranslation();\n\n    //redux\n    const token = useSelector((state) => state?.orest?.currentUser?.auth.access_token || false);\n    const hotelRefNo = useSelector((state) => state?.hotelinfo?.currentHotelRefNo || state?.formReducer?.guest?.changeHotelRefno || GENERAL_SETTINGS.HOTELREFNO)\n\n\n    const [isTagListLoading, setIsTaskListLoading] = useState(false);\n    const [isTableTagLoading, setIsTableTagLoading] = useState(false);\n    const [tableTagList, setTableTagList] = useState([]);\n\n    useEffect(() => {\n        if(tableName) {\n            handleGetTableTagList(tableName)\n        }\n    }, [tableName])\n\n\n    useEffect(() => {\n        if(mid) {\n            handleGetTagList(mid)\n        }\n    }, [mid])\n\n    const handleGetTableTagList = (tableName) => {\n        setIsTableTagLoading(true);\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RATAG + SLASH + 'taglist',\n            token,\n            params: {\n                tablename: tableName.toUpperCase(),\n                hotelrefno: hotelRefNo,\n                limit: 25\n            }\n        }).then(res => {\n            if(res.status === 200) {\n                setTableTagList(res.data.data);\n\n            } else {\n                const error = isErrorMsg(res);\n                enqueueSnackbar(t(error.errMsg), {variant: 'error'});\n\n            }\n            setIsTableTagLoading(false);\n        })\n    }\n\n    const handleGetTagList = (mid) => {\n        setIsTaskListLoading(true);\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RATAG,\n            token,\n            params: {\n                query: `masterid:${mid}`,\n                hotelrefno: hotelRefNo,\n                limit: 1\n            }\n        }).then(res => {\n            setIsTaskListLoading(false);\n            if(res.status === 200 && res.data.count > 0) {\n                let tempArray = []\n                const array = res.data.data[0].tagstr.split(',')\n                array.map((item) => {\n                    const data = {\n                        tagstr: item,\n                    }\n                    tempArray.push(data);\n                })\n                onLoad(res.data.data[0], tempArray)\n            }\n        })\n    }\n\n    const handleOnChange = (event, newValue) => {\n        onChange(event, newValue)\n    }\n\n\n    return(\n        <Autocomplete\n            id={id}\n            name={name}\n            disabled={isTagListLoading || isTableTagLoading || disabled}\n            value={value}\n            onChange={(event, newValue) => {\n                const tagRegex = /\"(.*)\"/\n                let data;\n               newValue.map((item, i) => {\n                   data = tagRegex.exec(item.tagstr);\n                   if(data) {\n                       newValue[i].tagstr = data[1]\n                   }\n               })\n                handleOnChange(event, newValue)\n            }}\n            options={tableTagList}\n            getOptionLabel={(option) => option.tagstr}\n            filterSelectedOptions\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n                if (params.inputValue !== '') {\n                    filtered.push({\n                        tagstr: `${t('str_add')} \"${params.inputValue}\"`,\n                    });\n                }\n                return filtered;\n            }}\n            renderTags={(value, getTagProps) =>\n                value.map((option, index) => (\n                    <Chip variant={chipVariant} label={option.tagstr} {...getTagProps({ index })} />\n                ))\n            }\n            renderInput={(params) => (\n                <TextField\n                    required={required}\n                    error={error}\n                    variant={variant}\n                    {...params}\n                    label={label}\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {isTagListLoading || isTableTagLoading ? <LoadingSpinner size={18}/> : null}\n                                {params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                    helperText={helperText}\n                />\n            )}\n            multiple\n            freeSolo\n        />\n    );\n}\n\nexport default RaTagSelect;\n\nRaTagSelect.defaultProps = {\n    variant: 'outlined',\n    chipVariant: 'outlined',\n    value: [],\n    label: '',\n    id: 'raTag',\n    name: 'raTag'\n}\n\nRaTagSelect.propTypes = {\n    variant: PropTypes.string,\n\n}"]},"metadata":{},"sourceType":"module"}