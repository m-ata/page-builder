{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/@webcms-ui/core/spin-edit/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, IconButton, TextField } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nexport default function SpinEdit(props) {\n  let {\n    required,\n    disabled,\n    label,\n    max,\n    min,\n    defaultValue,\n    helpText,\n    size,\n    padding,\n    onChange,\n    className,\n    isWritableText,\n    error,\n    style\n  } = props;\n  const {\n    0: inputType,\n    1: setInputType\n  } = useState('');\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState(defaultValue);\n  useEffect(() => {\n    if (inputValue !== defaultValue && typeof onChange === 'function') {\n      onChange(inputValue, inputType);\n    }\n  }, [inputValue]);\n  useEffect(() => {\n    if (inputValue !== defaultValue) {\n      setInputValue(defaultValue);\n    }\n  }, [defaultValue]);\n\n  const handleInc = () => {\n    if (max > inputValue) setInputType('inc');\n    setInputValue(inputValue + 1);\n  };\n\n  const handleDec = () => {\n    if (inputValue > min) {\n      setInputType('dec');\n      setInputValue(inputValue - 1);\n    }\n\n    if (inputValue > max) {\n      setInputValue(max);\n    }\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    p: padding,\n    style: style && style || {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    required: required || false,\n    error: error,\n    disabled: disabled,\n    className: className || \"\",\n    label: label,\n    value: inputValue,\n    variant: \"outlined\",\n    helperText: helpText,\n    onChange: e => {\n      if (isWritableText) {\n        const reg = /^[0-9\\b]+$/;\n\n        if (e.target.value === '' || reg.test(e.target.value)) {\n          setInputValue(Number(e.target.value));\n        }\n      }\n    },\n    fullWidth: true,\n    size: size,\n    FormHelperTextProps: {\n      style: {\n        opacity: error ? '1' : '0'\n      }\n    },\n    inputProps: {\n      style: {\n        textAlign: 'center'\n      },\n      pattern: \"[0-9]*\"\n    },\n    InputProps: {\n      readOnly: !isWritableText,\n      startAdornment: __jsx(IconButton, {\n        style: {\n          padding: '4px'\n        },\n        size: size,\n        onClick: () => handleDec(),\n        disabled: disabled || inputValue <= min,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }\n      }, __jsx(RemoveIcon, {\n        fontSize: size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      })),\n      endAdornment: __jsx(IconButton, {\n        style: {\n          padding: '4px'\n        },\n        size: size,\n        onClick: () => handleInc(),\n        disabled: disabled || inputValue >= max,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }\n      }, __jsx(AddIcon, {\n        fontSize: size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })));\n}\nSpinEdit.defaultProps = {\n  label: \"\",\n  max: 99,\n  min: 0,\n  defaultValue: 0,\n  padding: 3,\n  size: \"medium\",\n  helpeText: '',\n  disabled: false,\n  isWritableText: false\n};\nSpinEdit.propTypes = {\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n  helpText: PropTypes.object,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  defaultValue: PropTypes.number,\n  padding: PropTypes.number,\n  size: PropTypes.string,\n  disabled: PropTypes.bool,\n  isWritableText: PropTypes.bool,\n  style: PropTypes.object\n};","map":{"version":3,"sources":["/Users/mata/app-cloudweb/@webcms-ui/core/spin-edit/index.js"],"names":["React","useEffect","useState","PropTypes","Box","IconButton","TextField","AddIcon","RemoveIcon","SpinEdit","props","required","disabled","label","max","min","defaultValue","helpText","size","padding","onChange","className","isWritableText","error","style","inputType","setInputType","inputValue","setInputValue","handleInc","handleDec","e","reg","target","value","test","Number","opacity","textAlign","pattern","readOnly","startAdornment","endAdornment","defaultProps","helpeText","propTypes","func","string","object","number","bool"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Box, IconButton, TextField } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport RemoveIcon from '@material-ui/icons/Remove'\n\nexport default function SpinEdit(props) {\n\n  let {required, disabled, label, max, min, defaultValue, helpText, size, padding, onChange, className, isWritableText, error, style} = props;\n  const [inputType, setInputType] = useState('')\n  const [inputValue, setInputValue] = useState(defaultValue)\n\n  useEffect(() => {\n    if (inputValue !== defaultValue && typeof onChange === 'function') {\n      onChange(inputValue, inputType)\n    }\n  }, [inputValue])\n\n  useEffect(() => {\n    if (inputValue !== defaultValue) {\n      setInputValue(defaultValue)\n    }\n  }, [defaultValue])\n\n  const handleInc = () => {\n    if (max > inputValue)\n      setInputType('inc')\n    setInputValue(inputValue + 1)\n  }\n\n  const handleDec = () => {\n\n    if (inputValue > min) {\n      setInputType('dec')\n      setInputValue(inputValue - 1)\n    }\n    if (inputValue > max) {\n      setInputValue(max)\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Box p={padding} style={style && style || {}}>\n        <TextField\n          required={required || false}\n          error={error}\n          disabled={disabled}\n          className={className || \"\"}\n          label={label}\n          value={inputValue}\n          variant=\"outlined\"\n          helperText={helpText}\n          onChange={(e) => {\n            if(isWritableText) {\n              const reg = /^[0-9\\b]+$/\n              if (e.target.value === '' || reg.test(e.target.value)) {\n                setInputValue(Number(e.target.value))\n              }\n            }\n          }}\n          fullWidth\n          size={size}\n          FormHelperTextProps={{\n            style:  {opacity: error ? '1' : '0'}\n          }}\n          inputProps={{ style: { textAlign: 'center' }, pattern:\"[0-9]*\" }}\n          InputProps={{\n            readOnly: !isWritableText,\n            startAdornment: (\n              <IconButton style={{padding: '4px'}} size={size} onClick={()=> handleDec()} disabled={disabled || inputValue <= min}>\n                <RemoveIcon fontSize={size}/>\n              </IconButton>\n            ),\n            endAdornment: (\n              <IconButton style={{padding: '4px'}} size={size} onClick={()=> handleInc()} disabled={disabled || inputValue >= max}>\n                <AddIcon fontSize={size}/>\n              </IconButton>\n            ),\n          }}\n        />\n      </Box>\n    </React.Fragment>\n  );\n}\n\nSpinEdit.defaultProps = {\n  label: \"\",\n  max: 99,\n  min: 0,\n  defaultValue: 0,\n  padding: 3,\n  size: \"medium\",\n  helpeText: '',\n  disabled: false,\n  isWritableText: false\n}\n\nSpinEdit.propTypes = {\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n  helpText: PropTypes.object,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  defaultValue: PropTypes.number,\n  padding: PropTypes.number,\n  size: PropTypes.string,\n  disabled: PropTypes.bool,\n  isWritableText: PropTypes.bool,\n  style: PropTypes.object\n}"]},"metadata":{},"sourceType":"module"}