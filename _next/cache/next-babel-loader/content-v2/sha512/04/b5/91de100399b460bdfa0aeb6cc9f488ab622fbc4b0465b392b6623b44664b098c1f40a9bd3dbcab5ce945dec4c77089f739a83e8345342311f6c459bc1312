{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/ibe/widget/booking.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport axios from 'axios';\nimport React, { memo, useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { connect, useSelector } from 'react-redux';\nimport { setToState, updateState } from 'state/actions';\nimport moment from 'moment';\nimport MomentAdapter from '@date-io/moment';\nimport { Button, CircularProgress, Container, Grid, MenuItem, Paper, TextField, InputLabel, ListSubheader, FormControl, Select } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport WebCmsGlobal from 'components/webcms-global';\nimport useNotifications from 'model/notification/useNotifications';\nimport { DateRangeDelimiter, DesktopDateRangePicker, LocalizationProvider } from '@material-ui/pickers';\nimport { jsonGroupBy } from 'model/orest/constants';\nimport { useSnackbar } from 'notistack';\nconst useStyles = makeStyles(theme => ({\n  availabilityWrapper: {\n    position: 'relative'\n  },\n  availabilityProgress: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12\n  }\n}));\n\nconst WidgetBooking = props => {\n  var _GENERAL_SETTINGS$HOT, _Object$keys$sort$rev;\n\n  const {\n    state,\n    updateState\n  } = props;\n  const classes = useStyles(),\n        Router = useRouter(),\n        {\n    t\n  } = useTranslation(),\n        {\n    enqueueSnackbar\n  } = useSnackbar(),\n        {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal),\n        loginfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo),\n        useChildSelect = state.maxChild > 0 && state.maxChildAge > 0 || false,\n        useChainHotel = GENERAL_SETTINGS.ISCHAIN && (GENERAL_SETTINGS === null || GENERAL_SETTINGS === void 0 ? void 0 : (_GENERAL_SETTINGS$HOT = GENERAL_SETTINGS.HOTEL_CHAIN_LIST) === null || _GENERAL_SETTINGS$HOT === void 0 ? void 0 : _GENERAL_SETTINGS$HOT.length) > 0 || false,\n        chainHotels = useChainHotel && jsonGroupBy(GENERAL_SETTINGS.HOTEL_CHAIN_LIST, 'countryAndCity') || false,\n        {\n    0: selectedHotel,\n    1: setSelectedHotel\n  } = useState('');\n  let clientParams = {};\n  clientParams.hotelrefno = loginfo && loginfo.hotelrefno || GENERAL_SETTINGS.HOTELREFNO;\n\n  if (loginfo && loginfo.hotelgidstr) {\n    clientParams.hoteltoken = loginfo && loginfo.hotelgidstr;\n  } //2. options temp fix\n\n\n  let countryIsoCode = GENERAL_SETTINGS.hotelCountryIso || 'TR';\n  useEffect(() => {\n    let active = true;\n\n    if (active) {\n      if (!state.hotelinfo.length > 0) {\n        axios({\n          url: GENERAL_SETTINGS.BASE_URL + 'api/ors/hotel/book/info',\n          method: 'post',\n          params: Object.assign(clientParams, {\n            langcode: countryIsoCode\n          })\n        }).then(hotelinfoResponse => {\n          if (active) {\n            const hotelinfoData = hotelinfoResponse.data;\n\n            if (hotelinfoData.success) {\n              if (hotelinfoData.data.agencyid !== 0 && hotelinfoData.data.agencyid !== null) {\n                updateState('ibe', 'agencyid', hotelinfoData.data.agencyid);\n              }\n\n              if (hotelinfoData.data.currencyid !== 0 && hotelinfoData.data.currencyid !== null) {\n                updateState('ibe', 'currencyid', hotelinfoData.data.currencyid);\n              }\n\n              if (hotelinfoData.data.minstay !== 0 && hotelinfoData.data.minstay !== null) {\n                updateState('ibe', 'minStay', hotelinfoData.data.minstay);\n              }\n\n              if (hotelinfoData.data.maxpax !== 0 && hotelinfoData.data.maxpax !== null) {\n                var _GENERAL_SETTINGS$hot;\n\n                const maxPax = hotelinfoData.data.maxpax || 0,\n                      defPax = (GENERAL_SETTINGS === null || GENERAL_SETTINGS === void 0 ? void 0 : (_GENERAL_SETTINGS$hot = GENERAL_SETTINGS.hotelSettings) === null || _GENERAL_SETTINGS$hot === void 0 ? void 0 : _GENERAL_SETTINGS$hot.defpax) || 0,\n                      usePax = maxPax >= defPax ? defPax : maxPax;\n                updateState('ibe', 'adult', usePax);\n                updateState('ibe', 'maxAdult', hotelinfoData.data.maxpax);\n              }\n\n              if (hotelinfoData.data.maxchd !== 0 && hotelinfoData.data.maxchd !== null) {\n                updateState('ibe', 'maxChild', hotelinfoData.data.maxchd);\n              }\n\n              if (hotelinfoData.data.maxchdage !== 0 && hotelinfoData.data.maxchdage !== null) {\n                updateState('ibe', 'maxChildAge', hotelinfoData.data.maxchdage);\n              }\n\n              if (hotelinfoData.data.langid !== 0 && hotelinfoData.data.langid !== null) {\n                updateState('ibe', 'langid', hotelinfoData.data.langid);\n              }\n\n              if (hotelinfoData.data.marketid !== 0 && hotelinfoData.data.marketid !== null) {\n                updateState('ibe', 'marketid', hotelinfoData.data.marketid);\n              }\n\n              updateState('ibe', 'guestInfoFormStatus', true);\n            } else {\n              updateState('ibe', 'guestInfoFormStatus', false);\n            }\n          }\n        });\n      }\n    }\n\n    return () => {\n      active = false;\n    };\n  }, []);\n  const CHECKIN_DATE = moment(),\n        CHECKOUT_DATE = moment(CHECKIN_DATE).add(state.minStay, 'days');\n\n  if (state.selectedDate[0] === null && state.selectedDate[1] === null) {\n    updateState('ibe', 'selectedDate', [CHECKIN_DATE, CHECKOUT_DATE]);\n  }\n\n  const handleDate = date => {\n    if (date && date[0] && date[0]._d && date[1] && date[1]._d) {\n      const checkInDateTime = date[0]._d.getTime(),\n            checkOutDateTime = date[1]._d.getTime(),\n            dateDiff = Math.abs(checkInDateTime - checkOutDateTime),\n            totalNight = Math.ceil(dateDiff / (1000 * 3600 * 24));\n\n      if (state.minStay > totalNight) {\n        enqueueSnackbar(`${t('str_chooseMinError')} ${state.minStay} ${t('str_days')}`, {\n          variant: 'error'\n        });\n        updateState('ibe', 'selectedDate', [moment(state.selectedDate[0]), moment(state.selectedDate[1])]);\n      } else {\n        updateState('ibe', 'selectedDate', date);\n        updateState('ibe', 'night', totalNight);\n      }\n    }\n  };\n\n  const handleAdult = e => {\n    updateState('ibe', 'adult', e.target.value);\n  };\n\n  const handleChd = e => {\n    updateState('ibe', 'child', e.target.value);\n  };\n\n  const handleCheck = () => {\n    updateState('ibe', 'ibeWidgetListInitialized', true);\n    let query = {\n      ci: moment(state.selectedDate[0]).format('DD-MM-YYYY'),\n      co: moment(state.selectedDate[1]).format('DD-MM-YYYY'),\n      adult: state.adult,\n      child: state.child\n    };\n\n    if (Router.query.lang) {\n      query.lang = Router.query.lang;\n    }\n\n    if (useChainHotel) {\n      if (selectedHotel) {\n        const urlSearchParams = new URLSearchParams(query),\n              params = Object.fromEntries(urlSearchParams.entries()),\n              paramStr = new URLSearchParams(params).toString(),\n              hotelItem = GENERAL_SETTINGS.HOTEL_CHAIN_LIST.find(item => item.id = selectedHotel),\n              hotelWebKey = hotelItem ? hotelItem.webkey : false;\n\n        if (hotelWebKey) {\n          let useHotelUrl;\n\n          if (!hotelWebKey.includes('.')) {\n            useHotelUrl = `${hotelWebKey}.vimahotels.com`;\n          } else {\n            useHotelUrl = hotelWebKey;\n          }\n\n          window.open(`https://${useHotelUrl}/booking/rooms?${paramStr}`);\n        }\n      } else {\n        enqueueSnackbar(t('str_pleaseSelectAHotel'), {\n          variant: 'info'\n        });\n        updateState('ibe', 'ibeWidgetListInitialized', false);\n      }\n    } else {\n      Router.push({\n        pathname: '/booking/rooms',\n        query: query\n      });\n    }\n  };\n\n  const handleSelectHotel = e => {\n    setSelectedHotel(e.target.value);\n  };\n\n  const renderSelectGroup = groupName => {\n    const items = chainHotels[groupName].map(hotel => {\n      return __jsx(MenuItem, {\n        key: hotel.id,\n        value: hotel.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }\n      }, hotel.code);\n    });\n    return [__jsx(ListSubheader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, groupName), items];\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, __jsx(Container, {\n    maxWidth: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, __jsx(Paper, {\n    elevation: 3,\n    style: {\n      padding: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 21\n    }\n  }, useChainHotel ? __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 29\n    }\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 33\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"chainHotelSelect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 37\n    }\n  }, t('str_hotels')), __jsx(Select, {\n    fullWidth: true,\n    value: selectedHotel || \"\",\n    onChange: handleSelectHotel,\n    defaultValue: \"\",\n    label: t('str_hotels'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 37\n    }\n  }, (_Object$keys$sort$rev = Object.keys(chainHotels).sort().reverse()) === null || _Object$keys$sort$rev === void 0 ? void 0 : _Object$keys$sort$rev.map(groupName => renderSelectGroup(groupName))))) : null, __jsx(Grid, {\n    item: true,\n    xs: useChainHotel ? useChildSelect ? 4 : 5 : useChildSelect ? 5 : 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 25\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 29\n    }\n  }, __jsx(DesktopDateRangePicker, {\n    startText: t('str_checkinDate'),\n    endText: t('str_checkoutDate'),\n    size: \"small\",\n    fullWidth: true,\n    minDate: moment(),\n    onChange: handleDate,\n    value: state.selectedDate,\n    inputFormat: \"DD/MM/YYYY\",\n    renderInput: (startProps, endProps) => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 41\n      }\n    }, __jsx(TextField, _extends({}, startProps, {\n      fullWidth: true,\n      size: \"medium\",\n      helperText: '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 45\n      }\n    })), __jsx(DateRangeDelimiter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 45\n      }\n    }), __jsx(TextField, _extends({}, endProps, {\n      fullWidth: true,\n      size: \"medium\",\n      helperText: '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 45\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 33\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: useChainHotel ? useChildSelect ? 1 : 2 : useChildSelect ? 2 : 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 25\n    }\n  }, __jsx(TextField, {\n    size: \"medium\",\n    fullWidth: true,\n    select: true,\n    id: \"guest\",\n    label: t('str_guest'),\n    variant: \"outlined\",\n    value: state.adult,\n    onChange: e => handleAdult(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 29\n    }\n  }, Array.from({\n    length: state.maxAdult\n  }).map((adult, i) => {\n    let adultNo = i + 1;\n    return __jsx(MenuItem, {\n      key: i,\n      value: adultNo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 41\n      }\n    }, adultNo);\n  }))), useChildSelect ? __jsx(Grid, {\n    item: true,\n    xs: useChainHotel ? 1 : 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 29\n    }\n  }, __jsx(TextField, {\n    size: \"medium\",\n    fullWidth: true,\n    select: true,\n    id: \"child\",\n    onChange: e => handleChd(e),\n    label: t('str_child'),\n    variant: \"outlined\",\n    value: state.child || 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 33\n    }\n  }, __jsx(MenuItem, {\n    value: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 37\n    }\n  }, \"0\"), Array.from({\n    length: state.maxChild\n  }).map((chd, i) => {\n    let chdNo = i + 1;\n    return __jsx(MenuItem, {\n      key: i,\n      value: chdNo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 45\n      }\n    }, chdNo);\n  }))) : null, __jsx(Grid, {\n    item: true,\n    xs: useChainHotel ? useChildSelect ? 3 : 2 : 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    className: classes.availabilityWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    style: {\n      marginTop: 5,\n      padding: 10\n    },\n    disabled: state.ibeWidgetListInitialized,\n    onClick: handleCheck,\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 33\n    }\n  }, t('str_checkRates')), state.ibeWidgetListInitialized && __jsx(CircularProgress, {\n    size: 24,\n    className: classes.availabilityProgress,\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 37\n    }\n  })))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.ibe\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value))\n});\n\nconst memorizedWidgetBooking = /*#__PURE__*/memo(WidgetBooking);\nexport default connect(mapStateToProps, mapDispatchToProps)(memorizedWidgetBooking);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/ibe/widget/booking.js"],"names":["axios","React","memo","useContext","useEffect","useState","useRouter","connect","useSelector","setToState","updateState","moment","MomentAdapter","Button","CircularProgress","Container","Grid","MenuItem","Paper","TextField","InputLabel","ListSubheader","FormControl","Select","makeStyles","useTranslation","WebCmsGlobal","useNotifications","DateRangeDelimiter","DesktopDateRangePicker","LocalizationProvider","jsonGroupBy","useSnackbar","useStyles","theme","availabilityWrapper","position","availabilityProgress","top","left","marginTop","marginLeft","WidgetBooking","props","state","classes","Router","t","enqueueSnackbar","GENERAL_SETTINGS","loginfo","orest","currentUser","useChildSelect","maxChild","maxChildAge","useChainHotel","ISCHAIN","HOTEL_CHAIN_LIST","length","chainHotels","selectedHotel","setSelectedHotel","clientParams","hotelrefno","HOTELREFNO","hotelgidstr","hoteltoken","countryIsoCode","hotelCountryIso","active","hotelinfo","url","BASE_URL","method","params","Object","assign","langcode","then","hotelinfoResponse","hotelinfoData","data","success","agencyid","currencyid","minstay","maxpax","maxPax","defPax","hotelSettings","defpax","usePax","maxchd","maxchdage","langid","marketid","CHECKIN_DATE","CHECKOUT_DATE","add","minStay","selectedDate","handleDate","date","_d","checkInDateTime","getTime","checkOutDateTime","dateDiff","Math","abs","totalNight","ceil","variant","handleAdult","e","target","value","handleChd","handleCheck","query","ci","format","co","adult","child","lang","urlSearchParams","URLSearchParams","fromEntries","entries","paramStr","toString","hotelItem","find","item","id","hotelWebKey","webkey","useHotelUrl","includes","window","open","push","pathname","handleSelectHotel","renderSelectGroup","groupName","items","map","hotel","code","padding","keys","sort","reverse","startProps","endProps","Array","from","maxAdult","i","adultNo","chd","chdNo","ibeWidgetListInitialized","mapStateToProps","formReducer","ibe","mapDispatchToProps","dispatch","stateType","stateName","memorizedWidgetBooking"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport React, { memo, useContext, useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { connect, useSelector } from 'react-redux'\nimport { setToState, updateState } from 'state/actions'\nimport moment from 'moment'\nimport MomentAdapter from '@date-io/moment'\nimport { Button, CircularProgress, Container, Grid, MenuItem, Paper, TextField, InputLabel, ListSubheader, FormControl, Select } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport WebCmsGlobal from 'components/webcms-global'\nimport useNotifications from 'model/notification/useNotifications'\nimport {\n    DateRangeDelimiter,\n    DesktopDateRangePicker,\n    LocalizationProvider,\n} from '@material-ui/pickers'\nimport { jsonGroupBy } from 'model/orest/constants'\nimport { useSnackbar } from 'notistack'\n\nconst useStyles = makeStyles((theme) => ({\n    availabilityWrapper: {\n        position: 'relative',\n    },\n    availabilityProgress: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12,\n    },\n}))\n\nconst WidgetBooking = (props) => {\n    const { state, updateState } = props\n\n    const classes = useStyles()\n        , Router = useRouter()\n        , { t } = useTranslation()\n        , { enqueueSnackbar } = useSnackbar()\n        , { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n        , loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n        , useChildSelect = state.maxChild > 0 && state.maxChildAge > 0 || false\n        , useChainHotel =  GENERAL_SETTINGS.ISCHAIN && GENERAL_SETTINGS?.HOTEL_CHAIN_LIST?.length > 0 || false\n        , chainHotels = useChainHotel && jsonGroupBy(GENERAL_SETTINGS.HOTEL_CHAIN_LIST, 'countryAndCity') || false\n        , [selectedHotel, setSelectedHotel] = useState('')\n\n    let clientParams = {}\n    clientParams.hotelrefno = loginfo && loginfo.hotelrefno || GENERAL_SETTINGS.HOTELREFNO\n\n    if(loginfo && loginfo.hotelgidstr){\n        clientParams.hoteltoken = loginfo && loginfo.hotelgidstr\n    }\n\n    //2. options temp fix\n    let countryIsoCode = GENERAL_SETTINGS.hotelCountryIso || 'TR'\n\n    useEffect(() => {\n        let active = true\n        if (active) {\n            if (!state.hotelinfo.length > 0) {\n                axios({\n                    url: GENERAL_SETTINGS.BASE_URL + 'api/ors/hotel/book/info',\n                    method: 'post',\n                    params: Object.assign(clientParams,{\n                        langcode: countryIsoCode,\n                    })\n                }).then((hotelinfoResponse) => {\n                    if (active) {\n                        const hotelinfoData = hotelinfoResponse.data\n                        if (hotelinfoData.success) {\n                            if (hotelinfoData.data.agencyid !== 0 && hotelinfoData.data.agencyid !== null) {\n                                updateState('ibe', 'agencyid', hotelinfoData.data.agencyid)\n                            }\n\n                            if (hotelinfoData.data.currencyid !== 0 && hotelinfoData.data.currencyid !== null) {\n                                updateState('ibe', 'currencyid', hotelinfoData.data.currencyid)\n                            }\n\n                            if (hotelinfoData.data.minstay !== 0 && hotelinfoData.data.minstay !== null) {\n                                updateState('ibe', 'minStay', hotelinfoData.data.minstay)\n                            }\n\n                            if (hotelinfoData.data.maxpax !== 0 && hotelinfoData.data.maxpax !== null) {\n                                const maxPax = hotelinfoData.data.maxpax || 0\n                                    , defPax = GENERAL_SETTINGS?.hotelSettings?.defpax || 0\n                                    , usePax = (maxPax >= defPax) ? defPax : maxPax\n                                updateState('ibe', 'adult', usePax)\n                                updateState('ibe', 'maxAdult', hotelinfoData.data.maxpax)\n                            }\n\n                            if (hotelinfoData.data.maxchd !== 0 && hotelinfoData.data.maxchd !== null) {\n                                updateState('ibe', 'maxChild', hotelinfoData.data.maxchd)\n                            }\n\n                            if (hotelinfoData.data.maxchdage !== 0 && hotelinfoData.data.maxchdage !== null) {\n                                updateState('ibe', 'maxChildAge', hotelinfoData.data.maxchdage)\n                            }\n\n                            if (hotelinfoData.data.langid !== 0 && hotelinfoData.data.langid !== null) {\n                                updateState('ibe', 'langid', hotelinfoData.data.langid)\n                            }\n\n                            if (hotelinfoData.data.marketid !== 0 && hotelinfoData.data.marketid !== null) {\n                                updateState('ibe', 'marketid', hotelinfoData.data.marketid)\n                            }\n\n                            updateState('ibe', 'guestInfoFormStatus', true)\n                        } else {\n                            updateState('ibe', 'guestInfoFormStatus', false)\n                        }\n                    }\n                })\n            }\n        }\n\n        return () => {\n            active = false\n        }\n    }, [])\n\n    const CHECKIN_DATE = moment()\n        , CHECKOUT_DATE = moment(CHECKIN_DATE).add(state.minStay, 'days')\n\n    if (state.selectedDate[0] === null && state.selectedDate[1] === null) {\n        updateState('ibe', 'selectedDate', [CHECKIN_DATE, CHECKOUT_DATE])\n    }\n\n    const handleDate = (date) => {\n        if (date && date[0] && date[0]._d && date[1] && date[1]._d) {\n            const checkInDateTime = date[0]._d.getTime()\n                , checkOutDateTime = date[1]._d.getTime()\n                , dateDiff = Math.abs(checkInDateTime - checkOutDateTime)\n                , totalNight = Math.ceil(dateDiff / (1000 * 3600 * 24))\n\n            if (state.minStay > totalNight) {\n                enqueueSnackbar(`${t('str_chooseMinError')} ${state.minStay} ${t('str_days')}`, { variant: 'error' });\n                updateState('ibe', 'selectedDate', [moment(state.selectedDate[0]), moment(state.selectedDate[1])])\n            } else {\n                updateState('ibe', 'selectedDate', date)\n                updateState('ibe', 'night', totalNight)\n            }\n        }\n    }\n\n    const handleAdult = (e) => {\n        updateState('ibe', 'adult', e.target.value)\n    }\n\n    const handleChd = (e) => {\n        updateState('ibe', 'child', e.target.value)\n    }\n\n    const handleCheck = () => {\n        updateState('ibe', 'ibeWidgetListInitialized', true)\n        let query = {\n            ci: moment(state.selectedDate[0]).format('DD-MM-YYYY'),\n            co: moment(state.selectedDate[1]).format('DD-MM-YYYY'),\n            adult: state.adult,\n            child: state.child,\n        }\n\n        if (Router.query.lang) {\n            query.lang = Router.query.lang\n        }\n\n        if (useChainHotel) {\n            if(selectedHotel){\n                const urlSearchParams = new URLSearchParams(query)\n                    , params = Object.fromEntries(urlSearchParams.entries())\n                    , paramStr = new URLSearchParams(params).toString()\n                    , hotelItem = GENERAL_SETTINGS.HOTEL_CHAIN_LIST.find(item => item.id = selectedHotel)\n                    , hotelWebKey = hotelItem ? hotelItem.webkey : false\n\n                if(hotelWebKey){\n                    let useHotelUrl\n                    if (!hotelWebKey.includes('.')) {\n                        useHotelUrl = `${hotelWebKey}.vimahotels.com`\n                    } else {\n                        useHotelUrl = hotelWebKey\n                    }\n\n                    window.open(`https://${useHotelUrl}/booking/rooms?${paramStr}`)\n                }\n\n            }else{\n                enqueueSnackbar(t('str_pleaseSelectAHotel'), { variant: 'info' })\n                updateState('ibe', 'ibeWidgetListInitialized', false)\n            }\n        } else {\n            Router.push({\n                pathname: '/booking/rooms',\n                query: query,\n            })\n        }\n    }\n\n    const handleSelectHotel = (e) => {\n        setSelectedHotel(e.target.value)\n    }\n\n    const renderSelectGroup = (groupName) => {\n        const items = chainHotels[groupName].map(hotel => {\n            return (\n                <MenuItem key={hotel.id} value={hotel.id}>\n                    {hotel.code}\n                </MenuItem>\n            )\n        })\n        return [<ListSubheader>{groupName}</ListSubheader>, items]\n    }\n\n    return (\n        <React.Fragment>\n            <Container maxWidth=\"lg\">\n                <Paper elevation={3} style={{ padding: 30 }}>\n                    <Grid container spacing={3}>\n                        {useChainHotel ? (\n                            <Grid item xs={3}>\n                                <FormControl fullWidth variant=\"outlined\">\n                                    <InputLabel htmlFor=\"chainHotelSelect\">{t('str_hotels')}</InputLabel>\n                                    <Select\n                                        fullWidth\n                                        value={selectedHotel || \"\"}\n                                        onChange={handleSelectHotel}\n                                        defaultValue=\"\"\n                                        label={t('str_hotels')}\n                                    >\n                                        {Object.keys(chainHotels).sort().reverse()?.map(groupName => renderSelectGroup(groupName))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                        ): null}\n                        <Grid item xs={useChainHotel ? useChildSelect ? 4 : 5 : useChildSelect ? 5 : 6}>\n                            <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                <DesktopDateRangePicker\n                                    startText={t('str_checkinDate')}\n                                    endText={t('str_checkoutDate')}\n                                    size=\"small\"\n                                    fullWidth={true}\n                                    minDate={moment()}\n                                    onChange={handleDate}\n                                    value={state.selectedDate}\n                                    inputFormat=\"DD/MM/YYYY\"\n                                    renderInput={(startProps, endProps) => (\n                                        <React.Fragment>\n                                            <TextField {...startProps} fullWidth size=\"medium\" helperText={''}/>\n                                            <DateRangeDelimiter/>\n                                            <TextField {...endProps} fullWidth size=\"medium\" helperText={''}/>\n                                        </React.Fragment>\n                                    )}\n                                />\n                            </LocalizationProvider>\n                        </Grid>\n                        <Grid item xs={useChainHotel ? useChildSelect ? 1 : 2 : useChildSelect ? 2 : 3}>\n                            <TextField\n                                size=\"medium\"\n                                fullWidth={true}\n                                select\n                                id=\"guest\"\n                                label={t('str_guest')}\n                                variant=\"outlined\"\n                                value={state.adult}\n                                onChange={(e) => handleAdult(e)}\n                            >\n                                {Array.from({ length: state.maxAdult }).map((adult, i) => {\n                                    let adultNo = i + 1\n                                    return (\n                                        <MenuItem key={i} value={adultNo}>\n                                            {adultNo}\n                                        </MenuItem>\n                                    )\n                                })}\n                            </TextField>\n                        </Grid>\n                        {useChildSelect ? (\n                            <Grid item xs={useChainHotel ? 1 : 2}>\n                                <TextField\n                                    size=\"medium\"\n                                    fullWidth={true}\n                                    select\n                                    id=\"child\"\n                                    onChange={(e) => handleChd(e)}\n                                    label={t('str_child')}\n                                    variant=\"outlined\"\n                                    value={state.child || 0}\n                                >\n                                    <MenuItem value={0}>\n                                       0\n                                    </MenuItem>\n                                    {Array.from({ length: state.maxChild }).map((chd, i) => {\n                                        let chdNo = i + 1\n                                        return (\n                                            <MenuItem key={i} value={chdNo}>\n                                                {chdNo}\n                                            </MenuItem>\n                                        )\n                                    })}\n                                </TextField>\n                            </Grid>\n                        ): null}\n                        <Grid item xs={useChainHotel ? useChildSelect ? 3 : 2 : 3}>\n                            <div className={classes.availabilityWrapper}>\n                                <Button\n                                    style={{ marginTop: 5, padding: 10}}\n                                    disabled={state.ibeWidgetListInitialized}\n                                    onClick={handleCheck}\n                                    fullWidth={true}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    size=\"medium\"\n                                >\n                                    {t('str_checkRates')}\n                                </Button>\n                                {state.ibeWidgetListInitialized && (\n                                    <CircularProgress\n                                        size={24}\n                                        className={classes.availabilityProgress}\n                                        color=\"inherit\"\n                                    />\n                                )}\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Container>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.ibe,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nconst memorizedWidgetBooking = memo(WidgetBooking)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(memorizedWidgetBooking)\n"]},"metadata":{},"sourceType":"module"}