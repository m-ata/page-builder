{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider-only/EditSectionOnly.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react'; //material ui imports\n\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\"; //service constants\n\nimport WebCmsGlobal from \"components/webcms-global\";\nimport { ViewList } from '@webcms/orest';\nimport { useRouter } from \"next/router\"; //custom constants\n\nimport { OREST_ENDPOINT } from \"../../../../../../../model/orest/constants\";\nimport SliderOnlyPreview from './Slider';\n\nconst EditSliderOnly = props => {\n  const {\n    handleComponent,\n    sliderOnlyCmp,\n    defaultCode,\n    langCode\n  } = props; //local states\n\n  const {\n    0: sliderLoc,\n    1: setSliderLoc\n  } = useState('');\n  const {\n    0: eventLocations,\n    1: setEventLocations\n  } = useState([]);\n  const {\n    0: roomTypes,\n    1: setRoomTypes\n  } = useState([]);\n  const {\n    0: selectedLocation,\n    1: setSelectedLocation\n  } = useState('');\n  const router = useRouter();\n  const companyId = router.query.companyID;\n  const {\n    GENERAL_SETTINGS,\n    token\n  } = useContext(WebCmsGlobal);\n  const authToken = token || router.query.authToken;\n  useEffect(() => {\n    //fetch event locations\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.EVENTLOC,\n      token: authToken,\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(res1 => {\n      if (res1.status === 200 && res1.data && res1.data.data && res1.data.data.length > 0) {\n        setEventLocations(res1.data.data);\n      }\n    }); //fetch room types\n\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.ROOMTYPE,\n      token: authToken,\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(res1 => {\n      if (res1.status === 200 && res1.data && res1.data.data && res1.data.data.length > 0) {\n        setRoomTypes(res1.data.data);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (sliderOnlyCmp) {\n      setSliderLoc(sliderOnlyCmp.service);\n      setSelectedLocation(sliderOnlyCmp.masterid);\n    }\n  }, [sliderOnlyCmp]);\n  useEffect(() => {\n    if (sliderOnlyCmp) {\n      if (defaultCode !== langCode) {\n        handleComponent({\n          sliderOnly: true\n        });\n      } else {\n        handleComponent({\n          service: sliderLoc,\n          type: sliderOnlyCmp.type,\n          masterid: selectedLocation,\n          width: sliderOnlyCmp.width,\n          id: sliderOnlyCmp.id\n        });\n      }\n    }\n  }, [selectedLocation, sliderLoc]);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, __jsx(RadioGroup, {\n    \"aria-label\": \"component\",\n    name: \"component\",\n    row: true,\n    value: sliderLoc,\n    onChange: e => {\n      setSliderLoc(e.target.value);\n\n      if (e.target.value === 'eventloc') {\n        setSelectedLocation(eventLocations[0].mid);\n      } else {\n        setSelectedLocation(roomTypes[0].mid);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }, __jsx(FormControlLabel, {\n    value: \"eventloc\",\n    control: __jsx(Radio, {\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 42\n      }\n    }),\n    label: \"Event Location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"roomtype\",\n    control: __jsx(Radio, {\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 42\n      }\n    }),\n    label: \"Room Types\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    style: {\n      minWidth: 200,\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }, __jsx(Select, {\n    value: selectedLocation,\n    onChange: e => setSelectedLocation(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, sliderLoc === 'eventloc' ? eventLocations.length > 0 && eventLocations.map((eventLoc, index) => {\n    return __jsx(MenuItem, {\n      value: eventLoc.mid,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 45\n      }\n    }, ' ', eventLoc.description, ' ');\n  }) : roomTypes.length > 0 && roomTypes.map((roomType, index) => {\n    return __jsx(MenuItem, {\n      value: roomType.mid,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 45\n      }\n    }, ' ', roomType.description, ' ');\n  }))))), __jsx(Grid, {\n    container: true,\n    style: {\n      padding: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, __jsx(SliderOnlyPreview, {\n    masterid: selectedLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default EditSliderOnly;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider-only/EditSectionOnly.js"],"names":["React","useState","useEffect","useContext","Grid","FormControl","RadioGroup","FormControlLabel","Radio","Select","MenuItem","WebCmsGlobal","ViewList","useRouter","OREST_ENDPOINT","SliderOnlyPreview","EditSliderOnly","props","handleComponent","sliderOnlyCmp","defaultCode","langCode","sliderLoc","setSliderLoc","eventLocations","setEventLocations","roomTypes","setRoomTypes","selectedLocation","setSelectedLocation","router","companyId","query","companyID","GENERAL_SETTINGS","token","authToken","apiUrl","OREST_URL","endpoint","EVENTLOC","params","hotelrefno","Number","then","res1","status","data","length","ROOMTYPE","service","masterid","sliderOnly","type","width","id","e","target","value","mid","minWidth","float","map","eventLoc","index","description","roomType","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\n//material ui imports\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n//service constants\nimport WebCmsGlobal from \"components/webcms-global\";\nimport { ViewList } from '@webcms/orest';\nimport { useRouter } from \"next/router\";\n//custom constants\nimport { OREST_ENDPOINT } from \"../../../../../../../model/orest/constants\";\nimport SliderOnlyPreview from './Slider';\n\nconst EditSliderOnly = (props) => {\n\n    const { handleComponent, sliderOnlyCmp, defaultCode, langCode } = props;\n    //local states\n    const [sliderLoc, setSliderLoc] = useState('');\n    const [eventLocations, setEventLocations] = useState([]);\n    const [roomTypes, setRoomTypes] = useState([]);\n    const [selectedLocation, setSelectedLocation] = useState('');\n\n    const router = useRouter();\n    const companyId = router.query.companyID;\n    const { GENERAL_SETTINGS, token } = useContext(WebCmsGlobal);\n    const authToken = token || router.query.authToken;\n\n    useEffect(() => {\n        //fetch event locations\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.EVENTLOC,\n            token: authToken,\n            params: {\n                hotelrefno: Number(companyId)\n            }\n        }).then(res1 => {\n            if (res1.status === 200 && res1.data && res1.data.data && res1.data.data.length > 0) {\n                setEventLocations(res1.data.data);\n            }\n        })\n        //fetch room types\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.ROOMTYPE,\n            token: authToken,\n            params: {\n                hotelrefno: Number(companyId)\n            }\n        }).then(res1 => {\n            if (res1.status === 200 && res1.data && res1.data.data && res1.data.data.length > 0) {\n                setRoomTypes(res1.data.data);\n            }\n        })\n    }, []);\n\n    useEffect(() => {\n        if (sliderOnlyCmp) {\n            setSliderLoc(sliderOnlyCmp.service);\n            setSelectedLocation(sliderOnlyCmp.masterid);\n        }\n    }, [sliderOnlyCmp]);\n\n    useEffect(() => {\n        if (sliderOnlyCmp) {\n            if (defaultCode !== langCode) {\n                handleComponent({\n                    sliderOnly: true\n                })\n            } else {\n                handleComponent({\n                    service: sliderLoc,\n                    type: sliderOnlyCmp.type,\n                    masterid: selectedLocation,\n                    width: sliderOnlyCmp.width,\n                    id: sliderOnlyCmp.id\n                })\n            }\n        }\n    }, [selectedLocation, sliderLoc]);\n\n    return (\n        <React.Fragment>\n            <Grid container>\n                <Grid item xs={6}>\n                    <FormControl component=\"fieldset\">\n                        <RadioGroup\n                            aria-label=\"component\"\n                            name=\"component\"\n                            row\n                            value={sliderLoc}\n                            onChange={(e) => {\n                                setSliderLoc(e.target.value);\n                                if (e.target.value === 'eventloc') {\n                                    setSelectedLocation(eventLocations[0].mid);\n                                } else {\n                                    setSelectedLocation(roomTypes[0].mid);\n                                }\n                            }}\n                        >\n                            <FormControlLabel\n                                value=\"eventloc\"\n                                control={<Radio color={'primary'} />}\n                                label=\"Event Location\"\n                            />\n                            <FormControlLabel\n                                value=\"roomtype\"\n                                control={<Radio color={'primary'} />}\n                                label=\"Room Types\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <FormControl\n                        variant=\"outlined\"\n                        style={{ minWidth: 200, float: 'right' }}\n                    >\n                        <Select\n                            value={selectedLocation}\n                            onChange={(e) => setSelectedLocation(e.target.value)}\n                        >\n                            {\n                                sliderLoc === 'eventloc' ?\n                                    eventLocations.length > 0 && eventLocations.map((eventLoc, index) => {\n                                        return (\n                                            <MenuItem value={eventLoc.mid} key={index}>\n                                                {' '}\n                                                {eventLoc.description}{' '}\n                                            </MenuItem>\n                                        )\n                                    }) : roomTypes.length > 0 && roomTypes.map((roomType, index) => {\n                                        return (\n                                            <MenuItem value={roomType.mid} key={index}>\n                                                {' '}\n                                                {roomType.description}{' '}\n                                            </MenuItem>\n                                        )\n                                    })\n                            }\n                        </Select>\n                    </FormControl>\n                </Grid>\n            </Grid>\n            <Grid container style={{padding: 16}}>\n                <Grid item xs={12}>\n                    <SliderOnlyPreview masterid={selectedLocation} />\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    )\n}\n\nexport default EditSliderOnly;"]},"metadata":{},"sourceType":"module"}