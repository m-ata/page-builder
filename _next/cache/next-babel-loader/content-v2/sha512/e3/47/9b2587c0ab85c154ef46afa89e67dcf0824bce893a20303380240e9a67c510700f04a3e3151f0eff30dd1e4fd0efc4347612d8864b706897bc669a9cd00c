{"ast":null,"code":"import _extends from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mata/app-cloudweb/@webcms-ui/core/phone-input/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport Divider from '@material-ui/core/Divider';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { withStyles } from '@material-ui/core/styles';\nimport { some, find, reduce, map, filter, includes, findIndex, head, tail, debounce, memoize, trim, startsWith, isString } from 'lodash';\nimport countryData from './countryData';\nimport Item from './item';\nvar style = {\n  flagButton: {\n    minWidth: 30,\n    padding: 0,\n    height: 30\n  },\n  \"native\": {\n    width: 30,\n    height: 30,\n    padding: 8\n  },\n  nativeRoot: {\n    padding: 0,\n    '& + svg': {\n      display: 'none'\n    }\n  },\n  nativeSelect: {\n    padding: 0,\n    lineHeight: 0,\n    height: 11\n  },\n  positionStart: {\n    position: 'relative'\n  }\n};\n\nvar PhoneInput = /*#__PURE__*/function (_React$Component) {\n  _inherits(PhoneInput, _React$Component);\n\n  var _super = _createSuper(PhoneInput);\n\n  function PhoneInput(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneInput);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"flags\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"guessSelectedCountry\", memoize(function (inputNumber, onlyCountries, defaultCountry) {\n      var secondBestGuess = find(onlyCountries, {\n        iso2: defaultCountry\n      }) || {};\n      if (trim(inputNumber) === '') return secondBestGuess;\n      var bestGuess = reduce(onlyCountries, function (selectedCountry, country) {\n        if (startsWith(inputNumber, country.dialCode)) {\n          if (country.dialCode.length > selectedCountry.dialCode.length) {\n            return country;\n          }\n\n          if (country.dialCode.length === selectedCountry.dialCode.length && country.priority < selectedCountry.priority) {\n            return country;\n          }\n        }\n\n        return selectedCountry;\n      }, {\n        dialCode: '',\n        priority: 10001\n      }, _assertThisInitialized(_this));\n      if (!bestGuess.name) return secondBestGuess;\n      return bestGuess;\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getProbableCandidate\", memoize(function (queryString) {\n      if (!queryString || queryString.length === 0) {\n        return null;\n      }\n\n      var onlyCountries = _this.state.onlyCountries; // don't include the preferred countries in search\n\n      var probableCountries = filter(onlyCountries, function (country) {\n        return startsWith(country.name.toLowerCase(), queryString.toLowerCase());\n      }, _assertThisInitialized(_this));\n      return probableCountries[0];\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getOnlyCountries\", function (onlyCountriesArray, filteredCountries) {\n      if (onlyCountriesArray.length === 0) return filteredCountries;\n      return filteredCountries.filter(function (country) {\n        return onlyCountriesArray.some(function (element) {\n          return element === country.iso2;\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"excludeCountries\", function (selectedCountries, excludedCountries) {\n      if (excludedCountries.length === 0) {\n        return selectedCountries;\n      }\n\n      return filter(selectedCountries, function (selCountry) {\n        return !includes(excludedCountries, selCountry.iso2);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterRegions\", function (regions, filteredCountries) {\n      if (typeof regions === 'string') {\n        var region = regions;\n        return filteredCountries.filter(function (country) {\n          return country.regions.some(function (element) {\n            return element === region;\n          });\n        });\n      }\n\n      return filteredCountries.filter(function (country) {\n        var matches = regions.map(function (region) {\n          return country.regions.some(function (element) {\n            return element === region;\n          });\n        });\n        return matches.some(function (el) {\n          return el;\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteAreaCodes\", function (filteredCountries) {\n      return filteredCountries.filter(function (country) {\n        return country.isAreaCode !== true;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateDefaultCountry\", function (country) {\n      var onlyCountries = _this.state.onlyCountries;\n      var disableCountryCode = _this.props.disableCountryCode;\n      var newSelectedCountry = find(onlyCountries, {\n        iso2: country\n      });\n\n      if (newSelectedCountry) {\n        _this.setState({\n          defaultCountry: country,\n          selectedCountry: newSelectedCountry,\n          formattedNumber: disableCountryCode ? '' : \"+\".concat(newSelectedCountry.dialCode)\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollTo\", function (country) {\n      if (!country) {\n        return;\n      }\n\n      var container = _this.dropdownContainerRef;\n\n      if (!container || !document.body) {\n        return;\n      }\n\n      container.scrollTop = country.offsetTop;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"formatNumber\", function (text, patternArg) {\n      var _this$props = _this.props,\n          disableCountryCode = _this$props.disableCountryCode,\n          enableLongNumbers = _this$props.enableLongNumbers,\n          autoFormat = _this$props.autoFormat;\n      var pattern;\n\n      if (disableCountryCode && patternArg) {\n        pattern = patternArg.split(' ');\n        pattern.shift();\n        pattern = pattern.join(' ');\n      } else {\n        pattern = patternArg;\n      }\n\n      if (!text || text.length === 0) {\n        return disableCountryCode ? '' : '+';\n      } // for all strings with length less than 3, just return it (1, 2 etc.)\n      // also return the same text if the selected country has no fixed format\n\n\n      if (text && text.length < 2 || !pattern || !autoFormat) {\n        return disableCountryCode ? text : \"+\".concat(text);\n      }\n\n      var formattedObject = reduce(pattern, function (acc, character) {\n        if (acc.remainingText.length === 0) {\n          return acc;\n        }\n\n        if (character !== '.') {\n          return {\n            formattedText: acc.formattedText + character,\n            remainingText: acc.remainingText\n          };\n        }\n\n        return {\n          formattedText: acc.formattedText + head(acc.remainingText),\n          remainingText: tail(acc.remainingText)\n        };\n      }, {\n        formattedText: '',\n        remainingText: text.split('')\n      });\n      var formattedNumber;\n\n      if (enableLongNumbers) {\n        formattedNumber = formattedObject.formattedText + formattedObject.remainingText.join('');\n      } else {\n        formattedNumber = formattedObject.formattedText;\n      } // Always close brackets\n\n\n      if (formattedNumber.includes('(') && !formattedNumber.includes(')')) formattedNumber += ')';\n      return formattedNumber;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cursorToEnd\", function () {\n      var isModernBrowser = _this.props.isModernBrowser;\n      var input = _this.inputRef;\n      input.focus();\n\n      if (isModernBrowser) {\n        var len = input.value.length;\n        input.setSelectionRange(len, len);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getElement\", function (index) {\n      return _this.flags[\"flag_no_\".concat(index)];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCountryData\", function () {\n      var selectedCountry = _this.state.selectedCountry;\n      if (!selectedCountry) return {};\n      return {\n        name: selectedCountry.name || '',\n        dialCode: selectedCountry.dialCode || '',\n        countryCode: selectedCountry.iso2 || ''\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInput\", function (e) {\n      var _this$state = _this.state,\n          newSelectedCountry = _this$state.selectedCountry,\n          freezeSelection = _this$state.freezeSelection;\n      var _this$state2 = _this.state,\n          selectedCountry = _this$state2.selectedCountry,\n          oldFormattedText = _this$state2.formattedNumber,\n          onlyCountries = _this$state2.onlyCountries,\n          defaultCountry = _this$state2.defaultCountry;\n      var _this$props2 = _this.props,\n          disableCountryCode = _this$props2.disableCountryCode,\n          countryCodeEditable = _this$props2.countryCodeEditable,\n          isModernBrowser = _this$props2.isModernBrowser,\n          onChange = _this$props2.onChange;\n      var formattedNumber = disableCountryCode ? '' : '+';\n\n      if (!countryCodeEditable) {\n        var updatedInput = \"+\".concat(newSelectedCountry.dialCode);\n\n        if (e.target.value.length < updatedInput.length) {\n          return;\n        }\n      } // Does not exceed 15 digit phone number limit\n\n\n      if (e.target.value.replace(/\\D/g, '').length > 15) {\n        return;\n      } // if the input is the same as before, must be some special key like enter etc.\n\n\n      if (e.target.value === oldFormattedText) {\n        return;\n      } // ie hack\n\n\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n\n      if (e.target.value.length > 0) {\n        // before entering the number in new format, lets check if the dial code now matches some other country\n        var inputNumber = e.target.value.replace(/\\D/g, ''); // we don't need to send the whole number to guess the country... only the first 6 characters are enough\n        // the guess country function can then use memoization much more effectively since the set of input it\n        // gets has drastically reduced\n\n        if (!freezeSelection || selectedCountry.dialCode.length > inputNumber.length) {\n          newSelectedCountry = _this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);\n          freezeSelection = false;\n        } // let us remove all non numerals from the input\n\n\n        formattedNumber = _this.formatNumber(inputNumber, newSelectedCountry.format);\n      }\n\n      var caretPosition = e.target.selectionStart;\n      var diff = formattedNumber.length - oldFormattedText.length;\n\n      _this.setState({\n        formattedNumber: formattedNumber,\n        freezeSelection: freezeSelection,\n        selectedCountry: newSelectedCountry.dialCode ? newSelectedCountry : selectedCountry\n      }, function () {\n        if (isModernBrowser) {\n          if (diff > 0) {\n            caretPosition -= diff;\n          }\n\n          var lastChar = formattedNumber.charAt(formattedNumber.length - 1);\n\n          if (lastChar === ')') {\n            _this.inputRef.setSelectionRange(formattedNumber.length - 1, formattedNumber.length - 1);\n          } else if (caretPosition > 0 && oldFormattedText.length >= formattedNumber.length) {\n            _this.inputRef.setSelectionRange(caretPosition, caretPosition);\n          }\n        }\n\n        if (onChange) {\n          onChange(formattedNumber, _this.getCountryData());\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRefInput\", function (ref) {\n      var _this$props3 = _this.props,\n          inputRef = _this$props3.inputRef,\n          InputProps = _this$props3.InputProps;\n      _this.inputRef = ref;\n      var refProp;\n\n      if (inputRef) {\n        refProp = inputRef;\n      } else if (InputProps && InputProps.ref) {\n        refProp = InputProps.ref;\n      }\n\n      if (refProp) {\n        if (typeof refProp === 'function') {\n          refProp(ref);\n        } else {\n          refProp.current = ref;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputClick\", function (e) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, _this.getCountryData());\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFlagItemClick\", function (country) {\n      var _this$state3 = _this.state,\n          formattedNumber = _this$state3.formattedNumber,\n          selectedCountry = _this$state3.selectedCountry,\n          onlyCountries = _this$state3.onlyCountries;\n      var onChange = _this.props.onChange;\n      var currentSelectedCountry = selectedCountry;\n      var nextSelectedCountry = isString(country) ? find(onlyCountries, function (countryItem) {\n        return countryItem.iso2 === country;\n      }) : find(onlyCountries, country);\n      var unformattedNumber = formattedNumber.replace(' ', '').replace('(', '').replace(')', '').replace('-', '');\n      var newNumber = unformattedNumber.length > 1 ? unformattedNumber.replace(currentSelectedCountry.dialCode, nextSelectedCountry.dialCode) : nextSelectedCountry.dialCode;\n\n      var newFormattedNumber = _this.formatNumber(newNumber.replace(/\\D/g, ''), nextSelectedCountry.format);\n\n      _this.setState({\n        anchorEl: null,\n        selectedCountry: nextSelectedCountry,\n        freezeSelection: true,\n        formattedNumber: newFormattedNumber\n      }, function () {\n        _this.cursorToEnd();\n\n        if (onChange) {\n          onChange(newFormattedNumber, _this.getCountryData());\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputFocus\", function (e) {\n      var selectedCountry = _this.state.selectedCountry;\n      var _this$props4 = _this.props,\n          disableCountryCode = _this$props4.disableCountryCode,\n          onFocus = _this$props4.onFocus; // if the input is blank, insert dial code of the selected country\n\n      if (_this.inputRef) {\n        if (_this.inputRef.value === '+' && selectedCountry && !disableCountryCode) {\n          _this.setState({\n            formattedNumber: \"+\".concat(selectedCountry.dialCode)\n          }, function () {\n            return setTimeout(_this.cursorToEnd, 10);\n          });\n        }\n      }\n\n      _this.setState({\n        placeholder: ''\n      });\n\n      if (onFocus) {\n        onFocus(e, _this.getCountryData());\n      }\n\n      setTimeout(_this.cursorToEnd, 10);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputBlur\", function (e) {\n      var _this$props5 = _this.props,\n          placeholder = _this$props5.placeholder,\n          onBlur = _this$props5.onBlur;\n\n      if (!e.target.value) {\n        _this.setState({\n          placeholder: placeholder\n        });\n      }\n\n      if (onBlur) {\n        onBlur(e, _this.getCountryData());\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getHighlightCountryIndex\", function (direction) {\n      var _this$state4 = _this.state,\n          oldHighlightCountryIndex = _this$state4.highlightCountryIndex,\n          onlyCountries = _this$state4.onlyCountries,\n          preferredCountries = _this$state4.preferredCountries; // had to write own function because underscore does not have findIndex. lodash has it\n\n      var highlightCountryIndex = oldHighlightCountryIndex + direction;\n\n      if (highlightCountryIndex < 0 || highlightCountryIndex >= onlyCountries.length + preferredCountries.length) {\n        return highlightCountryIndex - direction;\n      }\n\n      return highlightCountryIndex;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"searchCountry\", function () {\n      var _this$state5 = _this.state,\n          queryString = _this$state5.queryString,\n          onlyCountries = _this$state5.onlyCountries,\n          preferredCountries = _this$state5.preferredCountries;\n      var probableCandidate = _this.getProbableCandidate(queryString) || onlyCountries[0];\n      var probableCandidateIndex = findIndex(onlyCountries, probableCandidate) + preferredCountries.length;\n\n      _this.scrollTo(_this.getElement(probableCandidateIndex), true);\n\n      _this.setState({\n        queryString: '',\n        highlightCountryIndex: probableCandidateIndex\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeydown\", function (e) {\n      var _this$state6 = _this.state,\n          anchorEl = _this$state6.anchorEl,\n          highlightCountryIndex = _this$state6.highlightCountryIndex,\n          preferredCountries = _this$state6.preferredCountries,\n          onlyCountries = _this$state6.onlyCountries,\n          queryString = _this$state6.queryString,\n          debouncedQueryStingSearcher = _this$state6.debouncedQueryStingSearcher;\n      var _this$props6 = _this.props,\n          keys = _this$props6.keys,\n          disabled = _this$props6.disabled;\n      if (!anchorEl || disabled) return; // ie hack\n\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n\n      var moveHighlight = function moveHighlight(direction) {\n        _this.setState({\n          highlightCountryIndex: _this.getHighlightCountryIndex(direction)\n        }, function () {\n          _this.scrollTo(_this.getElement(highlightCountryIndex + preferredCountries.length), true);\n        });\n      };\n\n      switch (e.which) {\n        case keys.DOWN:\n          moveHighlight(1);\n          break;\n\n        case keys.UP:\n          moveHighlight(-1);\n          break;\n\n        case keys.ENTER:\n          _this.handleFlagItemClick(onlyCountries[highlightCountryIndex], e);\n\n          break;\n\n        case keys.ESC:\n          _this.setState({\n            anchorEl: null\n          }, _this.cursorToEnd);\n\n          break;\n\n        default:\n          if (e.which >= keys.A && e.which <= keys.Z || e.which === keys.SPACE) {\n            _this.setState({\n              queryString: queryString + String.fromCharCode(e.which)\n            }, debouncedQueryStingSearcher);\n          }\n\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputKeyDown\", function (e) {\n      var _this$props7 = _this.props,\n          keys = _this$props7.keys,\n          onEnterKeyPress = _this$props7.onEnterKeyPress,\n          onKeyDown = _this$props7.onKeyDown;\n\n      if (e.which === keys.ENTER && onEnterKeyPress) {\n        onEnterKeyPress(e);\n      }\n\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIfValid\", function () {\n      var formattedNumber = _this.state.formattedNumber;\n      var isValid = _this.props.isValid;\n      return isValid(formattedNumber.replace(/\\D/g, ''));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateFormattedNumber\", function (number) {\n      var _this$state7 = _this.state,\n          onlyCountries = _this$state7.onlyCountries,\n          defaultCountry = _this$state7.defaultCountry;\n      var disableCountryCode = _this.props.disableCountryCode;\n      var countryGuess;\n      var inputNumber = number;\n      var formattedNumber = number; // if inputNumber does not start with '+', then use default country's dialing prefix,\n      // otherwise use logic for finding country based on country prefix.\n\n      if (inputNumber.startsWith('00')) {\n        inputNumber = inputNumber.replace('00', '+');\n      }\n\n      if (!inputNumber.startsWith('+')) {\n        countryGuess = find(onlyCountries, {\n          iso2: defaultCountry\n        });\n        var dialCode = countryGuess && !startsWith(inputNumber.replace(/\\D/g, ''), countryGuess.dialCode) ? countryGuess.dialCode : '';\n        formattedNumber = _this.formatNumber((disableCountryCode ? '' : dialCode) + inputNumber.replace(/\\D/g, ''), countryGuess ? countryGuess.format : undefined);\n      } else {\n        inputNumber = inputNumber.replace(/\\D/g, '');\n        countryGuess = _this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);\n        formattedNumber = _this.formatNumber(inputNumber, countryGuess.format);\n      }\n\n      _this.setState({\n        selectedCountry: countryGuess,\n        formattedNumber: formattedNumber\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDropdownProps\", function () {\n      var _this$state8 = _this.state,\n          selectedCountry = _this$state8.selectedCountry,\n          anchorEl = _this$state8.anchorEl,\n          preferredCountries = _this$state8.preferredCountries,\n          onlyCountries = _this$state8.onlyCountries;\n      var _this$props8 = _this.props,\n          classes = _this$props8.classes,\n          dropdownClass = _this$props8.dropdownClass,\n          localization = _this$props8.localization,\n          disableDropdown = _this$props8.disableDropdown,\n          _native = _this$props8[\"native\"];\n      var inputFlagClasses = \"flag \".concat(selectedCountry.iso2);\n\n      var isSelected = function isSelected(country) {\n        return Boolean(selectedCountry && selectedCountry.dialCode === country.dialCode);\n      };\n\n      var dropdownProps = disableDropdown ? {} : {\n        startAdornment: __jsx(InputAdornment, {\n          className: classes.positionStart,\n          position: \"start\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 17\n          }\n        }, _native ? __jsx(React.Fragment, null, __jsx(NativeSelect, {\n          id: \"country-menu\",\n          open: Boolean(anchorEl),\n          onClose: function onClose() {\n            return _this.setState({\n              anchorEl: null\n            });\n          },\n          className: classes[\"native\"],\n          classes: {\n            root: clsx(classes.nativeRoot, 'native', inputFlagClasses),\n            select: classes.nativeSelect\n          },\n          onChange: function onChange(e) {\n            return _this.handleFlagItemClick(e.target.value);\n          },\n          disableUnderline: true,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 33\n          }\n        }, !!preferredCountries.length && map(preferredCountries, function (country, index) {\n          return __jsx(Item, {\n            key: \"preferred_\".concat(country.iso2, \"_\").concat(index),\n            itemRef: function itemRef(node) {\n              _this.flags[\"flag_no_\".concat(index)] = node;\n            },\n            name: country.name,\n            iso2: country.iso2,\n            dialCode: country.dialCode,\n            localization: localization && localization[country.name],\n            \"native\": true,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 41\n            }\n          });\n        }), map(onlyCountries, function (country, index) {\n          return __jsx(Item, {\n            key: \"preferred_\".concat(country.iso2, \"_\").concat(index),\n            itemRef: function itemRef(node) {\n              _this.flags[\"flag_no_\".concat(index)] = node;\n            },\n            name: country.name,\n            iso2: country.iso2,\n            dialCode: country.dialCode,\n            localization: localization && localization[country.name],\n            \"native\": true,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 41\n            }\n          });\n        }))) : __jsx(React.Fragment, null, __jsx(Button, {\n          className: classes.flagButton,\n          \"aria-owns\": anchorEl ? 'country-menu' : null,\n          \"aria-label\": \"Select country\",\n          onClick: function onClick(e) {\n            return _this.setState({\n              anchorEl: e.currentTarget\n            });\n          },\n          \"aria-haspopup\": true,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 33\n          }\n        }, __jsx(\"div\", {\n          className: inputFlagClasses,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 37\n          }\n        })), __jsx(Menu, {\n          keepMounted: true,\n          className: dropdownClass,\n          id: \"country-menu\",\n          anchorEl: anchorEl,\n          open: Boolean(anchorEl),\n          onClose: function onClose() {\n            return _this.setState({\n              anchorEl: null\n            });\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 33\n          }\n        }, !!preferredCountries.length && map(preferredCountries, function (country, index) {\n          return __jsx(Item, {\n            key: \"preferred_\".concat(country.iso2, \"_\").concat(index),\n            itemRef: function itemRef(node) {\n              _this.flags[\"flag_no_\".concat(index)] = node;\n            },\n            selected: isSelected(country),\n            onClick: function onClick() {\n              return _this.handleFlagItemClick(country);\n            },\n            name: country.name,\n            iso2: country.iso2,\n            dialCode: country.dialCode,\n            localization: localization && localization[country.name],\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 41\n            }\n          });\n        }), !!preferredCountries.length && __jsx(Divider, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 69\n          }\n        }), map(onlyCountries, function (country, index) {\n          return __jsx(Item, {\n            key: \"preferred_\".concat(country.iso2, \"_\").concat(index),\n            itemRef: function itemRef(node) {\n              _this.flags[\"flag_no_\".concat(index)] = node;\n            },\n            selected: isSelected(country),\n            onClick: function onClick() {\n              return _this.handleFlagItemClick(country);\n            },\n            name: country.name,\n            iso2: country.iso2,\n            dialCode: country.dialCode,\n            localization: localization && localization[country.name],\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 41\n            }\n          });\n        }))))\n      };\n      return dropdownProps;\n    });\n\n    var _filteredCountries = countryData.allCountries;\n    if (props.disableAreaCodes) _filteredCountries = _this.deleteAreaCodes(_filteredCountries);\n    if (props.regions) _filteredCountries = _this.filterRegions(props.regions, _filteredCountries);\n\n    var _onlyCountries = _this.excludeCountries(_this.getOnlyCountries(props.onlyCountries, _filteredCountries), props.excludeCountries);\n\n    var _preferredCountries = filter(_filteredCountries, function (country) {\n      return some(props.preferredCountries, function (preferredCountry) {\n        return preferredCountry === country.iso2;\n      });\n    });\n\n    var _inputNumber = props.value || '';\n\n    if (_inputNumber.startsWith('00')) {\n      _inputNumber = _inputNumber.replace('00', '+');\n    }\n\n    var _countryGuess;\n\n    if (_inputNumber.length > 1) {\n      // Country detect by value field\n      _countryGuess = _this.guessSelectedCountry(_inputNumber.replace(/\\D/g, '').substring(0, 6), _onlyCountries, props.defaultCountry) || 0;\n    } else if (props.defaultCountry) {\n      // Default country\n      _countryGuess = find(_onlyCountries, {\n        iso2: props.defaultCountry\n      }) || 0;\n    } else {\n      // Empty params\n      _countryGuess = 0;\n    }\n\n    var countryGuessIndex = findIndex(_this.allCountries, _countryGuess);\n\n    var _dialCode = _inputNumber.length < 2 && _countryGuess && !startsWith(_inputNumber.replace(/\\D/g, ''), _countryGuess.dialCode) ? _countryGuess.dialCode : '';\n\n    var _formattedNumber = _inputNumber === '' && _countryGuess === 0 ? '' : _this.formatNumber((props.disableCountryCode ? '' : _dialCode) + _inputNumber.replace(/\\D/g, ''), _countryGuess.name ? _countryGuess.format : undefined);\n\n    _this.state = {\n      formattedNumber: _formattedNumber,\n      placeholder: props.placeholder,\n      onlyCountries: _onlyCountries,\n      preferredCountries: _preferredCountries,\n      defaultCountry: props.defaultCountry,\n      selectedCountry: _countryGuess,\n      highlightCountryIndex: countryGuessIndex,\n      queryString: '',\n      freezeSelection: false,\n      debouncedQueryStingSearcher: debounce(_this.searchCountry, 100),\n      anchorEl: null\n    };\n    return _this;\n  }\n\n  _createClass(PhoneInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (document.addEventListener) {\n        document.addEventListener('keydown', this.handleKeydown);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var prevValue = _ref.value;\n      var _this$state9 = this.state,\n          prevDefaultCountry = _this$state9.defaultCountry,\n          formattedNumber = _this$state9.formattedNumber,\n          onlyCountries = _this$state9.onlyCountries;\n      var _this$props9 = this.props,\n          defaultCountry = _this$props9.defaultCountry,\n          value = _this$props9.value;\n      var isDefCountryUpd = false;\n      var countryGuess = this.guessSelectedCountry(value && value.length > 0 ? value.substring(0, 6) : '', onlyCountries, defaultCountry);\n\n      if (countryGuess && countryGuess.iso2) {\n        isDefCountryUpd = false;\n      } else {\n        isDefCountryUpd = true;\n      }\n\n      if (isDefCountryUpd && defaultCountry && defaultCountry !== prevDefaultCountry) {\n        this.updateDefaultCountry(defaultCountry);\n      }\n\n      if (typeof value === 'string' && value !== prevValue && value !== formattedNumber) {\n        this.updateFormattedNumber(value);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (document.removeEventListener) {\n        document.removeEventListener('keydown', this.handleKeydown);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state10 = this.state,\n          formattedNumber = _this$state10.formattedNumber,\n          statePlaceholder = _this$state10.placeholder;\n\n      var _this$props10 = this.props,\n          _native2 = _this$props10[\"native\"],\n          defaultCountry = _this$props10.defaultCountry,\n          excludeCountries = _this$props10.excludeCountries,\n          onlyCountries = _this$props10.onlyCountries,\n          preferredCountries = _this$props10.preferredCountries,\n          dropdownClass = _this$props10.dropdownClass,\n          autoFormat = _this$props10.autoFormat,\n          disableAreaCodes = _this$props10.disableAreaCodes,\n          isValid = _this$props10.isValid,\n          disableCountryCode = _this$props10.disableCountryCode,\n          disableDropdown = _this$props10.disableDropdown,\n          enableLongNumbers = _this$props10.enableLongNumbers,\n          countryCodeEditable = _this$props10.countryCodeEditable,\n          onEnterKeyPress = _this$props10.onEnterKeyPress,\n          isModernBrowser = _this$props10.isModernBrowser,\n          classes = _this$props10.classes,\n          keys = _this$props10.keys,\n          localization = _this$props10.localization,\n          placeholder = _this$props10.placeholder,\n          regions = _this$props10.regions,\n          onChange = _this$props10.onChange,\n          value = _this$props10.value,\n          inputClass = _this$props10.inputClass,\n          error = _this$props10.error,\n          InputProps = _this$props10.InputProps,\n          restProps = _objectWithoutProperties(_this$props10, [\"native\", \"defaultCountry\", \"excludeCountries\", \"onlyCountries\", \"preferredCountries\", \"dropdownClass\", \"autoFormat\", \"disableAreaCodes\", \"isValid\", \"disableCountryCode\", \"disableDropdown\", \"enableLongNumbers\", \"countryCodeEditable\", \"onEnterKeyPress\", \"isModernBrowser\", \"classes\", \"keys\", \"localization\", \"placeholder\", \"regions\", \"onChange\", \"value\", \"inputClass\", \"error\", \"InputProps\"]);\n\n      var dropdownProps = this.getDropdownProps();\n      return __jsx(TextField, _extends({\n        placeholder: statePlaceholder,\n        value: formattedNumber,\n        className: inputClass,\n        inputRef: this.handleRefInput,\n        error: error || !this.checkIfValid(),\n        onChange: this.handleInput,\n        onClick: this.handleInputClick,\n        onFocus: this.handleInputFocus,\n        onBlur: this.handleInputBlur,\n        onKeyDown: this.handleInputKeyDown,\n        type: \"tel\",\n        InputProps: _objectSpread(_objectSpread({}, dropdownProps), InputProps)\n      }, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return PhoneInput;\n}(React.Component);\n\nPhoneInput.propTypes = {\n  classes: PropTypes.object,\n  excludeCountries: PropTypes.arrayOf(PropTypes.string),\n  onlyCountries: PropTypes.arrayOf(PropTypes.string),\n  preferredCountries: PropTypes.arrayOf(PropTypes.string),\n  defaultCountry: PropTypes.string,\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  variant: PropTypes.string,\n  \"native\": PropTypes.bool,\n  inputClass: PropTypes.string,\n  dropdownClass: PropTypes.string,\n  InputProps: PropTypes.object,\n  inputProps: PropTypes.object,\n  inputRef: PropTypes.func,\n  autoFormat: PropTypes.bool,\n  disableAreaCodes: PropTypes.bool,\n  disableCountryCode: PropTypes.bool,\n  disableDropdown: PropTypes.bool,\n  enableLongNumbers: PropTypes.bool,\n  countryCodeEditable: PropTypes.bool,\n  regions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  localization: PropTypes.object,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  isValid: PropTypes.func,\n  isModernBrowser: PropTypes.func,\n  onEnterKeyPress: PropTypes.func,\n  keys: PropTypes.object\n};\nPhoneInput.defaultProps = {\n  classes: {},\n  excludeCountries: [],\n  onlyCountries: [],\n  preferredCountries: [],\n  defaultCountry: '',\n  placeholder: '+1 (702) 123-4567',\n  disabled: false,\n  error: false,\n  variant: 'standard',\n  \"native\": false,\n  inputClass: '',\n  dropdownClass: '',\n  autoFormat: true,\n  disableAreaCodes: false,\n  isValid: function isValid(inputNumber) {\n    return some(countryData.allCountries, function (country) {\n      return startsWith(inputNumber, country.dialCode) || startsWith(country.dialCode, inputNumber);\n    });\n  },\n  disableCountryCode: false,\n  disableDropdown: false,\n  enableLongNumbers: true,\n  countryCodeEditable: true,\n  regions: '',\n  localization: {},\n  onEnterKeyPress: function onEnterKeyPress() {},\n  onChange: function onChange() {},\n  isModernBrowser: function isModernBrowser() {\n    return document.createElement ? Boolean(document.createElement('input').setSelectionRange) : false;\n  },\n  keys: {\n    UP: 38,\n    DOWN: 40,\n    RIGHT: 39,\n    LEFT: 37,\n    ENTER: 13,\n    ESC: 27,\n    PLUS: 43,\n    A: 65,\n    Z: 90,\n    SPACE: 32\n  }\n};\nPhoneInput.displayName = 'PhoneInput';\nexport default withStyles(style)(PhoneInput);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/@webcms-ui/core/phone-input/index.js"],"names":["React","PropTypes","clsx","TextField","InputAdornment","Button","Menu","Divider","NativeSelect","withStyles","some","find","reduce","map","filter","includes","findIndex","head","tail","debounce","memoize","trim","startsWith","isString","countryData","Item","style","flagButton","minWidth","padding","height","width","nativeRoot","display","nativeSelect","lineHeight","positionStart","position","PhoneInput","props","inputNumber","onlyCountries","defaultCountry","secondBestGuess","iso2","bestGuess","selectedCountry","country","dialCode","length","priority","name","queryString","state","probableCountries","toLowerCase","onlyCountriesArray","filteredCountries","element","selectedCountries","excludedCountries","selCountry","regions","region","matches","el","isAreaCode","disableCountryCode","newSelectedCountry","setState","formattedNumber","container","dropdownContainerRef","document","body","scrollTop","offsetTop","text","patternArg","enableLongNumbers","autoFormat","pattern","split","shift","join","formattedObject","acc","character","remainingText","formattedText","isModernBrowser","input","inputRef","focus","len","value","setSelectionRange","index","flags","countryCode","e","freezeSelection","oldFormattedText","countryCodeEditable","onChange","updatedInput","target","replace","preventDefault","returnValue","guessSelectedCountry","substring","formatNumber","format","caretPosition","selectionStart","diff","lastChar","charAt","getCountryData","ref","InputProps","refProp","current","onClick","currentSelectedCountry","nextSelectedCountry","countryItem","unformattedNumber","newNumber","newFormattedNumber","anchorEl","cursorToEnd","onFocus","setTimeout","placeholder","onBlur","direction","oldHighlightCountryIndex","highlightCountryIndex","preferredCountries","probableCandidate","getProbableCandidate","probableCandidateIndex","scrollTo","getElement","debouncedQueryStingSearcher","keys","disabled","moveHighlight","getHighlightCountryIndex","which","DOWN","UP","ENTER","handleFlagItemClick","ESC","A","Z","SPACE","String","fromCharCode","onEnterKeyPress","onKeyDown","isValid","number","countryGuess","undefined","classes","dropdownClass","localization","disableDropdown","native","inputFlagClasses","isSelected","Boolean","dropdownProps","startAdornment","root","select","node","currentTarget","allCountries","disableAreaCodes","deleteAreaCodes","filterRegions","excludeCountries","getOnlyCountries","preferredCountry","countryGuessIndex","searchCountry","addEventListener","handleKeydown","prevValue","prevDefaultCountry","isDefCountryUpd","updateDefaultCountry","updateFormattedNumber","removeEventListener","statePlaceholder","inputClass","error","restProps","getDropdownProps","handleRefInput","checkIfValid","handleInput","handleInputClick","handleInputFocus","handleInputBlur","handleInputKeyDown","Component","propTypes","object","arrayOf","string","bool","variant","inputProps","func","oneOfType","defaultProps","createElement","RIGHT","LEFT","PLUS","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SACIC,IADJ,EACUC,IADV,EACgBC,MADhB,EACwBC,GADxB,EAC6BC,MAD7B,EACqCC,QADrC,EAC+CC,SAD/C,EAEIC,IAFJ,EAEUC,IAFV,EAEgBC,QAFhB,EAE0BC,OAF1B,EAEmCC,IAFnC,EAEyCC,UAFzC,EAEqDC,QAFrD,QAGO,QAHP;AAIA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,UAAU,EAAE;AACRC,IAAAA,QAAQ,EAAE,EADF;AAERC,IAAAA,OAAO,EAAE,CAFD;AAGRC,IAAAA,MAAM,EAAE;AAHA,GADF;AAMV,YAAQ;AACJC,IAAAA,KAAK,EAAE,EADH;AAEJD,IAAAA,MAAM,EAAE,EAFJ;AAGJD,IAAAA,OAAO,EAAE;AAHL,GANE;AAWVG,EAAAA,UAAU,EAAE;AACRH,IAAAA,OAAO,EAAE,CADD;AAER,eAAW;AACPI,MAAAA,OAAO,EAAE;AADF;AAFH,GAXF;AAiBVC,EAAAA,YAAY,EAAE;AACVL,IAAAA,OAAO,EAAE,CADC;AAEVM,IAAAA,UAAU,EAAE,CAFF;AAGVL,IAAAA,MAAM,EAAE;AAHE,GAjBJ;AAsBVM,EAAAA,aAAa,EAAE;AACXC,IAAAA,QAAQ,EAAE;AADC;AAtBL,CAAd;;IA2BMC,U;;;;;AAsBF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,4DArBX,EAqBW;;AAAA,2EApBInB,OAAO,CAAC,UAACoB,WAAD,EAAcC,aAAd,EAA6BC,cAA7B,EAAgD;AAC3E,UAAMC,eAAe,GAAGhC,IAAI,CAAC8B,aAAD,EAAgB;AAAEG,QAAAA,IAAI,EAAEF;AAAR,OAAhB,CAAJ,IAAiD,EAAzE;AACA,UAAIrB,IAAI,CAACmB,WAAD,CAAJ,KAAsB,EAA1B,EAA8B,OAAOG,eAAP;AAE9B,UAAME,SAAS,GAAGjC,MAAM,CAAC6B,aAAD,EAAgB,UAACK,eAAD,EAAkBC,OAAlB,EAA8B;AAClE,YAAIzB,UAAU,CAACkB,WAAD,EAAcO,OAAO,CAACC,QAAtB,CAAd,EAA+C;AAC3C,cAAID,OAAO,CAACC,QAAR,CAAiBC,MAAjB,GAA0BH,eAAe,CAACE,QAAhB,CAAyBC,MAAvD,EAA+D;AAC3D,mBAAOF,OAAP;AACH;;AACD,cAAIA,OAAO,CAACC,QAAR,CAAiBC,MAAjB,KAA4BH,eAAe,CAACE,QAAhB,CAAyBC,MAArD,IAA+DF,OAAO,CAACG,QAAR,GAAmBJ,eAAe,CAACI,QAAtG,EAAgH;AAC5G,mBAAOH,OAAP;AACH;AACJ;;AACD,eAAOD,eAAP;AACH,OAVuB,EAUrB;AAAEE,QAAAA,QAAQ,EAAE,EAAZ;AAAgBE,QAAAA,QAAQ,EAAE;AAA1B,OAVqB,gCAAxB;AAYA,UAAI,CAACL,SAAS,CAACM,IAAf,EAAqB,OAAOR,eAAP;AACrB,aAAOE,SAAP;AACH,KAlB6B,CAoBX;;AAAA,2EA2FIzB,OAAO,CAAC,UAACgC,WAAD,EAAiB;AAC5C,UAAI,CAACA,WAAD,IAAgBA,WAAW,CAACH,MAAZ,KAAuB,CAA3C,EAA8C;AAC1C,eAAO,IAAP;AACH;;AAH2C,UAKpCR,aALoC,GAKlB,MAAKY,KALa,CAKpCZ,aALoC,EAO5C;;AACA,UAAMa,iBAAiB,GAAGxC,MAAM,CAAC2B,aAAD,EAAgB,UAACM,OAAD;AAAA,eAAazB,UAAU,CAACyB,OAAO,CAACI,IAAR,CAAaI,WAAb,EAAD,EAA6BH,WAAW,CAACG,WAAZ,EAA7B,CAAvB;AAAA,OAAhB,gCAAhC;AACA,aAAOD,iBAAiB,CAAC,CAAD,CAAxB;AACH,KAV6B,CA3FX;;AAAA,uEAuGA,UAACE,kBAAD,EAAqBC,iBAArB,EAA2C;AAC1D,UAAID,kBAAkB,CAACP,MAAnB,KAA8B,CAAlC,EAAqC,OAAOQ,iBAAP;AAErC,aAAOA,iBAAiB,CAAC3C,MAAlB,CAAyB,UAACiC,OAAD;AAAA,eAAaS,kBAAkB,CAAC9C,IAAnB,CAAwB,UAACgD,OAAD;AAAA,iBAAaA,OAAO,KAAKX,OAAO,CAACH,IAAjC;AAAA,SAAxB,CAAb;AAAA,OAAzB,CAAP;AACH,KA3GkB;;AAAA,uEA6GA,UAACe,iBAAD,EAAoBC,iBAApB,EAA0C;AACzD,UAAIA,iBAAiB,CAACX,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,eAAOU,iBAAP;AACH;;AACD,aAAO7C,MAAM,CAAC6C,iBAAD,EAAoB,UAACE,UAAD;AAAA,eAAgB,CAAC9C,QAAQ,CAAC6C,iBAAD,EAAoBC,UAAU,CAACjB,IAA/B,CAAzB;AAAA,OAApB,CAAb;AACH,KAlHkB;;AAAA,oEAoHH,UAACkB,OAAD,EAAUL,iBAAV,EAAgC;AAC5C,UAAI,OAAOK,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,YAAMC,MAAM,GAAGD,OAAf;AACA,eAAOL,iBAAiB,CAAC3C,MAAlB,CAAyB,UAACiC,OAAD;AAAA,iBAAaA,OAAO,CAACe,OAAR,CAAgBpD,IAAhB,CAAqB,UAACgD,OAAD;AAAA,mBAAaA,OAAO,KAAKK,MAAzB;AAAA,WAArB,CAAb;AAAA,SAAzB,CAAP;AACH;;AAED,aAAON,iBAAiB,CAAC3C,MAAlB,CAAyB,UAACiC,OAAD,EAAa;AACzC,YAAMiB,OAAO,GAAGF,OAAO,CAACjD,GAAR,CAAY,UAACkD,MAAD;AAAA,iBAAYhB,OAAO,CAACe,OAAR,CAAgBpD,IAAhB,CAAqB,UAACgD,OAAD;AAAA,mBAAaA,OAAO,KAAKK,MAAzB;AAAA,WAArB,CAAZ;AAAA,SAAZ,CAAhB;AACA,eAAOC,OAAO,CAACtD,IAAR,CAAa,UAACuD,EAAD;AAAA,iBAAQA,EAAR;AAAA,SAAb,CAAP;AACH,OAHM,CAAP;AAIH,KA9HkB;;AAAA,sEAiID,UAACR,iBAAD;AAAA,aAAuBA,iBAAiB,CAAC3C,MAAlB,CAAyB,UAACiC,OAAD;AAAA,eAAaA,OAAO,CAACmB,UAAR,KAAuB,IAApC;AAAA,OAAzB,CAAvB;AAAA,KAjIC;;AAAA,2EAoII,UAACnB,OAAD,EAAa;AAAA,UACxBN,aADwB,GACN,MAAKY,KADC,CACxBZ,aADwB;AAAA,UAExB0B,kBAFwB,GAED,MAAK5B,KAFJ,CAExB4B,kBAFwB;AAIhC,UAAMC,kBAAkB,GAAGzD,IAAI,CAAC8B,aAAD,EAAgB;AAAEG,QAAAA,IAAI,EAAEG;AAAR,OAAhB,CAA/B;;AACA,UAAGqB,kBAAH,EAAuB;AACnB,cAAKC,QAAL,CAAc;AACV3B,UAAAA,cAAc,EAAEK,OADN;AAEVD,UAAAA,eAAe,EAAEsB,kBAFP;AAGVE,UAAAA,eAAe,EAAEH,kBAAkB,GAAG,EAAH,cAAYC,kBAAkB,CAACpB,QAA/B;AAHzB,SAAd;AAKH;AAEJ,KAjJkB;;AAAA,+DAoJR,UAACD,OAAD,EAAa;AACpB,UAAI,CAACA,OAAL,EAAc;AAAE;AAAS;;AAEzB,UAAMwB,SAAS,GAAG,MAAKC,oBAAvB;;AAEA,UAAI,CAACD,SAAD,IAAc,CAACE,QAAQ,CAACC,IAA5B,EAAkC;AAAE;AAAS;;AAC7CH,MAAAA,SAAS,CAACI,SAAV,GAAsB5B,OAAO,CAAC6B,SAA9B;AACH,KA3JkB;;AAAA,mEA6JJ,UAACC,IAAD,EAAOC,UAAP,EAAsB;AAAA,wBAC6B,MAAKvC,KADlC;AAAA,UACzB4B,kBADyB,eACzBA,kBADyB;AAAA,UACLY,iBADK,eACLA,iBADK;AAAA,UACcC,UADd,eACcA,UADd;AAGjC,UAAIC,OAAJ;;AACA,UAAId,kBAAkB,IAAIW,UAA1B,EAAsC;AAClCG,QAAAA,OAAO,GAAGH,UAAU,CAACI,KAAX,CAAiB,GAAjB,CAAV;AACAD,QAAAA,OAAO,CAACE,KAAR;AACAF,QAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,GAAb,CAAV;AACH,OAJD,MAIO;AACHH,QAAAA,OAAO,GAAGH,UAAV;AACH;;AAED,UAAI,CAACD,IAAD,IAASA,IAAI,CAAC5B,MAAL,KAAgB,CAA7B,EAAgC;AAC5B,eAAOkB,kBAAkB,GAAG,EAAH,GAAQ,GAAjC;AACH,OAdgC,CAgBjC;AACA;;;AACA,UAAKU,IAAI,IAAIA,IAAI,CAAC5B,MAAL,GAAc,CAAvB,IAA6B,CAACgC,OAA9B,IAAyC,CAACD,UAA9C,EAA0D;AACtD,eAAOb,kBAAkB,GAAGU,IAAH,cAAcA,IAAd,CAAzB;AACH;;AAED,UAAMQ,eAAe,GAAGzE,MAAM,CAACqE,OAAD,EAAU,UAACK,GAAD,EAAMC,SAAN,EAAoB;AACxD,YAAID,GAAG,CAACE,aAAJ,CAAkBvC,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,iBAAOqC,GAAP;AACH;;AAED,YAAIC,SAAS,KAAK,GAAlB,EAAuB;AACnB,iBAAO;AACHE,YAAAA,aAAa,EAAEH,GAAG,CAACG,aAAJ,GAAoBF,SADhC;AAEHC,YAAAA,aAAa,EAAEF,GAAG,CAACE;AAFhB,WAAP;AAIH;;AAED,eAAO;AACHC,UAAAA,aAAa,EAAEH,GAAG,CAACG,aAAJ,GAAoBxE,IAAI,CAACqE,GAAG,CAACE,aAAL,CADpC;AAEHA,UAAAA,aAAa,EAAEtE,IAAI,CAACoE,GAAG,CAACE,aAAL;AAFhB,SAAP;AAIH,OAhB6B,EAgB3B;AACCC,QAAAA,aAAa,EAAE,EADhB;AAECD,QAAAA,aAAa,EAAEX,IAAI,CAACK,KAAL,CAAW,EAAX;AAFhB,OAhB2B,CAA9B;AAqBA,UAAIZ,eAAJ;;AACA,UAAIS,iBAAJ,EAAuB;AACnBT,QAAAA,eAAe,GAAGe,eAAe,CAACI,aAAhB,GAAgCJ,eAAe,CAACG,aAAhB,CAA8BJ,IAA9B,CAAmC,EAAnC,CAAlD;AACH,OAFD,MAEO;AACHd,QAAAA,eAAe,GAAGe,eAAe,CAACI,aAAlC;AACH,OAhDgC,CAkDjC;;;AACA,UAAInB,eAAe,CAACvD,QAAhB,CAAyB,GAAzB,KAAiC,CAACuD,eAAe,CAACvD,QAAhB,CAAyB,GAAzB,CAAtC,EAAqEuD,eAAe,IAAI,GAAnB;AACrE,aAAOA,eAAP;AACH,KAlNkB;;AAAA,kEAqNL,YAAM;AAAA,UACRoB,eADQ,GACY,MAAKnD,KADjB,CACRmD,eADQ;AAGhB,UAAMC,KAAK,GAAG,MAAKC,QAAnB;AACAD,MAAAA,KAAK,CAACE,KAAN;;AACA,UAAIH,eAAJ,EAAqB;AACjB,YAAMI,GAAG,GAAGH,KAAK,CAACI,KAAN,CAAY9C,MAAxB;AACA0C,QAAAA,KAAK,CAACK,iBAAN,CAAwBF,GAAxB,EAA6BA,GAA7B;AACH;AACJ,KA9NkB;;AAAA,iEAgON,UAACG,KAAD;AAAA,aAAW,MAAKC,KAAL,mBAAsBD,KAAtB,EAAX;AAAA,KAhOM;;AAAA,qEAmOF,YAAM;AAAA,UACXnD,eADW,GACS,MAAKO,KADd,CACXP,eADW;AAGnB,UAAI,CAACA,eAAL,EAAsB,OAAO,EAAP;AAEtB,aAAO;AACHK,QAAAA,IAAI,EAAEL,eAAe,CAACK,IAAhB,IAAwB,EAD3B;AAEHH,QAAAA,QAAQ,EAAEF,eAAe,CAACE,QAAhB,IAA4B,EAFnC;AAGHmD,QAAAA,WAAW,EAAErD,eAAe,CAACF,IAAhB,IAAwB;AAHlC,OAAP;AAKH,KA7OkB;;AAAA,kEA+OL,UAACwD,CAAD,EAAO;AAAA,wBAC8C,MAAK/C,KADnD;AAAA,UACMe,kBADN,eACXtB,eADW;AAAA,UAC0BuD,eAD1B,eAC0BA,eAD1B;AAAA,yBAIb,MAAKhD,KAJQ;AAAA,UAGbP,eAHa,gBAGbA,eAHa;AAAA,UAGqBwD,gBAHrB,gBAGIhC,eAHJ;AAAA,UAGuC7B,aAHvC,gBAGuCA,aAHvC;AAAA,UAGsDC,cAHtD,gBAGsDA,cAHtD;AAAA,yBAOb,MAAKH,KAPQ;AAAA,UAMb4B,kBANa,gBAMbA,kBANa;AAAA,UAMOoC,mBANP,gBAMOA,mBANP;AAAA,UAM4Bb,eAN5B,gBAM4BA,eAN5B;AAAA,UAM6Cc,QAN7C,gBAM6CA,QAN7C;AASjB,UAAIlC,eAAe,GAAGH,kBAAkB,GAAG,EAAH,GAAQ,GAAhD;;AAEA,UAAI,CAACoC,mBAAL,EAA0B;AACtB,YAAME,YAAY,cAAOrC,kBAAkB,CAACpB,QAA1B,CAAlB;;AACA,YAAIoD,CAAC,CAACM,MAAF,CAASX,KAAT,CAAe9C,MAAf,GAAwBwD,YAAY,CAACxD,MAAzC,EAAiD;AAC7C;AACH;AACJ,OAhBgB,CAkBjB;;;AACA,UAAImD,CAAC,CAACM,MAAF,CAASX,KAAT,CAAeY,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,EAAkC1D,MAAlC,GAA2C,EAA/C,EAAmD;AAC/C;AACH,OArBgB,CAuBjB;;;AACA,UAAImD,CAAC,CAACM,MAAF,CAASX,KAAT,KAAmBO,gBAAvB,EAAyC;AACrC;AACH,OA1BgB,CA4BjB;;;AACA,UAAIF,CAAC,CAACQ,cAAN,EAAsB;AAClBR,QAAAA,CAAC,CAACQ,cAAF;AACH,OAFD,MAEO;AACHR,QAAAA,CAAC,CAACS,WAAF,GAAgB,KAAhB;AACH;;AAED,UAAIT,CAAC,CAACM,MAAF,CAASX,KAAT,CAAe9C,MAAf,GAAwB,CAA5B,EAA+B;AAC3B;AACA,YAAMT,WAAW,GAAG4D,CAAC,CAACM,MAAF,CAASX,KAAT,CAAeY,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAApB,CAF2B,CAI3B;AACA;AACA;;AACA,YAAI,CAACN,eAAD,IAAoBvD,eAAe,CAACE,QAAhB,CAAyBC,MAAzB,GAAkCT,WAAW,CAACS,MAAtE,EAA8E;AAC1EmB,UAAAA,kBAAkB,GAAG,MAAK0C,oBAAL,CAA0BtE,WAAW,CAACuE,SAAZ,CAAsB,CAAtB,EAAyB,CAAzB,CAA1B,EAAuDtE,aAAvD,EAAsEC,cAAtE,CAArB;AACA2D,UAAAA,eAAe,GAAG,KAAlB;AACH,SAV0B,CAW3B;;;AACA/B,QAAAA,eAAe,GAAG,MAAK0C,YAAL,CAAkBxE,WAAlB,EAA+B4B,kBAAkB,CAAC6C,MAAlD,CAAlB;AACH;;AAED,UAAIC,aAAa,GAAGd,CAAC,CAACM,MAAF,CAASS,cAA7B;AACA,UAAMC,IAAI,GAAG9C,eAAe,CAACrB,MAAhB,GAAyBqD,gBAAgB,CAACrD,MAAvD;;AAEA,YAAKoB,QAAL,CAAc;AACVC,QAAAA,eAAe,EAAfA,eADU;AAEV+B,QAAAA,eAAe,EAAfA,eAFU;AAGVvD,QAAAA,eAAe,EAAEsB,kBAAkB,CAACpB,QAAnB,GACXoB,kBADW,GAEXtB;AALI,OAAd,EAMG,YAAM;AACL,YAAI4C,eAAJ,EAAqB;AACjB,cAAI0B,IAAI,GAAG,CAAX,EAAc;AACVF,YAAAA,aAAa,IAAIE,IAAjB;AACH;;AAED,cAAMC,QAAQ,GAAG/C,eAAe,CAACgD,MAAhB,CAAuBhD,eAAe,CAACrB,MAAhB,GAAyB,CAAhD,CAAjB;;AAEA,cAAIoE,QAAQ,KAAK,GAAjB,EAAsB;AAClB,kBAAKzB,QAAL,CAAcI,iBAAd,CAAgC1B,eAAe,CAACrB,MAAhB,GAAyB,CAAzD,EAA4DqB,eAAe,CAACrB,MAAhB,GAAyB,CAArF;AACH,WAFD,MAEO,IAAIiE,aAAa,GAAG,CAAhB,IAAqBZ,gBAAgB,CAACrD,MAAjB,IAA2BqB,eAAe,CAACrB,MAApE,EAA4E;AAC/E,kBAAK2C,QAAL,CAAcI,iBAAd,CAAgCkB,aAAhC,EAA+CA,aAA/C;AACH;AACJ;;AAED,YAAIV,QAAJ,EAAc;AACVA,UAAAA,QAAQ,CAAClC,eAAD,EAAkB,MAAKiD,cAAL,EAAlB,CAAR;AACH;AACJ,OAxBD;AAyBH,KA7TkB;;AAAA,qEA+TF,UAACC,GAAD,EAAS;AAAA,yBACW,MAAKjF,KADhB;AAAA,UACdqD,QADc,gBACdA,QADc;AAAA,UACJ6B,UADI,gBACJA,UADI;AAEtB,YAAK7B,QAAL,GAAgB4B,GAAhB;AAEA,UAAIE,OAAJ;;AAEA,UAAI9B,QAAJ,EAAc;AACV8B,QAAAA,OAAO,GAAG9B,QAAV;AACH,OAFD,MAEO,IAAI6B,UAAU,IAAIA,UAAU,CAACD,GAA7B,EAAkC;AACrCE,QAAAA,OAAO,GAAGD,UAAU,CAACD,GAArB;AACH;;AAED,UAAIE,OAAJ,EAAa;AACT,YAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AAC/BA,UAAAA,OAAO,CAACF,GAAD,CAAP;AACH,SAFD,MAEO;AACHE,UAAAA,OAAO,CAACC,OAAR,GAAkBH,GAAlB;AACH;AACJ;AACJ,KAlVkB;;AAAA,uEAoVA,UAACpB,CAAD,EAAO;AAAA,UACdwB,OADc,GACF,MAAKrF,KADH,CACdqF,OADc;;AAGtB,UAAIA,OAAJ,EAAa;AACTA,QAAAA,OAAO,CAACxB,CAAD,EAAI,MAAKmB,cAAL,EAAJ,CAAP;AACH;AACJ,KA1VkB;;AAAA,0EA4VG,UAACxE,OAAD,EAAa;AAAA,yBAC6B,MAAKM,KADlC;AAAA,UACvBiB,eADuB,gBACvBA,eADuB;AAAA,UACNxB,eADM,gBACNA,eADM;AAAA,UACWL,aADX,gBACWA,aADX;AAAA,UAEvB+D,QAFuB,GAEV,MAAKjE,KAFK,CAEvBiE,QAFuB;AAI/B,UAAMqB,sBAAsB,GAAG/E,eAA/B;AACA,UAAMgF,mBAAmB,GAAGvG,QAAQ,CAACwB,OAAD,CAAR,GAAoBpC,IAAI,CAAC8B,aAAD,EAAgB,UAACsF,WAAD;AAAA,eAAiBA,WAAW,CAACnF,IAAZ,KAAqBG,OAAtC;AAAA,OAAhB,CAAxB,GAAyFpC,IAAI,CAAC8B,aAAD,EAAgBM,OAAhB,CAAzH;AAEA,UAAMiF,iBAAiB,GAAG1D,eAAe,CAACqC,OAAhB,CAAwB,GAAxB,EAA6B,EAA7B,EAAiCA,OAAjC,CAAyC,GAAzC,EAA8C,EAA9C,EAAkDA,OAAlD,CAA0D,GAA1D,EAA+D,EAA/D,EAAmEA,OAAnE,CAA2E,GAA3E,EAAgF,EAAhF,CAA1B;AACA,UAAMsB,SAAS,GAAGD,iBAAiB,CAAC/E,MAAlB,GAA2B,CAA3B,GAA+B+E,iBAAiB,CAACrB,OAAlB,CAA0BkB,sBAAsB,CAAC7E,QAAjD,EAA2D8E,mBAAmB,CAAC9E,QAA/E,CAA/B,GAA0H8E,mBAAmB,CAAC9E,QAAhK;;AAEA,UAAMkF,kBAAkB,GAAG,MAAKlB,YAAL,CAAkBiB,SAAS,CAACtB,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,CAAlB,EAAgDmB,mBAAmB,CAACb,MAApE,CAA3B;;AAEA,YAAK5C,QAAL,CAAc;AACV8D,QAAAA,QAAQ,EAAE,IADA;AAEVrF,QAAAA,eAAe,EAAEgF,mBAFP;AAGVzB,QAAAA,eAAe,EAAE,IAHP;AAIV/B,QAAAA,eAAe,EAAE4D;AAJP,OAAd,EAKG,YAAM;AACL,cAAKE,WAAL;;AACA,YAAI5B,QAAJ,EAAc;AACVA,UAAAA,QAAQ,CAAC0B,kBAAD,EAAqB,MAAKX,cAAL,EAArB,CAAR;AACH;AACJ,OAVD;AAWH,KAnXkB;;AAAA,uEAqXA,UAACnB,CAAD,EAAO;AAAA,UACdtD,eADc,GACM,MAAKO,KADX,CACdP,eADc;AAAA,yBAEkB,MAAKP,KAFvB;AAAA,UAEd4B,kBAFc,gBAEdA,kBAFc;AAAA,UAEMkE,OAFN,gBAEMA,OAFN,EAItB;;AACA,UAAI,MAAKzC,QAAT,EAAmB;AACf,YAAI,MAAKA,QAAL,CAAcG,KAAd,KAAwB,GAAxB,IAA+BjD,eAA/B,IAAkD,CAACqB,kBAAvD,EAA2E;AACvE,gBAAKE,QAAL,CAAc;AACVC,YAAAA,eAAe,aAAMxB,eAAe,CAACE,QAAtB;AADL,WAAd,EAEG;AAAA,mBAAMsF,UAAU,CAAC,MAAKF,WAAN,EAAmB,EAAnB,CAAhB;AAAA,WAFH;AAGH;AACJ;;AAED,YAAK/D,QAAL,CAAc;AAAEkE,QAAAA,WAAW,EAAE;AAAf,OAAd;;AAEA,UAAIF,OAAJ,EAAa;AACTA,QAAAA,OAAO,CAACjC,CAAD,EAAI,MAAKmB,cAAL,EAAJ,CAAP;AACH;;AAEDe,MAAAA,UAAU,CAAC,MAAKF,WAAN,EAAmB,EAAnB,CAAV;AACH,KAzYkB;;AAAA,sEA2YD,UAAChC,CAAD,EAAO;AAAA,yBACW,MAAK7D,KADhB;AAAA,UACbgG,WADa,gBACbA,WADa;AAAA,UACAC,MADA,gBACAA,MADA;;AAGrB,UAAI,CAACpC,CAAC,CAACM,MAAF,CAASX,KAAd,EAAqB;AACjB,cAAK1B,QAAL,CAAc;AAAEkE,UAAAA,WAAW,EAAXA;AAAF,SAAd;AACH;;AAED,UAAIC,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACpC,CAAD,EAAI,MAAKmB,cAAL,EAAJ,CAAN;AACH;AACJ,KArZkB;;AAAA,+EAuZQ,UAACkB,SAAD,EAAe;AAAA,yBACyD,MAAKpF,KAD9D;AAAA,UACPqF,wBADO,gBAC9BC,qBAD8B;AAAA,UACmBlG,aADnB,gBACmBA,aADnB;AAAA,UACkCmG,kBADlC,gBACkCA,kBADlC,EAGtC;;AACA,UAAMD,qBAAqB,GAAGD,wBAAwB,GAAGD,SAAzD;;AAEA,UAAIE,qBAAqB,GAAG,CAAxB,IAA6BA,qBAAqB,IAAKlG,aAAa,CAACQ,MAAd,GAAuB2F,kBAAkB,CAAC3F,MAArG,EAA8G;AAC1G,eAAO0F,qBAAqB,GAAGF,SAA/B;AACH;;AAED,aAAOE,qBAAP;AACH,KAlakB;;AAAA,oEAoaH,YAAM;AAAA,yBACyC,MAAKtF,KAD9C;AAAA,UACVD,WADU,gBACVA,WADU;AAAA,UACGX,aADH,gBACGA,aADH;AAAA,UACkBmG,kBADlB,gBACkBA,kBADlB;AAGlB,UAAMC,iBAAiB,GAAG,MAAKC,oBAAL,CAA0B1F,WAA1B,KAA0CX,aAAa,CAAC,CAAD,CAAjF;AACA,UAAMsG,sBAAsB,GAAG/H,SAAS,CAACyB,aAAD,EAAgBoG,iBAAhB,CAAT,GAA8CD,kBAAkB,CAAC3F,MAAhG;;AAEA,YAAK+F,QAAL,CAAc,MAAKC,UAAL,CAAgBF,sBAAhB,CAAd,EAAuD,IAAvD;;AAEA,YAAK1E,QAAL,CAAc;AAAEjB,QAAAA,WAAW,EAAE,EAAf;AAAmBuF,QAAAA,qBAAqB,EAAEI;AAA1C,OAAd;AACH,KA7akB;;AAAA,oEA+aH,UAAC3C,CAAD,EAAO;AAAA,yBAIf,MAAK/C,KAJU;AAAA,UAEf8E,QAFe,gBAEfA,QAFe;AAAA,UAELQ,qBAFK,gBAELA,qBAFK;AAAA,UAEkBC,kBAFlB,gBAEkBA,kBAFlB;AAAA,UAEsCnG,aAFtC,gBAEsCA,aAFtC;AAAA,UAGfW,WAHe,gBAGfA,WAHe;AAAA,UAGF8F,2BAHE,gBAGFA,2BAHE;AAAA,yBAKQ,MAAK3G,KALb;AAAA,UAKX4G,IALW,gBAKXA,IALW;AAAA,UAKLC,QALK,gBAKLA,QALK;AAOnB,UAAI,CAACjB,QAAD,IAAaiB,QAAjB,EAA2B,OAPR,CASnB;;AACA,UAAIhD,CAAC,CAACQ,cAAN,EAAsB;AAClBR,QAAAA,CAAC,CAACQ,cAAF;AACH,OAFD,MAEO;AACHR,QAAAA,CAAC,CAACS,WAAF,GAAgB,KAAhB;AACH;;AAED,UAAMwC,aAAa,GAAG,SAAhBA,aAAgB,CAACZ,SAAD,EAAe;AACjC,cAAKpE,QAAL,CAAc;AACVsE,UAAAA,qBAAqB,EAAE,MAAKW,wBAAL,CAA8Bb,SAA9B;AADb,SAAd,EAEG,YAAM;AACL,gBAAKO,QAAL,CAAc,MAAKC,UAAL,CACVN,qBAAqB,GAAGC,kBAAkB,CAAC3F,MADjC,CAAd,EAEG,IAFH;AAGH,SAND;AAOH,OARD;;AAUA,cAAQmD,CAAC,CAACmD,KAAV;AACI,aAAKJ,IAAI,CAACK,IAAV;AACIH,UAAAA,aAAa,CAAC,CAAD,CAAb;AACA;;AACJ,aAAKF,IAAI,CAACM,EAAV;AACIJ,UAAAA,aAAa,CAAC,CAAC,CAAF,CAAb;AACA;;AACJ,aAAKF,IAAI,CAACO,KAAV;AACI,gBAAKC,mBAAL,CAAyBlH,aAAa,CAACkG,qBAAD,CAAtC,EAA+DvC,CAA/D;;AACA;;AACJ,aAAK+C,IAAI,CAACS,GAAV;AACI,gBAAKvF,QAAL,CAAc;AACV8D,YAAAA,QAAQ,EAAE;AADA,WAAd,EAEG,MAAKC,WAFR;;AAGA;;AACJ;AACI,cAAKhC,CAAC,CAACmD,KAAF,IAAWJ,IAAI,CAACU,CAAhB,IAAqBzD,CAAC,CAACmD,KAAF,IAAWJ,IAAI,CAACW,CAAtC,IAA4C1D,CAAC,CAACmD,KAAF,KAAYJ,IAAI,CAACY,KAAjE,EAAwE;AACpE,kBAAK1F,QAAL,CAAc;AACVjB,cAAAA,WAAW,EAAEA,WAAW,GAAG4G,MAAM,CAACC,YAAP,CAAoB7D,CAAC,CAACmD,KAAtB;AADjB,aAAd,EAEGL,2BAFH;AAGH;;AApBT;AAsBH,KA/dkB;;AAAA,yEAieE,UAAC9C,CAAD,EAAO;AAAA,yBACqB,MAAK7D,KAD1B;AAAA,UAChB4G,IADgB,gBAChBA,IADgB;AAAA,UACVe,eADU,gBACVA,eADU;AAAA,UACOC,SADP,gBACOA,SADP;;AAExB,UAAI/D,CAAC,CAACmD,KAAF,KAAYJ,IAAI,CAACO,KAAjB,IAA0BQ,eAA9B,EAA+C;AAC3CA,QAAAA,eAAe,CAAC9D,CAAD,CAAf;AACH;;AAED,UAAI+D,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAAC/D,CAAD,CAAT;AACH;AACJ,KA1ekB;;AAAA,mEA4eJ,YAAM;AAAA,UACT9B,eADS,GACW,MAAKjB,KADhB,CACTiB,eADS;AAAA,UAET8F,OAFS,GAEG,MAAK7H,KAFR,CAET6H,OAFS;AAIjB,aAAOA,OAAO,CAAC9F,eAAe,CAACqC,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,CAAD,CAAd;AACH,KAjfkB;;AAAA,4EAmfK,UAAC0D,MAAD,EAAY;AAAA,yBACU,MAAKhH,KADf;AAAA,UACxBZ,aADwB,gBACxBA,aADwB;AAAA,UACTC,cADS,gBACTA,cADS;AAAA,UAExByB,kBAFwB,GAED,MAAK5B,KAFJ,CAExB4B,kBAFwB;AAIhC,UAAImG,YAAJ;AACA,UAAI9H,WAAW,GAAG6H,MAAlB;AACA,UAAI/F,eAAe,GAAG+F,MAAtB,CANgC,CAQhC;AACA;;AACA,UAAG7H,WAAW,CAAClB,UAAZ,CAAuB,IAAvB,CAAH,EAAgC;AAC5BkB,QAAAA,WAAW,GAAIA,WAAW,CAACmE,OAAZ,CAAoB,IAApB,EAA0B,GAA1B,CAAf;AACH;;AACD,UAAI,CAACnE,WAAW,CAAClB,UAAZ,CAAuB,GAAvB,CAAL,EAAkC;AAC9BgJ,QAAAA,YAAY,GAAG3J,IAAI,CAAC8B,aAAD,EAAgB;AAAEG,UAAAA,IAAI,EAAEF;AAAR,SAAhB,CAAnB;AACA,YAAMM,QAAQ,GAAGsH,YAAY,IAAI,CAAChJ,UAAU,CAACkB,WAAW,CAACmE,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAD,EAAiC2D,YAAY,CAACtH,QAA9C,CAA3B,GAAqFsH,YAAY,CAACtH,QAAlG,GAA6G,EAA9H;AACAsB,QAAAA,eAAe,GAAG,MAAK0C,YAAL,CACd,CAAC7C,kBAAkB,GAAG,EAAH,GAAQnB,QAA3B,IAAuCR,WAAW,CAACmE,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CADzB,EAEd2D,YAAY,GAAGA,YAAY,CAACrD,MAAhB,GAAyBsD,SAFvB,CAAlB;AAIH,OAPD,MAOO;AACH/H,QAAAA,WAAW,GAAGA,WAAW,CAACmE,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAd;AACA2D,QAAAA,YAAY,GAAG,MAAKxD,oBAAL,CAA0BtE,WAAW,CAACuE,SAAZ,CAAsB,CAAtB,EAAyB,CAAzB,CAA1B,EAAuDtE,aAAvD,EAAsEC,cAAtE,CAAf;AACA4B,QAAAA,eAAe,GAAG,MAAK0C,YAAL,CAAkBxE,WAAlB,EAA+B8H,YAAY,CAACrD,MAA5C,CAAlB;AACH;;AAED,YAAK5C,QAAL,CAAc;AAAEvB,QAAAA,eAAe,EAAEwH,YAAnB;AAAiChG,QAAAA,eAAe,EAAfA;AAAjC,OAAd;AACH,KA9gBkB;;AAAA,uEAghBA,YAAM;AAAA,yBAGjB,MAAKjB,KAHY;AAAA,UAEjBP,eAFiB,gBAEjBA,eAFiB;AAAA,UAEAqF,QAFA,gBAEAA,QAFA;AAAA,UAEUS,kBAFV,gBAEUA,kBAFV;AAAA,UAE8BnG,aAF9B,gBAE8BA,aAF9B;AAAA,yBAKsD,MAAKF,KAL3D;AAAA,UAKbiI,OALa,gBAKbA,OALa;AAAA,UAKJC,aALI,gBAKJA,aALI;AAAA,UAKWC,YALX,gBAKWA,YALX;AAAA,UAKyBC,eALzB,gBAKyBA,eALzB;AAAA,UAK0CC,OAL1C;AAMrB,UAAMC,gBAAgB,kBAAW/H,eAAe,CAACF,IAA3B,CAAtB;;AAEA,UAAMkI,UAAU,GAAG,SAAbA,UAAa,CAAC/H,OAAD;AAAA,eAAagI,OAAO,CAACjI,eAAe,IAAIA,eAAe,CAACE,QAAhB,KAA6BD,OAAO,CAACC,QAAzD,CAApB;AAAA,OAAnB;;AAEA,UAAMgI,aAAa,GAAGL,eAAe,GAAG,EAAH,GAAQ;AACzCM,QAAAA,cAAc,EACV,MAAC,cAAD;AACI,UAAA,SAAS,EAAET,OAAO,CAACpI,aADvB;AAEI,UAAA,QAAQ,EAAC,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIKwI,OAAM,GACC,4BACI,MAAC,YAAD;AACI,UAAA,EAAE,EAAC,cADP;AAEI,UAAA,IAAI,EAAEG,OAAO,CAAC5C,QAAD,CAFjB;AAGI,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAK9D,QAAL,CAAc;AAAE8D,cAAAA,QAAQ,EAAE;AAAZ,aAAd,CAAN;AAAA,WAHb;AAII,UAAA,SAAS,EAAEqC,OAAO,UAJtB;AAKI,UAAA,OAAO,EAAE;AACLU,YAAAA,IAAI,EAAEhL,IAAI,CAACsK,OAAO,CAACxI,UAAT,EAAqB,QAArB,EAA+B6I,gBAA/B,CADL;AAELM,YAAAA,MAAM,EAAEX,OAAO,CAACtI;AAFX,WALb;AASI,UAAA,QAAQ,EAAE,kBAACkE,CAAD;AAAA,mBAAO,MAAKuD,mBAAL,CAAyBvD,CAAC,CAACM,MAAF,CAASX,KAAlC,CAAP;AAAA,WATd;AAUI,UAAA,gBAAgB,MAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAYK,CAAC,CAAC6C,kBAAkB,CAAC3F,MAArB,IAA+BpC,GAAG,CAAC+H,kBAAD,EAAqB,UAAC7F,OAAD,EAAUkD,KAAV;AAAA,iBACpD,MAAC,IAAD;AACI,YAAA,GAAG,sBAAelD,OAAO,CAACH,IAAvB,cAA+BqD,KAA/B,CADP;AAEI,YAAA,OAAO,EAAE,iBAACmF,IAAD,EAAU;AACf,oBAAKlF,KAAL,mBAAsBD,KAAtB,KAAiCmF,IAAjC;AACH,aAJL;AAKI,YAAA,IAAI,EAAErI,OAAO,CAACI,IALlB;AAMI,YAAA,IAAI,EAAEJ,OAAO,CAACH,IANlB;AAOI,YAAA,QAAQ,EAAEG,OAAO,CAACC,QAPtB;AAQI,YAAA,YAAY,EAAE0H,YAAY,IAAIA,YAAY,CAAC3H,OAAO,CAACI,IAAT,CAR9C;AASI,0BATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADoD;AAAA,SAArB,CAZvC,EA0BKtC,GAAG,CAAC4B,aAAD,EAAgB,UAACM,OAAD,EAAUkD,KAAV;AAAA,iBAChB,MAAC,IAAD;AACI,YAAA,GAAG,sBAAelD,OAAO,CAACH,IAAvB,cAA+BqD,KAA/B,CADP;AAEI,YAAA,OAAO,EAAE,iBAACmF,IAAD,EAAU;AACf,oBAAKlF,KAAL,mBAAsBD,KAAtB,KAAiCmF,IAAjC;AACH,aAJL;AAKI,YAAA,IAAI,EAAErI,OAAO,CAACI,IALlB;AAMI,YAAA,IAAI,EAAEJ,OAAO,CAACH,IANlB;AAOI,YAAA,QAAQ,EAAEG,OAAO,CAACC,QAPtB;AAQI,YAAA,YAAY,EAAE0H,YAAY,IAAIA,YAAY,CAAC3H,OAAO,CAACI,IAAT,CAR9C;AASI,0BATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADgB;AAAA,SAAhB,CA1BR,CADJ,CADD,GA6CC,4BACI,MAAC,MAAD;AACI,UAAA,SAAS,EAAEqH,OAAO,CAAC7I,UADvB;AAEI,uBAAWwG,QAAQ,GAAG,cAAH,GAAoB,IAF3C;AAGI,wBAAW,gBAHf;AAII,UAAA,OAAO,EAAE,iBAAC/B,CAAD;AAAA,mBAAO,MAAK/B,QAAL,CAAc;AAAE8D,cAAAA,QAAQ,EAAE/B,CAAC,CAACiF;AAAd,aAAd,CAAP;AAAA,WAJb;AAKI,+BALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOI;AAAK,UAAA,SAAS,EAAER,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPJ,CADJ,EAUI,MAAC,IAAD;AACI,UAAA,WAAW,MADf;AAEI,UAAA,SAAS,EAAEJ,aAFf;AAGI,UAAA,EAAE,EAAC,cAHP;AAII,UAAA,QAAQ,EAAEtC,QAJd;AAKI,UAAA,IAAI,EAAE4C,OAAO,CAAC5C,QAAD,CALjB;AAMI,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAK9D,QAAL,CAAc;AAAE8D,cAAAA,QAAQ,EAAE;AAAZ,aAAd,CAAN;AAAA,WANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQK,CAAC,CAACS,kBAAkB,CAAC3F,MAArB,IAA+BpC,GAAG,CAAC+H,kBAAD,EAAqB,UAAC7F,OAAD,EAAUkD,KAAV;AAAA,iBACpD,MAAC,IAAD;AACI,YAAA,GAAG,sBAAelD,OAAO,CAACH,IAAvB,cAA+BqD,KAA/B,CADP;AAEI,YAAA,OAAO,EAAE,iBAACmF,IAAD,EAAU;AACf,oBAAKlF,KAAL,mBAAsBD,KAAtB,KAAiCmF,IAAjC;AACH,aAJL;AAKI,YAAA,QAAQ,EAAEN,UAAU,CAAC/H,OAAD,CALxB;AAMI,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAK4G,mBAAL,CAAyB5G,OAAzB,CAAN;AAAA,aANb;AAOI,YAAA,IAAI,EAAEA,OAAO,CAACI,IAPlB;AAQI,YAAA,IAAI,EAAEJ,OAAO,CAACH,IARlB;AASI,YAAA,QAAQ,EAAEG,OAAO,CAACC,QATtB;AAUI,YAAA,YAAY,EAAE0H,YAAY,IAAIA,YAAY,CAAC3H,OAAO,CAACI,IAAT,CAV9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADoD;AAAA,SAArB,CARvC,EAuBK,CAAC,CAACyF,kBAAkB,CAAC3F,MAArB,IAA+B,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAvBpC,EAyBKpC,GAAG,CAAC4B,aAAD,EAAgB,UAACM,OAAD,EAAUkD,KAAV;AAAA,iBAChB,MAAC,IAAD;AACI,YAAA,GAAG,sBAAelD,OAAO,CAACH,IAAvB,cAA+BqD,KAA/B,CADP;AAEI,YAAA,OAAO,EAAE,iBAACmF,IAAD,EAAU;AACf,oBAAKlF,KAAL,mBAAsBD,KAAtB,KAAiCmF,IAAjC;AACH,aAJL;AAKI,YAAA,QAAQ,EAAEN,UAAU,CAAC/H,OAAD,CALxB;AAMI,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAK4G,mBAAL,CAAyB5G,OAAzB,CAAN;AAAA,aANb;AAOI,YAAA,IAAI,EAAEA,OAAO,CAACI,IAPlB;AAQI,YAAA,IAAI,EAAEJ,OAAO,CAACH,IARlB;AASI,YAAA,QAAQ,EAAEG,OAAO,CAACC,QATtB;AAUI,YAAA,YAAY,EAAE0H,YAAY,IAAIA,YAAY,CAAC3H,OAAO,CAACI,IAAT,CAV9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADgB;AAAA,SAAhB,CAzBR,CAVJ,CAjDZ;AAFqC,OAA7C;AA2GA,aAAO6H,aAAP;AACH,KAtoBkB;;AAEf,QAAIvH,kBAAiB,GAAGjC,WAAW,CAAC8J,YAApC;AAEA,QAAI/I,KAAK,CAACgJ,gBAAV,EAA4B9H,kBAAiB,GAAG,MAAK+H,eAAL,CAAqB/H,kBAArB,CAApB;AAC5B,QAAIlB,KAAK,CAACuB,OAAV,EAAmBL,kBAAiB,GAAG,MAAKgI,aAAL,CAAmBlJ,KAAK,CAACuB,OAAzB,EAAkCL,kBAAlC,CAApB;;AAEnB,QAAMhB,cAAa,GAAG,MAAKiJ,gBAAL,CAClB,MAAKC,gBAAL,CAAsBpJ,KAAK,CAACE,aAA5B,EAA2CgB,kBAA3C,CADkB,EAC6ClB,KAAK,CAACmJ,gBADnD,CAAtB;;AAIA,QAAM9C,mBAAkB,GAAG9H,MAAM,CAAC2C,kBAAD,EAAoB,UAACV,OAAD;AAAA,aAAarC,IAAI,CAAC6B,KAAK,CAACqG,kBAAP,EAA2B,UAACgD,gBAAD;AAAA,eAAsBA,gBAAgB,KAAK7I,OAAO,CAACH,IAAnD;AAAA,OAA3B,CAAjB;AAAA,KAApB,CAAjC;;AAEA,QAAIJ,YAAW,GAAGD,KAAK,CAACwD,KAAN,IAAe,EAAjC;;AACA,QAAGvD,YAAW,CAAClB,UAAZ,CAAuB,IAAvB,CAAH,EAAgC;AAC5BkB,MAAAA,YAAW,GAAIA,YAAW,CAACmE,OAAZ,CAAoB,IAApB,EAA0B,GAA1B,CAAf;AACH;;AAED,QAAI2D,aAAJ;;AACA,QAAI9H,YAAW,CAACS,MAAZ,GAAqB,CAAzB,EAA4B;AACxB;AACAqH,MAAAA,aAAY,GAAG,MAAKxD,oBAAL,CAA0BtE,YAAW,CAACmE,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,EAA+BI,SAA/B,CAAyC,CAAzC,EAA4C,CAA5C,CAA1B,EAA0EtE,cAA1E,EAAyFF,KAAK,CAACG,cAA/F,KAAkH,CAAjI;AACH,KAHD,MAGO,IAAIH,KAAK,CAACG,cAAV,EAA0B;AAC7B;AACA4H,MAAAA,aAAY,GAAG3J,IAAI,CAAC8B,cAAD,EAAgB;AAAEG,QAAAA,IAAI,EAAEL,KAAK,CAACG;AAAd,OAAhB,CAAJ,IAAuD,CAAtE;AACH,KAHM,MAGA;AACH;AACA4H,MAAAA,aAAY,GAAG,CAAf;AACH;;AAED,QAAMuB,iBAAiB,GAAG7K,SAAS,CAAC,MAAKsK,YAAN,EAAoBhB,aAApB,CAAnC;;AACA,QAAMtH,SAAQ,GACVR,YAAW,CAACS,MAAZ,GAAqB,CAArB,IACGqH,aADH,IAEG,CAAChJ,UAAU,CAACkB,YAAW,CAACmE,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAD,EAAiC2D,aAAY,CAACtH,QAA9C,CAHD,GAIbsH,aAAY,CAACtH,QAJA,GAIW,EAJ5B;;AAMA,QAAMsB,gBAAe,GAAI9B,YAAW,KAAK,EAAhB,IAAsB8H,aAAY,KAAK,CAAxC,GAA6C,EAA7C,GAClB,MAAKtD,YAAL,CACE,CAACzE,KAAK,CAAC4B,kBAAN,GAA2B,EAA3B,GAAgCnB,SAAjC,IAA6CR,YAAW,CAACmE,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAD/C,EAEE2D,aAAY,CAACnH,IAAb,GAAoBmH,aAAY,CAACrD,MAAjC,GAA0CsD,SAF5C,CADN;;AAMA,UAAKlH,KAAL,GAAa;AACTiB,MAAAA,eAAe,EAAfA,gBADS;AAETiE,MAAAA,WAAW,EAAEhG,KAAK,CAACgG,WAFV;AAGT9F,MAAAA,aAAa,EAAbA,cAHS;AAITmG,MAAAA,kBAAkB,EAAlBA,mBAJS;AAKTlG,MAAAA,cAAc,EAAEH,KAAK,CAACG,cALb;AAMTI,MAAAA,eAAe,EAAEwH,aANR;AAOT3B,MAAAA,qBAAqB,EAAEkD,iBAPd;AAQTzI,MAAAA,WAAW,EAAE,EARJ;AASTiD,MAAAA,eAAe,EAAE,KATR;AAUT6C,MAAAA,2BAA2B,EAAE/H,QAAQ,CAAC,MAAK2K,aAAN,EAAqB,GAArB,CAV5B;AAWT3D,MAAAA,QAAQ,EAAE;AAXD,KAAb;AA3Ce;AAwDlB;;;;wCAEmB;AAChB,UAAI1D,QAAQ,CAACsH,gBAAb,EAA+B;AAC3BtH,QAAAA,QAAQ,CAACsH,gBAAT,CAA0B,SAA1B,EAAqC,KAAKC,aAA1C;AACH;AACJ;;;6CAEwC;AAAA,UAAbC,SAAa,QAApBlG,KAAoB;AAAA,yBAC0C,KAAK1C,KAD/C;AAAA,UACb6I,kBADa,gBAC7BxJ,cAD6B;AAAA,UACO4B,eADP,gBACOA,eADP;AAAA,UACwB7B,aADxB,gBACwBA,aADxB;AAAA,yBAEH,KAAKF,KAFF;AAAA,UAE7BG,cAF6B,gBAE7BA,cAF6B;AAAA,UAEbqD,KAFa,gBAEbA,KAFa;AAGrC,UAAIoG,eAAe,GAAG,KAAtB;AAEA,UAAM7B,YAAY,GAAG,KAAKxD,oBAAL,CAA0Bf,KAAK,IAAIA,KAAK,CAAC9C,MAAN,GAAe,CAAxB,GAA4B8C,KAAK,CAACgB,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAA5B,GAAoD,EAA9E,EAAkFtE,aAAlF,EAAiGC,cAAjG,CAArB;;AACA,UAAG4H,YAAY,IAAIA,YAAY,CAAC1H,IAAhC,EAAqC;AACjCuJ,QAAAA,eAAe,GAAG,KAAlB;AACH,OAFD,MAEK;AACDA,QAAAA,eAAe,GAAG,IAAlB;AACH;;AAED,UAAIA,eAAe,IAAIzJ,cAAnB,IAAqCA,cAAc,KAAKwJ,kBAA5D,EAAgF;AAC5E,aAAKE,oBAAL,CAA0B1J,cAA1B;AACH;;AAED,UAAI,OAAOqD,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAKkG,SAAvC,IAAoDlG,KAAK,KAAKzB,eAAlE,EAAmF;AAC/E,aAAK+H,qBAAL,CAA2BtG,KAA3B;AACH;AACJ;;;2CAEsB;AACnB,UAAItB,QAAQ,CAAC6H,mBAAb,EAAkC;AAC9B7H,QAAAA,QAAQ,CAAC6H,mBAAT,CAA6B,SAA7B,EAAwC,KAAKN,aAA7C;AACH;AACJ;;;6BA+iBQ;AAAA,0BAGD,KAAK3I,KAHJ;AAAA,UAEDiB,eAFC,iBAEDA,eAFC;AAAA,UAE6BiI,gBAF7B,iBAEgBhE,WAFhB;;AAAA,0BAeD,KAAKhG,KAfJ;AAAA,UAODqI,QAPC;AAAA,UAOOlI,cAPP,iBAOOA,cAPP;AAAA,UAOuBgJ,gBAPvB,iBAOuBA,gBAPvB;AAAA,UAOyCjJ,aAPzC,iBAOyCA,aAPzC;AAAA,UAOwDmG,kBAPxD,iBAOwDA,kBAPxD;AAAA,UAQD6B,aARC,iBAQDA,aARC;AAAA,UAQczF,UARd,iBAQcA,UARd;AAAA,UAQ0BuG,gBAR1B,iBAQ0BA,gBAR1B;AAAA,UAQ4CnB,OAR5C,iBAQ4CA,OAR5C;AAAA,UAQqDjG,kBARrD,iBAQqDA,kBARrD;AAAA,UASDwG,eATC,iBASDA,eATC;AAAA,UASgB5F,iBAThB,iBASgBA,iBAThB;AAAA,UASmCwB,mBATnC,iBASmCA,mBATnC;AAAA,UASwD2D,eATxD,iBASwDA,eATxD;AAAA,UAUDxE,eAVC,iBAUDA,eAVC;AAAA,UAUgB8E,OAVhB,iBAUgBA,OAVhB;AAAA,UAUyBrB,IAVzB,iBAUyBA,IAVzB;AAAA,UAU+BuB,YAV/B,iBAU+BA,YAV/B;AAAA,UAU6CnC,WAV7C,iBAU6CA,WAV7C;AAAA,UAU0DzE,OAV1D,iBAU0DA,OAV1D;AAAA,UAUmE0C,QAVnE,iBAUmEA,QAVnE;AAAA,UAWDT,KAXC,iBAWDA,KAXC;AAAA,UAaDyG,UAbC,iBAaDA,UAbC;AAAA,UAaWC,KAbX,iBAaWA,KAbX;AAAA,UAakBhF,UAblB,iBAakBA,UAblB;AAAA,UAcEiF,SAdF;;AAiBL,UAAM1B,aAAa,GAAG,KAAK2B,gBAAL,EAAtB;AAEA,aACI,MAAC,SAAD;AACI,QAAA,WAAW,EAAEJ,gBADjB;AAEI,QAAA,KAAK,EAAEjI,eAFX;AAGI,QAAA,SAAS,EAAEkI,UAHf;AAII,QAAA,QAAQ,EAAE,KAAKI,cAJnB;AAKI,QAAA,KAAK,EAAEH,KAAK,IAAI,CAAC,KAAKI,YAAL,EALrB;AAMI,QAAA,QAAQ,EAAE,KAAKC,WANnB;AAOI,QAAA,OAAO,EAAE,KAAKC,gBAPlB;AAQI,QAAA,OAAO,EAAE,KAAKC,gBARlB;AASI,QAAA,MAAM,EAAE,KAAKC,eATjB;AAUI,QAAA,SAAS,EAAE,KAAKC,kBAVpB;AAWI,QAAA,IAAI,EAAC,KAXT;AAYI,QAAA,UAAU,kCACHlC,aADG,GAEHvD,UAFG;AAZd,SAgBQiF,SAhBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAoBH;;;;EArsBoB1M,KAAK,CAACmN,S;;AAwsB/B7K,UAAU,CAAC8K,SAAX,GAAuB;AACnB5C,EAAAA,OAAO,EAAEvK,SAAS,CAACoN,MADA;AAEnB3B,EAAAA,gBAAgB,EAAEzL,SAAS,CAACqN,OAAV,CAAkBrN,SAAS,CAACsN,MAA5B,CAFC;AAGnB9K,EAAAA,aAAa,EAAExC,SAAS,CAACqN,OAAV,CAAkBrN,SAAS,CAACsN,MAA5B,CAHI;AAInB3E,EAAAA,kBAAkB,EAAE3I,SAAS,CAACqN,OAAV,CAAkBrN,SAAS,CAACsN,MAA5B,CAJD;AAKnB7K,EAAAA,cAAc,EAAEzC,SAAS,CAACsN,MALP;AAMnBxH,EAAAA,KAAK,EAAE9F,SAAS,CAACsN,MANE;AAOnBhF,EAAAA,WAAW,EAAEtI,SAAS,CAACsN,MAPJ;AAQnBnE,EAAAA,QAAQ,EAAEnJ,SAAS,CAACuN,IARD;AASnBf,EAAAA,KAAK,EAAExM,SAAS,CAACuN,IATE;AAUnBC,EAAAA,OAAO,EAAExN,SAAS,CAACsN,MAVA;AAWnB,YAAQtN,SAAS,CAACuN,IAXC;AAYnBhB,EAAAA,UAAU,EAAEvM,SAAS,CAACsN,MAZH;AAanB9C,EAAAA,aAAa,EAAExK,SAAS,CAACsN,MAbN;AAcnB9F,EAAAA,UAAU,EAAExH,SAAS,CAACoN,MAdH;AAenBK,EAAAA,UAAU,EAAEzN,SAAS,CAACoN,MAfH;AAgBnBzH,EAAAA,QAAQ,EAAE3F,SAAS,CAAC0N,IAhBD;AAiBnB3I,EAAAA,UAAU,EAAE/E,SAAS,CAACuN,IAjBH;AAkBnBjC,EAAAA,gBAAgB,EAAEtL,SAAS,CAACuN,IAlBT;AAmBnBrJ,EAAAA,kBAAkB,EAAElE,SAAS,CAACuN,IAnBX;AAoBnB7C,EAAAA,eAAe,EAAE1K,SAAS,CAACuN,IApBR;AAqBnBzI,EAAAA,iBAAiB,EAAE9E,SAAS,CAACuN,IArBV;AAsBnBjH,EAAAA,mBAAmB,EAAEtG,SAAS,CAACuN,IAtBZ;AAuBnB1J,EAAAA,OAAO,EAAE7D,SAAS,CAAC2N,SAAV,CAAoB,CACzB3N,SAAS,CAACsN,MADe,EAEzBtN,SAAS,CAACqN,OAAV,CAAkBrN,SAAS,CAACsN,MAA5B,CAFyB,CAApB,CAvBU;AA2BnB7C,EAAAA,YAAY,EAAEzK,SAAS,CAACoN,MA3BL;AA4BnB7G,EAAAA,QAAQ,EAAEvG,SAAS,CAAC0N,IA5BD;AA6BnBtF,EAAAA,OAAO,EAAEpI,SAAS,CAAC0N,IA7BA;AA8BnBnF,EAAAA,MAAM,EAAEvI,SAAS,CAAC0N,IA9BC;AA+BnB/F,EAAAA,OAAO,EAAE3H,SAAS,CAAC0N,IA/BA;AAgCnBxD,EAAAA,SAAS,EAAElK,SAAS,CAAC0N,IAhCF;AAiCnBvD,EAAAA,OAAO,EAAEnK,SAAS,CAAC0N,IAjCA;AAkCnBjI,EAAAA,eAAe,EAAEzF,SAAS,CAAC0N,IAlCR;AAmCnBzD,EAAAA,eAAe,EAAEjK,SAAS,CAAC0N,IAnCR;AAoCnBxE,EAAAA,IAAI,EAAElJ,SAAS,CAACoN;AApCG,CAAvB;AAuCA/K,UAAU,CAACuL,YAAX,GAA0B;AACtBrD,EAAAA,OAAO,EAAE,EADa;AAEtBkB,EAAAA,gBAAgB,EAAE,EAFI;AAGtBjJ,EAAAA,aAAa,EAAE,EAHO;AAItBmG,EAAAA,kBAAkB,EAAE,EAJE;AAKtBlG,EAAAA,cAAc,EAAE,EALM;AAMtB6F,EAAAA,WAAW,EAAE,mBANS;AAOtBa,EAAAA,QAAQ,EAAE,KAPY;AAQtBqD,EAAAA,KAAK,EAAE,KARe;AAStBgB,EAAAA,OAAO,EAAE,UATa;AAUtB,YAAQ,KAVc;AAWtBjB,EAAAA,UAAU,EAAE,EAXU;AAYtB/B,EAAAA,aAAa,EAAE,EAZO;AAatBzF,EAAAA,UAAU,EAAE,IAbU;AActBuG,EAAAA,gBAAgB,EAAE,KAdI;AAetBnB,EAAAA,OAAO,EAAE,iBAAC5H,WAAD;AAAA,WAAiB9B,IAAI,CAACc,WAAW,CAAC8J,YAAb,EAA2B,UAACvI,OAAD;AAAA,aAAazB,UAAU,CAACkB,WAAD,EAAcO,OAAO,CAACC,QAAtB,CAAV,IAA6C1B,UAAU,CAACyB,OAAO,CAACC,QAAT,EAAmBR,WAAnB,CAApE;AAAA,KAA3B,CAArB;AAAA,GAfa;AAgBtB2B,EAAAA,kBAAkB,EAAE,KAhBE;AAiBtBwG,EAAAA,eAAe,EAAE,KAjBK;AAkBtB5F,EAAAA,iBAAiB,EAAE,IAlBG;AAmBtBwB,EAAAA,mBAAmB,EAAE,IAnBC;AAoBtBzC,EAAAA,OAAO,EAAE,EApBa;AAqBtB4G,EAAAA,YAAY,EAAE,EArBQ;AAsBtBR,EAAAA,eAAe,EAAE,2BAAM,CAAG,CAtBJ;AAuBtB1D,EAAAA,QAAQ,EAAE,oBAAM,CAAG,CAvBG;AAwBtBd,EAAAA,eAAe,EAAE;AAAA,WAAOjB,QAAQ,CAACqJ,aAAT,GAAyB/C,OAAO,CAACtG,QAAQ,CAACqJ,aAAT,CAAuB,OAAvB,EAAgC9H,iBAAjC,CAAhC,GAAsF,KAA7F;AAAA,GAxBK;AAyBtBmD,EAAAA,IAAI,EAAE;AACFM,IAAAA,EAAE,EAAE,EADF;AAEFD,IAAAA,IAAI,EAAE,EAFJ;AAGFuE,IAAAA,KAAK,EAAE,EAHL;AAIFC,IAAAA,IAAI,EAAE,EAJJ;AAKFtE,IAAAA,KAAK,EAAE,EALL;AAMFE,IAAAA,GAAG,EAAE,EANH;AAOFqE,IAAAA,IAAI,EAAE,EAPJ;AAQFpE,IAAAA,CAAC,EAAE,EARD;AASFC,IAAAA,CAAC,EAAE,EATD;AAUFC,IAAAA,KAAK,EAAE;AAVL;AAzBgB,CAA1B;AAuCAzH,UAAU,CAAC4L,WAAX,GAAyB,YAAzB;AAEA,eAAezN,UAAU,CAACiB,KAAD,CAAV,CAAkBY,UAAlB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport Divider from '@material-ui/core/Divider';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n    some, find, reduce, map, filter, includes, findIndex,\n    head, tail, debounce, memoize, trim, startsWith, isString,\n} from 'lodash';\nimport countryData from './countryData';\nimport Item from './item';\n\nconst style = {\n    flagButton: {\n        minWidth: 30,\n        padding: 0,\n        height: 30,\n    },\n    native: {\n        width: 30,\n        height: 30,\n        padding: 8,\n    },\n    nativeRoot: {\n        padding: 0,\n        '& + svg': {\n            display: 'none',\n        },\n    },\n    nativeSelect: {\n        padding: 0,\n        lineHeight: 0,\n        height: 11,\n    },\n    positionStart: {\n        position: 'relative',\n    },\n}\n\nclass PhoneInput extends React.Component {\n    flags = {};\n    guessSelectedCountry = memoize((inputNumber, onlyCountries, defaultCountry) => {\n        const secondBestGuess = find(onlyCountries, { iso2: defaultCountry }) || {};\n        if (trim(inputNumber) === '') return secondBestGuess;\n\n        const bestGuess = reduce(onlyCountries, (selectedCountry, country) => {\n            if (startsWith(inputNumber, country.dialCode)) {\n                if (country.dialCode.length > selectedCountry.dialCode.length) {\n                    return country;\n                }\n                if (country.dialCode.length === selectedCountry.dialCode.length && country.priority < selectedCountry.priority) {\n                    return country;\n                }\n            }\n            return selectedCountry;\n        }, { dialCode: '', priority: 10001 }, this);\n\n        if (!bestGuess.name) return secondBestGuess;\n        return bestGuess;\n    });\n\n    constructor(props) {\n        super(props);\n        let filteredCountries = countryData.allCountries;\n\n        if (props.disableAreaCodes) filteredCountries = this.deleteAreaCodes(filteredCountries);\n        if (props.regions) filteredCountries = this.filterRegions(props.regions, filteredCountries);\n\n        const onlyCountries = this.excludeCountries(\n            this.getOnlyCountries(props.onlyCountries, filteredCountries), props.excludeCountries,\n        );\n\n        const preferredCountries = filter(filteredCountries, (country) => some(props.preferredCountries, (preferredCountry) => preferredCountry === country.iso2));\n\n        let inputNumber = props.value || '';\n        if(inputNumber.startsWith('00')){\n            inputNumber =  inputNumber.replace('00', '+')\n        }\n\n        let countryGuess;\n        if (inputNumber.length > 1) {\n            // Country detect by value field\n            countryGuess = this.guessSelectedCountry(inputNumber.replace(/\\D/g, '').substring(0, 6), onlyCountries, props.defaultCountry) || 0;\n        } else if (props.defaultCountry) {\n            // Default country\n            countryGuess = find(onlyCountries, { iso2: props.defaultCountry }) || 0;\n        } else {\n            // Empty params\n            countryGuess = 0;\n        }\n\n        const countryGuessIndex = findIndex(this.allCountries, countryGuess);\n        const dialCode = (\n            inputNumber.length < 2\n            && countryGuess\n            && !startsWith(inputNumber.replace(/\\D/g, ''), countryGuess.dialCode)\n        ) ? countryGuess.dialCode : '';\n\n        const formattedNumber = (inputNumber === '' && countryGuess === 0) ? ''\n            : this.formatNumber(\n                (props.disableCountryCode ? '' : dialCode) + inputNumber.replace(/\\D/g, ''),\n                countryGuess.name ? countryGuess.format : undefined,\n            );\n\n        this.state = {\n            formattedNumber,\n            placeholder: props.placeholder,\n            onlyCountries,\n            preferredCountries,\n            defaultCountry: props.defaultCountry,\n            selectedCountry: countryGuess,\n            highlightCountryIndex: countryGuessIndex,\n            queryString: '',\n            freezeSelection: false,\n            debouncedQueryStingSearcher: debounce(this.searchCountry, 100),\n            anchorEl: null,\n        };\n    }\n\n    componentDidMount() {\n        if (document.addEventListener) {\n            document.addEventListener('keydown', this.handleKeydown);\n        }\n    }\n\n    componentDidUpdate({ value: prevValue }) {\n        const { defaultCountry: prevDefaultCountry, formattedNumber, onlyCountries } = this.state;\n        const { defaultCountry, value } = this.props;\n        let isDefCountryUpd = false\n\n        const countryGuess = this.guessSelectedCountry(value && value.length > 0 ? value.substring(0, 6) : '', onlyCountries, defaultCountry);\n        if(countryGuess && countryGuess.iso2){\n            isDefCountryUpd = false\n        }else{\n            isDefCountryUpd = true\n        }\n\n        if (isDefCountryUpd && defaultCountry && defaultCountry !== prevDefaultCountry) {\n            this.updateDefaultCountry(defaultCountry);\n        }\n\n        if (typeof value === 'string' && value !== prevValue && value !== formattedNumber) {\n            this.updateFormattedNumber(value);\n        }\n    }\n\n    componentWillUnmount() {\n        if (document.removeEventListener) {\n            document.removeEventListener('keydown', this.handleKeydown);\n        }\n    }\n\n    getProbableCandidate = memoize((queryString) => {\n        if (!queryString || queryString.length === 0) {\n            return null;\n        }\n\n        const { onlyCountries } = this.state;\n\n        // don't include the preferred countries in search\n        const probableCountries = filter(onlyCountries, (country) => startsWith(country.name.toLowerCase(), queryString.toLowerCase()), this);\n        return probableCountries[0];\n    });\n\n    getOnlyCountries = (onlyCountriesArray, filteredCountries) => {\n        if (onlyCountriesArray.length === 0) return filteredCountries;\n\n        return filteredCountries.filter((country) => onlyCountriesArray.some((element) => element === country.iso2));\n    }\n\n    excludeCountries = (selectedCountries, excludedCountries) => {\n        if (excludedCountries.length === 0) {\n            return selectedCountries;\n        }\n        return filter(selectedCountries, (selCountry) => !includes(excludedCountries, selCountry.iso2));\n    }\n\n    filterRegions = (regions, filteredCountries) => {\n        if (typeof regions === 'string') {\n            const region = regions;\n            return filteredCountries.filter((country) => country.regions.some((element) => element === region));\n        }\n\n        return filteredCountries.filter((country) => {\n            const matches = regions.map((region) => country.regions.some((element) => element === region));\n            return matches.some((el) => el);\n        });\n    }\n\n    // Countries array methods\n    deleteAreaCodes = (filteredCountries) => filteredCountries.filter((country) => country.isAreaCode !== true);\n\n    // Hooks for updated props\n    updateDefaultCountry = (country) => {\n        const { onlyCountries } = this.state;\n        const { disableCountryCode } = this.props;\n\n        const newSelectedCountry = find(onlyCountries, { iso2: country });\n        if(newSelectedCountry) {\n            this.setState({\n                defaultCountry: country,\n                selectedCountry: newSelectedCountry,\n                formattedNumber: disableCountryCode ? '' : `+${newSelectedCountry.dialCode}`,\n            });\n        }\n\n    }\n\n    // View methods\n    scrollTo = (country) => {\n        if (!country) { return; }\n\n        const container = this.dropdownContainerRef;\n\n        if (!container || !document.body) { return; }\n        container.scrollTop = country.offsetTop;\n    }\n\n    formatNumber = (text, patternArg) => {\n        const { disableCountryCode, enableLongNumbers, autoFormat } = this.props;\n\n        let pattern;\n        if (disableCountryCode && patternArg) {\n            pattern = patternArg.split(' ');\n            pattern.shift();\n            pattern = pattern.join(' ');\n        } else {\n            pattern = patternArg;\n        }\n\n        if (!text || text.length === 0) {\n            return disableCountryCode ? '' : '+';\n        }\n\n        // for all strings with length less than 3, just return it (1, 2 etc.)\n        // also return the same text if the selected country has no fixed format\n        if ((text && text.length < 2) || !pattern || !autoFormat) {\n            return disableCountryCode ? text : `+${text}`;\n        }\n\n        const formattedObject = reduce(pattern, (acc, character) => {\n            if (acc.remainingText.length === 0) {\n                return acc;\n            }\n\n            if (character !== '.') {\n                return {\n                    formattedText: acc.formattedText + character,\n                    remainingText: acc.remainingText,\n                };\n            }\n\n            return {\n                formattedText: acc.formattedText + head(acc.remainingText),\n                remainingText: tail(acc.remainingText),\n            };\n        }, {\n            formattedText: '',\n            remainingText: text.split(''),\n        });\n\n        let formattedNumber;\n        if (enableLongNumbers) {\n            formattedNumber = formattedObject.formattedText + formattedObject.remainingText.join('');\n        } else {\n            formattedNumber = formattedObject.formattedText;\n        }\n\n        // Always close brackets\n        if (formattedNumber.includes('(') && !formattedNumber.includes(')')) formattedNumber += ')';\n        return formattedNumber;\n    }\n\n    // Put the cursor to the end of the input (usually after a focus event)\n    cursorToEnd = () => {\n        const { isModernBrowser } = this.props;\n\n        const input = this.inputRef;\n        input.focus();\n        if (isModernBrowser) {\n            const len = input.value.length;\n            input.setSelectionRange(len, len);\n        }\n    }\n\n    getElement = (index) => this.flags[`flag_no_${index}`]\n\n    // return country data from state\n    getCountryData = () => {\n        const { selectedCountry } = this.state;\n\n        if (!selectedCountry) return {};\n\n        return {\n            name: selectedCountry.name || '',\n            dialCode: selectedCountry.dialCode || '',\n            countryCode: selectedCountry.iso2 || '',\n        };\n    }\n\n    handleInput = (e) => {\n        let { selectedCountry: newSelectedCountry, freezeSelection } = this.state;\n        const {\n            selectedCountry, formattedNumber: oldFormattedText, onlyCountries, defaultCountry,\n        } = this.state;\n        const {\n            disableCountryCode, countryCodeEditable, isModernBrowser, onChange,\n        } = this.props;\n\n        let formattedNumber = disableCountryCode ? '' : '+';\n\n        if (!countryCodeEditable) {\n            const updatedInput = `+${newSelectedCountry.dialCode}`;\n            if (e.target.value.length < updatedInput.length) {\n                return;\n            }\n        }\n\n        // Does not exceed 15 digit phone number limit\n        if (e.target.value.replace(/\\D/g, '').length > 15) {\n            return;\n        }\n\n        // if the input is the same as before, must be some special key like enter etc.\n        if (e.target.value === oldFormattedText) {\n            return;\n        }\n\n        // ie hack\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n\n        if (e.target.value.length > 0) {\n            // before entering the number in new format, lets check if the dial code now matches some other country\n            const inputNumber = e.target.value.replace(/\\D/g, '');\n\n            // we don't need to send the whole number to guess the country... only the first 6 characters are enough\n            // the guess country function can then use memoization much more effectively since the set of input it\n            // gets has drastically reduced\n            if (!freezeSelection || selectedCountry.dialCode.length > inputNumber.length) {\n                newSelectedCountry = this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);\n                freezeSelection = false;\n            }\n            // let us remove all non numerals from the input\n            formattedNumber = this.formatNumber(inputNumber, newSelectedCountry.format);\n        }\n\n        let caretPosition = e.target.selectionStart;\n        const diff = formattedNumber.length - oldFormattedText.length;\n\n        this.setState({\n            formattedNumber,\n            freezeSelection,\n            selectedCountry: newSelectedCountry.dialCode\n                ? newSelectedCountry\n                : selectedCountry,\n        }, () => {\n            if (isModernBrowser) {\n                if (diff > 0) {\n                    caretPosition -= diff;\n                }\n\n                const lastChar = formattedNumber.charAt(formattedNumber.length - 1);\n\n                if (lastChar === ')') {\n                    this.inputRef.setSelectionRange(formattedNumber.length - 1, formattedNumber.length - 1);\n                } else if (caretPosition > 0 && oldFormattedText.length >= formattedNumber.length) {\n                    this.inputRef.setSelectionRange(caretPosition, caretPosition);\n                }\n            }\n\n            if (onChange) {\n                onChange(formattedNumber, this.getCountryData());\n            }\n        });\n    }\n\n    handleRefInput = (ref) => {\n        const { inputRef, InputProps } = this.props;\n        this.inputRef = ref;\n\n        let refProp;\n\n        if (inputRef) {\n            refProp = inputRef;\n        } else if (InputProps && InputProps.ref) {\n            refProp = InputProps.ref;\n        }\n\n        if (refProp) {\n            if (typeof refProp === 'function') {\n                refProp(ref);\n            } else {\n                refProp.current = ref;\n            }\n        }\n    };\n\n    handleInputClick = (e) => {\n        const { onClick } = this.props;\n\n        if (onClick) {\n            onClick(e, this.getCountryData());\n        }\n    }\n\n    handleFlagItemClick = (country) => {\n        const { formattedNumber, selectedCountry, onlyCountries } = this.state;\n        const { onChange } = this.props;\n\n        const currentSelectedCountry = selectedCountry;\n        const nextSelectedCountry = isString(country) ? find(onlyCountries, (countryItem) => countryItem.iso2 === country) : find(onlyCountries, country);\n\n        const unformattedNumber = formattedNumber.replace(' ', '').replace('(', '').replace(')', '').replace('-', '');\n        const newNumber = unformattedNumber.length > 1 ? unformattedNumber.replace(currentSelectedCountry.dialCode, nextSelectedCountry.dialCode) : nextSelectedCountry.dialCode;\n\n        const newFormattedNumber = this.formatNumber(newNumber.replace(/\\D/g, ''), nextSelectedCountry.format);\n\n        this.setState({\n            anchorEl: null,\n            selectedCountry: nextSelectedCountry,\n            freezeSelection: true,\n            formattedNumber: newFormattedNumber,\n        }, () => {\n            this.cursorToEnd();\n            if (onChange) {\n                onChange(newFormattedNumber, this.getCountryData());\n            }\n        });\n    }\n\n    handleInputFocus = (e) => {\n        const { selectedCountry } = this.state;\n        const { disableCountryCode, onFocus } = this.props;\n\n        // if the input is blank, insert dial code of the selected country\n        if (this.inputRef) {\n            if (this.inputRef.value === '+' && selectedCountry && !disableCountryCode) {\n                this.setState({\n                    formattedNumber: `+${selectedCountry.dialCode}`,\n                }, () => setTimeout(this.cursorToEnd, 10));\n            }\n        }\n\n        this.setState({ placeholder: '' });\n\n        if (onFocus) {\n            onFocus(e, this.getCountryData());\n        }\n\n        setTimeout(this.cursorToEnd, 10);\n    }\n\n    handleInputBlur = (e) => {\n        const { placeholder, onBlur } = this.props;\n\n        if (!e.target.value) {\n            this.setState({ placeholder });\n        }\n\n        if (onBlur) {\n            onBlur(e, this.getCountryData());\n        }\n    }\n\n    getHighlightCountryIndex = (direction) => {\n        const { highlightCountryIndex: oldHighlightCountryIndex, onlyCountries, preferredCountries } = this.state;\n\n        // had to write own function because underscore does not have findIndex. lodash has it\n        const highlightCountryIndex = oldHighlightCountryIndex + direction;\n\n        if (highlightCountryIndex < 0 || highlightCountryIndex >= (onlyCountries.length + preferredCountries.length)) {\n            return highlightCountryIndex - direction;\n        }\n\n        return highlightCountryIndex;\n    }\n\n    searchCountry = () => {\n        const { queryString, onlyCountries, preferredCountries } = this.state;\n\n        const probableCandidate = this.getProbableCandidate(queryString) || onlyCountries[0];\n        const probableCandidateIndex = findIndex(onlyCountries, probableCandidate) + preferredCountries.length;\n\n        this.scrollTo(this.getElement(probableCandidateIndex), true);\n\n        this.setState({ queryString: '', highlightCountryIndex: probableCandidateIndex });\n    }\n\n    handleKeydown = (e) => {\n        const {\n            anchorEl, highlightCountryIndex, preferredCountries, onlyCountries,\n            queryString, debouncedQueryStingSearcher,\n        } = this.state;\n        const { keys, disabled } = this.props;\n\n        if (!anchorEl || disabled) return;\n\n        // ie hack\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n\n        const moveHighlight = (direction) => {\n            this.setState({\n                highlightCountryIndex: this.getHighlightCountryIndex(direction),\n            }, () => {\n                this.scrollTo(this.getElement(\n                    highlightCountryIndex + preferredCountries.length,\n                ), true);\n            });\n        };\n\n        switch (e.which) {\n            case keys.DOWN:\n                moveHighlight(1);\n                break;\n            case keys.UP:\n                moveHighlight(-1);\n                break;\n            case keys.ENTER:\n                this.handleFlagItemClick(onlyCountries[highlightCountryIndex], e);\n                break;\n            case keys.ESC:\n                this.setState({\n                    anchorEl: null,\n                }, this.cursorToEnd);\n                break;\n            default:\n                if ((e.which >= keys.A && e.which <= keys.Z) || e.which === keys.SPACE) {\n                    this.setState({\n                        queryString: queryString + String.fromCharCode(e.which),\n                    }, debouncedQueryStingSearcher);\n                }\n        }\n    }\n\n    handleInputKeyDown = (e) => {\n        const { keys, onEnterKeyPress, onKeyDown } = this.props;\n        if (e.which === keys.ENTER && onEnterKeyPress) {\n            onEnterKeyPress(e);\n        }\n\n        if (onKeyDown) {\n            onKeyDown(e);\n        }\n    }\n\n    checkIfValid = () => {\n        const { formattedNumber } = this.state;\n        const { isValid } = this.props;\n\n        return isValid(formattedNumber.replace(/\\D/g, ''));\n    };\n\n    updateFormattedNumber = (number) => {\n        const { onlyCountries, defaultCountry } = this.state;\n        const { disableCountryCode } = this.props;\n\n        let countryGuess;\n        let inputNumber = number;\n        let formattedNumber = number;\n\n        // if inputNumber does not start with '+', then use default country's dialing prefix,\n        // otherwise use logic for finding country based on country prefix.\n        if(inputNumber.startsWith('00')){\n            inputNumber =  inputNumber.replace('00', '+')\n        }\n        if (!inputNumber.startsWith('+')) {\n            countryGuess = find(onlyCountries, { iso2: defaultCountry });\n            const dialCode = countryGuess && !startsWith(inputNumber.replace(/\\D/g, ''), countryGuess.dialCode) ? countryGuess.dialCode : '';\n            formattedNumber = this.formatNumber(\n                (disableCountryCode ? '' : dialCode) + inputNumber.replace(/\\D/g, ''),\n                countryGuess ? countryGuess.format : undefined,\n            );\n        } else {\n            inputNumber = inputNumber.replace(/\\D/g, '');\n            countryGuess = this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);\n            formattedNumber = this.formatNumber(inputNumber, countryGuess.format);\n        }\n\n        this.setState({ selectedCountry: countryGuess, formattedNumber });\n    };\n\n    getDropdownProps = () => {\n        const {\n            selectedCountry, anchorEl, preferredCountries, onlyCountries,\n        } = this.state;\n\n        const { classes, dropdownClass, localization, disableDropdown, native, } = this.props;\n        const inputFlagClasses = `flag ${selectedCountry.iso2}`;\n\n        const isSelected = (country) => Boolean(selectedCountry && selectedCountry.dialCode === country.dialCode);\n\n        const dropdownProps = disableDropdown ? {} : {\n            startAdornment: (\n                <InputAdornment\n                    className={classes.positionStart}\n                    position=\"start\"\n                >\n                    {native ? (\n                            <>\n                                <NativeSelect\n                                    id=\"country-menu\"\n                                    open={Boolean(anchorEl)}\n                                    onClose={() => this.setState({ anchorEl: null })}\n                                    className={classes.native}\n                                    classes={{\n                                        root: clsx(classes.nativeRoot, 'native', inputFlagClasses),\n                                        select: classes.nativeSelect,\n                                    }}\n                                    onChange={(e) => this.handleFlagItemClick(e.target.value)}\n                                    disableUnderline\n                                >\n                                    {!!preferredCountries.length && map(preferredCountries, (country, index) => (\n                                        <Item\n                                            key={`preferred_${country.iso2}_${index}`}\n                                            itemRef={(node) => {\n                                                this.flags[`flag_no_${index}`] = node;\n                                            }}\n                                            name={country.name}\n                                            iso2={country.iso2}\n                                            dialCode={country.dialCode}\n                                            localization={localization && localization[country.name]}\n                                            native\n                                        />\n                                    ))}\n\n                                    {map(onlyCountries, (country, index) => (\n                                        <Item\n                                            key={`preferred_${country.iso2}_${index}`}\n                                            itemRef={(node) => {\n                                                this.flags[`flag_no_${index}`] = node;\n                                            }}\n                                            name={country.name}\n                                            iso2={country.iso2}\n                                            dialCode={country.dialCode}\n                                            localization={localization && localization[country.name]}\n                                            native\n                                        />\n                                    ))}\n                                </NativeSelect>\n                            </>\n                        )\n                        : (\n                            <>\n                                <Button\n                                    className={classes.flagButton}\n                                    aria-owns={anchorEl ? 'country-menu' : null}\n                                    aria-label=\"Select country\"\n                                    onClick={(e) => this.setState({ anchorEl: e.currentTarget })}\n                                    aria-haspopup\n                                >\n                                    <div className={inputFlagClasses} />\n                                </Button>\n                                <Menu\n                                    keepMounted\n                                    className={dropdownClass}\n                                    id=\"country-menu\"\n                                    anchorEl={anchorEl}\n                                    open={Boolean(anchorEl)}\n                                    onClose={() => this.setState({ anchorEl: null })}\n                                >\n                                    {!!preferredCountries.length && map(preferredCountries, (country, index) => (\n                                        <Item\n                                            key={`preferred_${country.iso2}_${index}`}\n                                            itemRef={(node) => {\n                                                this.flags[`flag_no_${index}`] = node;\n                                            }}\n                                            selected={isSelected(country)}\n                                            onClick={() => this.handleFlagItemClick(country)}\n                                            name={country.name}\n                                            iso2={country.iso2}\n                                            dialCode={country.dialCode}\n                                            localization={localization && localization[country.name]}\n                                        />\n                                    ))}\n\n                                    {!!preferredCountries.length && <Divider />}\n\n                                    {map(onlyCountries, (country, index) => (\n                                        <Item\n                                            key={`preferred_${country.iso2}_${index}`}\n                                            itemRef={(node) => {\n                                                this.flags[`flag_no_${index}`] = node;\n                                            }}\n                                            selected={isSelected(country)}\n                                            onClick={() => this.handleFlagItemClick(country)}\n                                            name={country.name}\n                                            iso2={country.iso2}\n                                            dialCode={country.dialCode}\n                                            localization={localization && localization[country.name]}\n                                        />\n                                    ))}\n                                </Menu>\n                            </>\n                        )}\n                </InputAdornment>\n            ),\n        };\n\n        return dropdownProps;\n    };\n\n    render() {\n        const {\n            formattedNumber, placeholder: statePlaceholder,\n        } = this.state;\n\n        const {\n            // start placeholder props\n            native, defaultCountry, excludeCountries, onlyCountries, preferredCountries,\n            dropdownClass, autoFormat, disableAreaCodes, isValid, disableCountryCode,\n            disableDropdown, enableLongNumbers, countryCodeEditable, onEnterKeyPress,\n            isModernBrowser, classes, keys, localization, placeholder, regions, onChange,\n            value,\n            // end placeholder props\n            inputClass, error, InputProps,\n            ...restProps\n        } = this.props;\n\n        const dropdownProps = this.getDropdownProps();\n\n        return (\n            <TextField\n                placeholder={statePlaceholder}\n                value={formattedNumber}\n                className={inputClass}\n                inputRef={this.handleRefInput}\n                error={error || !this.checkIfValid()}\n                onChange={this.handleInput}\n                onClick={this.handleInputClick}\n                onFocus={this.handleInputFocus}\n                onBlur={this.handleInputBlur}\n                onKeyDown={this.handleInputKeyDown}\n                type=\"tel\"\n                InputProps={{\n                    ...dropdownProps,\n                    ...InputProps,\n                }}\n                {...restProps}\n            />\n        );\n    }\n}\n\nPhoneInput.propTypes = {\n    classes: PropTypes.object,\n    excludeCountries: PropTypes.arrayOf(PropTypes.string),\n    onlyCountries: PropTypes.arrayOf(PropTypes.string),\n    preferredCountries: PropTypes.arrayOf(PropTypes.string),\n    defaultCountry: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    disabled: PropTypes.bool,\n    error: PropTypes.bool,\n    variant: PropTypes.string,\n    native: PropTypes.bool,\n    inputClass: PropTypes.string,\n    dropdownClass: PropTypes.string,\n    InputProps: PropTypes.object,\n    inputProps: PropTypes.object,\n    inputRef: PropTypes.func,\n    autoFormat: PropTypes.bool,\n    disableAreaCodes: PropTypes.bool,\n    disableCountryCode: PropTypes.bool,\n    disableDropdown: PropTypes.bool,\n    enableLongNumbers: PropTypes.bool,\n    countryCodeEditable: PropTypes.bool,\n    regions: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    localization: PropTypes.object,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    isValid: PropTypes.func,\n    isModernBrowser: PropTypes.func,\n    onEnterKeyPress: PropTypes.func,\n    keys: PropTypes.object,\n};\n\nPhoneInput.defaultProps = {\n    classes: {},\n    excludeCountries: [],\n    onlyCountries: [],\n    preferredCountries: [],\n    defaultCountry: '',\n    placeholder: '+1 (702) 123-4567',\n    disabled: false,\n    error: false,\n    variant: 'standard',\n    native: false,\n    inputClass: '',\n    dropdownClass: '',\n    autoFormat: true,\n    disableAreaCodes: false,\n    isValid: (inputNumber) => some(countryData.allCountries, (country) => startsWith(inputNumber, country.dialCode) || startsWith(country.dialCode, inputNumber)),\n    disableCountryCode: false,\n    disableDropdown: false,\n    enableLongNumbers: true,\n    countryCodeEditable: true,\n    regions: '',\n    localization: {},\n    onEnterKeyPress: () => { },\n    onChange: () => { },\n    isModernBrowser: () => (document.createElement ? Boolean(document.createElement('input').setSelectionRange) : false),\n    keys: {\n        UP: 38,\n        DOWN: 40,\n        RIGHT: 39,\n        LEFT: 37,\n        ENTER: 13,\n        ESC: 27,\n        PLUS: 43,\n        A: 65,\n        Z: 90,\n        SPACE: 32,\n    },\n};\n\nPhoneInput.displayName = 'PhoneInput';\n\nexport default withStyles(style)(PhoneInput)"]},"metadata":{},"sourceType":"module"}