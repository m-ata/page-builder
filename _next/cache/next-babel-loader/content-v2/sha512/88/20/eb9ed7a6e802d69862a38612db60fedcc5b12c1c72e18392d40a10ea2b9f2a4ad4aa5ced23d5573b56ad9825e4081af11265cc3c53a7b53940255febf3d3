{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/lib/translations/context/LocaleContext.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { createContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { isLocale } from 'lib/translations/types';\n\nvar getLanguageFile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(langcode) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              url: 'api/hotel/app/language',\n              method: 'post',\n              params: {\n                langcode: langcode\n              }\n            }).then(function (hotelAppLanguageResponse) {\n              var hotelAppLanguageResponseData = hotelAppLanguageResponse.data;\n\n              if (hotelAppLanguageResponseData.success) {\n                return hotelAppLanguageResponseData.data;\n              } else {\n                return false;\n              }\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getLanguageFile(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var LocaleContext = /*#__PURE__*/createContext({\n  locale: 'en',\n  setLocale: function setLocale() {\n    return null;\n  },\n  langFilesData: false,\n  hotelLanguageFile: false,\n  showLangCode: false\n});\nexport var LocaleProvider = function LocaleProvider(_ref2) {\n  _s();\n\n  var lang = _ref2.lang,\n      defaultHotelLanguageFile = _ref2.defaultHotelLanguageFile,\n      defaultLanguageFile = _ref2.defaultLanguageFile,\n      children = _ref2.children;\n\n  var _useState = useState(lang),\n      locale = _useState[0],\n      setLocale = _useState[1];\n\n  var _useState2 = useState(false),\n      langFilesDataLoading = _useState2[0],\n      setLangFilesDataLoading = _useState2[1];\n\n  var _useState3 = useState(defaultLanguageFile || false),\n      langFilesData = _useState3[0],\n      setLangFileData = _useState3[1];\n\n  var _useState4 = useState(defaultHotelLanguageFile || false),\n      hotelLanguageFile = _useState4[0],\n      setHotelLanguageFile = _useState4[1];\n\n  var _useState5 = useState(false),\n      showLangCode = _useState5[0],\n      setShowLangCode = _useState5[1];\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  useEffect(function () {\n    if (locale !== localStorage.getItem('locale') && !langFilesDataLoading) {\n      localStorage.setItem('locale', locale);\n    }\n  }, [locale]); // sync locale value on client-side route changes\n\n  useEffect(function () {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang && !langFilesDataLoading) {\n      setLangFilesDataLoading(true);\n      getLanguageFile(query.lang).then(function (fileData) {\n        setLangFileData(fileData);\n        setLocale(query.lang);\n        setLangFilesDataLoading(false);\n      });\n    }\n\n    if (typeof query.lang === 'string' && query.lang === 'show') {\n      setShowLangCode(true);\n    } else {\n      setShowLangCode(false);\n    }\n  }, [query.lang, locale]);\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      langFilesData: langFilesData,\n      hotelLanguageFile: hotelLanguageFile,\n      locale: locale,\n      setLocale: setLocale,\n      showLangCode: showLangCode\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }\n  }, children);\n};\n\n_s(LocaleProvider, \"RRf96h/0utjXERJMuNUDsLru0ZY=\", false, function () {\n  return [useRouter];\n});\n\n_c = LocaleProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocaleProvider\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/lib/translations/context/LocaleContext.js"],"names":["React","createContext","useEffect","useState","axios","useRouter","isLocale","getLanguageFile","langcode","url","method","params","then","hotelAppLanguageResponse","hotelAppLanguageResponseData","data","success","LocaleContext","locale","setLocale","langFilesData","hotelLanguageFile","showLangCode","LocaleProvider","lang","defaultHotelLanguageFile","defaultLanguageFile","children","langFilesDataLoading","setLangFilesDataLoading","setLangFileData","setHotelLanguageFile","setShowLangCode","query","localStorage","getItem","setItem","fileData"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { useRouter } from 'next/router'\nimport { isLocale } from 'lib/translations/types'\n\nconst getLanguageFile = async (langcode) => {\n    return await axios({\n        url: 'api/hotel/app/language',\n        method: 'post',\n        params: {\n            langcode: langcode\n        }\n    }).then((hotelAppLanguageResponse) => {\n        const hotelAppLanguageResponseData = hotelAppLanguageResponse.data\n        if (hotelAppLanguageResponseData.success) {\n            return hotelAppLanguageResponseData.data\n        }else {\n            return false\n        }\n    })\n}\n\nexport const LocaleContext = createContext({\n    locale: 'en',\n    setLocale: () => null,\n    langFilesData: false,\n    hotelLanguageFile: false,\n    showLangCode: false\n})\n\nexport const LocaleProvider = ({ lang, defaultHotelLanguageFile, defaultLanguageFile, children }) => {\n    const [locale, setLocale] = useState(lang)\n    const [langFilesDataLoading, setLangFilesDataLoading] = useState(false)\n    const [langFilesData, setLangFileData] = useState(defaultLanguageFile || false)\n    const [hotelLanguageFile, setHotelLanguageFile] = useState(defaultHotelLanguageFile || false)\n    const [showLangCode, setShowLangCode] = useState(false)\n    const { query } = useRouter()\n\n    useEffect(() => {\n        if (locale !== localStorage.getItem('locale') && !langFilesDataLoading) {\n            localStorage.setItem('locale', locale)\n        }\n    }, [locale])\n\n    // sync locale value on client-side route changes\n    useEffect(() => {\n        if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang && !langFilesDataLoading) {\n            setLangFilesDataLoading(true)\n            getLanguageFile(query.lang)\n                .then((fileData) => {\n                    setLangFileData(fileData)\n                    setLocale(query.lang)\n                    setLangFilesDataLoading(false)\n            })\n        }\n\n        if (typeof query.lang === 'string' && query.lang === 'show') {\n            setShowLangCode(true)\n        }else{\n            setShowLangCode(false)\n        }\n\n    }, [query.lang, locale])\n\n    return <LocaleContext.Provider value={{ langFilesData, hotelLanguageFile, locale, setLocale, showLangCode }}>{children}</LocaleContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}