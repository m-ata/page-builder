{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/RenderSurvey.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { useSelector } from 'react-redux';\nimport { OREST_ENDPOINT, REQUEST_METHOD_CONST } from '../../../model/orest/constants';\nimport WebCmsGlobal from '../../webcms-global';\nimport useNotifications from '../../../model/notification/useNotifications';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios';\nimport { CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from './style/RenderSurvey.style';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\nimport { useRouter } from 'next/router';\nimport useSurveyAction from '../../../model/survey/useSurveyAction';\nimport OnePageSurvey from './render-types/OnePageSurvey';\nimport { Upload, UseOrest } from '@webcms/orest';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport { Pagination, PaginationItem } from '@material-ui/lab';\nimport GroupPerPageSurvey from './render-types/GroupPerPageSurvey';\nimport QuestionPerPageSurvey from './render-types/QuestionPerPageSurvey';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport { SURVEY_DISPLAY_TYPE_GROUP, SURVEY_DISPLAY_TYPE_ONE_PAGE, SURVEY_DISPLAY_TYPE_QUESTION, SURVEY_DISPLAY_TYPE_SUB_GROUP } from '../../../model/survey/constants';\nimport useTranslation from \"lib/translations/hooks/useTranslation\";\nimport { LocaleContext } from 'lib/translations/context/LocaleContext';\nimport useWidth from '@webcms-ui/hooks/use-width';\nimport { useSnackbar } from 'notistack';\nimport { sendGuestChangeNotifyMail } from '../../guest/account/Base/helper';\nimport { connect } from 'react-redux';\nimport TrackedChangesDialog from \"../../TrackedChangesDialog\";\nconst useStyles = makeStyles(styles);\n\nfunction RenderOptions(props) {\n  const {\n    survey,\n    displayType\n  } = props;\n\n  if (displayType === SURVEY_DISPLAY_TYPE_ONE_PAGE) {\n    //0 - Single Page\n    return __jsx(OnePageSurvey, {\n      options: survey,\n      displayType: displayType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }\n    });\n  } else if (displayType === SURVEY_DISPLAY_TYPE_GROUP) {\n    //1 - Group Per Page\n    return __jsx(GroupPerPageSurvey, {\n      options: survey,\n      displayType: displayType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }\n    });\n  } else if (displayType === SURVEY_DISPLAY_TYPE_SUB_GROUP) {\n    //2 - SubGroup Per Page\n    //TODO - Change this later\n    return __jsx(GroupPerPageSurvey, {\n      options: survey,\n      displayType: displayType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 16\n      }\n    });\n  } else if (displayType === SURVEY_DISPLAY_TYPE_QUESTION) {\n    //9 - Question Per Page\n    return __jsx(QuestionPerPageSurvey, {\n      options: survey,\n      displayType: displayType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 16\n      }\n    });\n  } else {\n    //if null - default display type\n    return __jsx(OnePageSurvey, {\n      options: survey,\n      displayType: displayType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    });\n  }\n}\n\nconst RenderSurvey = props => {\n  var _router$query;\n\n  const {\n    state,\n    survey,\n    surveygid,\n    surveyrefno,\n    clientid,\n    isOnlyOneQuestionRender,\n    questionLength,\n    handleOpenSurveyDialog,\n    handleReset\n  } = props;\n  const width = useWidth();\n  const classes = useStyles();\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    t\n  } = useTranslation();\n  const router = useRouter();\n  const surveyGid = router.query.surveyGid || surveygid;\n  const surveyHotelRefno = router.query.hotelrefno || surveyrefno;\n  const refid = router.query.refid || clientid;\n  const reftoken = router.query.reftoken;\n  const isOweb = (router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.isOweb) === '1' ? true : false;\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const clientBase = useSelector(state => {\n    var _state$orest, _state$orest$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$state = _state$orest.state) === null || _state$orest$state === void 0 ? void 0 : _state$orest$state.client) || false;\n  });\n  const changeHotelRefNo = useSelector(state => {\n    var _state$formReducer, _state$formReducer$gu;\n\n    return (state === null || state === void 0 ? void 0 : (_state$formReducer = state.formReducer) === null || _state$formReducer === void 0 ? void 0 : (_state$formReducer$gu = _state$formReducer.guest) === null || _state$formReducer$gu === void 0 ? void 0 : _state$formReducer$gu.changeHotelRefno) || null;\n  });\n  const isPortal = GENERAL_SETTINGS.ISPORTAL;\n\n  const trySavingAgainAction = () => {\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      onClick: () => handleClickSaveSurvey(),\n      color: \"inherit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, t('str_tryAgain')));\n  }; //redux\n\n\n  const {\n    showError\n  } = useNotifications();\n  const {\n    setSurveyIsValid,\n    setSurveyPage,\n    setSurveyGroup\n  } = useSurveyAction();\n  const token = reftoken || useSelector(state => state.orest.currentUser !== null && state.orest.currentUser.auth.access_token);\n  let loginfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo);\n  const reservBase = state.clientReservation || false;\n  const {\n    locale\n  } = useContext(LocaleContext);\n\n  if (!loginfo && refid && surveyHotelRefno) {\n    loginfo = {\n      refid: refid,\n      hotelrefno: surveyHotelRefno\n    };\n  }\n\n  let clientParams = {};\n  clientParams.hotelrefno = loginfo && loginfo.hotelrefno;\n  clientParams.isportal = isPortal;\n  clientParams.surveyrefno = surveyrefno;\n\n  if (isPortal) {\n    clientParams.portalrefno = changeHotelRefNo;\n  }\n\n  if (GENERAL_SETTINGS.ISCHAIN && String(clientParams.hotelrefno) !== String(GENERAL_SETTINGS.HOTELREFNO)) {\n    clientParams.chainid = loginfo && loginfo.hotelrefno;\n    clientParams.ischain = true;\n  }\n\n  const surveyTrans = useSelector(state => state.survey.trans);\n  const surveyIsValid = useSelector(state => state.survey.isValid);\n  const displayType = useSelector(state => state.survey.displayType);\n  const surveyAnswers = useSelector(state => state.survey.answers[surveyTrans]);\n  const surveyFiles = useSelector(state => state.survey.files[surveyTrans]);\n  const surveyPage = useSelector(state => state.survey.page);\n  const surveyLastPage = useSelector(state => state.survey.lastPage);\n  const surveyGroup = useSelector(state => state.survey.group);\n  const surveyLastGroup = useSelector(state => state.survey.lastGroup); //state\n\n  const {\n    0: isSaving,\n    1: setIsSaving\n  } = useState(false);\n  const {\n    0: surveySaved,\n    1: setSurveySaved\n  } = useState(false);\n  const {\n    0: showSurveyAnyway,\n    1: setShowSurveyAnyway\n  } = useState(false);\n  const {\n    0: confirmationNumber,\n    1: setConfirmationNumber\n  } = useState(null);\n  const {\n    0: sendClientMail,\n    1: setSendClientMail\n  } = useState(false);\n  const {\n    0: clientMail,\n    1: setClientMail\n  } = useState(null);\n  const {\n    0: isFilesUploading,\n    1: setIsFilesUploading\n  } = useState(false);\n  const {\n    0: openTrackedDialog,\n    1: setOpenTrackedDialog\n  } = useState(false);\n  useEffect(() => {\n    if (surveyIsValid && isOweb) {\n      setShowSurveyAnyway(true);\n    }\n  }, [surveyIsValid]);\n\n  const handleSave = () => {\n    const answerList = Object.keys(surveyAnswers).length;\n\n    if (answerList < questionLength) {\n      setOpenTrackedDialog(true);\n    } else {\n      handleClickSaveSurvey();\n    }\n  };\n\n  const handleClickSaveSurvey = () => {\n    var _Object$keys;\n\n    let fileUploadCounter = 0;\n    const data = [];\n    setIsSaving(true); //for make disable inputs\n\n    setShowSurveyAnyway(true);\n    setSurveyIsValid(true);\n    clientParams.reservno = (reservBase === null || reservBase === void 0 ? void 0 : reservBase.reservno) || false;\n    const answerLength = (_Object$keys = Object.keys(surveyAnswers)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.length; //prepare survey answers to be sent\n\n    if (surveyAnswers) {\n      Object.keys(surveyAnswers).map(questionId => {\n        Object.keys(surveyAnswers[questionId]).map(answerId => {\n          data.push(_objectSpread(_objectSpread({\n            questionid: questionId,\n            answerid: answerId\n          }, surveyAnswers[questionId][answerId]), {}, {\n            hotelrefno: isPortal ? changeHotelRefNo : GENERAL_SETTINGS.HOTELREFNO\n          }));\n        });\n      });\n    } //survey save api\n\n\n    if (data.length > 0) {\n      axios({\n        url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey/save',\n        method: REQUEST_METHOD_CONST.POST,\n        timeout: 1000 * 300,\n        // Wait for 5 min.\n        params: Object.assign({\n          onlyAnswer: isOnlyOneQuestionRender && answerLength < questionLength,\n          trans: surveyTrans,\n          survey: surveyGid,\n          langcode: locale\n        }, clientParams),\n        data: data\n      }).then(async r => {\n        if (r.status === 200 && r.data.success) {\n          const resData = r.data;\n\n          if (resData) {\n            await sendGuestChangeNotifyMail(reservBase !== null && reservBase !== void 0 && reservBase.gid ? false : true, 'surveytrans', 'upd', clientBase.id, reservBase !== null && reservBase !== void 0 && reservBase.gid ? reservBase.gid : clientBase.gid, {}, (reservBase === null || reservBase === void 0 ? void 0 : reservBase.hotelrefno) || GENERAL_SETTINGS.HOTELREFNO); //upload files\n\n            if (resData.answers && surveyFiles) {\n              resData.answers.map(answer => {\n                Object.keys(surveyFiles).map(answerId => {\n                  const files = surveyFiles[answerId];\n\n                  if (files) {\n                    if (String(answer.answerid) === String(answerId)) {\n                      setIsFilesUploading(true);\n                      fileUploadCounter++;\n                      Upload({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        token,\n                        params: {\n                          masterid: answer.mid,\n                          hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n                        },\n                        files: files\n                      }).then(r1 => {\n                        if (r1.status === 200) {\n                          const data = r1.data.data; //set refid to uploaded files\n\n                          if (data && loginfo && loginfo.refid) {\n                            const arrayData = [];\n\n                            if (Array.isArray(data)) {\n                              data.map(file => {\n                                arrayData.push({\n                                  gid: file.gid,\n                                  refid: loginfo.refid\n                                });\n                              });\n                            } else {\n                              if (data.gid) {\n                                arrayData.push({\n                                  gid: data.gid,\n                                  refid: loginfo.refid\n                                });\n                              }\n                            }\n\n                            if (arrayData.length > 0) {\n                              UseOrest({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: OREST_ENDPOINT.RAFILE + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n                                method: REQUEST_METHOD_CONST.PATCH,\n                                token,\n                                data: arrayData,\n                                params: {\n                                  hotelrefno: surveyHotelRefno\n                                }\n                              }).then(r2 => {\n                                if (r2.status === 200) {//console.log(r2.data)\n                                }\n                              });\n                            }\n                          }\n                        } else {\n                          if (r1.data && r1.data.error_description) {\n                            showError('File upload failed! ' + r1.data.error_description);\n                          } else {\n                            showError('File upload failed!');\n                          }\n                        }\n\n                        fileUploadCounter--;\n\n                        if (fileUploadCounter === 0) {\n                          setIsFilesUploading(false);\n                        }\n                      });\n                    }\n                  }\n                });\n              });\n            }\n\n            setConfirmationNumber(String(resData.confirmationNumber));\n            setSendClientMail(resData.sendmail);\n            setClientMail(String(resData.email));\n          }\n\n          typeof handleReset === 'function' && handleReset();\n          enqueueSnackbar(t('str_thankYouForYourFeedback'), {\n            variant: 'success',\n            autoHideDuration: 10000\n          });\n          setSurveySaved(true);\n        } else {\n          if (r.data && r.data.error_description) {\n            enqueueSnackbar(r.data.error_description, {\n              variant: 'error',\n              autoHideDuration: 10000\n            });\n          } else {\n            enqueueSnackbar(t('str_unexpectedProblem'), {\n              variant: 'error',\n              autoHideDuration: 10000\n            });\n          }\n        }\n      }).then(() => {\n        setIsSaving(false);\n        setSurveyIsValid(false);\n      }).catch(() => {\n        enqueueSnackbar(t('str_unexpectedProblem'), {\n          variant: 'error',\n          autoHideDuration: 10000,\n          action: trySavingAgainAction()\n        });\n        setIsSaving(false);\n        setSurveyIsValid(false);\n      });\n    } else {\n      setIsSaving(false);\n      setSurveyIsValid(false);\n    }\n  };\n\n  const handleClickShowMyAnswers = () => {\n    setShowSurveyAnyway(true);\n  };\n\n  const onChangePagination = (event, page) => {\n    setSurveyPage(page - 1);\n  };\n\n  const onClickPageBack = () => {\n    window.scrollTo(0, 0);\n    setSurveyGroup(surveyGroup - 1);\n  };\n\n  const onClickPageNext = () => {\n    window.scrollTo(0, 0);\n    setSurveyGroup(surveyGroup + 1);\n  };\n\n  const getSiblingCount = () => {\n    if (width === 'xl') {\n      return 2;\n    } else if (width === 'lg') {\n      return 2;\n    } else if (width === 'md') {\n      return 2;\n    } else if (width === 'sm') {\n      return 2;\n    } else {\n      return 1;\n    }\n  };\n\n  const getBoundaryCount = () => {\n    if (width === 'xl') {\n      return 2;\n    } else if (width === 'lg') {\n      return 2;\n    } else if (width === 'md') {\n      return 2;\n    } else if (width === 'sm') {\n      return 2;\n    } else {\n      return 1;\n    }\n  };\n\n  if (isSaving) {\n    return __jsx(Grid, {\n      container: true,\n      direction: 'column',\n      justify: 'center',\n      alignItems: 'center',\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }\n    }, __jsx(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 21\n      }\n    })), __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }\n    }, __jsx(\"h3\", {\n      style: {\n        fontSize: 28,\n        fontWeight: 500,\n        color: '#2F3434',\n        textAlign: 'center',\n        margin: '12px 6px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 21\n      }\n    }, t('str_answerSavingMessage'))));\n  } else if (isFilesUploading) {\n    return __jsx(Grid, {\n      container: true,\n      direction: 'column',\n      justify: 'center',\n      alignItems: 'center',\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 13\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }\n    }, __jsx(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }\n    })), __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 17\n      }\n    }, __jsx(\"h3\", {\n      style: {\n        fontSize: 28,\n        fontWeight: 500,\n        color: '#2F3434',\n        textAlign: 'center',\n        margin: '12px 6px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 21\n      }\n    }, t('str_filesUploading'))));\n  } else if (surveySaved) {\n    return __jsx(Grid, {\n      container: true,\n      direction: 'column',\n      justify: 'center',\n      alignItems: 'center',\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 13\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }\n    }, __jsx(CheckCircleOutlinedIcon, {\n      style: {\n        fontSize: 150,\n        color: '#4caf50'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }\n    })), __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }\n    }, __jsx(\"h3\", {\n      style: {\n        fontSize: 34,\n        fontWeight: 500,\n        color: '#2F3434',\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }\n    }, t('str_thankForPart'))), clientMail && sendClientMail && __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }\n    }, __jsx(\"p\", {\n      style: {\n        fontSize: 22,\n        fontWeight: 500,\n        color: '#2F3434',\n        textAlign: 'center',\n        margin: '24px 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 25\n      }\n    }, t('str_receiveAnEmailSpace'), ' ', __jsx(\"span\", {\n      style: {\n        fontSize: 23,\n        fontWeight: 700\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 29\n      }\n    }, clientMail), ' ', t('str_spaceConfirmTheSurvey'))), confirmationNumber && __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 21\n      }\n    }, __jsx(\"h3\", {\n      style: {\n        fontSize: 20,\n        fontWeight: 500,\n        color: '#2F3434',\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 25\n      }\n    }, t('str_confirmationNumber'), \" \", confirmationNumber)));\n  }\n\n  if (surveyIsValid && !showSurveyAnyway && !isOweb) {\n    return __jsx(Grid, {\n      container: true,\n      direction: 'column',\n      justify: 'center',\n      alignItems: 'center',\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 13\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }\n    }, __jsx(\"h2\", {\n      style: {\n        fontSize: 34,\n        fontWeight: 600,\n        color: '#2F3434',\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 21\n      }\n    }, t('str_surveyComplete'))), __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      variant: 'outlined',\n      onClick: handleClickShowMyAnswers,\n      style: {\n        fontSize: 17,\n        fontWeight: 500,\n        color: '#2F3434',\n        textTransform: 'initial',\n        margin: '12px 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 21\n      }\n    }, t('str_showMyAnswers'))));\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 9\n    }\n  }, __jsx(RenderOptions, {\n    survey: survey,\n    displayType: displayType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    style: {\n      flexGrow: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 13\n    }\n  }), __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    justify: 'space-between',\n    className: classes.paginationGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    style: {\n      alignSelf: 'center'\n    },\n    className: classes.bottomGridForMobile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 17\n    }\n  }, displayType === SURVEY_DISPLAY_TYPE_QUESTION && __jsx(Pagination, {\n    variant: 'outlined',\n    shape: 'round',\n    siblingCount: getSiblingCount(),\n    boundaryCount: getBoundaryCount(),\n    renderItem: item => {\n      return __jsx(PaginationItem, _extends({}, item, {\n        variant: item.type === 'page' ? 'text' : item.variant,\n        size: 'small',\n        classes: {\n          root: classes.paginationItemRoot,\n          selected: classes.paginationItemSelected,\n          sizeSmall: classes.paginationItemSize,\n          ellipsis: classes.paginationItemEllipsis\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 37\n        }\n      }));\n    },\n    count: surveyLastPage,\n    page: surveyPage + 1,\n    onChange: onChangePagination,\n    classes: {\n      ul: classes.paginationUl\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 25\n    }\n  }), displayType === SURVEY_DISPLAY_TYPE_GROUP && surveyLastGroup !== 1 && __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    className: classes.bottomGridForMobile,\n    style: {\n      margin: 0,\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 29\n    }\n  }, __jsx(IconButton, {\n    onClick: onClickPageBack,\n    disabled: surveyGroup <= 0,\n    classes: {\n      root: classes.arrowIconButton,\n      disabled: classes.arrowIconButtonDisabled\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 33\n    }\n  }, __jsx(ArrowBackIcon, {\n    className: classes.arrowIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 37\n    }\n  })), __jsx(\"span\", {\n    className: classes.arrowText,\n    style: {\n      opacity: surveyGroup <= 0 && 0.5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 33\n    }\n  }, t('str_previous'))), __jsx(\"div\", {\n    className: classes.arrowIconDivider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 29\n    }\n  }), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 29\n    }\n  }, __jsx(\"span\", {\n    className: classes.arrowText,\n    style: {\n      opacity: surveyGroup === surveyLastGroup - 1 && 0.5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 33\n    }\n  }, t('str_next')), __jsx(IconButton, {\n    onClick: onClickPageNext,\n    disabled: surveyGroup === surveyLastGroup - 1,\n    classes: {\n      root: classes.arrowIconButton,\n      disabled: classes.arrowIconButtonDisabled\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 33\n    }\n  }, __jsx(ArrowForwardIcon, {\n    className: classes.arrowIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 37\n    }\n  }))))), __jsx(Grid, {\n    item: true,\n    className: classes.bottomGridForMobile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 17\n    }\n  }, !surveyIsValid && !isOnlyOneQuestionRender && __jsx(Button, {\n    onClick: handleClickSaveSurvey,\n    fullWidth: true,\n    variant: \"contained\",\n    color: 'primary',\n    disabled: isSaving,\n    className: classes.saveButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 25\n    }\n  }, t('str_completeTheSurvey'), isSaving && __jsx(CircularProgress, {\n    size: 24,\n    className: classes.buttonProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 42\n    }\n  })), !surveyIsValid && isOnlyOneQuestionRender && __jsx(Button, {\n    onClick: handleSave,\n    fullWidth: true,\n    color: 'primary',\n    variant: \"contained\",\n    disabled: isSaving,\n    className: classes.saveButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 25\n    }\n  }, t('str_send'), isSaving && __jsx(CircularProgress, {\n    size: 24,\n    className: classes.buttonProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 42\n    }\n  })))), __jsx(TrackedChangesDialog, {\n    open: openTrackedDialog,\n    onPressNo: e => {\n      setOpenTrackedDialog(e);\n      handleClickSaveSurvey();\n    },\n    onPressYes: e => {\n      setOpenTrackedDialog(e);\n      typeof handleOpenSurveyDialog === 'function' && handleOpenSurveyDialog();\n    },\n    dialogDesc: 'Would you like to complete the survey?',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nexport default connect(mapStateToProps, null)(RenderSurvey);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/RenderSurvey.js"],"names":["React","useCallback","useContext","useEffect","useState","Button","useSelector","OREST_ENDPOINT","REQUEST_METHOD_CONST","WebCmsGlobal","useNotifications","Grid","axios","CircularProgress","makeStyles","styles","CheckCircleOutlinedIcon","useRouter","useSurveyAction","OnePageSurvey","Upload","UseOrest","LoadingSpinner","Pagination","PaginationItem","GroupPerPageSurvey","QuestionPerPageSurvey","IconButton","ArrowBackIcon","ArrowForwardIcon","SURVEY_DISPLAY_TYPE_GROUP","SURVEY_DISPLAY_TYPE_ONE_PAGE","SURVEY_DISPLAY_TYPE_QUESTION","SURVEY_DISPLAY_TYPE_SUB_GROUP","useTranslation","LocaleContext","useWidth","useSnackbar","sendGuestChangeNotifyMail","connect","TrackedChangesDialog","useStyles","RenderOptions","props","survey","displayType","RenderSurvey","state","surveygid","surveyrefno","clientid","isOnlyOneQuestionRender","questionLength","handleOpenSurveyDialog","handleReset","width","classes","GENERAL_SETTINGS","t","router","surveyGid","query","surveyHotelRefno","hotelrefno","refid","reftoken","isOweb","enqueueSnackbar","clientBase","orest","client","changeHotelRefNo","formReducer","guest","changeHotelRefno","isPortal","ISPORTAL","trySavingAgainAction","handleClickSaveSurvey","showError","setSurveyIsValid","setSurveyPage","setSurveyGroup","token","currentUser","auth","access_token","loginfo","reservBase","clientReservation","locale","clientParams","isportal","portalrefno","ISCHAIN","String","HOTELREFNO","chainid","ischain","surveyTrans","trans","surveyIsValid","isValid","surveyAnswers","answers","surveyFiles","files","surveyPage","page","surveyLastPage","lastPage","surveyGroup","group","surveyLastGroup","lastGroup","isSaving","setIsSaving","surveySaved","setSurveySaved","showSurveyAnyway","setShowSurveyAnyway","confirmationNumber","setConfirmationNumber","sendClientMail","setSendClientMail","clientMail","setClientMail","isFilesUploading","setIsFilesUploading","openTrackedDialog","setOpenTrackedDialog","handleSave","answerList","Object","keys","length","fileUploadCounter","data","reservno","answerLength","map","questionId","answerId","push","questionid","answerid","url","BASE_URL","method","POST","timeout","params","assign","onlyAnswer","langcode","then","r","status","success","resData","gid","id","answer","apiUrl","OREST_URL","masterid","mid","r1","arrayData","Array","isArray","file","endpoint","RAFILE","LIST","PATCH","r2","error_description","sendmail","email","variant","autoHideDuration","catch","action","handleClickShowMyAnswers","onChangePagination","event","onClickPageBack","window","scrollTo","onClickPageNext","getSiblingCount","getBoundaryCount","height","fontSize","fontWeight","color","textAlign","margin","textTransform","display","flexDirection","flexGrow","paginationGrid","alignSelf","bottomGridForMobile","item","type","root","paginationItemRoot","selected","paginationItemSelected","sizeSmall","paginationItemSize","ellipsis","paginationItemEllipsis","ul","paginationUl","arrowIconButton","disabled","arrowIconButtonDisabled","arrowIcon","arrowText","opacity","arrowIconDivider","saveButton","buttonProgress","e","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport {useSelector} from 'react-redux'\nimport { OREST_ENDPOINT, REQUEST_METHOD_CONST} from '../../../model/orest/constants'\nimport WebCmsGlobal from '../../webcms-global'\nimport useNotifications from '../../../model/notification/useNotifications'\nimport Grid from '@material-ui/core/Grid'\nimport axios from 'axios'\nimport {CircularProgress} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/core/styles'\nimport styles from './style/RenderSurvey.style'\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined'\nimport {useRouter} from 'next/router'\nimport useSurveyAction from '../../../model/survey/useSurveyAction'\nimport OnePageSurvey from './render-types/OnePageSurvey'\nimport {Upload, UseOrest} from '@webcms/orest'\nimport LoadingSpinner from '../../LoadingSpinner'\nimport {Pagination, PaginationItem} from '@material-ui/lab'\nimport GroupPerPageSurvey from './render-types/GroupPerPageSurvey'\nimport QuestionPerPageSurvey from './render-types/QuestionPerPageSurvey'\nimport IconButton from '@material-ui/core/IconButton'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward'\nimport {\n    SURVEY_DISPLAY_TYPE_GROUP,\n    SURVEY_DISPLAY_TYPE_ONE_PAGE,\n    SURVEY_DISPLAY_TYPE_QUESTION,\n    SURVEY_DISPLAY_TYPE_SUB_GROUP,\n} from '../../../model/survey/constants'\nimport useTranslation from \"lib/translations/hooks/useTranslation\"\nimport { LocaleContext } from 'lib/translations/context/LocaleContext'\nimport useWidth from '@webcms-ui/hooks/use-width'\nimport { useSnackbar } from 'notistack'\nimport { sendGuestChangeNotifyMail } from '../../guest/account/Base/helper'\nimport { connect } from 'react-redux'\nimport TrackedChangesDialog from \"../../TrackedChangesDialog\";\n\nconst useStyles = makeStyles(styles)\n\nfunction RenderOptions(props) {\n    const {survey, displayType} = props\n\n    if (displayType === SURVEY_DISPLAY_TYPE_ONE_PAGE) {\n        //0 - Single Page\n        return <OnePageSurvey options={survey} displayType={displayType}/>\n    } else if (displayType === SURVEY_DISPLAY_TYPE_GROUP) {\n        //1 - Group Per Page\n        return <GroupPerPageSurvey options={survey} displayType={displayType}/>\n    } else if (displayType === SURVEY_DISPLAY_TYPE_SUB_GROUP) {\n        //2 - SubGroup Per Page\n        //TODO - Change this later\n        return <GroupPerPageSurvey options={survey} displayType={displayType}/>\n    } else if (displayType === SURVEY_DISPLAY_TYPE_QUESTION) {\n        //9 - Question Per Page\n        return <QuestionPerPageSurvey options={survey} displayType={displayType}/>\n    } else {\n        //if null - default display type\n        return <OnePageSurvey options={survey} displayType={displayType}/>\n    }\n}\n\nconst RenderSurvey = (props) => {\n    const { state, survey, surveygid, surveyrefno, clientid, isOnlyOneQuestionRender, questionLength, handleOpenSurveyDialog, handleReset } = props\n    const width = useWidth()\n    const classes = useStyles()\n    const {GENERAL_SETTINGS} = useContext(WebCmsGlobal)\n    const {t} = useTranslation()\n    const router = useRouter()\n    const surveyGid = router.query.surveyGid || surveygid\n    const surveyHotelRefno = router.query.hotelrefno || surveyrefno\n    const refid = router.query.refid || clientid\n    const reftoken = router.query.reftoken\n    const isOweb = router?.query?.isOweb === '1' ? true : false\n    const { enqueueSnackbar } = useSnackbar()\n    const clientBase = useSelector((state) => state?.orest?.state?.client || false)\n    const changeHotelRefNo = useSelector((state) => state?.formReducer?.guest?.changeHotelRefno || null)\n    const isPortal = GENERAL_SETTINGS.ISPORTAL;\n\n    const trySavingAgainAction = () =>  {\n        return (\n            <React.Fragment>\n                <Button onClick={() => handleClickSaveSurvey()} color=\"inherit\">\n                    {t('str_tryAgain')}\n                </Button>\n            </React.Fragment>\n        )\n    }\n\n    //redux\n    const {showError} = useNotifications()\n    const {setSurveyIsValid, setSurveyPage, setSurveyGroup} = useSurveyAction()\n    const token = reftoken || useSelector((state) => state.orest.currentUser !== null && state.orest.currentUser.auth.access_token)\n    let loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n    const reservBase = state.clientReservation || false\n    const { locale } = useContext(LocaleContext)\n\n    if(!loginfo && refid && surveyHotelRefno){\n        loginfo = {\n            refid: refid,\n            hotelrefno: surveyHotelRefno\n        }\n    }\n\n    let clientParams = {}\n    clientParams.hotelrefno = loginfo && loginfo.hotelrefno\n    clientParams.isportal = isPortal\n    clientParams.surveyrefno = surveyrefno\n\n    if(isPortal) {\n        clientParams.portalrefno = changeHotelRefNo;\n    }\n\n    if(GENERAL_SETTINGS.ISCHAIN &&  String(clientParams.hotelrefno) !== String(GENERAL_SETTINGS.HOTELREFNO)){\n        clientParams.chainid = loginfo && loginfo.hotelrefno\n        clientParams.ischain = true\n    }\n\n    const surveyTrans = useSelector((state) => state.survey.trans)\n    const surveyIsValid = useSelector((state) => state.survey.isValid)\n    const displayType = useSelector((state) => state.survey.displayType)\n    const surveyAnswers = useSelector((state) => state.survey.answers[surveyTrans])\n    const surveyFiles = useSelector((state) => state.survey.files[surveyTrans])\n    const surveyPage = useSelector((state) => state.survey.page)\n    const surveyLastPage = useSelector((state) => state.survey.lastPage)\n    const surveyGroup = useSelector((state) => state.survey.group)\n    const surveyLastGroup = useSelector((state) => state.survey.lastGroup)\n\n    //state\n    const [isSaving, setIsSaving] = useState(false)\n    const [surveySaved, setSurveySaved] = useState(false)\n    const [showSurveyAnyway, setShowSurveyAnyway] = useState(false)\n    const [confirmationNumber, setConfirmationNumber] = useState(null)\n    const [sendClientMail, setSendClientMail] = useState(false)\n    const [clientMail, setClientMail] = useState(null)\n    const [isFilesUploading, setIsFilesUploading] = useState(false)\n    const [openTrackedDialog, setOpenTrackedDialog]= useState(false)\n\n    useEffect(()=> {\n        if(surveyIsValid && isOweb){\n            setShowSurveyAnyway(true)\n        }\n\n    }, [surveyIsValid])\n\n    const handleSave = () => {\n        const answerList = Object.keys(surveyAnswers).length\n        if(answerList < questionLength) {\n            setOpenTrackedDialog(true)\n        } else {\n            handleClickSaveSurvey()\n        }\n    }\n\n    const handleClickSaveSurvey = () => {\n        let fileUploadCounter = 0\n        const data = []\n        setIsSaving(true)\n        //for make disable inputs\n        setShowSurveyAnyway(true)\n        setSurveyIsValid(true)\n        clientParams.reservno = reservBase?.reservno || false;\n        const answerLength = Object.keys(surveyAnswers)?.length\n\n        //prepare survey answers to be sent\n        if (surveyAnswers) {\n            Object.keys(surveyAnswers).map((questionId) => {\n                Object.keys(surveyAnswers[questionId]).map((answerId) => {\n                    data.push({\n                        questionid: questionId,\n                        answerid: answerId,\n                        ...surveyAnswers[questionId][answerId],\n                        hotelrefno: isPortal ? changeHotelRefNo :  GENERAL_SETTINGS.HOTELREFNO,\n                    })\n                })\n            })\n        }\n\n        //survey save api\n        if (data.length > 0) {\n            axios({\n                url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey/save',\n                method: REQUEST_METHOD_CONST.POST,\n                timeout: 1000 * 300, // Wait for 5 min.\n                params: Object.assign({onlyAnswer: isOnlyOneQuestionRender && answerLength < questionLength, trans: surveyTrans, survey: surveyGid, langcode: locale}, clientParams),\n                data: data,\n            }).then(async (r) => {\n                    if (r.status === 200 && r.data.success) {\n                        const resData = r.data\n                        if (resData) {\n                            await sendGuestChangeNotifyMail(reservBase?.gid ? false : true,'surveytrans','upd', clientBase.id,reservBase?.gid ? reservBase.gid : clientBase.gid, {},reservBase?.hotelrefno || GENERAL_SETTINGS.HOTELREFNO)\n                            //upload files\n                            if (resData.answers && surveyFiles) {\n                                resData.answers.map((answer) => {\n                                    Object.keys(surveyFiles).map((answerId) => {\n                                        const files = surveyFiles[answerId]\n                                        if (files) {\n                                            if (String(answer.answerid) === String(answerId)) {\n                                                setIsFilesUploading(true)\n                                                fileUploadCounter++\n                                                Upload({\n                                                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                                    token,\n                                                    params: {\n                                                        masterid: answer.mid,\n                                                        hotelrefno: GENERAL_SETTINGS.HOTELREFNO,\n                                                    },\n                                                    files: files,\n                                                }).then((r1) => {\n                                                    if (r1.status === 200) {\n                                                        const data = r1.data.data\n\n                                                        //set refid to uploaded files\n                                                        if (data && loginfo && loginfo.refid) {\n                                                            const arrayData = []\n                                                            if (Array.isArray(data)) {\n                                                                data.map((file) => {\n                                                                    arrayData.push({\n                                                                        gid: file.gid,\n                                                                        refid: loginfo.refid,\n                                                                    })\n                                                                })\n                                                            } else {\n                                                                if (data.gid) {\n                                                                    arrayData.push({\n                                                                        gid: data.gid,\n                                                                        refid: loginfo.refid,\n                                                                    })\n                                                                }\n                                                            }\n                                                            if (arrayData.length > 0) {\n                                                                UseOrest({\n                                                                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                                                    endpoint:\n                                                                        OREST_ENDPOINT.RAFILE +\n                                                                        '/' +\n                                                                        OREST_ENDPOINT.LIST +\n                                                                        '/' +\n                                                                        OREST_ENDPOINT.PATCH,\n                                                                    method: REQUEST_METHOD_CONST.PATCH,\n                                                                    token,\n                                                                    data: arrayData,\n                                                                    params: {\n                                                                        hotelrefno: surveyHotelRefno,\n                                                                    },\n                                                                }).then((r2) => {\n                                                                    if (r2.status === 200) {\n                                                                        //console.log(r2.data)\n                                                                    }\n                                                                })\n                                                            }\n                                                        }\n                                                    } else {\n                                                        if (r1.data && r1.data.error_description) {\n                                                            showError(\n                                                                'File upload failed! ' + r1.data.error_description\n                                                            )\n                                                        } else {\n                                                            showError('File upload failed!')\n                                                        }\n                                                    }\n                                                    fileUploadCounter--\n                                                    if (fileUploadCounter === 0) {\n                                                        setIsFilesUploading(false)\n                                                    }\n                                                })\n                                            }\n                                        }\n                                    })\n                                })\n                            }\n\n                            setConfirmationNumber(String(resData.confirmationNumber))\n                            setSendClientMail(resData.sendmail)\n                            setClientMail(String(resData.email))\n                        }\n                        typeof handleReset === 'function' && handleReset()\n                        enqueueSnackbar(t('str_thankYouForYourFeedback'), { variant: 'success', autoHideDuration: 10000 })\n                        setSurveySaved(true)\n                    } else {\n                        if (r.data && r.data.error_description) {\n                            enqueueSnackbar(r.data.error_description, { variant: 'error', autoHideDuration: 10000 })\n                        } else {\n                            enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000 })\n                        }\n                    }\n                })\n                .then(() => {\n                    setIsSaving(false)\n                    setSurveyIsValid(false)\n                })\n                .catch(() => {\n                    enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: trySavingAgainAction() })\n                    setIsSaving(false)\n                    setSurveyIsValid(false)\n                })\n        } else {\n            setIsSaving(false)\n            setSurveyIsValid(false)\n        }\n    }\n\n    const handleClickShowMyAnswers = () => {\n        setShowSurveyAnyway(true)\n    }\n\n    const onChangePagination = (event, page) => {\n        setSurveyPage(page - 1)\n    }\n\n    const onClickPageBack = () => {\n        window.scrollTo(0, 0)\n        setSurveyGroup(surveyGroup - 1)\n    }\n\n    const onClickPageNext = () => {\n        window.scrollTo(0, 0)\n        setSurveyGroup(surveyGroup + 1)\n    }\n\n    const getSiblingCount = () => {\n        if (width === 'xl') {\n            return 2\n        } else if (width === 'lg') {\n            return 2\n        } else if (width === 'md') {\n            return 2\n        } else if (width === 'sm') {\n            return 2\n        } else {\n            return 1\n        }\n    }\n\n    const getBoundaryCount = () => {\n        if (width === 'xl') {\n            return 2\n        } else if (width === 'lg') {\n            return 2\n        } else if (width === 'md') {\n            return 2\n        } else if (width === 'sm') {\n            return 2\n        } else {\n            return 1\n        }\n    }\n\n    if (isSaving) {\n        return (\n            <Grid container direction={'column'} justify={'center'} alignItems={'center'} style={{height: '100%'}}>\n                <Grid item>\n                    <LoadingSpinner/>\n                </Grid>\n                <Grid item>\n                    <h3\n                        style={{\n                            fontSize: 28,\n                            fontWeight: 500,\n                            color: '#2F3434',\n                            textAlign: 'center',\n                            margin: '12px 6px',\n                        }}\n                    >\n                        {t('str_answerSavingMessage')}\n                    </h3>\n                </Grid>\n            </Grid>\n        )\n    } else if (isFilesUploading) {\n        return (\n            <Grid container direction={'column'} justify={'center'} alignItems={'center'} style={{height: '100%'}}>\n                <Grid item>\n                    <LoadingSpinner/>\n                </Grid>\n                <Grid item>\n                    <h3\n                        style={{\n                            fontSize: 28,\n                            fontWeight: 500,\n                            color: '#2F3434',\n                            textAlign: 'center',\n                            margin: '12px 6px',\n                        }}\n                    >\n                        {t('str_filesUploading')}\n                    </h3>\n                </Grid>\n            </Grid>\n        )\n    } else if (surveySaved) {\n        return (\n            <Grid container direction={'column'} justify={'center'} alignItems={'center'} style={{height: '100%'}}>\n                <Grid item>\n                    <CheckCircleOutlinedIcon style={{fontSize: 150, color: '#4caf50'}}/>\n                </Grid>\n                <Grid item>\n                    <h3 style={{fontSize: 34, fontWeight: 500, color: '#2F3434', textAlign: 'center'}}>\n                        {t('str_thankForPart')}\n                    </h3>\n                </Grid>\n                {(clientMail && sendClientMail) && (\n                    <Grid item>\n                        <p\n                            style={{\n                                fontSize: 22,\n                                fontWeight: 500,\n                                color: '#2F3434',\n                                textAlign: 'center',\n                                margin: '24px 0',\n                            }}\n                        >\n                            {t('str_receiveAnEmailSpace')}\n                            {' '}\n                            <span style={{fontSize: 23, fontWeight: 700}}>{clientMail}</span>\n                            {' '}\n                            {t('str_spaceConfirmTheSurvey')}\n                        </p>\n                    </Grid>\n                )}\n                {confirmationNumber && (\n                    <Grid item>\n                        <h3 style={{fontSize: 20, fontWeight: 500, color: '#2F3434', textAlign: 'center'}}>\n                            {t('str_confirmationNumber')} {confirmationNumber}\n                        </h3>\n                    </Grid>\n                )}\n            </Grid>\n        )\n    }\n\n    if (surveyIsValid && !showSurveyAnyway && !isOweb) {\n        return (\n            <Grid container direction={'column'} justify={'center'} alignItems={'center'} style={{height: '100%'}}>\n                <Grid item>\n                    <h2 style={{fontSize: 34, fontWeight: 600, color: '#2F3434', textAlign: 'center'}}>\n                        {t('str_surveyComplete')}\n                    </h2>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant={'outlined'}\n                        onClick={handleClickShowMyAnswers}\n                        style={{\n                            fontSize: 17,\n                            fontWeight: 500,\n                            color: '#2F3434',\n                            textTransform: 'initial',\n                            margin: '12px 0',\n                        }}\n                    >\n                        {t('str_showMyAnswers')}\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', height: '100%', }}>\n            <RenderOptions survey={survey} displayType={displayType}/>\n            <div style={{flexGrow: 1}}/>\n            <Grid container spacing={3} justify={'space-between'} className={classes.paginationGrid}>\n                <Grid item style={{alignSelf: 'center'}} className={classes.bottomGridForMobile}>\n                    {displayType === SURVEY_DISPLAY_TYPE_QUESTION && (\n                        <Pagination\n                            variant={'outlined'}\n                            shape={'round'}\n                            siblingCount={getSiblingCount()}\n                            boundaryCount={getBoundaryCount()}\n                            renderItem={(item) => {\n                                return (\n                                    <PaginationItem\n                                        {...item}\n                                        variant={item.type === 'page' ? 'text' : item.variant}\n                                        size={'small'}\n                                        classes={{\n                                            root: classes.paginationItemRoot,\n                                            selected: classes.paginationItemSelected,\n                                            sizeSmall: classes.paginationItemSize,\n                                            ellipsis: classes.paginationItemEllipsis,\n                                        }}\n                                    />\n                                )\n                            }}\n                            count={surveyLastPage}\n                            page={surveyPage + 1}\n                            onChange={onChangePagination}\n                            classes={{ul: classes.paginationUl}}\n                        />\n                    )}\n                    {displayType === SURVEY_DISPLAY_TYPE_GROUP && surveyLastGroup !== 1 && (\n                        <Grid\n                            container\n                            spacing={3}\n                            className={classes.bottomGridForMobile}\n                            style={{margin: 0, width: '100%'}}\n                        >\n                            <Grid item>\n                                <IconButton\n                                    onClick={onClickPageBack}\n                                    disabled={surveyGroup <= 0}\n                                    classes={{\n                                        root: classes.arrowIconButton,\n                                        disabled: classes.arrowIconButtonDisabled,\n                                    }}\n                                >\n                                    <ArrowBackIcon className={classes.arrowIcon}/>\n                                </IconButton>\n                                <span className={classes.arrowText} style={{opacity: surveyGroup <= 0 && 0.5}}>\n                                    {t('str_previous')}\n                                </span>\n                            </Grid>\n                            <div className={classes.arrowIconDivider}/>\n                            <Grid item>\n                                <span\n                                    className={classes.arrowText}\n                                    style={{opacity: surveyGroup === surveyLastGroup - 1 && 0.5}}\n                                >\n                                    {t('str_next')}\n                                </span>\n                                <IconButton\n                                    onClick={onClickPageNext}\n                                    disabled={surveyGroup === surveyLastGroup - 1}\n                                    classes={{\n                                        root: classes.arrowIconButton,\n                                        disabled: classes.arrowIconButtonDisabled,\n                                    }}\n                                >\n                                    <ArrowForwardIcon className={classes.arrowIcon}/>\n                                </IconButton>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Grid>\n                <Grid item className={classes.bottomGridForMobile}>\n                    {!surveyIsValid && !isOnlyOneQuestionRender && (\n                        <Button\n                            onClick={handleClickSaveSurvey}\n                            fullWidth\n                            variant=\"contained\"\n                            color={'primary'}\n                            disabled={isSaving}\n                            className={classes.saveButton}\n                        >\n                            {t('str_completeTheSurvey')}\n                            {isSaving && <CircularProgress size={24} className={classes.buttonProgress}/>}\n                        </Button>\n\n                    )}\n                    {!surveyIsValid && isOnlyOneQuestionRender && (\n                        <Button\n                            onClick={handleSave}\n                            fullWidth\n                            color={'primary'}\n                            variant=\"contained\"\n                            disabled={isSaving}\n                            className={classes.saveButton}\n                        >\n                            {t('str_send')}\n                            {isSaving && <CircularProgress size={24} className={classes.buttonProgress}/>}\n                        </Button>\n                    )}\n                </Grid>\n            </Grid>\n            <TrackedChangesDialog\n                open={openTrackedDialog}\n                onPressNo={(e) => {\n                    setOpenTrackedDialog(e);\n                    handleClickSaveSurvey()\n                }}\n                onPressYes={(e) => {\n                    setOpenTrackedDialog(e);\n                    typeof handleOpenSurveyDialog === 'function' && handleOpenSurveyDialog()\n                }}\n                dialogDesc={'Would you like to complete the survey?'}\n            />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nexport default connect(mapStateToProps, null)(RenderSurvey)\n"]},"metadata":{},"sourceType":"module"}