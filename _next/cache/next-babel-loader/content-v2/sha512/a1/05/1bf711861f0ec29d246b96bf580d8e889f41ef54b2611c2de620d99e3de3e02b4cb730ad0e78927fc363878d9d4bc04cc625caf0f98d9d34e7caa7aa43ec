{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/pages/booking/details.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport { setToState } from 'state/actions';\nimport { Box, Button, Checkbox, Divider, FormControlLabel, FormGroup, Grid, TextField, Typography, Container, IconButton, OutlinedInput, InputLabel, InputAdornment, FormHelperText, FormControl } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport ReservationCart from 'components/booking/components/ReservationCart';\nimport BookingStepper from 'components/booking/components/BookingStepper';\nimport BookingLayout from 'components/layout/containers/booking-layout';\nimport WebCmsGlobal from 'components/webcms-global';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport TrackedChangesDialog from 'components/TrackedChangesDialog';\nimport LoginDialog from 'components/LoginComponent/LoginDialog';\nimport PhoneInput from '@webcms-ui/core/phone-input';\nimport OtherGuestInfo from 'components/booking/OtherGuestInfo';\nimport PaymentInformation from 'components/booking/components/PaymentInformation';\nimport ProgressButton from 'components/booking/components/ProgressButton';\nimport { useOrestAction } from 'model/orest';\nimport TagManager from '@webcms-globals/tag-manager';\nimport { REQUEST_METHOD_CONST } from 'model/orest/constants';\nimport { required, validateEmail } from 'state/utils/form';\nimport moment from 'moment';\nimport MomentAdapter from '@date-io/moment';\nimport { DatePicker, LocalizationProvider } from '@material-ui/pickers';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { UseOrest } from '@webcms/orest';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport { getBookingSteps, bookingSteps, bookingStepCodes } from 'components/booking/commons';\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    'button:focus': {\n      outline: 'none'\n    }\n  },\n  containerBooking: {\n    '& > *': {\n      opacity: 0.9\n    }\n  },\n  root: {\n    marginTop: 16,\n    background: theme.palette.background.paper,\n    width: '100%',\n    backgroundColor: '#fff',\n    border: '1px solid #dadadd',\n    borderRadius: 6\n  },\n  stepperRoot: {\n    backgroundColor: '#fff',\n    border: '1px solid #dadadd',\n    borderRadius: 6,\n    \"@media print\": {\n      display: 'none'\n    }\n  },\n  infoTextField: {\n    background: '#FFFFFF',\n    '& fieldset': {\n      borderRadius: 0\n    }\n  },\n  createAccountHelperText: {\n    textAlign: 'right'\n  },\n  textRed: {\n    color: 'red'\n  },\n  topSpaceBox: {\n    width: '100%',\n    display: 'block',\n    marginTop: 60\n  },\n  bottomSpaceBox: {\n    width: '100%',\n    display: 'block',\n    marginBottom: '30vh',\n    '@media print': {\n      display: 'none'\n    }\n  }\n}));\n\nfunction mandatoryFieldMarker(contactInfo, mandatoryField) {\n  const useMandatoryField = mandatoryField && mandatoryField.split(',') || false;\n\n  if (!Array.isArray(useMandatoryField)) {\n    return contactInfo;\n  }\n\n  let newContactInfo = _objectSpread({}, contactInfo);\n\n  Object.keys(contactInfo).map(key => {\n    if (mandatoryField.includes(contactInfo[key].key)) {\n      newContactInfo[key].isrequired = true;\n    }\n  });\n  return newContactInfo;\n}\n\nconst settings = {\n  containerMaxWidth: 'lg',\n  containerSpacing: 3,\n  leftColumn: {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 8,\n    xl: 8\n  },\n  rightColumn: {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    lg: 4,\n    xl: 4\n  }\n};\n\nconst DetailsPage = props => {\n  var _WEBCMS_DATA$assets3, _WEBCMS_DATA$assets3$, _GENERAL_SETTINGS$hot, _GENERAL_SETTINGS$hot2;\n\n  const classes = useStyles(),\n        {\n    GENERAL_SETTINGS,\n    WEBCMS_DATA,\n    locale\n  } = useContext(WebCmsGlobal),\n        {\n    t\n  } = useTranslation(),\n        {\n    state,\n    setToState,\n    hideLayout\n  } = props,\n        showAddons = Boolean(GENERAL_SETTINGS.hotelSettings.product) || Boolean(GENERAL_SETTINGS.hotelSettings.remark) || Boolean(GENERAL_SETTINGS.hotelSettings.transport),\n        {\n    enqueueSnackbar\n  } = useSnackbar(),\n        {\n    1: setUseScrollUp\n  } = useState(false),\n        router = useRouter(),\n        {\n    0: isLoginDialog,\n    1: setIsLoginDialog\n  } = useState(false),\n        {\n    0: isOpenLoginDialog,\n    1: setIsOpenLoginDialog\n  } = useState(false),\n        {\n    0: emailIsAlreadyExistsDialog,\n    1: setEmailIsAlreadyExistsDialog\n  } = useState(false),\n        {\n    0: isRouting,\n    1: setIsRouting\n  } = useState(false),\n        loginfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo),\n        token = useSelector(state => {\n    var _state$orest, _state$orest$currentU;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : _state$orest$currentU.auth.access_token) || false;\n  }),\n        clientBase = useSelector(state => {\n    var _state$orest2, _state$orest2$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest2 = state.orest) === null || _state$orest2 === void 0 ? void 0 : (_state$orest2$state = _state$orest2.state) === null || _state$orest2$state === void 0 ? void 0 : _state$orest2$state.client) || false;\n  }),\n        iframe = router.query.iframe === 'true',\n        isLogoutButton = token && iframe,\n        {\n    deleteOrestCurrentUserInfo,\n    resetOrestState\n  } = useOrestAction(),\n        {\n    0: pageSizes,\n    1: setPageSizes\n  } = useState({\n    width: '100%',\n    height: '100%',\n    imgHeight: '100%'\n  }),\n        {\n    0: isButtonRouting,\n    1: setIsButtonRouting\n  } = useState(false);\n  useEffect(() => {\n    var _WEBCMS_DATA$assets, _WEBCMS_DATA$assets$m;\n\n    let isEffect = true;\n\n    if (!(state.selectedRooms.length > 0)) {\n      setIsRouting(true);\n      router.push({\n        pathname: '/booking/rooms',\n        query: router.query\n      });\n    }\n\n    if (isEffect && WEBCMS_DATA !== null && WEBCMS_DATA !== void 0 && (_WEBCMS_DATA$assets = WEBCMS_DATA.assets) !== null && _WEBCMS_DATA$assets !== void 0 && (_WEBCMS_DATA$assets$m = _WEBCMS_DATA$assets.meta) !== null && _WEBCMS_DATA$assets$m !== void 0 && _WEBCMS_DATA$assets$m.googleTag) {\n      var _WEBCMS_DATA$assets2, _WEBCMS_DATA$assets2$;\n\n      TagManager.page.setChange({\n        hotelName: WEBCMS_DATA === null || WEBCMS_DATA === void 0 ? void 0 : (_WEBCMS_DATA$assets2 = WEBCMS_DATA.assets) === null || _WEBCMS_DATA$assets2 === void 0 ? void 0 : (_WEBCMS_DATA$assets2$ = _WEBCMS_DATA$assets2.meta) === null || _WEBCMS_DATA$assets2$ === void 0 ? void 0 : _WEBCMS_DATA$assets2$.title,\n        hotelId: GENERAL_SETTINGS.HOTELREFNO,\n        pageTitle: window.document.title,\n        pagePath: location.href,\n        pageStep: 'Guest Details'\n      });\n    }\n\n    setPageSizes({\n      width: window.innerWidth,\n      height: window.innerHeight,\n      imgHeight: window.innerHeight + 104.1\n    });\n    window.addEventListener('scroll', handleScroll, {\n      passive: true\n    });\n    window.addEventListener('resize', () => {\n      setPageSizes({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        imgHeight: window.innerHeight + 104.1\n      });\n    });\n    router.events.on('routeChangeStart', () => setIsButtonRouting(true));\n    router.events.on('routeChangeComplete', () => setIsButtonRouting(false));\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  useEffect(() => {\n    window.handleContinueByGuestDetailPage = () => {\n      return handleContinue();\n    };\n  }, [state.selectedPaymentTypeId]);\n  useEffect(() => {\n    if (loginfo) {\n      setIsLoginDialog(true);\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'auth/checktoken',\n        token: token,\n        method: REQUEST_METHOD_CONST.POST,\n        params: {\n          token: token,\n          hotelrefno: ''\n        }\n      }).then(checkTokenResponse => {\n        var _checkTokenResponse$d;\n\n        if (checkTokenResponse !== null && checkTokenResponse !== void 0 && (_checkTokenResponse$d = checkTokenResponse.data) !== null && _checkTokenResponse$d !== void 0 && _checkTokenResponse$d.active) {\n          if (clientBase && clientBase !== null && clientBase !== void 0 && clientBase.id) {\n            setClientInfo(clientBase);\n          } else if ((router.query.clientid || loginfo.accid) && token) {\n            UseOrest({\n              apiUrl: GENERAL_SETTINGS.OREST_URL,\n              endpoint: 'client/getbyid',\n              token,\n              params: {\n                key: router.query.clientid || loginfo.accid,\n                allhotels: true\n              }\n            }).then(client => {\n              if (client.status === 200 && client.data.count > 0) {\n                setClientInfo(client.data.data);\n              }\n            });\n          }\n        } else {\n          enqueueSnackbar(t('str_sessionTimeoutLoginAgain'), {\n            variant: 'info'\n          });\n          deleteOrestCurrentUserInfo();\n        }\n      }).catch(() => {\n        enqueueSnackbar(t('str_sessionTimeoutLoginAgain'), {\n          variant: 'info'\n        });\n        deleteOrestCurrentUserInfo();\n      });\n    } else {\n      setIsLoginDialog(false);\n    }\n  }, [clientBase, loginfo]);\n\n  const handleScroll = () => {\n    var _window, _document, _document$documentEle, _document2, _document2$body, _window2;\n\n    let windowSize = ((_window = window) === null || _window === void 0 ? void 0 : _window.innerWidth) || ((_document = document) === null || _document === void 0 ? void 0 : (_document$documentEle = _document.documentElement) === null || _document$documentEle === void 0 ? void 0 : _document$documentEle.clientWidth) || ((_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : _document2$body.clientWidth) || 0;\n\n    if (windowSize <= 959 && ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.pageYOffset) > 100) {\n      setUseScrollUp(true);\n    } else {\n      setUseScrollUp(false);\n    }\n  };\n\n  const setClientInfo = clientInfoData => {\n    let newContactInfo = state.contactInfo;\n    newContactInfo.firstName.value = clientInfoData.firstname;\n    newContactInfo.firstName.iserror = false;\n    selectedRooms[0].guestList[0].firstName.value = clientInfoData.firstname;\n    newContactInfo.lastName.value = clientInfoData.lastname;\n    newContactInfo.lastName.iserror = false;\n    selectedRooms[0].guestList[0].lastName.value = clientInfoData.lastname;\n    newContactInfo.mail.value = clientInfoData.email;\n    newContactInfo.mail.iserror = false;\n    selectedRooms[0].guestList[0].mail.value = clientInfoData.email;\n    newContactInfo.birthDate.value = clientInfoData.birthdate;\n    newContactInfo.birthDate.iserror = false;\n    selectedRooms[0].guestList[0].birthDate.value = clientInfoData.birthdate;\n    newContactInfo.healthcode.value = clientInfoData.healthcode;\n    newContactInfo.healthcode.iserror = false;\n    selectedRooms[0].guestList[0].healthcode.value = clientInfoData.healthcode;\n    newContactInfo.phone.value = clientInfoData.mobiletel;\n    newContactInfo.phone.iserror = false;\n    selectedRooms[0].guestList[0].phone.value = clientInfoData.mobiletel;\n    setToState('ibe', ['selectedRooms'], selectedRooms);\n    setToState('ibe', ['contactInfo'], newContactInfo);\n  };\n\n  const {\n    0: createAccount,\n    1: setCreateAccount\n  } = useState({\n    isActive: false,\n    password: '',\n    showPassword: false,\n    isError: false\n  });\n  const contactInfoSettings = {\n    spacing: 2,\n    margin: 'none',\n    variant: 'outlined'\n  };\n\n  const hasPayType = async (id, filter) => {\n    const payType = state.hotelPaymentType && state.hotelPaymentType.paymentypes.length > 0 && state.hotelPaymentType.paymentypes.filter(item => item[filter])[0];\n    return Boolean(payType && Number(id) === Number(payType.id));\n  };\n\n  let selectedRooms = state.selectedRooms;\n  let contactInfo = mandatoryFieldMarker(state.contactInfo, GENERAL_SETTINGS.hotelSettings.cireqflds);\n\n  const changeFirstName = e => {\n    contactInfo.firstName.value = e.currentTarget.value;\n    contactInfo.firstName.iserror = false;\n    selectedRooms[0].guestList[0].firstName.value = e.currentTarget.value;\n    setToState('ibe', ['selectedRooms'], selectedRooms);\n    setToState('ibe', ['contactInfo'], contactInfo);\n  };\n\n  const changeLastName = e => {\n    contactInfo.lastName.value = e.currentTarget.value;\n    contactInfo.lastName.iserror = false;\n    selectedRooms[0].guestList[0].lastName.value = e.currentTarget.value;\n    setToState('ibe', ['selectedRooms'], selectedRooms);\n    setToState('ibe', ['contactInfo'], contactInfo);\n  };\n\n  const changeMail = e => {\n    setToState('ibe', ['continueWithoutClientRecord'], false);\n    contactInfo.mail.value = e.currentTarget.value;\n    contactInfo.mail.iserror = false;\n    selectedRooms[0].guestList[0].mail.value = e.currentTarget.value;\n    setToState('ibe', ['selectedRooms'], selectedRooms);\n    setToState('ibe', ['contactInfo'], contactInfo);\n  };\n\n  const changeHealtCode = e => {\n    contactInfo.healthcode.value = e.currentTarget.value;\n    contactInfo.healthcode.iserror = false;\n    selectedRooms[0].guestList[0].healthcode.value = e.currentTarget.value;\n    setToState('ibe', ['selectedRooms'], selectedRooms);\n    setToState('ibe', ['contactInfo'], contactInfo);\n  };\n\n  const changePhoneNumber = e => {\n    contactInfo.phone.value = e;\n    contactInfo.phone.iserror = false;\n    selectedRooms[0].guestList[0].phone.value = e;\n    setToState('ibe', ['selectedRooms'], selectedRooms);\n    setToState('ibe', ['contactInfo'], contactInfo);\n  };\n\n  const changeDateOfBirth = date => {\n    if (date) {\n      if (date._isValid) {\n        contactInfo.birthDate.value = date._d;\n        selectedRooms[0].guestList[0].birthDate.value = date._d;\n      } else {\n        contactInfo.birthDate.value = date._d;\n        selectedRooms[0].guestList[0].birthDate.value = date._d;\n      }\n\n      contactInfo.birthDate.iserror = false;\n      setToState('ibe', ['selectedRooms'], selectedRooms);\n      setToState('ibe', ['contactInfo'], contactInfo);\n    }\n  };\n\n  const changeNote = e => {\n    contactInfo.note.value = e.currentTarget.value;\n    selectedRooms[0].guestList[0].note.value = e.currentTarget.value;\n    setToState('ibe', ['selectedRooms'], selectedRooms);\n    setToState('ibe', ['contactInfo'], contactInfo);\n  };\n\n  const emailValidation = email => {\n    return axios({\n      url: `${GENERAL_SETTINGS.BASE_URL}api/ors/guest/email/valid`,\n      method: 'post',\n      data: {\n        email: email\n      }\n    }).then(response => {\n      return response.data;\n    });\n  };\n\n  const handleContinue = async continueWithoutClientRecord => {\n    setToState('ibe', ['isHandleContinue'], true);\n    let isRequiredError = false,\n        isEmailError = false;\n    Object.keys(contactInfo).forEach(function (key) {\n      if (contactInfo[key].isrequired) {\n        if (required(contactInfo[key].value)) {\n          contactInfo[key].iserror = true;\n          isRequiredError = true;\n        }\n      }\n    });\n\n    if (createAccount.isActive && (createAccount.password === '' || createAccount.password.length < 6)) {\n      setCreateAccount(_objectSpread(_objectSpread({}, createAccount), {}, {\n        isError: true\n      }));\n      enqueueSnackbar(t('str_pleaseCheckYourPassword'), {\n        variant: 'error'\n      });\n      isRequiredError = true;\n    } else {\n      setCreateAccount(_objectSpread(_objectSpread({}, createAccount), {}, {\n        isError: false\n      }));\n    }\n\n    const contactEmail = await emailValidation(contactInfo.mail.value);\n\n    if (!continueWithoutClientRecord && contactEmail.exits && !loginfo) {\n      isEmailError = true;\n      contactInfo['mail'].iserror = true;\n      setEmailIsAlreadyExistsDialog(true);\n      setToState('ibe', ['isHandleContinue'], false);\n    }\n\n    if (!contactEmail.validation) {\n      isEmailError = true;\n      contactInfo['mail'].iserror = true;\n    }\n\n    if (!Number(state.selectedPaymentTypeId) > 0) {\n      enqueueSnackbar(t('str_pleaseSelectAPaymentMethodToContinue'), {\n        variant: 'warning'\n      });\n      setToState('ibe', ['isHandleContinue'], false);\n      return;\n    }\n\n    const checkPayTypeIsMailOrder = await hasPayType(state.selectedPaymentTypeId, 'ismailorder');\n\n    if (checkPayTypeIsMailOrder && !state.mailOrderInfo.cardIsValid) {\n      enqueueSnackbar(t('str_pleaseCheckYourCardInformation'), {\n        variant: 'warning'\n      });\n      setToState('ibe', ['isHandleContinue'], false);\n      return;\n    }\n\n    setToState('ibe', ['contactInfo'], contactInfo);\n    selectedRooms.map((room, roomIndex) => {\n      if (roomIndex !== 0 || roomIndex === 0 && room.totalpax > 1) {\n        Array.from({\n          length: room.totalpax\n        }).map((pax, paxIndex) => {\n          if (roomIndex > 0 || roomIndex === 0 && paxIndex > 0) {\n            let guestList = selectedRooms[roomIndex].guestList[paxIndex];\n            Object.keys(guestList).forEach(function (key) {\n              if (guestList[key].isrequired) {\n                if (required(guestList[key].value)) {\n                  guestList[key].iserror = true;\n                  isRequiredError = true;\n                }\n              }\n\n              if (guestList['mail'].value) {\n                if (validateEmail(guestList['mail'].value)) {\n                  guestList['mail'].iserror = true;\n                  isEmailError = true;\n                }\n              }\n            });\n            setToState('ibe', ['selectedRooms', roomIndex, 'guestList', paxIndex], guestList);\n          }\n        });\n      }\n    });\n\n    if (isRequiredError || isEmailError) {\n      setToState('ibe', ['isHandleContinue'], false);\n\n      if (!createAccount.isError && !contactEmail.exits) {\n        enqueueSnackbar(t('str_pleaseCheckMandatoryFields'), {\n          variant: 'error'\n        });\n      }\n    } else {\n      setToState('ibe', ['isHandleContinue'], false);\n\n      if (createAccount.isActive) {\n        setToState('ibe', ['clientPassword'], createAccount.password);\n      }\n\n      router.push({\n        pathname: '/booking/preview',\n        query: router.query\n      });\n    }\n  };\n\n  const handleBack = () => {\n    if (showAddons) {\n      router.push({\n        pathname: '/booking/addons',\n        query: router.query\n      });\n    } else {\n      router.push({\n        pathname: '/booking/rooms',\n        query: router.query\n      });\n    }\n\n    handleScrollTop();\n  };\n\n  const handleScrollTop = () => {\n    return window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  };\n\n  const handleLogout = () => {\n    deleteOrestCurrentUserInfo();\n    resetOrestState();\n  };\n\n  if (isRouting) {\n    return __jsx(BookingLayout, {\n      hideLayout: hideLayout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: classes.topSpaceBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 17\n      }\n    }), __jsx(Container, {\n      maxWidth: settings.containerMaxWidth,\n      className: classes.containerBooking,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, {\n      container: true,\n      spacing: settings.containerSpacing,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 21\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 25\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '100%',\n        height: '80vh',\n        textAlign: 'center',\n        paddingTop: '25%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 29\n      }\n    }, __jsx(\"span\", {\n      style: {\n        background: '#d5d5d5',\n        padding: 40,\n        width: '100%',\n        display: 'block',\n        fontSize: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 33\n      }\n    }, t('str_pleaseWait')))))));\n  }\n\n  return __jsx(BookingLayout, {\n    hideLayout: hideLayout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 9\n    }\n  }, WEBCMS_DATA !== null && WEBCMS_DATA !== void 0 && (_WEBCMS_DATA$assets3 = WEBCMS_DATA.assets) !== null && _WEBCMS_DATA$assets3 !== void 0 && (_WEBCMS_DATA$assets3$ = _WEBCMS_DATA$assets3.images) !== null && _WEBCMS_DATA$assets3$ !== void 0 && _WEBCMS_DATA$assets3$.background ? __jsx(\"div\", {\n    style: {\n      width: pageSizes.width,\n      height: pageSizes.height,\n      top: 0,\n      left: 0,\n      overflow: 'hidden',\n      position: 'fixed',\n      zIndex: -3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 17\n    }\n  }, __jsx(\"ul\", {\n    style: {\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 21\n    }\n  }, __jsx(\"li\", {\n    style: {\n      display: 'list-item'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 25\n    }\n  }, __jsx(\"img\", {\n    src: GENERAL_SETTINGS.STATIC_URL + WEBCMS_DATA.assets.images.background,\n    style: {\n      width: pageSizes.width,\n      height: pageSizes.imgHeight\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 29\n    }\n  })))) : null, __jsx(\"div\", {\n    className: classes.topSpaceBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 13\n    }\n  }), __jsx(Container, {\n    maxWidth: settings.containerMaxWidth,\n    className: classes.containerBooking,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: settings.containerSpacing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: settings.leftColumn.xs,\n    sm: settings.leftColumn.sm,\n    md: settings.leftColumn.md,\n    lg: settings.leftColumn.lg,\n    xl: settings.leftColumn.xl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 29\n    }\n  }, __jsx(BookingStepper, {\n    classes: {\n      root: classes.stepperRoot\n    },\n    activeStep: bookingStepCodes.details,\n    steps: getBookingSteps(bookingSteps, showAddons),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 33\n    }\n  }), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      paddingTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 33\n    }\n  }, __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 37\n    }\n  }, __jsx(TrackedChangesDialog, {\n    isContainedNo: false,\n    dialogTitle: t('str_info'),\n    dialogDesc: t('str_thisEmailAddressHasBeenUsedBeforeYouCanContinueTheReservationByLoggingIn'),\n    labelYes: t('str_logInHere'),\n    labelNo: t('str_continueWithoutLogin'),\n    open: emailIsAlreadyExistsDialog,\n    onPressNo: () => {\n      contactInfo['mail'].iserror = false;\n      setToState('ibe', ['contactInfo'], contactInfo);\n      setToState('ibe', ['continueWithoutClientRecord'], true);\n      setEmailIsAlreadyExistsDialog(false);\n      handleContinue(true);\n    },\n    onPressYes: () => {\n      setEmailIsAlreadyExistsDialog(false);\n      setIsOpenLoginDialog(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 41\n    }\n  }), !isLoginDialog ? __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 45\n    }\n  }, __jsx(LoginDialog, {\n    open: isOpenLoginDialog,\n    onClose: status => setIsOpenLoginDialog(status),\n    locationName: \"booking\",\n    isLoginWrapper: true,\n    disableRegister: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 49\n    }\n  }), __jsx(Box, {\n    p: 3,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: contactInfoSettings.spacing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 53\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 57\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 61\n    }\n  }, t('str_signInForAFasterBooking'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 57\n    }\n  }, __jsx(Button, {\n    onClick: () => setIsOpenLoginDialog(true),\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    disabled: isButtonRouting,\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 61\n    }\n  }, t('str_login')))))) : null, !!isLoginDialog && isLogoutButton ? __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 45\n    }\n  }, __jsx(Box, {\n    p: 3,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: contactInfoSettings.spacing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 53\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 57\n    }\n  }, __jsx(Button, {\n    onClick: () => handleLogout(),\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    disabled: isButtonRouting,\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 61\n    }\n  }, t('str_logout')))))) : null, __jsx(Box, {\n    p: 3,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 41\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: contactInfoSettings.spacing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 49\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 53\n    }\n  }, t('str_contactInfo'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 49\n    }\n  }, __jsx(TextField, {\n    disabled: isButtonRouting || Boolean(loginfo),\n    className: classes.infoTextField,\n    margin: contactInfoSettings.margin,\n    variant: contactInfoSettings.variant,\n    required: state.contactInfo.firstName.isrequired,\n    id: \"firstName\",\n    name: \"firstName\",\n    label: t('str_firstName'),\n    fullWidth: true,\n    onChange: e => changeFirstName(e),\n    value: state.contactInfo.firstName.value || '',\n    error: state.contactInfo.firstName.iserror,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 53\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 49\n    }\n  }, __jsx(TextField, {\n    disabled: isButtonRouting || Boolean(loginfo),\n    className: classes.infoTextField,\n    margin: contactInfoSettings.margin,\n    variant: contactInfoSettings.variant,\n    required: state.contactInfo.lastName.isrequired,\n    id: \"lastName\",\n    name: \"lastName\",\n    label: t('str_lastName'),\n    fullWidth: true,\n    onChange: e => changeLastName(e),\n    value: state.contactInfo.lastName.value || '',\n    error: state.contactInfo.lastName.iserror,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 53\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 49\n    }\n  }, __jsx(TextField, {\n    disabled: isButtonRouting || Boolean(loginfo),\n    className: classes.infoTextField,\n    margin: contactInfoSettings.margin,\n    variant: contactInfoSettings.variant,\n    required: state.contactInfo.mail.isrequired,\n    id: \"mail\",\n    name: \"mail\",\n    label: t('str_email'),\n    fullWidth: true,\n    onChange: e => changeMail(e),\n    value: state.contactInfo.mail.value || '',\n    error: state.contactInfo.mail.iserror,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 53\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 49\n    }\n  }, __jsx(PhoneInput, {\n    disabled: isButtonRouting || Boolean(loginfo),\n    className: classes.infoTextField,\n    defaultCountry: locale === 'en' ? 'us' : locale,\n    preferredCountries: ['it', 'ie', 'de', 'fr', 'es', 'gb'],\n    regions: ['america', 'europe', 'asia', 'oceania', 'africa'],\n    id: \"phone\",\n    name: \"phone\",\n    label: t('str_phone'),\n    fullWidth: true,\n    margin: contactInfoSettings.margin,\n    variant: contactInfoSettings.variant,\n    onChange: e => changePhoneNumber(e),\n    required: state.contactInfo.phone.isrequired,\n    value: state.contactInfo.phone.value || '',\n    error: state.contactInfo.phone.iserror,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 53\n    }\n  })), (GENERAL_SETTINGS === null || GENERAL_SETTINGS === void 0 ? void 0 : (_GENERAL_SETTINGS$hot = GENERAL_SETTINGS.hotelSettings) === null || _GENERAL_SETTINGS$hot === void 0 ? void 0 : _GENERAL_SETTINGS$hot.regbirthdate) && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 53\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 57\n    }\n  }, __jsx(DatePicker, {\n    disabled: isButtonRouting || Boolean(loginfo),\n    autoOk: true,\n    id: \"birthdate\",\n    name: \"birthdate\",\n    fullWidth: true,\n    disableFuture: true,\n    openTo: 'date',\n    views: ['year', 'month', 'date'],\n    inputFormat: \"DD/MM/YYYY\",\n    label: t('str_birthDate'),\n    onChange: e => changeDateOfBirth(e),\n    value: state.contactInfo.birthDate.value ? moment(state.contactInfo.birthDate.value) : moment().subtract(state.maxChildAge > 0 ? state.maxChildAge : 12, 'years'),\n    renderInput: props => __jsx(TextField, _extends({}, props, {\n      className: classes.infoTextField,\n      margin: contactInfoSettings.margin,\n      variant: contactInfoSettings.variant,\n      fullWidth: true,\n      helperText: \"\",\n      required: state.contactInfo.birthDate.isrequired,\n      error: state.contactInfo.birthDate.iserror,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 69\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 61\n    }\n  }))), (GENERAL_SETTINGS === null || GENERAL_SETTINGS === void 0 ? void 0 : (_GENERAL_SETTINGS$hot2 = GENERAL_SETTINGS.hotelSettings) === null || _GENERAL_SETTINGS$hot2 === void 0 ? void 0 : _GENERAL_SETTINGS$hot2.reghealthcode) && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 53\n    }\n  }, __jsx(TextField, {\n    disabled: isButtonRouting || Boolean(loginfo),\n    className: classes.infoTextField,\n    margin: contactInfoSettings.margin,\n    variant: contactInfoSettings.variant,\n    required: state.contactInfo.healthcode.isrequired,\n    id: \"healtcode\",\n    name: \"healtcode\",\n    label: t('str_healthCode'),\n    fullWidth: true,\n    onChange: e => changeHealtCode(e),\n    value: state.contactInfo.healthcode.value || '',\n    error: state.contactInfo.healthcode.iserror,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 57\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 49\n    }\n  }, __jsx(TextField, {\n    disabled: isButtonRouting || Boolean(loginfo),\n    className: classes.infoTextField,\n    margin: \"dense\",\n    variant: \"outlined\",\n    id: \"note\",\n    name: \"note\",\n    label: t('str_note'),\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    onChange: e => changeNote(e),\n    required: state.contactInfo.note.isrequired,\n    value: state.contactInfo.note.value || '',\n    error: state.contactInfo.note.iserror,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 53\n    }\n  })), !state.continueWithoutClientRecord && !isLoginDialog ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 53\n    }\n  }, __jsx(Divider, {\n    variant: \"fullWidth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 57\n    }\n  }), __jsx(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 57\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      name: \"create-account\",\n      color: \"primary\",\n      value: createAccount,\n      onClick: () => setCreateAccount(_objectSpread(_objectSpread({}, createAccount), {}, {\n        isActive: !createAccount.isActive\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 74\n      }\n    }),\n    label: t('str_iWouldLikeToCreateAnAccount'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 61\n    }\n  })), createAccount.isActive && __jsx(Box, {\n    component: \"span\",\n    display: createAccount.isActive ? 'block' : 'none',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 61\n    }\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 65\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"create-account-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 69\n    }\n  }, t('str_password')), __jsx(OutlinedInput, {\n    disabled: isButtonRouting,\n    className: classes.infoTextField,\n    id: \"create-account-password\",\n    type: createAccount.showPassword ? 'text' : 'password',\n    value: createAccount.password,\n    onChange: e => setCreateAccount(_objectSpread(_objectSpread({}, createAccount), {}, {\n      password: e.target.value\n    })),\n    \"aria-describedby\": \"create-account-password-helper-text\",\n    labelWidth: 70,\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 77\n      }\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: () => setCreateAccount(_objectSpread(_objectSpread({}, createAccount), {}, {\n        showPassword: !createAccount.showPassword\n      })),\n      onMouseDown: e => e.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 81\n      }\n    }, createAccount.showPassword ? __jsx(Visibility, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 115\n      }\n    }) : __jsx(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 131\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 69\n    }\n  }), __jsx(FormHelperText, {\n    id: \"create-account-password-helper-text\",\n    className: clsx(classes.createAccountHelperText, {\n      [classes.textRed]: createAccount.isError\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 69\n    }\n  }, createAccount.isError ? t('str_yourPasswordMustBeAMinOf6Characters') : t('str_bookFasterOptional'))))) : null)), state.selectedRooms.length > 1 || state.selectedRooms.length >= 1 && state.selectedRooms[0].guestList.length > 1 ? __jsx(Box, {\n    p: 3,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 795,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: contactInfoSettings.spacing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 796,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 57\n    }\n  }, t('str_otherGuests'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 802,\n      columnNumber: 53\n    }\n  }, state.selectedRooms && state.selectedRooms.map((room, roomIndex) => {\n    let roomNo = roomIndex + 1;\n    const numberOfGuests = Number(room.totalpax) + Number(room.totalchd);\n\n    if (roomIndex !== 0 || roomIndex === 0 && numberOfGuests > 1) {\n      return __jsx(\"div\", {\n        key: roomIndex,\n        style: {\n          marginBottom: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 73\n        }\n      }, __jsx(Typography, {\n        variant: \"subtitle1\",\n        style: {\n          marginBottom: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 77\n        }\n      }, roomNo, \".\", ' ', t('str_room'), \" (\", state.roomAvailabilityList && state.roomAvailabilityList.length > 0 && t(state.roomAvailabilityList.find(item => item.id === room.roomtypeid).shorttext), \")\"), Array.from({\n        length: numberOfGuests\n      }).map((pax, paxIndex) => {\n        if (roomIndex > 0 || roomIndex === 0 && paxIndex > 0) {\n          let paxNo = paxIndex + 1;\n          return __jsx(\"div\", {\n            key: paxIndex,\n            style: {\n              marginBottom: 10\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 89\n            }\n          }, __jsx(Typography, {\n            variant: \"caption\",\n            display: \"block\",\n            style: {\n              marginBottom: 10\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 93\n            }\n          }, paxNo, \".\", ' ', t('str_guest')), __jsx(OtherGuestInfo, {\n            roomIndex: roomIndex,\n            paxIndex: paxIndex,\n            isDisabled: isButtonRouting,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 93\n            }\n          }));\n        }\n      }));\n    }\n  })))) : null, __jsx(Box, {\n    p: 3,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 41\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: contactInfoSettings.spacing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 836,\n      columnNumber: 49\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 53\n    }\n  }, t('str_paymentInformation'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 49\n    }\n  }, __jsx(PaymentInformation, {\n    isDisabled: isButtonRouting || state.isHandleContinue,\n    textFieldsClass: classes.infoTextField,\n    onChange: e => setToState('ibe', ['creditCardInfo'], e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 53\n    }\n  })))), __jsx(Box, {\n    p: 3,\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 41\n    }\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"center\",\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 49\n    }\n  }, __jsx(Button, {\n    disabled: isButtonRouting || state.isHandleContinue,\n    variant: \"outlined\",\n    color: \"secondary\",\n    size: \"large\",\n    disableElevation: true,\n    startIcon: __jsx(ArrowBackIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 68\n      }\n    }),\n    onClick: () => handleBack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 53\n    }\n  }, t('str_back'))), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 865,\n      columnNumber: 49\n    }\n  }, __jsx(ProgressButton, {\n    isLoading: state.isHandleContinue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 866,\n      columnNumber: 53\n    }\n  }, __jsx(Button, {\n    disabled: isButtonRouting || state.isHandleContinue,\n    onClick: () => handleContinue(),\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 867,\n      columnNumber: 57\n    }\n  }, t('str_continueReservation'))))))))))), __jsx(Grid, {\n    item: true,\n    xs: settings.rightColumn.xs,\n    sm: settings.rightColumn.sm,\n    md: settings.rightColumn.md,\n    lg: settings.rightColumn.lg,\n    xl: settings.rightColumn.xl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 21\n    }\n  }, __jsx(ReservationCart, {\n    bookingActiveStep: bookingStepCodes.details,\n    handleNextStep: () => handleContinue(),\n    handleBackStep: () => handleBack(),\n    isDisabled: isButtonRouting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 887,\n      columnNumber: 25\n    }\n  })))), __jsx(\"div\", {\n    className: classes.bottomSpaceBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.ibe\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailsPage);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/pages/booking/details.js"],"names":["React","useContext","useEffect","useState","connect","useSelector","setToState","Box","Button","Checkbox","Divider","FormControlLabel","FormGroup","Grid","TextField","Typography","Container","IconButton","OutlinedInput","InputLabel","InputAdornment","FormHelperText","FormControl","makeStyles","clsx","useSnackbar","ReservationCart","BookingStepper","BookingLayout","WebCmsGlobal","useRouter","axios","ArrowBackIcon","TrackedChangesDialog","LoginDialog","PhoneInput","OtherGuestInfo","PaymentInformation","ProgressButton","useOrestAction","TagManager","REQUEST_METHOD_CONST","required","validateEmail","moment","MomentAdapter","DatePicker","LocalizationProvider","VisibilityOff","UseOrest","useTranslation","getBookingSteps","bookingSteps","bookingStepCodes","useStyles","theme","outline","containerBooking","opacity","root","marginTop","background","palette","paper","width","backgroundColor","border","borderRadius","stepperRoot","display","infoTextField","createAccountHelperText","textAlign","textRed","color","topSpaceBox","bottomSpaceBox","marginBottom","mandatoryFieldMarker","contactInfo","mandatoryField","useMandatoryField","split","Array","isArray","newContactInfo","Object","keys","map","key","includes","isrequired","settings","containerMaxWidth","containerSpacing","leftColumn","xs","sm","md","lg","xl","rightColumn","DetailsPage","props","classes","GENERAL_SETTINGS","WEBCMS_DATA","locale","t","state","hideLayout","showAddons","Boolean","hotelSettings","product","remark","transport","enqueueSnackbar","setUseScrollUp","router","isLoginDialog","setIsLoginDialog","isOpenLoginDialog","setIsOpenLoginDialog","emailIsAlreadyExistsDialog","setEmailIsAlreadyExistsDialog","isRouting","setIsRouting","loginfo","orest","currentUser","token","auth","access_token","clientBase","client","iframe","query","isLogoutButton","deleteOrestCurrentUserInfo","resetOrestState","pageSizes","setPageSizes","height","imgHeight","isButtonRouting","setIsButtonRouting","isEffect","selectedRooms","length","push","pathname","assets","meta","googleTag","page","setChange","hotelName","title","hotelId","HOTELREFNO","pageTitle","window","document","pagePath","location","href","pageStep","innerWidth","innerHeight","addEventListener","handleScroll","passive","events","on","removeEventListener","handleContinueByGuestDetailPage","handleContinue","selectedPaymentTypeId","apiUrl","OREST_URL","endpoint","method","POST","params","hotelrefno","then","checkTokenResponse","data","active","id","setClientInfo","clientid","accid","allhotels","status","count","variant","catch","windowSize","documentElement","clientWidth","body","pageYOffset","clientInfoData","firstName","value","firstname","iserror","guestList","lastName","lastname","mail","email","birthDate","birthdate","healthcode","phone","mobiletel","createAccount","setCreateAccount","isActive","password","showPassword","isError","contactInfoSettings","spacing","margin","hasPayType","filter","payType","hotelPaymentType","paymentypes","item","Number","cireqflds","changeFirstName","e","currentTarget","changeLastName","changeMail","changeHealtCode","changePhoneNumber","changeDateOfBirth","date","_isValid","_d","changeNote","note","emailValidation","url","BASE_URL","response","continueWithoutClientRecord","isRequiredError","isEmailError","forEach","contactEmail","exits","validation","checkPayTypeIsMailOrder","mailOrderInfo","cardIsValid","room","roomIndex","totalpax","from","pax","paxIndex","handleBack","handleScrollTop","scrollTo","top","behavior","handleLogout","paddingTop","padding","fontSize","images","left","overflow","position","zIndex","STATIC_URL","details","regbirthdate","subtract","maxChildAge","reghealthcode","target","preventDefault","roomNo","numberOfGuests","totalchd","roomAvailabilityList","find","roomtypeid","shorttext","paxNo","isHandleContinue","mapStateToProps","formReducer","ibe","mapDispatchToProps","dispatch","stateType","stateName"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { connect, useSelector } from 'react-redux'\nimport { setToState } from 'state/actions'\nimport {\n    Box,\n    Button,\n    Checkbox,\n    Divider,\n    FormControlLabel,\n    FormGroup,\n    Grid,\n    TextField,\n    Typography,\n    Container,\n    IconButton,\n    OutlinedInput,\n    InputLabel,\n    InputAdornment,\n    FormHelperText,\n    FormControl\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport { useSnackbar } from 'notistack'\nimport ReservationCart from 'components/booking/components/ReservationCart'\nimport BookingStepper from 'components/booking/components/BookingStepper'\nimport BookingLayout from 'components/layout/containers/booking-layout'\nimport WebCmsGlobal from 'components/webcms-global'\nimport { useRouter } from 'next/router'\nimport axios from 'axios'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport TrackedChangesDialog from 'components/TrackedChangesDialog'\nimport LoginDialog from 'components/LoginComponent/LoginDialog'\nimport PhoneInput from '@webcms-ui/core/phone-input'\nimport OtherGuestInfo from 'components/booking/OtherGuestInfo'\nimport PaymentInformation from 'components/booking/components/PaymentInformation'\nimport ProgressButton from 'components/booking/components/ProgressButton'\nimport { useOrestAction } from 'model/orest'\nimport TagManager from '@webcms-globals/tag-manager'\nimport { REQUEST_METHOD_CONST } from 'model/orest/constants'\nimport { required, validateEmail } from 'state/utils/form'\nimport moment from 'moment'\nimport MomentAdapter from '@date-io/moment'\nimport { DatePicker, LocalizationProvider } from '@material-ui/pickers'\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\nimport { UseOrest } from '@webcms/orest'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport { getBookingSteps, bookingSteps, bookingStepCodes } from 'components/booking/commons'\n\nconst useStyles = makeStyles((theme) => ({\n    '@global': {\n        'button:focus': {\n            outline: 'none',\n        },\n    },\n    containerBooking: {\n        '& > *': {\n            opacity: 0.9\n        }\n    },\n    root: {\n        marginTop: 16,\n        background: theme.palette.background.paper,\n        width: '100%',\n        backgroundColor: '#fff',\n        border: '1px solid #dadadd',\n        borderRadius: 6,\n    },\n    stepperRoot: {\n        backgroundColor: '#fff',\n        border: '1px solid #dadadd',\n        borderRadius: 6,\n        \"@media print\": {\n            display: 'none'\n        }\n    },\n    infoTextField: {\n        background: '#FFFFFF',\n        '& fieldset': {\n            borderRadius: 0,\n        },\n    },\n    createAccountHelperText: {\n        textAlign: 'right',\n    },\n    textRed: {\n        color: 'red'\n    },\n    topSpaceBox: {\n        width: '100%',\n        display: 'block',\n        marginTop: 60,\n    },\n    bottomSpaceBox: {\n        width: '100%',\n        display: 'block',\n        marginBottom: '30vh',\n        '@media print': {\n            display: 'none',\n        },\n    },\n}))\n\nfunction mandatoryFieldMarker(contactInfo, mandatoryField) {\n    const useMandatoryField = mandatoryField && mandatoryField.split(',') || false\n    if(!Array.isArray(useMandatoryField)){\n        return contactInfo\n    }\n\n    let newContactInfo = {...contactInfo}\n    Object.keys(contactInfo).map((key) => {\n        if(mandatoryField.includes(contactInfo[key].key)){\n            newContactInfo[key].isrequired = true\n        }\n    })\n    return newContactInfo\n}\n\nconst settings = {\n    containerMaxWidth: 'lg',\n    containerSpacing: 3,\n    leftColumn: {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        lg: 8,\n        xl: 8,\n    },\n    rightColumn: {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        lg: 4,\n        xl: 4,\n    },\n}\n\nconst DetailsPage = (props) => {\n    const classes = useStyles()\n        , { GENERAL_SETTINGS, WEBCMS_DATA, locale } = useContext(WebCmsGlobal)\n        , { t } = useTranslation()\n        , { state, setToState, hideLayout } = props\n        , showAddons = Boolean(GENERAL_SETTINGS.hotelSettings.product) || Boolean(GENERAL_SETTINGS.hotelSettings.remark) || Boolean(GENERAL_SETTINGS.hotelSettings.transport)\n        , { enqueueSnackbar } = useSnackbar()\n        , [, setUseScrollUp] = useState(false)\n        , router = useRouter()\n        , [isLoginDialog, setIsLoginDialog] = useState(false)\n        , [isOpenLoginDialog, setIsOpenLoginDialog] = useState(false)\n        , [emailIsAlreadyExistsDialog, setEmailIsAlreadyExistsDialog] = useState(false)\n        , [isRouting, setIsRouting] = useState(false)\n        , loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n        , token = useSelector((state) => state?.orest?.currentUser?.auth.access_token || false)\n        , clientBase = useSelector((state) => state?.orest?.state?.client || false)\n        , iframe = router.query.iframe === 'true'\n        , isLogoutButton = (token && iframe)\n        , { deleteOrestCurrentUserInfo, resetOrestState } = useOrestAction()\n        , [pageSizes, setPageSizes] = useState({\n            width: '100%',\n            height: '100%',\n            imgHeight: '100%',\n         })\n        , [isButtonRouting, setIsButtonRouting] = useState(false)\n\n    useEffect(() => {\n        let isEffect = true\n\n        if (!(state.selectedRooms.length > 0)) {\n            setIsRouting(true)\n            router.push ({\n                pathname: '/booking/rooms',\n                query: router.query\n            })\n        }\n        if (isEffect && WEBCMS_DATA?.assets?.meta?.googleTag) {\n            TagManager.page.setChange({\n                hotelName: WEBCMS_DATA?.assets?.meta?.title,\n                hotelId: GENERAL_SETTINGS.HOTELREFNO,\n                pageTitle: window.document.title,\n                pagePath: location.href,\n                pageStep: 'Guest Details',\n            })\n        }\n\n        setPageSizes({\n            width: window.innerWidth,\n            height: window.innerHeight,\n            imgHeight: window.innerHeight + 104.1\n        })\n\n        window.addEventListener('scroll', handleScroll, { passive: true })\n        window.addEventListener('resize', () => {\n            setPageSizes({\n                width: window.innerWidth,\n                height: window.innerHeight,\n                imgHeight: window.innerHeight + 104.1\n            })\n        })\n\n        router.events.on('routeChangeStart', () => setIsButtonRouting(true))\n        router.events.on('routeChangeComplete', () => setIsButtonRouting(false))\n\n        return () => {\n            window.removeEventListener('scroll', handleScroll)\n        }\n    }, [])\n\n    useEffect(()=> {\n        window.handleContinueByGuestDetailPage = () => {\n            return handleContinue()\n        }\n    }, [state.selectedPaymentTypeId])\n\n    useEffect(() => {\n        if (loginfo) {\n            setIsLoginDialog(true)\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'auth/checktoken',\n                token: token,\n                method: REQUEST_METHOD_CONST.POST,\n                params: {\n                    token: token,\n                    hotelrefno: '',\n                },\n            }).then((checkTokenResponse) => {\n                if (checkTokenResponse?.data?.active) {\n                    if (clientBase && clientBase?.id) {\n                        setClientInfo(clientBase)\n                    } else if ((router.query.clientid || loginfo.accid) && token) {\n                        UseOrest({\n                            apiUrl: GENERAL_SETTINGS.OREST_URL,\n                            endpoint: 'client/getbyid',\n                            token,\n                            params: {\n                                key: router.query.clientid || loginfo.accid,\n                                allhotels: true,\n                            },\n                        }).then((client) => {\n                            if (client.status === 200 && client.data.count > 0) {\n                                setClientInfo(client.data.data)\n                            }\n                        })\n                    }\n                }else{\n                    enqueueSnackbar(t('str_sessionTimeoutLoginAgain'), { variant: 'info' })\n                    deleteOrestCurrentUserInfo()\n                }\n            }).catch(() => {\n                enqueueSnackbar(t('str_sessionTimeoutLoginAgain'), { variant: 'info' })\n                deleteOrestCurrentUserInfo()\n            })\n        } else {\n            setIsLoginDialog(false)\n        }\n    }, [clientBase, loginfo])\n\n    const handleScroll = () => {\n        let windowSize = window?.innerWidth || document?.documentElement?.clientWidth || document?.body?.clientWidth || 0;\n        if(windowSize <= 959 && window?.pageYOffset > 100){\n            setUseScrollUp(true)\n        }else{\n            setUseScrollUp(false)\n        }\n    }\n\n    const setClientInfo = (clientInfoData) => {\n        let newContactInfo = state.contactInfo\n\n        newContactInfo.firstName.value = clientInfoData.firstname\n        newContactInfo.firstName.iserror = false\n        selectedRooms[0].guestList[0].firstName.value = clientInfoData.firstname\n\n        newContactInfo.lastName.value = clientInfoData.lastname\n        newContactInfo.lastName.iserror = false\n        selectedRooms[0].guestList[0].lastName.value = clientInfoData.lastname\n\n        newContactInfo.mail.value = clientInfoData.email\n        newContactInfo.mail.iserror = false\n        selectedRooms[0].guestList[0].mail.value = clientInfoData.email\n\n        newContactInfo.birthDate.value = clientInfoData.birthdate\n        newContactInfo.birthDate.iserror = false\n        selectedRooms[0].guestList[0].birthDate.value = clientInfoData.birthdate\n\n        newContactInfo.healthcode.value = clientInfoData.healthcode\n        newContactInfo.healthcode.iserror = false\n        selectedRooms[0].guestList[0].healthcode.value = clientInfoData.healthcode\n\n        newContactInfo.phone.value = clientInfoData.mobiletel\n        newContactInfo.phone.iserror = false\n        selectedRooms[0].guestList[0].phone.value = clientInfoData.mobiletel\n\n        setToState('ibe', ['selectedRooms'], selectedRooms)\n        setToState('ibe', ['contactInfo'], newContactInfo)\n    }\n\n    const [createAccount, setCreateAccount] = useState({\n        isActive: false,\n        password: '',\n        showPassword: false,\n        isError: false\n    })\n\n\n    const contactInfoSettings = {\n        spacing: 2,\n        margin: 'none',\n        variant: 'outlined',\n    }\n\n    const hasPayType = async (id, filter) => {\n        const payType = state.hotelPaymentType && state.hotelPaymentType.paymentypes.length > 0 && state.hotelPaymentType.paymentypes.filter((item) => item[filter])[0]\n        return Boolean(payType && Number(id) === Number(payType.id))\n    }\n\n    let selectedRooms = state.selectedRooms\n    let contactInfo = mandatoryFieldMarker(state.contactInfo, GENERAL_SETTINGS.hotelSettings.cireqflds)\n\n    const changeFirstName = (e) => {\n        contactInfo.firstName.value = e.currentTarget.value\n        contactInfo.firstName.iserror = false\n        selectedRooms[0].guestList[0].firstName.value = e.currentTarget.value\n        setToState('ibe', ['selectedRooms'], selectedRooms)\n        setToState('ibe', ['contactInfo'], contactInfo)\n    }\n\n    const changeLastName = (e) => {\n        contactInfo.lastName.value = e.currentTarget.value\n        contactInfo.lastName.iserror = false\n        selectedRooms[0].guestList[0].lastName.value = e.currentTarget.value\n        setToState('ibe', ['selectedRooms'], selectedRooms)\n        setToState('ibe', ['contactInfo'], contactInfo)\n    }\n\n    const changeMail = (e) => {\n        setToState('ibe', ['continueWithoutClientRecord'], false)\n        contactInfo.mail.value = e.currentTarget.value\n        contactInfo.mail.iserror = false\n        selectedRooms[0].guestList[0].mail.value = e.currentTarget.value\n        setToState('ibe', ['selectedRooms'], selectedRooms)\n        setToState('ibe', ['contactInfo'], contactInfo)\n    }\n\n    const changeHealtCode = (e) => {\n        contactInfo.healthcode.value = e.currentTarget.value\n        contactInfo.healthcode.iserror = false\n        selectedRooms[0].guestList[0].healthcode.value = e.currentTarget.value\n        setToState('ibe', ['selectedRooms'], selectedRooms)\n        setToState('ibe', ['contactInfo'], contactInfo)\n    }\n\n    const changePhoneNumber = (e) => {\n        contactInfo.phone.value = e\n        contactInfo.phone.iserror = false\n        selectedRooms[0].guestList[0].phone.value = e\n        setToState('ibe', ['selectedRooms'], selectedRooms)\n        setToState('ibe', ['contactInfo'], contactInfo)\n    }\n\n    const changeDateOfBirth = (date) => {\n        if (date) {\n            if (date._isValid) {\n                contactInfo.birthDate.value = date._d\n                selectedRooms[0].guestList[0].birthDate.value = date._d\n            } else {\n                contactInfo.birthDate.value = date._d\n                selectedRooms[0].guestList[0].birthDate.value = date._d\n            }\n            contactInfo.birthDate.iserror = false\n            setToState('ibe', ['selectedRooms'], selectedRooms)\n            setToState('ibe', ['contactInfo'], contactInfo)\n        }\n    }\n\n    const changeNote = (e) => {\n        contactInfo.note.value = e.currentTarget.value\n        selectedRooms[0].guestList[0].note.value = e.currentTarget.value\n        setToState('ibe', ['selectedRooms'], selectedRooms)\n        setToState('ibe', ['contactInfo'], contactInfo)\n    }\n\n    const emailValidation = (email) => {\n        return axios({\n            url: `${GENERAL_SETTINGS.BASE_URL}api/ors/guest/email/valid`,\n            method: 'post',\n            data: {\n                email: email\n            }\n        }).then((response)=> {\n            return response.data\n        })\n    }\n\n\n    const handleContinue = async (continueWithoutClientRecord) => {\n        setToState('ibe', ['isHandleContinue'], true)\n        let isRequiredError = false, isEmailError = false\n\n        Object.keys(contactInfo).forEach(function(key) {\n            if (contactInfo[key].isrequired) {\n                if (required(contactInfo[key].value)) {\n                    contactInfo[key].iserror = true\n                    isRequiredError = true\n                }\n            }\n        })\n\n        if(createAccount.isActive && (createAccount.password === '' || createAccount.password.length < 6)){\n            setCreateAccount({ ...createAccount, isError: true })\n            enqueueSnackbar(t('str_pleaseCheckYourPassword'), { variant: 'error' })\n            isRequiredError = true\n        }else{\n            setCreateAccount({ ...createAccount, isError: false })\n        }\n\n        const contactEmail = await emailValidation(contactInfo.mail.value)\n        if(!continueWithoutClientRecord && contactEmail.exits && !loginfo){\n            isEmailError = true\n            contactInfo['mail'].iserror = true\n            setEmailIsAlreadyExistsDialog(true)\n            setToState('ibe', ['isHandleContinue'], false)\n        }\n\n        if(!contactEmail.validation){\n            isEmailError = true\n            contactInfo['mail'].iserror = true\n        }\n\n        if(!Number(state.selectedPaymentTypeId) > 0){\n            enqueueSnackbar(t('str_pleaseSelectAPaymentMethodToContinue'), { variant: 'warning' })\n            setToState('ibe', ['isHandleContinue'], false)\n            return;\n        }\n\n        const checkPayTypeIsMailOrder = await hasPayType(state.selectedPaymentTypeId, 'ismailorder')\n        if(checkPayTypeIsMailOrder && (!state.mailOrderInfo.cardIsValid)){\n            enqueueSnackbar(t('str_pleaseCheckYourCardInformation'), { variant: 'warning' })\n            setToState('ibe', ['isHandleContinue'], false)\n            return;\n        }\n\n        setToState('ibe', ['contactInfo'], contactInfo)\n        selectedRooms.map((room, roomIndex) => {\n            if (roomIndex !== 0 || (roomIndex === 0 && room.totalpax > 1)) {\n                Array.from({ length: room.totalpax }).map((pax, paxIndex) => {\n                    if (roomIndex > 0 || (roomIndex === 0 && paxIndex > 0)) {\n                        let guestList = selectedRooms[roomIndex].guestList[paxIndex]\n                        Object.keys(guestList).forEach(function(key) {\n                            if (guestList[key].isrequired) {\n                                if (required(guestList[key].value)) {\n                                    guestList[key].iserror = true\n                                    isRequiredError = true\n                                }\n                            }\n\n                            if (guestList['mail'].value) {\n                                if (validateEmail(guestList['mail'].value)) {\n                                    guestList['mail'].iserror = true\n                                    isEmailError = true\n                                }\n                            }\n                        })\n\n                        setToState('ibe', ['selectedRooms', roomIndex, 'guestList', paxIndex], guestList)\n                    }\n                })\n            }\n        })\n\n        if(isRequiredError || isEmailError){\n            setToState('ibe', ['isHandleContinue'], false)\n            if(!createAccount.isError && !contactEmail.exits){\n                enqueueSnackbar(t('str_pleaseCheckMandatoryFields'), { variant: 'error' })\n            }\n        }else{\n            setToState('ibe', ['isHandleContinue'], false)\n            if(createAccount.isActive){\n                setToState('ibe', ['clientPassword'], createAccount.password)\n            }\n            router.push ({\n                pathname: '/booking/preview',\n                query: router.query\n            })\n        }\n    }\n\n    const handleBack = () => {\n        if(showAddons){\n            router.push ({\n                pathname: '/booking/addons',\n                query: router.query\n            })\n        }else{\n            router.push ({\n                pathname: '/booking/rooms',\n                query: router.query\n            })\n        }\n        handleScrollTop()\n    }\n\n    const handleScrollTop = () => {\n        return window.scrollTo({\n            top: 0,\n            behavior: \"smooth\"\n        })\n    }\n\n    const handleLogout = () => {\n        deleteOrestCurrentUserInfo()\n        resetOrestState()\n    }\n\n    if (isRouting) {\n        return (\n            <BookingLayout hideLayout={hideLayout}>\n                <div className={classes.topSpaceBox} />\n                <Container maxWidth={settings.containerMaxWidth} className={classes.containerBooking}>\n                    <Grid container spacing={settings.containerSpacing}>\n                        <Grid item xs={12}>\n                            <div style={{ width: '100%', height: '80vh', textAlign: 'center', paddingTop: '25%' }}>\n                                <span style={{\n                                    background: '#d5d5d5',\n                                    padding: 40,\n                                    width: '100%',\n                                    display: 'block',\n                                    fontSize: 15,\n                                }}>\n                                    {t('str_pleaseWait')}\n                                </span>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </BookingLayout>\n        )\n    }\n\n    return (\n        <BookingLayout hideLayout={hideLayout}>\n            {WEBCMS_DATA?.assets?.images?.background ? (\n                <div style={{ width: pageSizes.width, height: pageSizes.height, top:0, left: 0, overflow: 'hidden', position: 'fixed', zIndex: -3 }}>\n                    <ul style={{padding: 0}}>\n                        <li style={{display: 'list-item'}}>\n                            <img src={GENERAL_SETTINGS.STATIC_URL + WEBCMS_DATA.assets.images.background} style={{width: pageSizes.width, height: pageSizes.imgHeight,}} />\n                        </li>\n                    </ul>\n                </div>\n            ): null}\n            <div className={classes.topSpaceBox} />\n            <Container maxWidth={settings.containerMaxWidth} className={classes.containerBooking}>\n                <Grid container spacing={settings.containerSpacing}>\n                    <Grid item xs={settings.leftColumn.xs} sm={settings.leftColumn.sm} md={settings.leftColumn.md} lg={settings.leftColumn.lg} xl={settings.leftColumn.xl}>\n                        <Grid container spacing={0}>\n                            <Grid item xs={12}>\n                                <BookingStepper classes={{ root: classes.stepperRoot }} activeStep={bookingStepCodes.details} steps={getBookingSteps(bookingSteps, showAddons)}/>\n                                <Grid container spacing={0} style={{paddingTop: 10}}>\n                                    <React.Fragment>\n                                        <TrackedChangesDialog\n                                            isContainedNo={false}\n                                            dialogTitle={t('str_info')}\n                                            dialogDesc={t('str_thisEmailAddressHasBeenUsedBeforeYouCanContinueTheReservationByLoggingIn')}\n                                            labelYes={t('str_logInHere')}\n                                            labelNo={t('str_continueWithoutLogin')}\n                                            open={emailIsAlreadyExistsDialog}\n                                            onPressNo={() => {\n                                                contactInfo['mail'].iserror = false\n                                                setToState('ibe', ['contactInfo'], contactInfo)\n                                                setToState('ibe', ['continueWithoutClientRecord'], true)\n                                                setEmailIsAlreadyExistsDialog(false)\n                                                handleContinue(true)\n                                            }}\n                                            onPressYes={() => {\n                                                setEmailIsAlreadyExistsDialog(false)\n                                                setIsOpenLoginDialog(true)\n                                            }}\n                                        />\n                                        {(!isLoginDialog) ? (\n                                            <React.Fragment>\n                                                <LoginDialog open={isOpenLoginDialog} onClose={(status) => setIsOpenLoginDialog(status)} locationName='booking' isLoginWrapper disableRegister/>\n                                                <Box p={3} className={classes.root}>\n                                                    <Grid container spacing={contactInfoSettings.spacing}>\n                                                        <Grid item xs={12}>\n                                                            <Typography variant='h6' gutterBottom>\n                                                                {t('str_signInForAFasterBooking')}\n                                                            </Typography>\n                                                        </Grid>\n                                                        <Grid item xs={12}>\n                                                            <Button onClick={() => setIsOpenLoginDialog(true)} variant='contained' color='primary' size='large' disabled={isButtonRouting} disableElevation>\n                                                                {t('str_login')}\n                                                            </Button>\n                                                        </Grid>\n                                                    </Grid>\n                                                </Box>\n                                            </React.Fragment>\n                                        ): null}\n                                        {(!!isLoginDialog && isLogoutButton) ? (\n                                            <React.Fragment>\n                                                <Box p={3} className={classes.root}>\n                                                    <Grid container spacing={contactInfoSettings.spacing}>\n                                                        <Grid item xs={12}>\n                                                            <Button onClick={() => handleLogout()} variant='contained' color='primary' size='large' disabled={isButtonRouting} disableElevation>\n                                                                {t('str_logout')}\n                                                            </Button>\n                                                        </Grid>\n                                                    </Grid>\n                                                </Box>\n                                            </React.Fragment>\n                                        ) : null}\n                                        <Box p={3} className={classes.root}>\n                                            <Grid container spacing={contactInfoSettings.spacing}>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"h6\" gutterBottom>\n                                                        {t('str_contactInfo')}\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid item xs={12} sm={6}>\n                                                    <TextField\n                                                        disabled={isButtonRouting || Boolean(loginfo)}\n                                                        className={classes.infoTextField}\n                                                        margin={contactInfoSettings.margin}\n                                                        variant={contactInfoSettings.variant}\n                                                        required={state.contactInfo.firstName.isrequired}\n                                                        id=\"firstName\"\n                                                        name=\"firstName\"\n                                                        label={t('str_firstName')}\n                                                        fullWidth\n                                                        onChange={(e)=> changeFirstName(e)}\n                                                        value={state.contactInfo.firstName.value || ''}\n                                                        error={state.contactInfo.firstName.iserror}\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={12} sm={6}>\n                                                    <TextField\n                                                        disabled={isButtonRouting || Boolean(loginfo)}\n                                                        className={classes.infoTextField}\n                                                        margin={contactInfoSettings.margin}\n                                                        variant={contactInfoSettings.variant}\n                                                        required={state.contactInfo.lastName.isrequired}\n                                                        id=\"lastName\"\n                                                        name=\"lastName\"\n                                                        label={t('str_lastName')}\n                                                        fullWidth\n                                                        onChange={(e)=> changeLastName(e)}\n                                                        value={state.contactInfo.lastName.value || ''}\n                                                        error={state.contactInfo.lastName.iserror}\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={12} sm={6}>\n                                                    <TextField\n                                                        disabled={isButtonRouting || Boolean(loginfo)}\n                                                        className={classes.infoTextField}\n                                                        margin={contactInfoSettings.margin}\n                                                        variant={contactInfoSettings.variant}\n                                                        required={state.contactInfo.mail.isrequired}\n                                                        id=\"mail\"\n                                                        name=\"mail\"\n                                                        label={t('str_email')}\n                                                        fullWidth\n                                                        onChange={(e)=> changeMail(e)}\n                                                        value={state.contactInfo.mail.value || ''}\n                                                        error={state.contactInfo.mail.iserror}\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={12} sm={6}>\n                                                    <PhoneInput\n                                                        disabled={isButtonRouting || Boolean(loginfo)}\n                                                        className={classes.infoTextField}\n                                                        defaultCountry={locale === 'en' ? 'us': locale}\n                                                        preferredCountries={['it', 'ie', 'de', 'fr', 'es', 'gb']}\n                                                        regions={['america', 'europe', 'asia', 'oceania', 'africa']}\n                                                        id=\"phone\"\n                                                        name=\"phone\"\n                                                        label={t('str_phone')}\n                                                        fullWidth\n                                                        margin={contactInfoSettings.margin}\n                                                        variant={contactInfoSettings.variant}\n                                                        onChange={(e)=> changePhoneNumber(e)}\n                                                        required={state.contactInfo.phone.isrequired}\n                                                        value={state.contactInfo.phone.value || ''}\n                                                        error={state.contactInfo.phone.iserror}\n                                                    />\n                                                </Grid>\n                                                {GENERAL_SETTINGS?.hotelSettings?.regbirthdate && (\n                                                    <Grid item xs={12} sm={6}>\n                                                        <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                                            <DatePicker\n                                                                disabled={isButtonRouting || Boolean(loginfo)}\n                                                                autoOk\n                                                                id=\"birthdate\"\n                                                                name=\"birthdate\"\n                                                                fullWidth\n                                                                disableFuture\n                                                                openTo={'date'}\n                                                                views={['year', 'month', 'date']}\n                                                                inputFormat=\"DD/MM/YYYY\"\n                                                                label={t('str_birthDate')}\n                                                                onChange={(e) => changeDateOfBirth(e)}\n                                                                value={state.contactInfo.birthDate.value ? moment(state.contactInfo.birthDate.value) : moment().subtract(state.maxChildAge > 0 ? state.maxChildAge : 12, 'years')}\n                                                                renderInput={(props) =>\n                                                                    <TextField\n                                                                        {...props}\n                                                                        className={classes.infoTextField}\n                                                                        margin={contactInfoSettings.margin}\n                                                                        variant={contactInfoSettings.variant}\n                                                                        fullWidth\n                                                                        helperText=\"\"\n                                                                        required={state.contactInfo.birthDate.isrequired}\n                                                                        error={state.contactInfo.birthDate.iserror}\n                                                                    />\n                                                                }\n                                                            />\n                                                        </LocalizationProvider>\n                                                    </Grid>\n                                                )}\n                                                {GENERAL_SETTINGS?.hotelSettings?.reghealthcode && (\n                                                    <Grid item xs={12} sm={6}>\n                                                        <TextField\n                                                            disabled={isButtonRouting || Boolean(loginfo)}\n                                                            className={classes.infoTextField}\n                                                            margin={contactInfoSettings.margin}\n                                                            variant={contactInfoSettings.variant}\n                                                            required={state.contactInfo.healthcode.isrequired}\n                                                            id=\"healtcode\"\n                                                            name=\"healtcode\"\n                                                            label={t('str_healthCode')}\n                                                            fullWidth\n                                                            onChange={(e)=> changeHealtCode(e)}\n                                                            value={state.contactInfo.healthcode.value || ''}\n                                                            error={state.contactInfo.healthcode.iserror}\n                                                        />\n                                                    </Grid>\n                                                )}\n                                                <Grid item xs={12}>\n                                                    <TextField\n                                                        disabled={isButtonRouting || Boolean(loginfo)}\n                                                        className={classes.infoTextField}\n                                                        margin=\"dense\"\n                                                        variant=\"outlined\"\n                                                        id=\"note\"\n                                                        name=\"note\"\n                                                        label={t('str_note')}\n                                                        fullWidth\n                                                        multiline\n                                                        rows={4}\n                                                        onChange={(e)=> changeNote(e)}\n                                                        required={state.contactInfo.note.isrequired}\n                                                        value={state.contactInfo.note.value || ''}\n                                                        error={state.contactInfo.note.iserror}\n                                                    />\n                                                </Grid>\n                                                {(!state.continueWithoutClientRecord && !isLoginDialog) ? (\n                                                    <Grid item xs={12}>\n                                                        <Divider variant=\"fullWidth\" />\n                                                        <FormGroup row>\n                                                            <FormControlLabel\n                                                                control={<Checkbox name=\"create-account\" color=\"primary\" value={createAccount} onClick={()=> setCreateAccount({ ...createAccount, isActive: !createAccount.isActive })}/>}\n                                                                label={t('str_iWouldLikeToCreateAnAccount')}\n                                                            />\n                                                        </FormGroup>\n                                                        {createAccount.isActive && (\n                                                            <Box component=\"span\" display={createAccount.isActive ? 'block' : 'none'}>\n                                                                <FormControl variant=\"outlined\">\n                                                                    <InputLabel htmlFor=\"create-account-password\">{t('str_password')}</InputLabel>\n                                                                    <OutlinedInput\n                                                                        disabled={isButtonRouting}\n                                                                        className={classes.infoTextField}\n                                                                        id=\"create-account-password\"\n                                                                        type={createAccount.showPassword ? 'text' : 'password'}\n                                                                        value={createAccount.password}\n                                                                        onChange={(e) => setCreateAccount({ ...createAccount, password: e.target.value, })}\n                                                                        aria-describedby=\"create-account-password-helper-text\"\n                                                                        labelWidth={70}\n                                                                        endAdornment={\n                                                                            <InputAdornment position=\"end\">\n                                                                                <IconButton\n                                                                                    aria-label=\"toggle password visibility\"\n                                                                                    onClick={() => setCreateAccount({ ...createAccount, showPassword: !createAccount.showPassword, })}\n                                                                                    onMouseDown={(e) => e.preventDefault()}\n                                                                                >\n                                                                                    {createAccount.showPassword ? <Visibility/> : <VisibilityOff/>}\n                                                                                </IconButton>\n                                                                            </InputAdornment>\n                                                                        }\n                                                                    />\n                                                                    <FormHelperText id=\"create-account-password-helper-text\" className={clsx(classes.createAccountHelperText, { [classes.textRed]: createAccount.isError } )}>{createAccount.isError ? t('str_yourPasswordMustBeAMinOf6Characters') : t('str_bookFasterOptional')}</FormHelperText>\n                                                                </FormControl>\n                                                            </Box>\n                                                        )}\n                                                    </Grid>\n                                                ): null}\n                                            </Grid>\n                                        </Box>\n                                        {state.selectedRooms.length > 1 || (state.selectedRooms.length >= 1 && state.selectedRooms[0].guestList.length > 1) ? (\n                                            <Box p={3} className={classes.root}>\n                                                <Grid container spacing={contactInfoSettings.spacing}>\n                                                    <Grid item xs={12}>\n                                                        <Typography variant=\"h6\" gutterBottom>\n                                                            {t('str_otherGuests')}\n                                                        </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={12}>\n                                                        {state.selectedRooms && state.selectedRooms.map((room, roomIndex) => {\n                                                                let roomNo = roomIndex + 1\n                                                                const numberOfGuests = Number(room.totalpax) + Number(room.totalchd)\n                                                                if (roomIndex !== 0 || (roomIndex === 0 && numberOfGuests > 1)) {\n                                                                    return (\n                                                                        <div key={roomIndex} style={{ marginBottom: 10 }}>\n                                                                            <Typography variant='subtitle1' style={{ marginBottom: 10 }}>\n                                                                                {roomNo}.{' '}{t('str_room')} ({state.roomAvailabilityList && state.roomAvailabilityList.length > 0 && t(state.roomAvailabilityList.find((item) => item.id === room.roomtypeid).shorttext) })\n                                                                            </Typography>\n                                                                            {Array.from({ length: numberOfGuests }).map((pax, paxIndex) => {\n                                                                                if (roomIndex > 0 || (roomIndex === 0 && paxIndex > 0)) {\n                                                                                    let paxNo = paxIndex + 1\n                                                                                    return (\n                                                                                        <div key={paxIndex} style={{ marginBottom: 10 }}>\n                                                                                            <Typography variant='caption' display='block' style={{ marginBottom: 10 }}>\n                                                                                                {paxNo}.{' '}{t('str_guest')}\n                                                                                            </Typography>\n                                                                                            <OtherGuestInfo roomIndex={roomIndex} paxIndex={paxIndex} isDisabled={isButtonRouting}/>\n                                                                                        </div>\n                                                                                    )\n                                                                                }\n                                                                            })}\n                                                                        </div>\n                                                                    )\n                                                                }\n                                                            },\n                                                        )}\n                                                    </Grid>\n                                                </Grid>\n                                            </Box>\n                                        ) : null}\n                                        <Box p={3} className={classes.root}>\n                                            <Grid container spacing={contactInfoSettings.spacing}>\n                                                <Grid item xs={12}>\n                                                    <Typography variant=\"h6\" gutterBottom>\n                                                        {t('str_paymentInformation')}\n                                                    </Typography>\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                    <PaymentInformation\n                                                        isDisabled={isButtonRouting || state.isHandleContinue}\n                                                        textFieldsClass={classes.infoTextField}\n                                                        onChange={(e)=> setToState('ibe', ['creditCardInfo'], e)}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </Box>\n                                        <Box p={3} className={classes.root}>\n                                            <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" spacing={3}>\n                                                <Grid item>\n                                                    <Button\n                                                        disabled={isButtonRouting || state.isHandleContinue}\n                                                        variant='outlined'\n                                                        color='secondary'\n                                                        size='large'\n                                                        disableElevation\n                                                        startIcon={<ArrowBackIcon />}\n                                                        onClick={() => handleBack()}\n                                                    >\n                                                        {t('str_back')}\n                                                    </Button>\n                                                </Grid>\n                                                <Grid item>\n                                                    <ProgressButton isLoading={state.isHandleContinue}>\n                                                        <Button\n                                                            disabled={isButtonRouting || state.isHandleContinue}\n                                                            onClick={()=> handleContinue()}\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            size=\"large\"\n                                                            disableElevation\n                                                        >\n                                                            {t('str_continueReservation')}\n                                                        </Button>\n                                                    </ProgressButton>\n                                                </Grid>\n                                            </Grid>\n                                        </Box>\n                                    </React.Fragment>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={settings.rightColumn.xs} sm={settings.rightColumn.sm} md={settings.rightColumn.md} lg={settings.rightColumn.lg} xl={settings.rightColumn.xl}>\n                        <ReservationCart bookingActiveStep={bookingStepCodes.details} handleNextStep={() => handleContinue()} handleBackStep={() => handleBack()} isDisabled={isButtonRouting}/>\n                    </Grid>\n                </Grid>\n            </Container>\n            <div className={classes.bottomSpaceBox} />\n        </BookingLayout>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.ibe,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailsPage)"]},"metadata":{},"sourceType":"module"}