{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/website/pages/WebsiteParagraph.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\n\nvar WebsiteParagraph = function WebsiteParagraph(props) {\n  _s();\n\n  var paragraph = props.paragraph,\n      font = props.font;\n\n  var _useState = useState(''),\n      data = _useState[0],\n      setData = _useState[1];\n\n  useEffect(function () {\n    if (paragraph !== null && paragraph !== void 0 && paragraph.gid) {\n      var _paragraph$gid;\n\n      var model = (_paragraph$gid = paragraph.gid) === null || _paragraph$gid === void 0 ? void 0 : _paragraph$gid.text;\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(model, 'text/html');\n      var allElements = doc.body.childNodes;\n\n      for (var i = 0; i < allElements.length; i++) {\n        var currElement = allElements[i];\n        var childElements = currElement.childNodes;\n\n        if (currElement && currElement.hasAttribute && currElement !== null && currElement !== void 0 && currElement.hasAttribute(\"style\")) {\n          currElement.style.backgroundColor = ''; // currElement.style.fontSize = font?.size;\n          // currElement.style.fontFamily = font?.name;\n        }\n\n        for (var j = 0; j < childElements.length; j++) {\n          var childElement = childElements[j];\n\n          if (childElement && childElement.hasAttribute && childElement !== null && childElement !== void 0 && childElement.hasAttribute(\"style\")) {\n            childElement.style.backgroundColor = ''; // childElement.style.fontSize = font?.size;\n            // childElement.style.fontFamily = font?.name;\n          }\n\n          var grandChildElements = childElement.childNodes;\n\n          for (var k = 0; k < grandChildElements.length; k++) {\n            var grandChildElement = grandChildElements[k];\n\n            if (grandChildElement && grandChildElement.hasAttribute && grandChildElement !== null && grandChildElement !== void 0 && grandChildElement.hasAttribute('style')) {\n              grandChildElement.style.backgroundColor = ''; // grandChildElement.style.fontSize = font?.size;\n              // grandChildElement.style.fontFamily = font?.name;\n            }\n          }\n        }\n      }\n\n      setData(doc.body.innerHTML);\n    } else {\n      setData(paragraph.text);\n    }\n  }, [paragraph]);\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, data && __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: data\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }));\n};\n\n_s(WebsiteParagraph, \"VZqd8eS65aqgHhr94QvD8B0VC/4=\");\n\n_c = WebsiteParagraph;\nexport default WebsiteParagraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebsiteParagraph\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/website/pages/WebsiteParagraph.js"],"names":["React","useEffect","useState","WebsiteParagraph","props","paragraph","font","data","setData","gid","model","text","parser","DOMParser","doc","parseFromString","allElements","body","childNodes","i","length","currElement","childElements","hasAttribute","style","backgroundColor","j","childElement","grandChildElements","k","grandChildElement","innerHTML","__html"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAAA;;AAAA,MAG5BC,SAH4B,GAK5BD,KAL4B,CAG5BC,SAH4B;AAAA,MAI5BC,IAJ4B,GAK5BF,KAL4B,CAI5BE,IAJ4B;;AAAA,kBAORJ,QAAQ,CAAC,EAAD,CAPA;AAAA,MAOzBK,IAPyB;AAAA,MAOnBC,OAPmB;;AAShCP,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGI,SAAH,aAAGA,SAAH,eAAGA,SAAS,CAAEI,GAAd,EAAmB;AAAA;;AACf,UAAMC,KAAK,qBAAGL,SAAS,CAACI,GAAb,mDAAG,eAAeE,IAA7B;AACA,UAAMC,MAAM,GAAG,IAAIC,SAAJ,EAAf;AACA,UAAIC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBL,KAAvB,EAA8B,WAA9B,CAAV;AACA,UAAIM,WAAW,GAAGF,GAAG,CAACG,IAAJ,CAASC,UAA3B;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EACA;AACI,YAAME,WAAW,GAAGL,WAAW,CAACG,CAAD,CAA/B;AACA,YAAMG,aAAa,GAAGD,WAAW,CAACH,UAAlC;;AACA,YAAIG,WAAW,IAAIA,WAAW,CAACE,YAA3B,IAA2CF,WAA3C,aAA2CA,WAA3C,eAA2CA,WAAW,CAAEE,YAAb,CAA0B,OAA1B,CAA/C,EACA;AACIF,UAAAA,WAAW,CAACG,KAAZ,CAAkBC,eAAlB,GAAoC,EAApC,CADJ,CAEI;AACA;AACH;;AACD,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAAa,CAACF,MAAlC,EAA0CM,CAAC,EAA3C,EAA+C;AAC3C,cAAMC,YAAY,GAAGL,aAAa,CAACI,CAAD,CAAlC;;AACA,cAAIC,YAAY,IAAIA,YAAY,CAACJ,YAA7B,IAA6CI,YAA7C,aAA6CA,YAA7C,eAA6CA,YAAY,CAAEJ,YAAd,CAA2B,OAA3B,CAAjD,EACA;AACII,YAAAA,YAAY,CAACH,KAAb,CAAmBC,eAAnB,GAAqC,EAArC,CADJ,CAEI;AACA;AACH;;AACD,cAAMG,kBAAkB,GAAGD,YAAY,CAACT,UAAxC;;AACA,eAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,kBAAkB,CAACR,MAAvC,EAA+CS,CAAC,EAAhD,EAAoD;AAChD,gBAAMC,iBAAiB,GAAGF,kBAAkB,CAACC,CAAD,CAA5C;;AACA,gBAAIC,iBAAiB,IAAIA,iBAAiB,CAACP,YAAvC,IAAuDO,iBAAvD,aAAuDA,iBAAvD,eAAuDA,iBAAiB,CAAEP,YAAnB,CAAgC,OAAhC,CAA3D,EAAqG;AACjGO,cAAAA,iBAAiB,CAACN,KAAlB,CAAwBC,eAAxB,GAA0C,EAA1C,CADiG,CAEjG;AACA;AACH;AACJ;AACJ;AACJ;;AACDjB,MAAAA,OAAO,CAACM,GAAG,CAACG,IAAJ,CAASc,SAAV,CAAP;AACH,KApCD,MAoCO;AACHvB,MAAAA,OAAO,CAACH,SAAS,CAACM,IAAX,CAAP;AACH;AACJ,GAxCQ,EAwCN,CAACN,SAAD,CAxCM,CAAT;AA0CA,SACI,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQE,IAAI,IAAI;AAAK,IAAA,uBAAuB,EAAE;AAAEyB,MAAAA,MAAM,EAAEzB;AAAV,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhB,CADJ;AAOH,CA1DD;;GAAMJ,gB;;KAAAA,gB;AA4DN,eAAeA,gBAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nconst WebsiteParagraph = (props) => {\n\n    const {\n        paragraph,\n        font\n    } = props\n\n    const [data, setData] = useState('');\n\n    useEffect(() => {\n        if(paragraph?.gid) {\n            const model = paragraph.gid?.text;\n            const parser = new DOMParser();\n            let doc = parser.parseFromString(model, 'text/html');\n            let allElements = doc.body.childNodes;\n\n            for (let i = 0; i < allElements.length; i++)\n            {\n                const currElement = allElements[i];\n                const childElements = currElement.childNodes;\n                if (currElement && currElement.hasAttribute && currElement?.hasAttribute(\"style\"))\n                {\n                    currElement.style.backgroundColor = '';\n                    // currElement.style.fontSize = font?.size;\n                    // currElement.style.fontFamily = font?.name;\n                }\n                for (let j = 0; j < childElements.length; j++) {\n                    const childElement = childElements[j];\n                    if (childElement && childElement.hasAttribute && childElement?.hasAttribute(\"style\"))\n                    {\n                        childElement.style.backgroundColor = '';\n                        // childElement.style.fontSize = font?.size;\n                        // childElement.style.fontFamily = font?.name;\n                    }\n                    const grandChildElements = childElement.childNodes;\n                    for (let k = 0; k < grandChildElements.length; k++) {\n                        const grandChildElement = grandChildElements[k];\n                        if (grandChildElement && grandChildElement.hasAttribute && grandChildElement?.hasAttribute('style')) {\n                            grandChildElement.style.backgroundColor = '';\n                            // grandChildElement.style.fontSize = font?.size;\n                            // grandChildElement.style.fontFamily = font?.name;\n                        }\n                    }\n                }\n            }\n            setData(doc.body.innerHTML)\n        } else {\n            setData(paragraph.text);\n        }\n    }, [paragraph]);\n\n    return (\n        <React.Fragment>\n            {\n                data && <div dangerouslySetInnerHTML={{ __html: data }}></div>\n            }\n        </React.Fragment>\n    )\n};\n\nexport default WebsiteParagraph;"]},"metadata":{},"sourceType":"module"}