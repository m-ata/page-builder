{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/options/Time.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { SURVEY_INPUT_VARIANT } from '../../../../assets/const';\nimport { LocalizationProvider, TimePicker } from '@material-ui/pickers';\nimport MomentAdapter from '@date-io/moment';\nimport moment from 'moment';\nimport { OREST_ENDPOINT } from '../../../../model/orest/constants';\nimport TextField from '@material-ui/core/TextField';\nimport useSurveyAction from '../../../../model/survey/useSurveyAction';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from '../../style/SurveyOptions.style';\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip';\nconst useStyles = makeStyles(styles);\n\nconst timeToDate = time => {\n  let times = [];\n  times = time.split(':');\n\n  if (times.length > 0) {\n    const dateValue = new Date();\n    dateValue.setHours(Number(times[0]), Number(times[1]), Number(times[2]));\n    return dateValue;\n  } else {\n    return null;\n  }\n};\n\nexport default function TimeOption(props) {\n  const {\n    option,\n    optionTyp\n  } = props; //style\n\n  const classes = useStyles(); //redux\n\n  const {\n    setSurveyAnswerMulti,\n    deleteSurveyAnswer\n  } = useSurveyAction();\n  const surveyTrans = useSelector(state => state.survey.trans);\n  const surveyIsValid = useSelector(state => state.survey.isValid);\n  const oldAnswer = useSelector(state => state.survey.answers[surveyTrans] && state.survey.answers[surveyTrans][option.parentid] && state.survey.answers[surveyTrans][option.parentid][option.id]); //state\n\n  const {\n    0: optionValue,\n    1: setOptionValue\n  } = useState(oldAnswer ? timeToDate(oldAnswer.valuetime) : null);\n\n  const handleChangeOption = date => {\n    const timeValue = moment(date).format(OREST_ENDPOINT.TIMEFORMAT);\n    setOptionValue(date);\n\n    if (timeValue !== '' && timeValue !== 'Invalid date') {\n      setSurveyAnswerMulti(surveyTrans, option.parentid, option.id, {\n        typ: optionTyp,\n        parentid: option.parentid,\n        valuetime: timeValue\n      });\n    } else {\n      deleteSurveyAnswer(surveyTrans, option.parentid, option.id);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.optionContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(SurveyTooltip, {\n    title: option && option.note || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, __jsx(TimePicker, {\n    onKeyUp: handleChangeOption,\n    onKeyDown: handleChangeOption,\n    onChange: handleChangeOption,\n    ampm: false,\n    views: ['hours', 'minutes', 'seconds'],\n    inputFormat: \"HH:mm:ss\",\n    mask: \"__:__:__\",\n    disabled: surveyIsValid,\n    id: String(option.id),\n    name: String(option.id),\n    label: option.langwordtxt || option.description,\n    value: optionValue,\n    KeyboardButtonProps: {\n      'aria-label': 'change time'\n    },\n    className: classes.textField,\n    InputProps: {\n      classes: {\n        input: classes.textFieldInput\n      }\n    },\n    InputLabelProps: {\n      className: classes.textFieldLabel\n    },\n    renderInput: props => __jsx(TextField, _extends({}, props, {\n      variant: SURVEY_INPUT_VARIANT,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 49\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/options/Time.js"],"names":["React","useState","SURVEY_INPUT_VARIANT","LocalizationProvider","TimePicker","MomentAdapter","moment","OREST_ENDPOINT","TextField","useSurveyAction","useSelector","makeStyles","styles","SurveyTooltip","useStyles","timeToDate","time","times","split","length","dateValue","Date","setHours","Number","TimeOption","props","option","optionTyp","classes","setSurveyAnswerMulti","deleteSurveyAnswer","surveyTrans","state","survey","trans","surveyIsValid","isValid","oldAnswer","answers","parentid","id","optionValue","setOptionValue","valuetime","handleChangeOption","date","timeValue","format","TIMEFORMAT","typ","optionContainer","note","String","langwordtxt","description","textField","input","textFieldInput","className","textFieldLabel"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { SURVEY_INPUT_VARIANT } from '../../../../assets/const'\nimport { LocalizationProvider, TimePicker } from '@material-ui/pickers'\nimport MomentAdapter from '@date-io/moment'\nimport moment from 'moment'\nimport { OREST_ENDPOINT } from '../../../../model/orest/constants'\nimport TextField from '@material-ui/core/TextField'\nimport useSurveyAction from '../../../../model/survey/useSurveyAction'\nimport { useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport styles from '../../style/SurveyOptions.style'\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip'\n\nconst useStyles = makeStyles(styles)\n\nconst timeToDate = (time) => {\n    let times = []\n    times = time.split(':')\n    if (times.length > 0) {\n        const dateValue = new Date()\n        dateValue.setHours(Number(times[0]), Number(times[1]), Number(times[2]))\n\n        return dateValue\n    } else {\n        return null\n    }\n}\n\nexport default function TimeOption(props) {\n    const { option, optionTyp } = props\n\n    //style\n    const classes = useStyles()\n\n    //redux\n    const { setSurveyAnswerMulti, deleteSurveyAnswer } = useSurveyAction()\n    const surveyTrans = useSelector((state) => state.survey.trans)\n    const surveyIsValid = useSelector((state) => state.survey.isValid)\n    const oldAnswer = useSelector(\n        (state) =>\n            state.survey.answers[surveyTrans] &&\n            state.survey.answers[surveyTrans][option.parentid] &&\n            state.survey.answers[surveyTrans][option.parentid][option.id],\n    )\n\n    //state\n    const [optionValue, setOptionValue] = useState(oldAnswer ? timeToDate(oldAnswer.valuetime) : null)\n\n    const handleChangeOption = (date) => {\n        const timeValue = moment(date).format(OREST_ENDPOINT.TIMEFORMAT)\n        setOptionValue(date)\n\n        if (timeValue !== '' && timeValue !== 'Invalid date') {\n            setSurveyAnswerMulti(surveyTrans, option.parentid, option.id, {\n                typ: optionTyp,\n                parentid: option.parentid,\n                valuetime: timeValue,\n            })\n        } else {\n            deleteSurveyAnswer(surveyTrans, option.parentid, option.id)\n        }\n    }\n\n    return (\n        <div className={classes.optionContainer}>\n            <SurveyTooltip title={option && option.note || ''}>\n                <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                    <TimePicker\n                        onKeyUp={handleChangeOption}\n                        onKeyDown={handleChangeOption}\n                        onChange={handleChangeOption}\n                        ampm={false}\n                        views={['hours', 'minutes', 'seconds']}\n                        inputFormat=\"HH:mm:ss\"\n                        mask=\"__:__:__\"\n                        disabled={surveyIsValid}\n                        id={String(option.id)}\n                        name={String(option.id)}\n                        label={option.langwordtxt || option.description}\n                        value={optionValue}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change time',\n                        }}\n                        className={classes.textField}\n                        InputProps={{ classes: { input: classes.textFieldInput } }}\n                        InputLabelProps={{ className: classes.textFieldLabel }}\n                        renderInput={(props) => <TextField {...props} variant={SURVEY_INPUT_VARIANT} fullWidth/>}\n                    />\n                </LocalizationProvider>\n            </SurveyTooltip>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}