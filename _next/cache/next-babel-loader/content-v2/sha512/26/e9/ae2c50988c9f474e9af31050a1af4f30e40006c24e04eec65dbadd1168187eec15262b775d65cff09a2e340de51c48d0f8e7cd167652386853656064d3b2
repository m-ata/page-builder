{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport styles from '../style/SurveyPage.style';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRouter } from 'next/router';\nimport WebCmsGlobal from 'components/webcms-global';\nimport SurveyLayout from '../../layout/containers/SurveyLayout';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\nimport { NextSeo } from 'next-seo';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { isErrorMsg, OREST_ENDPOINT, REQUEST_METHOD_CONST } from '../../../model/orest/constants';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport RenderSurvey from './RenderSurvey';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport { useOrestAction } from '../../../model/orest';\nimport { UseOrest } from '@webcms/orest';\nimport useSurveyAction from 'model/survey/useSurveyAction';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport SurveyBanner from '../banner';\nimport Button from '@material-ui/core/Button';\nvar useStyles = makeStyles(styles);\nimport { defaultLocale } from 'lib/translations/config';\nimport { useSnackbar } from 'notistack';\nexport default function SurveyTree(props) {\n  _s();\n\n  var _router$query,\n      _router$query2,\n      _this = this;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n  var surveygid = props.surveygid,\n      surveyrefno = props.surveyrefno,\n      clientid = props.clientid,\n      isWidget = props.isWidget,\n      isAlreadyLoadTree = props.isAlreadyLoadTree;\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS,\n      WEBCMS_DATA = _useContext.WEBCMS_DATA,\n      locale = _useContext.locale;\n\n  var router = useRouter();\n  var surveyGid = router.query.surveyGid || surveygid;\n  var surveyHotelRefno = router.query.hotelrefno || surveyrefno;\n  var cache = router.query.cache;\n  var refid = (router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.refid) || clientid || false;\n  var refgid = (router === null || router === void 0 ? void 0 : (_router$query2 = router.query) === null || _router$query2 === void 0 ? void 0 : _router$query2.refgid) || false;\n  var reftoken = router.query.reftoken;\n  var langcode = router.query.lang || locale || defaultLocale;\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var _useOrestAction = useOrestAction(),\n      deleteOrestCurrentUserInfo = _useOrestAction.deleteOrestCurrentUserInfo;\n\n  var isPortal = GENERAL_SETTINGS.ISPORTAL; //redux\n\n  var _useSurveyAction = useSurveyAction(),\n      setSurveyTrans = _useSurveyAction.setSurveyTrans,\n      setSurveyIsValid = _useSurveyAction.setSurveyIsValid,\n      setSurveyAnswerMulti = _useSurveyAction.setSurveyAnswerMulti,\n      setSurveyDisplayType = _useSurveyAction.setSurveyDisplayType,\n      setSurveyBgColor = _useSurveyAction.setSurveyBgColor;\n\n  var token = reftoken || useSelector(function (state) {\n    return state.orest.currentUser !== null && state.orest.currentUser.auth.access_token;\n  });\n  var loginfo = useSelector(function (state) {\n    return state.orest.currentUser && state.orest.currentUser.loginfo;\n  });\n  var reservationInfo = useSelector(function (state) {\n    var _state$formReducer, _state$formReducer$gu;\n\n    return (state === null || state === void 0 ? void 0 : (_state$formReducer = state.formReducer) === null || _state$formReducer === void 0 ? void 0 : (_state$formReducer$gu = _state$formReducer.guest) === null || _state$formReducer$gu === void 0 ? void 0 : _state$formReducer$gu.clientReservation) || null;\n  });\n  var changeHotelRefNo = useSelector(function (state) {\n    var _state$formReducer2, _state$formReducer2$g;\n\n    return (state === null || state === void 0 ? void 0 : (_state$formReducer2 = state.formReducer) === null || _state$formReducer2 === void 0 ? void 0 : (_state$formReducer2$g = _state$formReducer2.guest) === null || _state$formReducer2$g === void 0 ? void 0 : _state$formReducer2$g.changeHotelRefno) || null;\n  });\n\n  var _useState = useState(false),\n      clientBase = _useState[0],\n      setClientBase = _useState[1];\n\n  if (!loginfo && refid && surveyHotelRefno) {\n    loginfo = {\n      refid: refid,\n      hotelrefno: surveyHotelRefno\n    };\n  }\n\n  var clientParams = {};\n  clientParams.hotelrefno = loginfo && loginfo.hotelrefno;\n  clientParams.isportal = isPortal;\n  clientParams.surveyrefno = surveyrefno;\n\n  if (isPortal) {\n    clientParams.portalrefno = changeHotelRefNo;\n  }\n\n  if (GENERAL_SETTINGS.ISCHAIN && String(clientParams.hotelrefno) !== String(GENERAL_SETTINGS.HOTELREFNO)) {\n    clientParams.chainid = loginfo && loginfo.hotelrefno;\n    clientParams.ischain = true;\n  } //state\n\n\n  var _useState2 = useState([]),\n      surveyTree = _useState2[0],\n      setSurveyTree = _useState2[1];\n\n  var _useState3 = useState(false),\n      isRequest = _useState3[0],\n      setIsRequest = _useState3[1];\n\n  var _useState4 = useState(true),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      isError = _useState5[0],\n      setIsError = _useState5[1];\n\n  var _useState6 = useState(false),\n      isSurveyExpreid = _useState6[0],\n      setIsSurveyExpreid = _useState6[1];\n\n  var _useState7 = useState(null),\n      title = _useState7[0],\n      setTitle = _useState7[1];\n\n  var _useState8 = useState(true),\n      isClient = _useState8[0],\n      setIsClient = _useState8[1];\n\n  useEffect(function () {\n    var active = true;\n    var client = null;\n\n    if (isRequest === false) {\n      if (isAlreadyLoadTree) {\n        setIsRequest(false);\n        setIsLoading(false);\n        setSurveyTree(isAlreadyLoadTree);\n      } else {\n        setIsRequest(true);\n        getSurveyLoad(active, client);\n      }\n    }\n\n    return function () {\n      active = false;\n    };\n  }, [langcode]);\n\n  var tryLoadingAgainAction = function tryLoadingAgainAction() {\n    setIsError(false);\n    return __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      onClick: function onClick() {\n        return getSurveyLoad(true, null);\n      },\n      color: \"inherit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, t('str_tryAgain')));\n  };\n\n  var getSurveyLoad = function getSurveyLoad(active, client) {\n    function getClient() {\n      return _getClient.apply(this, arguments);\n    }\n\n    function _getClient() {\n      _getClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _loginfo;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", UseOrest({\n                  apiUrl: GENERAL_SETTINGS.OREST_URL,\n                  endpoint: 'client/getbyid',\n                  timeout: 1000 * 30,\n                  // Wait for 30 sec.\n                  token: token,\n                  params: {\n                    key: refid || ((_loginfo = loginfo) === null || _loginfo === void 0 ? void 0 : _loginfo.refid) || false,\n                    allhotels: true\n                  }\n                }).then(function (clientResponse) {\n                  if (clientResponse.status === 200 && clientResponse.data.count > 0) {\n                    var clientResponseData = clientResponse.data.data;\n                    setClientBase(clientResponseData);\n                    return clientResponseData;\n                  } else if (clientResponse.status === 401) {\n                    deleteOrestCurrentUserInfo();\n                  } else {\n                    var retErr = isErrorMsg(clientResponse);\n                    enqueueSnackbar(t(retErr.errorMsg), {\n                      variant: 'warning'\n                    });\n                    return null;\n                  }\n                })[\"catch\"](function () {\n                  return deleteOrestCurrentUserInfo();\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getClient.apply(this, arguments);\n    }\n\n    function getReservno() {\n      return _getReservno.apply(this, arguments);\n    }\n\n    function _getReservno() {\n      _getReservno = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _loginfo2;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", UseOrest({\n                  apiUrl: GENERAL_SETTINGS.OREST_URL,\n                  endpoint: 'client/reservno',\n                  token: token,\n                  params: {\n                    clientid: refid || ((_loginfo2 = loginfo) === null || _loginfo2 === void 0 ? void 0 : _loginfo2.refid) || false,\n                    isgapp: true\n                  }\n                }).then(function (clientReservnoResponse) {\n                  var _clientReservnoRespon;\n\n                  if (clientReservnoResponse.status === 200 && clientReservnoResponse !== null && clientReservnoResponse !== void 0 && (_clientReservnoRespon = clientReservnoResponse.data) !== null && _clientReservnoRespon !== void 0 && _clientReservnoRespon.data) {\n                    return clientReservnoResponse.data.data;\n                  } else if (clientReservnoResponse.status === 401) {\n                    deleteOrestCurrentUserInfo();\n                  } else {\n                    var retErr = isErrorMsg(clientReservnoResponse);\n                    enqueueSnackbar(t(retErr.errorMsg), {\n                      variant: 'warning'\n                    });\n                    return null;\n                  }\n                })[\"catch\"](function () {\n                  return null;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _getReservno.apply(this, arguments);\n    }\n\n    function getSurvey() {\n      return _getSurvey.apply(this, arguments);\n    }\n\n    function _getSurvey() {\n      _getSurvey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var reservation, _reservation, _reservation2;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                reservation = null;\n\n                if (!(refgid || clientBase || loginfo && loginfo.refid)) {\n                  _context4.next = 30;\n                  break;\n                }\n\n                if (!(!refid && clientBase && clientBase.gid)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                client = clientBase;\n                _context4.next = 9;\n                break;\n\n              case 6:\n                _context4.next = 8;\n                return getClient();\n\n              case 8:\n                client = _context4.sent;\n\n              case 9:\n                if (reservationInfo) {\n                  _context4.next = 15;\n                  break;\n                }\n\n                _context4.next = 12;\n                return getReservno();\n\n              case 12:\n                reservation = _context4.sent;\n                _context4.next = 16;\n                break;\n\n              case 15:\n                reservation = reservationInfo;\n\n              case 16:\n                if (!refgid) {\n                  _context4.next = 21;\n                  break;\n                }\n\n                _context4.next = 19;\n                return axios({\n                  url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n                  method: REQUEST_METHOD_CONST.POST,\n                  params: clientParams,\n                  timeout: 1000 * 30,\n                  // Wait for 30 sec.\n                  data: {\n                    reservno: ((_reservation = reservation) === null || _reservation === void 0 ? void 0 : _reservation.reservno) || false,\n                    clientid: refid || client.id,\n                    survey: surveyGid,\n                    trans: refgid,\n                    cache: cache,\n                    langcode: langcode\n                  }\n                }).then( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(r) {\n                    var surveyData, surveyTransData, surveyIsValidData, surveyDisplayType, oldAnswersData, bgColor;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (active) {\n                              if (r.status === 200 && r.data.survey && r.data.trans) {\n                                surveyData = r.data.survey;\n                                surveyTransData = r.data.trans;\n                                surveyIsValidData = r.data.isvalid;\n                                surveyDisplayType = r.data.disptype || 0;\n                                oldAnswersData = r.data.answers;\n                                bgColor = r.data.bgcolor;\n                                setSurveyTree(surveyData);\n                                setSurveyTrans(surveyTransData);\n                                setSurveyIsValid(surveyIsValidData);\n                                setSurveyDisplayType(surveyDisplayType);\n                                setSurveyBgColor(bgColor);\n                                setOldAnswers(surveyTransData, oldAnswersData);\n\n                                if (surveyData[0] && surveyData[0].description) {\n                                  setTitle(surveyData[0].description);\n                                }\n                              } else {\n                                enqueueSnackbar(t('str_unexpectedProblem'), {\n                                  variant: 'error',\n                                  autoHideDuration: 10000,\n                                  action: tryLoadingAgainAction()\n                                });\n                                setIsError(true);\n                              }\n                            }\n\n                          case 1:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }())[\"catch\"](function () {\n                  enqueueSnackbar(t('str_unexpectedProblem'), {\n                    variant: 'error',\n                    autoHideDuration: 10000,\n                    action: tryLoadingAgainAction()\n                  });\n                  setIsError(true);\n                });\n\n              case 19:\n                _context4.next = 28;\n                break;\n\n              case 21:\n                if (!client) {\n                  _context4.next = 26;\n                  break;\n                }\n\n                _context4.next = 24;\n                return axios({\n                  url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n                  method: REQUEST_METHOD_CONST.POST,\n                  timeout: 1000 * 30,\n                  // Wait for 30 sec.\n                  params: clientParams,\n                  data: {\n                    reservno: ((_reservation2 = reservation) === null || _reservation2 === void 0 ? void 0 : _reservation2.reservno) || false,\n                    clientid: client.id || false,\n                    survey: surveyGid,\n                    client: client.gid,\n                    cache: cache,\n                    langcode: langcode\n                  }\n                }).then(function (r) {\n                  if (active) {\n                    if (r.status === 200 && r.data.survey && r.data.trans) {\n                      var surveyData = r.data.survey;\n                      var surveyTransData = r.data.trans;\n                      var surveyIsValidData = r.data.isvalid;\n                      var surveyDisplayType = r.data.disptype || 0;\n                      var oldAnswersData = r.data.answers;\n                      var bgColor = r.data.bgcolor;\n                      setSurveyTree(surveyData);\n                      setSurveyTrans(surveyTransData);\n                      setSurveyIsValid(surveyIsValidData);\n                      setSurveyDisplayType(surveyDisplayType);\n                      setSurveyBgColor(bgColor);\n                      setOldAnswers(surveyTransData, oldAnswersData);\n\n                      if (surveyData[0] && surveyData[0].description) {\n                        setTitle(surveyData[0].description);\n                      }\n                    } else {\n                      if (r.data.error === \"survey_has_been_expired\") {\n                        setIsSurveyExpreid(true);\n                      } else {\n                        enqueueSnackbar(t('str_unexpectedProblem'), {\n                          variant: 'error',\n                          autoHideDuration: 10000,\n                          action: tryLoadingAgainAction()\n                        });\n                      }\n\n                      setIsError(true);\n                    }\n                  }\n                })[\"catch\"](function () {\n                  enqueueSnackbar(t('str_unexpectedProblem'), {\n                    variant: 'error',\n                    autoHideDuration: 10000,\n                    action: tryLoadingAgainAction()\n                  });\n                  setIsError(true);\n                });\n\n              case 24:\n                _context4.next = 28;\n                break;\n\n              case 26:\n                enqueueSnackbar(t('str_unexpectedProblem'), {\n                  variant: 'error',\n                  autoHideDuration: 10000,\n                  action: tryLoadingAgainAction()\n                });\n                setIsError(true);\n\n              case 28:\n                _context4.next = 31;\n                break;\n\n              case 30:\n                setIsClient(false);\n\n              case 31:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      return _getSurvey.apply(this, arguments);\n    }\n\n    if (active) {\n      if (surveyGid && refgid || token && loginfo) {\n        setIsLoading(true);\n        getSurvey().then(function () {\n          setIsRequest(false);\n          setIsLoading(false);\n        });\n      }\n    }\n  };\n\n  var setOldAnswers = function setOldAnswers(surveyTrans, oldAnswers) {\n    if (oldAnswers.length > 0) {\n      oldAnswers.map(function (answer) {\n        if (surveyTrans && answer.questionid && answer.answerid && answer.typ) {\n          setSurveyAnswerMulti(surveyTrans, answer.questionid, answer.answerid, {\n            typ: answer.typ,\n            parentid: answer.questionid,\n            answernote: answer.answernote,\n            valuetext: answer.valuetext,\n            valuelongtext: answer.valuelongtext,\n            valueint: answer.valueint,\n            valuefloat: answer.valuefloat,\n            valuedate: answer.valuedate,\n            valuetime: answer.valuetime\n          });\n        }\n      });\n    }\n  };\n\n  var UseSurveyPage = function UseSurveyPage() {\n    return __jsx(Container, {\n      maxWidth: 'lg',\n      className: classes.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 13\n      }\n    }, isLoading || isRequest ? __jsx(Box, {\n      p: 3,\n      m: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 25\n      }\n    }, __jsx(LoadingSpinner, {\n      size: 50,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 29\n      }\n    }))) : !isClient ? __jsx(Box, {\n      p: 3,\n      m: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }\n    }, t('str_youAreNotAClient'))) : isSurveyExpreid && isError ? __jsx(Box, {\n      p: 3,\n      m: 1,\n      style: {\n        textAlign: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 21\n      }\n    }, __jsx(CheckCircleOutlinedIcon, {\n      style: {\n        fontSize: 100,\n        color: '#4caf50',\n        marginBottom: 20\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 25\n      }\n    }), __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 25\n      }\n    }, t('str_thankYouForYourParticipationTheThisSurveyHasBeenExpired'))) : isError ? __jsx(Box, {\n      p: 3,\n      m: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 25\n      }\n    }, t('str_somethingWentWrong'))) : surveyTree && surveyTree.length > 0 ? __jsx(RenderSurvey, {\n      survey: surveyTree,\n      surveygid: surveyGid,\n      surveyrefno: surveyHotelRefno,\n      clientid: refid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 21\n      }\n    }) : __jsx(Box, {\n      p: 3,\n      m: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 25\n      }\n    }, t('str_noSurveyQuestion'))));\n  };\n\n  if (isWidget) {\n    return __jsx(UseSurveyPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }\n    });\n  }\n\n  return __jsx(SurveyLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }\n  }, title ? __jsx(NextSeo, {\n    title: title + ' - ' + WEBCMS_DATA.assets.meta.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 23\n    }\n  }) : __jsx(NextSeo, {\n    title: WEBCMS_DATA.assets.meta.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 93\n    }\n  }), __jsx(SurveyBanner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }\n  }), __jsx(UseSurveyPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 13\n    }\n  }));\n}\n\n_s(SurveyTree, \"/1JSHv4YRafCwC2Qn5/qOIWkUQg=\", false, function () {\n  return [useTranslation, useStyles, useRouter, useSnackbar, useOrestAction, useSurveyAction, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = SurveyTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyTree\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/index.js"],"names":["React","useContext","useEffect","useState","styles","makeStyles","useRouter","WebCmsGlobal","SurveyLayout","CheckCircleOutlinedIcon","NextSeo","Container","Box","Typography","isErrorMsg","OREST_ENDPOINT","REQUEST_METHOD_CONST","useSelector","axios","RenderSurvey","LoadingSpinner","useOrestAction","UseOrest","useSurveyAction","useTranslation","SurveyBanner","Button","useStyles","defaultLocale","useSnackbar","SurveyTree","props","t","classes","surveygid","surveyrefno","clientid","isWidget","isAlreadyLoadTree","GENERAL_SETTINGS","WEBCMS_DATA","locale","router","surveyGid","query","surveyHotelRefno","hotelrefno","cache","refid","refgid","reftoken","langcode","lang","enqueueSnackbar","deleteOrestCurrentUserInfo","isPortal","ISPORTAL","setSurveyTrans","setSurveyIsValid","setSurveyAnswerMulti","setSurveyDisplayType","setSurveyBgColor","token","state","orest","currentUser","auth","access_token","loginfo","reservationInfo","formReducer","guest","clientReservation","changeHotelRefNo","changeHotelRefno","clientBase","setClientBase","clientParams","isportal","portalrefno","ISCHAIN","String","HOTELREFNO","chainid","ischain","surveyTree","setSurveyTree","isRequest","setIsRequest","isLoading","setIsLoading","isError","setIsError","isSurveyExpreid","setIsSurveyExpreid","title","setTitle","isClient","setIsClient","active","client","getSurveyLoad","tryLoadingAgainAction","getClient","apiUrl","OREST_URL","endpoint","timeout","params","key","allhotels","then","clientResponse","status","data","count","clientResponseData","retErr","errorMsg","variant","getReservno","isgapp","clientReservnoResponse","getSurvey","reservation","gid","url","BASE_URL","method","POST","reservno","id","survey","trans","r","surveyData","surveyTransData","surveyIsValidData","isvalid","surveyDisplayType","disptype","oldAnswersData","answers","bgColor","bgcolor","setOldAnswers","description","autoHideDuration","action","error","surveyTrans","oldAnswers","length","map","answer","questionid","answerid","typ","parentid","answernote","valuetext","valuelongtext","valueint","valuefloat","valuedate","valuetime","UseSurveyPage","container","textAlign","fontSize","color","marginBottom","assets","meta"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport styles from '../style/SurveyPage.style'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useRouter } from 'next/router'\nimport WebCmsGlobal from 'components/webcms-global'\nimport SurveyLayout from '../../layout/containers/SurveyLayout'\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined'\nimport { NextSeo } from 'next-seo'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport { isErrorMsg, OREST_ENDPOINT, REQUEST_METHOD_CONST } from '../../../model/orest/constants'\nimport { useSelector } from 'react-redux'\nimport axios from 'axios'\nimport RenderSurvey from './RenderSurvey'\nimport LoadingSpinner from '../../LoadingSpinner'\nimport { useOrestAction } from '../../../model/orest'\nimport { UseOrest } from '@webcms/orest'\nimport useSurveyAction from 'model/survey/useSurveyAction'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport SurveyBanner from '../banner'\nimport Button from '@material-ui/core/Button'\nconst useStyles = makeStyles(styles)\nimport { defaultLocale } from 'lib/translations/config'\nimport { useSnackbar } from 'notistack'\n\nexport default function SurveyTree(props) {\n    const { t } = useTranslation()\n    const classes = useStyles()\n    const { surveygid, surveyrefno, clientid, isWidget, isAlreadyLoadTree } = props\n    const { GENERAL_SETTINGS, WEBCMS_DATA, locale } = useContext(WebCmsGlobal)\n    const router = useRouter()\n    const surveyGid = router.query.surveyGid || surveygid\n    const surveyHotelRefno = router.query.hotelrefno || surveyrefno\n    const cache = router.query.cache\n    const refid = router?.query?.refid || clientid || false\n    const refgid = router?.query?.refgid || false\n    const reftoken = router.query.reftoken\n    const langcode = router.query.lang || locale || defaultLocale\n    const { enqueueSnackbar } = useSnackbar()\n    const { deleteOrestCurrentUserInfo } = useOrestAction()\n    const isPortal = GENERAL_SETTINGS.ISPORTAL\n\n    //redux\n    const { setSurveyTrans, setSurveyIsValid, setSurveyAnswerMulti, setSurveyDisplayType, setSurveyBgColor } = useSurveyAction()\n    const token = reftoken || useSelector((state) => state.orest.currentUser !== null && state.orest.currentUser.auth.access_token)\n    let loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n    const reservationInfo = useSelector((state) => state?.formReducer?.guest?.clientReservation || null)\n    const changeHotelRefNo = useSelector((state) => state?.formReducer?.guest?.changeHotelRefno || null)\n    const [clientBase, setClientBase] = useState(false)\n\n    if(!loginfo && refid && surveyHotelRefno){\n        loginfo = {\n            refid: refid,\n            hotelrefno: surveyHotelRefno,\n        }\n    }\n\n    let clientParams = {}\n    clientParams.hotelrefno = loginfo && loginfo.hotelrefno\n    clientParams.isportal = isPortal\n    clientParams.surveyrefno = surveyrefno;\n\n    if(isPortal) {\n        clientParams.portalrefno = changeHotelRefNo\n    }\n\n    if(GENERAL_SETTINGS.ISCHAIN &&  String(clientParams.hotelrefno) !== String(GENERAL_SETTINGS.HOTELREFNO)){\n        clientParams.chainid = loginfo && loginfo.hotelrefno\n        clientParams.ischain = true\n    }\n\n    //state\n    const [surveyTree, setSurveyTree] = useState([])\n    const [isRequest, setIsRequest] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [isError, setIsError] = useState(false)\n    const [isSurveyExpreid, setIsSurveyExpreid] = useState(false)\n    const [title, setTitle] = useState(null)\n    const [isClient, setIsClient] = useState(true)\n\n    useEffect(() => {\n        let active = true\n        let client = null\n\n        if(isRequest === false){\n            if(isAlreadyLoadTree) {\n                setIsRequest(false)\n                setIsLoading(false)\n                setSurveyTree(isAlreadyLoadTree)\n            } else {\n                setIsRequest(true)\n                getSurveyLoad(active, client)\n            }\n\n        }\n\n        return () => {\n            active = false\n        }\n    }, [langcode])\n\n    const tryLoadingAgainAction = () =>  {\n        setIsError(false)\n        return (\n            <React.Fragment>\n                <Button onClick={() => getSurveyLoad(true, null)} color=\"inherit\">\n                    {t('str_tryAgain')}\n                </Button>\n            </React.Fragment>\n        )\n    }\n\n    const getSurveyLoad = (active, client) => {\n        async function getClient() {\n            return UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'client/getbyid',\n                timeout: 1000 * 30, // Wait for 30 sec.\n                token,\n                params: {\n                    key: refid || loginfo?.refid || false,\n                    allhotels: true,\n                },\n            }).then((clientResponse) => {\n                if (clientResponse.status === 200 && clientResponse.data.count > 0) {\n                    let clientResponseData = clientResponse.data.data\n                    setClientBase(clientResponseData)\n                    return clientResponseData\n                } else if (clientResponse.status === 401) {\n                    deleteOrestCurrentUserInfo()\n                } else {\n                    const retErr = isErrorMsg(clientResponse)\n                    enqueueSnackbar(t(retErr.errorMsg), { variant: 'warning' })\n                    return null\n                }\n            }).catch(() => deleteOrestCurrentUserInfo())\n        }\n\n        async function getReservno() {\n            return UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'client/reservno',\n                token,\n                params: {\n                    clientid: refid || loginfo?.refid || false,\n                    isgapp: true,\n                },\n            }).then((clientReservnoResponse) => {\n                if (clientReservnoResponse.status === 200 && clientReservnoResponse?.data?.data) {\n                    return clientReservnoResponse.data.data\n                } else if (clientReservnoResponse.status === 401) {\n                    deleteOrestCurrentUserInfo()\n                } else {\n                    const retErr = isErrorMsg(clientReservnoResponse)\n                    enqueueSnackbar(t(retErr.errorMsg), { variant: 'warning' })\n                    return null\n                }\n            }).catch(() =>{\n                return null\n            })\n        }\n\n        async function getSurvey() {\n            let reservation = null\n            if (refgid || clientBase || (loginfo && loginfo.refid)) {\n                if (!refid && (clientBase && clientBase.gid)) {\n                    client = clientBase\n                } else {\n                    client = await getClient()\n                }\n\n                if(!reservationInfo){\n                    reservation = await getReservno()\n                }else{\n                    reservation = reservationInfo\n                }\n\n                if (refgid) {\n                    await axios({\n                        url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n                        method: REQUEST_METHOD_CONST.POST,\n                        params: clientParams,\n                        timeout: 1000 * 30, // Wait for 30 sec.\n                        data: {\n                            reservno: reservation?.reservno || false,\n                            clientid: refid || client.id,\n                            survey: surveyGid,\n                            trans: refgid,\n                            cache: cache,\n                            langcode: langcode\n                        },\n                    }).then(async (r) => {\n                        if (active) {\n                            if (r.status === 200 && r.data.survey && r.data.trans) {\n                                const surveyData = r.data.survey\n                                const surveyTransData = r.data.trans\n                                const surveyIsValidData = r.data.isvalid\n                                const surveyDisplayType = r.data.disptype || 0\n                                const oldAnswersData = r.data.answers\n                                const bgColor = r.data.bgcolor\n\n                                setSurveyTree(surveyData)\n                                setSurveyTrans(surveyTransData)\n                                setSurveyIsValid(surveyIsValidData)\n                                setSurveyDisplayType(surveyDisplayType)\n\n                                setSurveyBgColor(bgColor)\n                                setOldAnswers(surveyTransData, oldAnswersData)\n\n                                if (surveyData[0] && surveyData[0].description) {\n                                    setTitle(surveyData[0].description)\n                                }\n                            } else {\n\n                                enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                                setIsError(true)\n                            }\n                        }\n                    }).catch(() => {\n                        enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                        setIsError(true)\n                    })\n                } else if (client) {\n                    await axios({\n                        url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n                        method: REQUEST_METHOD_CONST.POST,\n                        timeout: 1000 * 30, // Wait for 30 sec.\n                        params: clientParams,\n                        data: {\n                            reservno: reservation?.reservno || false,\n                            clientid: client.id || false,\n                            survey: surveyGid,\n                            client: client.gid,\n                            cache: cache,\n                            langcode: langcode\n                        },\n                    }).then((r) => {\n                        if (active) {\n                            if (r.status === 200 && r.data.survey && r.data.trans) {\n                                const surveyData = r.data.survey\n                                const surveyTransData = r.data.trans\n                                const surveyIsValidData = r.data.isvalid\n                                const surveyDisplayType = r.data.disptype || 0\n                                const oldAnswersData = r.data.answers\n                                const bgColor = r.data.bgcolor\n\n                                setSurveyTree(surveyData)\n                                setSurveyTrans(surveyTransData)\n                                setSurveyIsValid(surveyIsValidData)\n                                setSurveyDisplayType(surveyDisplayType)\n\n                                setSurveyBgColor(bgColor)\n                                setOldAnswers(surveyTransData, oldAnswersData)\n\n                                if (surveyData[0] && surveyData[0].description) {\n                                    setTitle(surveyData[0].description)\n                                }\n                            } else {\n                                if(r.data.error===\"survey_has_been_expired\"){\n                                    setIsSurveyExpreid(true)\n                                }else{\n                                    enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                                }\n                                setIsError(true)\n                            }\n                        }\n                    }).catch(() => {\n                        enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                        setIsError(true)\n                    })\n                } else {\n                    enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                    setIsError(true)\n                }\n            } else {\n                setIsClient(false)\n            }\n        }\n\n        if (active) {\n            if ((surveyGid && refgid) || (token && loginfo)) {\n                setIsLoading(true)\n                getSurvey().then(() => {\n                    setIsRequest(false)\n                    setIsLoading(false)\n                })\n            }\n        }\n    }\n\n    const setOldAnswers = (surveyTrans, oldAnswers) => {\n        if (oldAnswers.length > 0) {\n            oldAnswers.map((answer) => {\n                if (surveyTrans && answer.questionid && answer.answerid && answer.typ) {\n                    setSurveyAnswerMulti(surveyTrans, answer.questionid, answer.answerid, {\n                        typ: answer.typ,\n                        parentid: answer.questionid,\n                        answernote: answer.answernote,\n                        valuetext: answer.valuetext,\n                        valuelongtext: answer.valuelongtext,\n                        valueint: answer.valueint,\n                        valuefloat: answer.valuefloat,\n                        valuedate: answer.valuedate,\n                        valuetime: answer.valuetime,\n                    })\n                }\n            })\n        }\n    }\n\n    const UseSurveyPage = () => {\n        return (\n            <Container maxWidth={'lg'} className={classes.container}>\n                {(isLoading || isRequest) ? (\n                    <Box p={3} m={1}>\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            <LoadingSpinner size={50}/>\n                        </Typography>\n                    </Box>\n                ) : !isClient ? (\n                    <Box p={3} m={1}>\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            {t('str_youAreNotAClient')}\n                        </Typography>\n                    </Box>\n                ) : (isSurveyExpreid && isError) ? (\n                    <Box p={3} m={1} style={{ textAlign: 'center' }}>\n                        <CheckCircleOutlinedIcon style={{ fontSize: 100, color: '#4caf50', marginBottom: 20 }} />\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            {t('str_thankYouForYourParticipationTheThisSurveyHasBeenExpired')}\n                        </Typography>\n                    </Box>\n                ) : isError ? (\n                    <Box p={3} m={1}>\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            {t('str_somethingWentWrong')}\n                        </Typography>\n                    </Box>\n                ) : surveyTree && surveyTree.length > 0 ? (\n                    <RenderSurvey survey={surveyTree} surveygid={surveyGid} surveyrefno={surveyHotelRefno} clientid={refid} />\n                ) : (\n                    <Box p={3} m={1}>\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            {t('str_noSurveyQuestion')}\n                        </Typography>\n                    </Box>\n                )}\n            </Container>\n        )\n    }\n\n    if(isWidget){\n        return (<UseSurveyPage />)\n    }\n\n    return (\n        <SurveyLayout>\n            {title ? (<NextSeo title={title + ' - ' + WEBCMS_DATA.assets.meta.title} />) : (<NextSeo title={WEBCMS_DATA.assets.meta.title} />)}\n            <SurveyBanner />\n            <UseSurveyPage />\n        </SurveyLayout>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}