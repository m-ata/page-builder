{"ast":null,"code":"import _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/contact-form/ContactForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ReCaptcha from \"react-google-recaptcha\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport { UseOrest, Insert } from \"@webcms/orest\";\nimport { OREST_ENDPOINT } from \"../../../../../../../model/orest/constants\";\nimport WebCmsGlobal from \"../../../../../../webcms-global\";\nimport { useRouter } from \"next/router\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport { toast } from 'react-toastify';\nimport { SAVED_SUCCESS } from \"../../../../constants\";\nimport validator from \"validator\";\nimport { connect, useSelector } from 'react-redux';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    actionButton: {\n      marginLeft: theme.spacing(1),\n      borderRadius: 20,\n      \"float\": \"right\"\n    },\n    textArea: {\n      width: '100%',\n      borderColor: 'silver',\n      borderRadius: 5\n    }\n  };\n});\n\nvar ContactForm = function ContactForm(props) {\n  _s();\n\n  var formData = props.formData,\n      state = props.state,\n      otherLangFormData = props.otherLangFormData;\n\n  var _useState = useState([]),\n      accTypes = _useState[0],\n      setAccTypes = _useState[1];\n\n  var _useState2 = useState(''),\n      accType = _useState2[0],\n      setAccType = _useState2[1];\n\n  var _useState3 = useState(''),\n      groupID = _useState3[0],\n      setGroupID = _useState3[1];\n\n  var _useState4 = useState({\n    refcode: '',\n    firstname: '',\n    lastname: '',\n    workemail: '',\n    mobiletel: ''\n  }),\n      pbookData = _useState4[0],\n      setPbookData = _useState4[1];\n\n  var _useState5 = useState(''),\n      salesnote = _useState5[0],\n      setSalesNote = _useState5[1];\n\n  var _useState6 = useState(''),\n      receiverEmail = _useState6[0],\n      setReceiverEmail = _useState6[1];\n\n  var _useState7 = useState(false),\n      hasRecaptcha = _useState7[0],\n      setHasRecaptcha = _useState7[1];\n\n  var _useState8 = useState(''),\n      recaptchaValue = _useState8[0],\n      setRecaptchaValue = _useState8[1];\n\n  var classes = useStyles();\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS,\n      token = _useContext.token;\n\n  var router = useRouter();\n  var clientToken = useSelector(function (state) {\n    return state.orest.currentUser !== null ? state.orest.currentUser.auth.access_token : router.query.authToken;\n  });\n  var companyId = router.query.companyID || GENERAL_SETTINGS.HOTELREFNO;\n  var authToken = token || clientToken || router.query.authToken;\n  useEffect(function () {\n    // getting languages from service\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.TRANSTYPE + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.ACCTYPE,\n      token: authToken,\n      method: 'get',\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(function (res) {\n      if (res.status === 200 && res.data && res.data.data.length > 0) {\n        var updatedPbookData = _objectSpread({}, pbookData);\n\n        setAccTypes(res.data.data);\n        setAccType(res.data.data[0].code.toLowerCase());\n        updatedPbookData['refcode'] = res.data.data[0].code.toLowerCase();\n        setPbookData(updatedPbookData);\n      }\n    }); // getting groupid from service\n\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'clientgr/web',\n      token: authToken,\n      method: 'get',\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(function (res) {\n      if (res.status === 200 && res.data && res.data.data) {\n        setGroupID(res.data.data.res);\n      }\n    }); //getting receiver email\n\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'hotel/lic/contact',\n      token: authToken,\n      method: 'get',\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(function (res) {\n      if (res.status === 200 && res.data && res.data.data) {\n        setReceiverEmail(res.data.data.contactemail);\n      }\n    });\n  }, []);\n  useEffect(function () {\n    if (formData && formData.gid && formData.gid.length > 0) {\n      formData.gid.map(function (d) {\n        d.type === 'recaptcha' && d.isActive && setHasRecaptcha(true);\n      });\n    }\n  }, [formData]); // const handleSave = () => {\n  //     Insert({\n  //         // insert web page json to rafile\n  //         apiUrl: GENERAL_SETTINGS.OREST_URL,\n  //         endpoint: OREST_ENDPOINT.PBOOK,\n  //         token: authToken,\n  //         data: {\n  //             refcode: pbookData.refcode,\n  //             firstname: pbookData.firstname,\n  //             lastname: pbookData.lastname,\n  //             workemail: pbookData.workemail,\n  //             mobiletel: pbookData.mobiletel,\n  //             groupid: groupID,\n  //         },\n  //     }).then(res => {\n  //         if (res.status === 200 && res.data && res.data.data) {\n  //             Insert({\n  //                 // insert web page json to rafile\n  //                 apiUrl: GENERAL_SETTINGS.OREST_URL,\n  //                 endpoint: OREST_ENDPOINT.SALECALL,\n  //                 token: authToken,\n  //                 data: {\n  //                     agencyid: res.data.data.id,\n  //                     salesnote: salesnote,\n  //                 },\n  //             }).then(res1 => {\n  //                 if (res1.status === 200 && res1.data && res1.data.data) {\n  //                     toast.success(SAVED_SUCCESS, {\n  //                         position: toast.POSITION.TOP_RIGHT,\n  //                     });\n  //                 }\n  //             })\n  //         }\n  //     })\n  // }\n\n  var handleChangeText = function handleChangeText(key, value) {\n    var updatedPbookData = _objectSpread({}, pbookData);\n\n    updatedPbookData[key] = value;\n    setPbookData(updatedPbookData);\n  };\n\n  var onVerifyRecaptcha = function onVerifyRecaptcha(value) {\n    setRecaptchaValue(value);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, state.langCode !== state.defaultLang && otherLangFormData && otherLangFormData.length > 0 && otherLangFormData.map(function (d, i) {\n    return formData.gid[i].isActive ? __jsx(Grid, {\n      container: true,\n      key: i,\n      style: {\n        marginTop: i === 1 ? 24 : 8\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 52\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 33\n      }\n    }, formData.gid[i].type === 'heading' && __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 79\n      }\n    }, __jsx(Typography, {\n      component: 'h5',\n      variant: 'h5',\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 45\n      }\n    }, d.label)), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 37\n      }\n    }, formData.gid[i].type !== 'heading' && __jsx(Typography, {\n      style: {\n        width: '100%'\n      },\n      component: 'span',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 83\n      }\n    }, d.label)), __jsx(Grid, {\n      item: true,\n      xs: 8,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 37\n      }\n    }, formData.gid[i].type === 'refcode' && __jsx(FormControl, {\n      variant: \"outlined\",\n      fullWidth: true,\n      size: 'small',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 83\n      }\n    }, __jsx(Select, {\n      value: accType,\n      onChange: function onChange(e) {\n        var updatedPbookData = _objectSpread({}, pbookData);\n\n        pbookData['refcode'] = e.target.value;\n        setAccType(e.target.value);\n        setPbookData(updatedPbookData);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 49\n      }\n    }, accTypes.map(function (type, index) {\n      return __jsx(MenuItem, {\n        value: type.code.toLowerCase(),\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 61\n        }\n      }, ' ', type.description, ' ');\n    }))), (formData.gid[i].type === 'company' || formData.gid[i].type === 'firstname' || formData.gid[i].type === 'lastname') && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: function onChange(e) {\n        return handleChangeText(d.type, e.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 45\n      }\n    }), formData.gid[i].type === 'mobiletel' && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: function onChange(e) {\n        return handleChangeText(d.type, e.target.value);\n      },\n      error: pbookData.mobiletel && validator.isMobilePhone(pbookData.mobiletel) === false ? true : false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 45\n      }\n    }), formData.gid[i].type === 'workemail' && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: function onChange(e) {\n        return handleChangeText(d.type, e.target.value);\n      },\n      error: pbookData.workemail && validator.isEmail(pbookData.workemail) === false ? true : false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 45\n      }\n    }), formData.gid[i].type === 'recaptcha' && __jsx(ReCaptcha, {\n      sitekey: GENERAL_SETTINGS.RECAPTCHA_SITE_KEY,\n      onChange: onVerifyRecaptcha,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 45\n      }\n    }), formData.gid[i].type === 'salesnote' && __jsx(TextareaAutosize, {\n      rows: 4,\n      className: classes.textArea,\n      value: salesnote,\n      onChange: function onChange(e) {\n        return setSalesNote(e.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 45\n      }\n    }))))) : null;\n  }), state.langCode === state.defaultLang && formData && formData.gid && formData.gid.length > 0 && formData.gid.map(function (d, i) {\n    return d.isActive ? __jsx(Grid, {\n      container: true,\n      key: i,\n      style: {\n        marginTop: i === 1 ? 24 : i !== 0 && 8\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 38\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 33\n      }\n    }, d.type === 'heading' && __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 65\n      }\n    }, __jsx(Typography, {\n      component: 'h5',\n      variant: 'h5',\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 45\n      }\n    }, d.label)), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 37\n      }\n    }, d.type !== 'heading' && __jsx(Typography, {\n      style: {\n        width: '100%'\n      },\n      component: 'span',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 69\n      }\n    }, d.label)), __jsx(Grid, {\n      item: true,\n      xs: 8,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 37\n      }\n    }, d.type === 'refcode' && __jsx(FormControl, {\n      variant: \"outlined\",\n      fullWidth: true,\n      size: 'small',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 69\n      }\n    }, __jsx(Select, {\n      value: accType,\n      onChange: function onChange(e) {\n        var updatedPbookData = _objectSpread({}, pbookData);\n\n        pbookData['refcode'] = e.target.value;\n        setAccType(e.target.value);\n        setPbookData(updatedPbookData);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 49\n      }\n    }, accTypes.map(function (type, index) {\n      return __jsx(MenuItem, {\n        value: type.code.toLowerCase(),\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 61\n        }\n      }, ' ', type.description, ' ');\n    }))), (d.type === 'company' || d.type === 'firstname' || d.type === 'lastname') && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: function onChange(e) {\n        return handleChangeText(d.type, e.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 45\n      }\n    }), d.type === 'mobiletel' && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: function onChange(e) {\n        return handleChangeText(d.type, e.target.value);\n      },\n      error: pbookData.mobiletel && validator.isMobilePhone(pbookData.mobiletel) === false ? true : false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 45\n      }\n    }), d.type === 'workemail' && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: function onChange(e) {\n        return handleChangeText(d.type, e.target.value);\n      },\n      error: pbookData.workemail && validator.isEmail(pbookData.workemail) === false ? true : false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 45\n      }\n    }), d.type === 'recaptcha' && __jsx(ReCaptcha, {\n      sitekey: GENERAL_SETTINGS.RECAPTCHA_SITE_KEY,\n      onChange: onVerifyRecaptcha,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 45\n      }\n    }), d.type === 'salesnote' && __jsx(TextareaAutosize, {\n      rows: 4,\n      className: classes.textArea,\n      value: salesnote,\n      onChange: function onChange(e) {\n        return setSalesNote(e.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 45\n      }\n    }))))) : null;\n  }), __jsx(Grid, {\n    container: true,\n    style: {\n      marginTop: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    className: classes.actionButton,\n    style: {\n      \"float\": \"right\"\n    } // onClick={handleSave}\n    ,\n    disabled: !pbookData.refcode || !pbookData.firstname || !pbookData.workemail || hasRecaptcha && !recaptchaValue || !validator.isEmail(pbookData.workemail),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 21\n    }\n  }, \"SEND\"))));\n};\n\n_s(ContactForm, \"8hGfDExCGFhV7Qj46wIZvVPyIKI=\", false, function () {\n  return [useStyles, useRouter, useSelector];\n});\n\n_c = ContactForm;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state.formReducer.pageBuilder\n  };\n};\n\nexport default connect(mapStateToProps)(ContactForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/contact-form/ContactForm.js"],"names":["React","useState","useEffect","useContext","Typography","Grid","TextField","FormControl","Select","MenuItem","ReCaptcha","TextareaAutosize","UseOrest","Insert","OREST_ENDPOINT","WebCmsGlobal","useRouter","makeStyles","Button","toast","SAVED_SUCCESS","validator","connect","useSelector","useStyles","theme","actionButton","marginLeft","spacing","borderRadius","textArea","width","borderColor","ContactForm","props","formData","state","otherLangFormData","accTypes","setAccTypes","accType","setAccType","groupID","setGroupID","refcode","firstname","lastname","workemail","mobiletel","pbookData","setPbookData","salesnote","setSalesNote","receiverEmail","setReceiverEmail","hasRecaptcha","setHasRecaptcha","recaptchaValue","setRecaptchaValue","classes","GENERAL_SETTINGS","token","router","clientToken","orest","currentUser","auth","access_token","query","authToken","companyId","companyID","HOTELREFNO","apiUrl","OREST_URL","endpoint","TRANSTYPE","SLASH","ACCTYPE","method","params","hotelrefno","Number","then","res","status","data","length","updatedPbookData","code","toLowerCase","contactemail","gid","map","d","type","isActive","handleChangeText","key","value","onVerifyRecaptcha","langCode","defaultLang","i","marginTop","fontWeight","label","e","target","index","description","isMobilePhone","isEmail","RECAPTCHA_SITE_KEY","mapStateToProps","formReducer","pageBuilder"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ReCaptcha from \"react-google-recaptcha\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport {UseOrest, Insert} from \"@webcms/orest\";\nimport {OREST_ENDPOINT} from \"../../../../../../../model/orest/constants\";\nimport WebCmsGlobal from \"../../../../../../webcms-global\";\nimport {useRouter} from \"next/router\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport { toast } from 'react-toastify'\nimport {SAVED_SUCCESS} from \"../../../../constants\";\nimport validator from \"validator\";\nimport { connect, useSelector } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n    actionButton: {\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n        float: \"right\",\n    },\n    textArea: {\n        width: '100%',\n        borderColor: 'silver',\n        borderRadius: 5\n    }\n}));\n\nconst ContactForm = (props) => {\n\n    const {formData, state, otherLangFormData} = props;\n    const [accTypes, setAccTypes] = useState([]);\n    const [accType, setAccType] = useState('');\n    const [groupID, setGroupID] = useState('');\n    const [pbookData, setPbookData] = useState({\n        refcode: '',\n        firstname: '',\n        lastname: '',\n        workemail: '',\n        mobiletel: '',\n    });\n    const [salesnote, setSalesNote] = useState('');\n    const [receiverEmail, setReceiverEmail] = useState('');\n    const [hasRecaptcha, setHasRecaptcha] = useState(false);\n    const [recaptchaValue, setRecaptchaValue] = useState('');\n\n    const classes = useStyles();\n    const { GENERAL_SETTINGS, token } = useContext(WebCmsGlobal);\n    const router = useRouter();\n    const clientToken = useSelector((state) => state.orest.currentUser !== null ? state.orest.currentUser.auth.access_token : router.query.authToken)\n    const companyId = router.query.companyID || GENERAL_SETTINGS.HOTELREFNO;\n    const authToken = token || clientToken || router.query.authToken;\n\n    useEffect(() => {\n        // getting languages from service\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.TRANSTYPE + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.ACCTYPE,\n            token: authToken,\n            method: 'get',\n            params: {\n                hotelrefno: Number(companyId),\n            },\n        }).then((res) => {\n            if (res.status === 200 && res.data && res.data.data.length > 0) {\n                const updatedPbookData = {...pbookData};\n                setAccTypes(res.data.data);\n                setAccType(res.data.data[0].code.toLowerCase());\n                updatedPbookData['refcode'] = res.data.data[0].code.toLowerCase();\n                setPbookData(updatedPbookData);\n            }\n        })\n        // getting groupid from service\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'clientgr/web',\n            token: authToken,\n            method: 'get',\n            params: {\n                hotelrefno: Number(companyId),\n            },\n        }).then((res) => {\n            if (res.status === 200 && res.data && res.data.data) {\n                setGroupID(res.data.data.res);\n            }\n        })\n        //getting receiver email\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'hotel/lic/contact',\n            token: authToken,\n            method: 'get',\n            params: {\n                hotelrefno: Number(companyId),\n            },\n        }).then((res) => {\n            if (res.status === 200 && res.data && res.data.data) {\n                setReceiverEmail(res.data.data.contactemail);\n            }\n        })\n    }, []);\n\n    useEffect(() => {\n        if (formData && formData.gid && formData.gid.length > 0) {\n            formData.gid.map(d => {\n                d.type === 'recaptcha' && d.isActive && setHasRecaptcha(true);\n            })\n        }\n    }, [formData]);\n\n    // const handleSave = () => {\n    //     Insert({\n    //         // insert web page json to rafile\n    //         apiUrl: GENERAL_SETTINGS.OREST_URL,\n    //         endpoint: OREST_ENDPOINT.PBOOK,\n    //         token: authToken,\n    //         data: {\n    //             refcode: pbookData.refcode,\n    //             firstname: pbookData.firstname,\n    //             lastname: pbookData.lastname,\n    //             workemail: pbookData.workemail,\n    //             mobiletel: pbookData.mobiletel,\n    //             groupid: groupID,\n    //         },\n    //     }).then(res => {\n    //         if (res.status === 200 && res.data && res.data.data) {\n    //             Insert({\n    //                 // insert web page json to rafile\n    //                 apiUrl: GENERAL_SETTINGS.OREST_URL,\n    //                 endpoint: OREST_ENDPOINT.SALECALL,\n    //                 token: authToken,\n    //                 data: {\n    //                     agencyid: res.data.data.id,\n    //                     salesnote: salesnote,\n    //                 },\n    //             }).then(res1 => {\n    //                 if (res1.status === 200 && res1.data && res1.data.data) {\n    //                     toast.success(SAVED_SUCCESS, {\n    //                         position: toast.POSITION.TOP_RIGHT,\n    //                     });\n    //                 }\n    //             })\n    //         }\n    //     })\n    // }\n\n    const handleChangeText = (key, value) => {\n        const updatedPbookData = {...pbookData};\n        updatedPbookData[key] = value;\n        setPbookData(updatedPbookData);\n    }\n\n    const onVerifyRecaptcha = (value) => {\n        setRecaptchaValue(value);\n    }\n\n    return(\n        <React.Fragment>\n            {\n                state.langCode !== state.defaultLang && otherLangFormData &&\n                otherLangFormData.length > 0 &&\n                otherLangFormData.map((d, i) => {\n                    return(\n                        formData.gid[i].isActive ? <Grid container key={i} style={{marginTop: i === 1 ? 24 : 8}}>\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    {\n                                        formData.gid[i].type === 'heading' && <Grid item xs={12}>\n                                            <Typography component={'h5'} variant={'h5'} style={{fontWeight: \"bold\"}}>\n                                                {\n                                                    d.label\n                                                }\n                                            </Typography>\n                                        </Grid>\n                                    }\n                                    <Grid item xs={4}>\n                                        {\n                                            formData.gid[i].type !== 'heading' && <Typography style={{width: '100%'}} component={'span'}>\n                                                {\n                                                    d.label\n                                                }\n                                            </Typography>\n                                        }\n                                    </Grid>\n                                    <Grid item xs={8}>\n                                        {\n                                            formData.gid[i].type === 'refcode' && <FormControl\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                size={'small'}\n                                            >\n                                                <Select\n                                                    value={accType}\n                                                    onChange={(e) => {\n                                                        const updatedPbookData = {...pbookData};\n                                                        pbookData['refcode'] = e.target.value;\n                                                        setAccType(e.target.value);\n                                                        setPbookData(updatedPbookData);\n                                                    }}\n                                                >\n                                                    {accTypes.map((type, index) => {\n                                                        return (\n                                                            <MenuItem value={type.code.toLowerCase()} key={index}>\n                                                                {' '}\n                                                                {type.description}{' '}\n                                                            </MenuItem>\n                                                        )\n                                                    })}\n                                                </Select>\n                                            </FormControl>\n                                        }\n                                        {\n                                            (formData.gid[i].type === 'company' ||\n                                                formData.gid[i].type === 'firstname' ||\n                                                formData.gid[i].type === 'lastname') &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                            />\n                                        }\n                                        {\n                                            formData.gid[i].type === 'mobiletel' &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                                error={(pbookData.mobiletel && validator.isMobilePhone(pbookData.mobiletel) === false) ? true : false}\n                                            />\n                                        }\n                                        {\n                                            formData.gid[i].type === 'workemail' &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                                error={(pbookData.workemail && validator.isEmail(pbookData.workemail) === false) ? true : false}\n                                            />\n                                        }\n                                        {\n                                            formData.gid[i].type === 'recaptcha' &&\n                                            <ReCaptcha sitekey={GENERAL_SETTINGS.RECAPTCHA_SITE_KEY} onChange={onVerifyRecaptcha} />\n                                        }\n                                        {\n                                            formData.gid[i].type === 'salesnote' &&\n                                            <TextareaAutosize\n                                                rows={4}\n                                                className={classes.textArea}\n                                                value={salesnote}\n                                                onChange={(e) => setSalesNote(e.target.value)}\n                                            />\n                                        }\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid> : null\n                    )\n                })\n            }\n            {\n                state.langCode === state.defaultLang && formData && formData.gid &&\n                formData.gid.length > 0 &&\n                formData.gid.map((d, i) => {\n                    return(\n                        d.isActive ? <Grid container key={i} style={{marginTop: i === 1 ? 24 : (i !== 0 && 8)}}>\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    {\n                                        d.type === 'heading' && <Grid item xs={12}>\n                                            <Typography component={'h5'} variant={'h5'} style={{fontWeight: \"bold\"}}>\n                                                {\n                                                    d.label\n                                                }\n                                            </Typography>\n                                        </Grid>\n                                    }\n                                    <Grid item xs={4}>\n                                        {\n                                            d.type !== 'heading' && <Typography style={{width: '100%'}} component={'span'}>\n                                                {\n                                                    d.label\n                                                }\n                                            </Typography>\n                                        }\n                                    </Grid>\n                                    <Grid item xs={8}>\n                                        {\n                                            d.type === 'refcode' && <FormControl\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                size={'small'}\n                                            >\n                                                <Select\n                                                    value={accType}\n                                                    onChange={(e) => {\n                                                        const updatedPbookData = {...pbookData};\n                                                        pbookData['refcode'] = e.target.value;\n                                                        setAccType(e.target.value);\n                                                        setPbookData(updatedPbookData);\n                                                    }}\n                                                >\n                                                    {accTypes.map((type, index) => {\n                                                        return (\n                                                            <MenuItem value={type.code.toLowerCase()} key={index}>\n                                                                {' '}\n                                                                {type.description}{' '}\n                                                            </MenuItem>\n                                                        )\n                                                    })}\n                                                </Select>\n                                            </FormControl>\n                                        }\n                                        {\n                                            (d.type === 'company' || d.type === 'firstname' || d.type === 'lastname') &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                            />\n                                        }\n                                        {\n                                            d.type === 'mobiletel' &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                                error={(pbookData.mobiletel && validator.isMobilePhone(pbookData.mobiletel) === false) ? true : false}\n                                            />\n                                        }\n                                        {\n                                            d.type === 'workemail' &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                                error={(pbookData.workemail && validator.isEmail(pbookData.workemail) === false) ? true : false}\n                                            />\n                                        }\n                                        {\n                                            d.type === 'recaptcha' &&\n                                            <ReCaptcha sitekey={GENERAL_SETTINGS.RECAPTCHA_SITE_KEY}\n                                                       onChange={onVerifyRecaptcha}/>\n                                        }\n                                        {\n                                            d.type === 'salesnote' &&\n                                            <TextareaAutosize\n                                                rows={4}\n                                                className={classes.textArea}\n                                                value={salesnote}\n                                                onChange={(e) => setSalesNote(e.target.value)}\n                                            />\n                                        }\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid> : null\n                    )\n                })\n            }\n            <Grid container style={{marginTop: 8}}>\n                <Grid item xs={12}>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        aria-label=\"add\"\n                        className={classes.actionButton}\n                        style={{float: \"right\"}}\n                        // onClick={handleSave}\n                        disabled={!pbookData.refcode || !pbookData.firstname ||\n                        !pbookData.workemail || (hasRecaptcha && !recaptchaValue) ||\n                        !validator.isEmail(pbookData.workemail)}\n                    >\n                        SEND\n                    </Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    )\n}\nconst mapStateToProps = state => {\n    return {\n        state: state.formReducer.pageBuilder\n    }\n};\nexport default connect(mapStateToProps)(ContactForm);"]},"metadata":{},"sourceType":"module"}