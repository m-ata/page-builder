{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/QuickSurvey/index.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Card, CardContent, Container, Grid, Typography } from '@material-ui/core';\nimport ForumIcon from '@material-ui/icons/Forum';\nimport axios from 'axios';\nimport useTranslation from \"../../../../lib/translations/hooks/useTranslation\";\nimport WebCmsGlobal from \"../../../webcms-global\";\nimport { REQUEST_METHOD_CONST } from \"../../../../model/orest/constants\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SurveyTreeDialog from \"../../../survey/surveytree/dialog\";\nimport useSurveyAction from \"../../../../model/survey/useSurveyAction\";\nimport RenderSurvey from \"../../../survey/surveytree/RenderSurvey\";\nconst useStyles = makeStyles(theme => ({\n  title: {\n    color: theme.palette.primary.dark,\n    fontWeight: '600',\n    paddingBottom: '8px'\n  },\n  surveyName: {\n    fontWeight: '600',\n    paddingBottom: '8px'\n  },\n  borderWrapper: {\n    border: 'dashed',\n    borderColor: theme.palette.primary.main,\n    borderRadius: '4px'\n  },\n  iconGrid: {\n    backgroundColor: '#FAFAFA',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  icon: {\n    width: '1.5em',\n    height: '1.5em'\n  },\n  container: {\n    marginLeft: 'inherit',\n    marginRight: 'inherit'\n  }\n}));\n\nfunction QuickSurvey() {\n  const classes = useStyles();\n  const {\n    setSurveyTrans,\n    setSurveyIsValid,\n    setSurveyAnswerMulti,\n    setSurveyBgColor\n  } = useSurveyAction();\n  const {\n    GENERAL_SETTINGS,\n    locale\n  } = useContext(WebCmsGlobal);\n  const {\n    t\n  } = useTranslation();\n  const clientBase = useSelector(state => {\n    var _state$orest, _state$orest$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$state = _state$orest.state) === null || _state$orest$state === void 0 ? void 0 : _state$orest$state.client) || false;\n  });\n  const loginfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo);\n  const surveyTrans = useSelector(state => state.survey.trans);\n  const {\n    0: homeSurvey,\n    1: setHomeSurvey\n  } = useState(false);\n  const {\n    0: openSurveyData,\n    1: setOpenSurveyData\n  } = useState(false);\n  const {\n    0: surveyTreeData,\n    1: setSurveyTreeData\n  } = useState([]);\n  const {\n    0: questionList,\n    1: setQuestionList\n  } = useState([]);\n  const {\n    0: oneQuestionTree,\n    1: setOneQuestionTree\n  } = useState([]);\n  const clientParams = {};\n  clientParams.hotelrefno = loginfo && loginfo.hotelrefno;\n  clientParams.isportal = GENERAL_SETTINGS.ISPORTAL;\n\n  if (GENERAL_SETTINGS.ISCHAIN && String(clientParams.hotelrefno) !== String(GENERAL_SETTINGS.HOTELREFNO)) {\n    clientParams.chainid = loginfo && loginfo.hotelrefno;\n    clientParams.ischain = true;\n  }\n\n  useEffect(() => {\n    let active = true;\n\n    if (active && clientBase && !homeSurvey) {\n      getHomeSurvey();\n    }\n\n    return () => {\n      active = false;\n    };\n  }, [clientBase]);\n  useEffect(() => {\n    if (homeSurvey && clientBase) {\n      getSurveyTree();\n    }\n  }, [homeSurvey, clientBase]);\n\n  const getHomeSurvey = () => {\n    axios({\n      url: GENERAL_SETTINGS.BASE_URL + 'api/guestweb/home-survey',\n      method: REQUEST_METHOD_CONST.POST,\n      params: {\n        clientid: clientBase === null || clientBase === void 0 ? void 0 : clientBase.id,\n        lancode: locale,\n        limit: 1\n      }\n    }).then(res => {\n      if (res.status === 200 && res.data.count > 0) {\n        const survey = res.data.data[0];\n        setHomeSurvey(survey);\n      }\n    });\n  };\n\n  const getSurveyTree = () => {\n    axios({\n      url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n      method: REQUEST_METHOD_CONST.POST,\n      params: clientParams,\n      timeout: 1000 * 30,\n      // Wait for 30 sec.\n      data: {\n        client: clientBase === null || clientBase === void 0 ? void 0 : clientBase.gid,\n        survey: homeSurvey === null || homeSurvey === void 0 ? void 0 : homeSurvey.gid\n      }\n    }).then(r => {\n      var _r$data;\n\n      if (r.status === 200 && (_r$data = r.data) !== null && _r$data !== void 0 && _r$data.survey) {\n        var _r$data2, _r$data3, _r$data4;\n\n        const survey = (_r$data2 = r.data) === null || _r$data2 === void 0 ? void 0 : _r$data2.survey;\n        const onlyQuestions = [...((_r$data3 = r.data) === null || _r$data3 === void 0 ? void 0 : _r$data3.onlyQuestions)];\n        const surveyTransData = r.data.trans;\n        const oldAnswersData = r.data.answers;\n        const surveyIsValidData = r.data.isvalid;\n        const bgColor = r.data.bgcolor;\n        setQuestionList((_r$data4 = r.data) === null || _r$data4 === void 0 ? void 0 : _r$data4.onlyQuestions);\n\n        if (oldAnswersData && (oldAnswersData === null || oldAnswersData === void 0 ? void 0 : oldAnswersData.length) > 0) {\n          oldAnswersData.map(item => {\n            const findQuestion = onlyQuestions.find(e => e.id === (item === null || item === void 0 ? void 0 : item.parentid));\n\n            if (findQuestion) {\n              const index = onlyQuestions.findIndex(e => e.id === findQuestion.id);\n              index !== -1 && onlyQuestions.splice(index, 1);\n            }\n          });\n        }\n\n        setOldAnswers(surveyTransData, oldAnswersData);\n\n        if (onlyQuestions.length > 0) {\n          const rand = (onlyQuestions === null || onlyQuestions === void 0 ? void 0 : onlyQuestions.length) === 1 ? 0 : Math.floor(Math.random() * (onlyQuestions === null || onlyQuestions === void 0 ? void 0 : onlyQuestions.length));\n          const randomQuestion = onlyQuestions[rand];\n          setOneQuestionTree([randomQuestion]);\n        }\n\n        setSurveyTreeData(survey);\n        setSurveyTrans(surveyTransData);\n        setSurveyIsValid(surveyIsValidData);\n        setSurveyBgColor(bgColor);\n      }\n    }).catch(() => {});\n  };\n\n  const setOldAnswers = (surveyTrans, oldAnswers) => {\n    if (oldAnswers.length > 0) {\n      oldAnswers.map(answer => {\n        if (surveyTrans && answer.questionid && answer.answerid && answer.typ) {\n          setSurveyAnswerMulti(surveyTrans, answer.questionid, answer.answerid, {\n            typ: answer.typ,\n            parentid: answer.questionid,\n            answernote: answer.answernote,\n            valuetext: answer.valuetext,\n            valuelongtext: answer.valuelongtext,\n            valueint: answer.valueint,\n            valuefloat: answer.valuefloat,\n            valuedate: answer.valuedate,\n            valuetime: answer.valuetime\n          });\n        }\n      });\n    }\n  };\n\n  const handleOpenSurveyDialog = () => {\n    setOpenSurveyData({\n      surveygid: homeSurvey === null || homeSurvey === void 0 ? void 0 : homeSurvey.gid,\n      surveyrefno: homeSurvey === null || homeSurvey === void 0 ? void 0 : homeSurvey.hotelrefno,\n      clientid: (clientBase === null || clientBase === void 0 ? void 0 : clientBase.id) || loginfo.refid\n    });\n  };\n\n  const handleReset = () => {\n    setSurveyTreeData([]);\n    setOneQuestionTree([]);\n    setQuestionList([]);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, oneQuestionTree.length > 0 && __jsx(Container, {\n    className: classes.container,\n    maxWidth: 'sm',\n    disableGutters: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 25\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 41\n    }\n  }, t('str_helpUnderstandBetter'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 37\n    }\n  }, __jsx(\"div\", {\n    className: classes.borderWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 41\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    className: classes.iconGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 49\n    }\n  }, __jsx(ForumIcon, {\n    className: classes.icon,\n    color: 'primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 53\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 49\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 53\n    }\n  }, (oneQuestionTree === null || oneQuestionTree === void 0 ? void 0 : oneQuestionTree.length) > 0 && __jsx(RenderSurvey, {\n    survey: oneQuestionTree,\n    surveygid: homeSurvey === null || homeSurvey === void 0 ? void 0 : homeSurvey.gid,\n    surveyrefno: homeSurvey === null || homeSurvey === void 0 ? void 0 : homeSurvey.hotelrefno,\n    clientid: clientBase === null || clientBase === void 0 ? void 0 : clientBase.id,\n    isOnlyOneQuestionRender: true,\n    questionLength: questionList === null || questionList === void 0 ? void 0 : questionList.length,\n    handleOpenSurveyDialog: handleOpenSurveyDialog,\n    handleReset: handleReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 65\n    }\n  })))))))))), __jsx(SurveyTreeDialog, {\n    open: openSurveyData,\n    clientId: clientBase === null || clientBase === void 0 ? void 0 : clientBase.id,\n    data: openSurveyData,\n    onClose: status => {\n      setOpenSurveyData(status);\n      handleReset();\n    },\n    isAlreadyLoadTree: surveyTreeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default QuickSurvey;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/QuickSurvey/index.js"],"names":["React","useContext","useEffect","useState","useSelector","Card","CardContent","Container","Grid","Typography","ForumIcon","axios","useTranslation","WebCmsGlobal","REQUEST_METHOD_CONST","makeStyles","SurveyTreeDialog","useSurveyAction","RenderSurvey","useStyles","theme","title","color","palette","primary","dark","fontWeight","paddingBottom","surveyName","borderWrapper","border","borderColor","main","borderRadius","iconGrid","backgroundColor","display","justifyContent","alignItems","icon","width","height","container","marginLeft","marginRight","QuickSurvey","classes","setSurveyTrans","setSurveyIsValid","setSurveyAnswerMulti","setSurveyBgColor","GENERAL_SETTINGS","locale","t","clientBase","state","orest","client","loginfo","currentUser","surveyTrans","survey","trans","homeSurvey","setHomeSurvey","openSurveyData","setOpenSurveyData","surveyTreeData","setSurveyTreeData","questionList","setQuestionList","oneQuestionTree","setOneQuestionTree","clientParams","hotelrefno","isportal","ISPORTAL","ISCHAIN","String","HOTELREFNO","chainid","ischain","active","getHomeSurvey","getSurveyTree","url","BASE_URL","method","POST","params","clientid","id","lancode","limit","then","res","status","data","count","timeout","gid","r","onlyQuestions","surveyTransData","oldAnswersData","answers","surveyIsValidData","isvalid","bgColor","bgcolor","length","map","item","findQuestion","find","e","parentid","index","findIndex","splice","setOldAnswers","rand","Math","floor","random","randomQuestion","catch","oldAnswers","answer","questionid","answerid","typ","answernote","valuetext","valuelongtext","valueint","valuefloat","valuedate","valuetime","handleOpenSurveyDialog","surveygid","surveyrefno","refid","handleReset","padding"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACIC,IADJ,EAEIC,WAFJ,EAGIC,SAHJ,EAIIC,IAJJ,EAKIC,UALJ,QAMO,mBANP;AAOA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,SAASC,oBAAT,QAAqC,mCAArC;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,eAAP,MAA4B,0CAA5B;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AAIA,MAAMC,SAAS,GAAGJ,UAAU,CAAEK,KAAD,KAAY;AACrCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,OAAd,CAAsBC,IAD1B;AAEHC,IAAAA,UAAU,EAAE,KAFT;AAGHC,IAAAA,aAAa,EAAE;AAHZ,GAD8B;AAMrCC,EAAAA,UAAU,EAAE;AACRF,IAAAA,UAAU,EAAE,KADJ;AAERC,IAAAA,aAAa,EAAE;AAFP,GANyB;AAUrCE,EAAAA,aAAa,EAAE;AACXC,IAAAA,MAAM,EAAE,QADG;AAEXC,IAAAA,WAAW,EAAEX,KAAK,CAACG,OAAN,CAAcC,OAAd,CAAsBQ,IAFxB;AAGXC,IAAAA,YAAY,EAAE;AAHH,GAVsB;AAerCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,EAAE,SADX;AAENC,IAAAA,OAAO,EAAE,MAFH;AAGNC,IAAAA,cAAc,EAAE,QAHV;AAINC,IAAAA,UAAU,EAAE;AAJN,GAf2B;AAqBrCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,OADL;AAEFC,IAAAA,MAAM,EAAE;AAFN,GArB+B;AAyBrCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,UAAU,EAAE,SADL;AAEPC,IAAAA,WAAW,EAAE;AAFN;AAzB0B,CAAZ,CAAD,CAA5B;;AAgCA,SAASC,WAAT,GAAuB;AACnB,QAAMC,OAAO,GAAG3B,SAAS,EAAzB;AAEA,QAAM;AAAE4B,IAAAA,cAAF;AAAkBC,IAAAA,gBAAlB;AAAoCC,IAAAA,oBAApC;AAA0DC,IAAAA;AAA1D,MAA+EjC,eAAe,EAApG;AACA,QAAM;AAAEkC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAA+BnD,UAAU,CAACY,YAAD,CAA/C;AACA,QAAM;AAAEwC,IAAAA;AAAF,MAAQzC,cAAc,EAA5B;AAGA,QAAM0C,UAAU,GAAGlD,WAAW,CAAEmD,KAAD;AAAA;;AAAA,WAAW,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,4BAAAA,KAAK,CAAEC,KAAP,oFAAcD,KAAd,0EAAqBE,MAArB,KAA+B,KAA1C;AAAA,GAAD,CAA9B;AACA,QAAMC,OAAO,GAAGtD,WAAW,CAAEmD,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYG,WAAZ,IAA2BJ,KAAK,CAACC,KAAN,CAAYG,WAAZ,CAAwBD,OAA/D,CAA3B;AACA,QAAME,WAAW,GAAGxD,WAAW,CAAEmD,KAAD,IAAWA,KAAK,CAACM,MAAN,CAAaC,KAAzB,CAA/B;AAGA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8B7D,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAAC8D,cAAD;AAAA,OAAiBC;AAAjB,MAAsC/D,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAACgE,cAAD;AAAA,OAAiBC;AAAjB,MAAsCjE,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM;AAAA,OAACkE,YAAD;AAAA,OAAeC;AAAf,MAAkCnE,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACoE,eAAD;AAAA,OAAkBC;AAAlB,MAAwCrE,QAAQ,CAAC,EAAD,CAAtD;AAGA,QAAMsE,YAAY,GAAG,EAArB;AACAA,EAAAA,YAAY,CAACC,UAAb,GAA0BhB,OAAO,IAAIA,OAAO,CAACgB,UAA7C;AACAD,EAAAA,YAAY,CAACE,QAAb,GAAwBxB,gBAAgB,CAACyB,QAAzC;;AAGA,MAAGzB,gBAAgB,CAAC0B,OAAjB,IAA6BC,MAAM,CAACL,YAAY,CAACC,UAAd,CAAN,KAAoCI,MAAM,CAAC3B,gBAAgB,CAAC4B,UAAlB,CAA1E,EAAwG;AACpGN,IAAAA,YAAY,CAACO,OAAb,GAAuBtB,OAAO,IAAIA,OAAO,CAACgB,UAA1C;AACAD,IAAAA,YAAY,CAACQ,OAAb,GAAuB,IAAvB;AACH;;AAED/E,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgF,MAAM,GAAG,IAAb;;AAEA,QAAIA,MAAM,IAAI5B,UAAV,IAAwB,CAACS,UAA7B,EAAyC;AACrCoB,MAAAA,aAAa;AAChB;;AAED,WAAO,MAAM;AACTD,MAAAA,MAAM,GAAG,KAAT;AACH,KAFD;AAGH,GAVQ,EAUN,CAAC5B,UAAD,CAVM,CAAT;AAYApD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG6D,UAAU,IAAIT,UAAjB,EAA6B;AACzB8B,MAAAA,aAAa;AAChB;AACJ,GAJQ,EAIN,CAACrB,UAAD,EAAaT,UAAb,CAJM,CAAT;;AASA,QAAM6B,aAAa,GAAG,MAAM;AACxBxE,IAAAA,KAAK,CAAC;AACF0E,MAAAA,GAAG,EAAElC,gBAAgB,CAACmC,QAAjB,GAA4B,0BAD/B;AAEFC,MAAAA,MAAM,EAAEzE,oBAAoB,CAAC0E,IAF3B;AAGFC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEpC,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEqC,EADlB;AAEJC,QAAAA,OAAO,EAAExC,MAFL;AAGJyC,QAAAA,KAAK,EAAE;AAHH;AAHN,KAAD,CAAL,CAQGC,IARH,CAQQC,GAAG,IAAI;AACX,UAAGA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACE,IAAJ,CAASC,KAAT,GAAiB,CAA1C,EAA6C;AACzC,cAAMrC,MAAM,GAAGkC,GAAG,CAACE,IAAJ,CAASA,IAAT,CAAc,CAAd,CAAf;AACAjC,QAAAA,aAAa,CAACH,MAAD,CAAb;AACH;AACJ,KAbD;AAcH,GAfD;;AAiBA,QAAMuB,aAAa,GAAG,MAAM;AACxBzE,IAAAA,KAAK,CAAC;AACF0E,MAAAA,GAAG,EAAElC,gBAAgB,CAACmC,QAAjB,GAA4B,kBAD/B;AAEFC,MAAAA,MAAM,EAAEzE,oBAAoB,CAAC0E,IAF3B;AAGFC,MAAAA,MAAM,EAAEhB,YAHN;AAIF0B,MAAAA,OAAO,EAAE,OAAO,EAJd;AAIkB;AACpBF,MAAAA,IAAI,EAAE;AACFxC,QAAAA,MAAM,EAAEH,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAE8C,GADlB;AAEFvC,QAAAA,MAAM,EAAEE,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEqC;AAFlB;AALJ,KAAD,CAAL,CASGN,IATH,CASSO,CAAD,IAAO;AAAA;;AACX,UAAGA,CAAC,CAACL,MAAF,KAAa,GAAb,eAAoBK,CAAC,CAACJ,IAAtB,oCAAoB,QAAQpC,MAA/B,EAAuC;AAAA;;AACnC,cAAMA,MAAM,eAAGwC,CAAC,CAACJ,IAAL,6CAAG,SAAQpC,MAAvB;AACA,cAAMyC,aAAa,GAAG,CAAC,gBAAGD,CAAC,CAACJ,IAAL,6CAAG,SAAQK,aAAX,CAAD,CAAtB;AACA,cAAMC,eAAe,GAAGF,CAAC,CAACJ,IAAF,CAAOnC,KAA/B;AACA,cAAM0C,cAAc,GAAGH,CAAC,CAACJ,IAAF,CAAOQ,OAA9B;AACA,cAAMC,iBAAiB,GAAGL,CAAC,CAACJ,IAAF,CAAOU,OAAjC;AACA,cAAMC,OAAO,GAAGP,CAAC,CAACJ,IAAF,CAAOY,OAAvB;AACAvC,QAAAA,eAAe,aAAC+B,CAAC,CAACJ,IAAH,6CAAC,SAAQK,aAAT,CAAf;;AAEA,YAAGE,cAAc,IAAI,CAAAA,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEM,MAAhB,IAAyB,CAA9C,EAAiD;AAC7CN,UAAAA,cAAc,CAACO,GAAf,CAAoBC,IAAD,IAAU;AACzB,kBAAMC,YAAY,GAAGX,aAAa,CAACY,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACxB,EAAF,MAASqB,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEI,QAAf,CAAxB,CAArB;;AACA,gBAAGH,YAAH,EAAiB;AACb,oBAAMI,KAAK,GAAGf,aAAa,CAACgB,SAAd,CAAwBH,CAAC,IAAIA,CAAC,CAACxB,EAAF,KAASsB,YAAY,CAACtB,EAAnD,CAAd;AACA0B,cAAAA,KAAK,KAAK,CAAC,CAAX,IAAgBf,aAAa,CAACiB,MAAd,CAAqBF,KAArB,EAA4B,CAA5B,CAAhB;AACH;AACJ,WAND;AAOH;;AAEDG,QAAAA,aAAa,CAACjB,eAAD,EAAkBC,cAAlB,CAAb;;AAEA,YAAGF,aAAa,CAACQ,MAAd,GAAuB,CAA1B,EAA6B;AACzB,gBAAMW,IAAI,GAAG,CAAAnB,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,MAAf,MAA0B,CAA1B,GAA8B,CAA9B,GAAkCY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAgBtB,aAAhB,aAAgBA,aAAhB,uBAAgBA,aAAa,CAAEQ,MAA/B,CAAX,CAA/C;AACA,gBAAMe,cAAc,GAAGvB,aAAa,CAACmB,IAAD,CAApC;AACAjD,UAAAA,kBAAkB,CAAC,CAACqD,cAAD,CAAD,CAAlB;AACH;;AAEDzD,QAAAA,iBAAiB,CAACP,MAAD,CAAjB;AACAd,QAAAA,cAAc,CAACwD,eAAD,CAAd;AACAvD,QAAAA,gBAAgB,CAAC0D,iBAAD,CAAhB;AACAxD,QAAAA,gBAAgB,CAAC0D,OAAD,CAAhB;AACH;AACJ,KA1CD,EA0CGkB,KA1CH,CA0CS,MAAM,CAEd,CA5CD;AA6CH,GA9CD;;AAgDA,QAAMN,aAAa,GAAG,CAAC5D,WAAD,EAAcmE,UAAd,KAA6B;AAC/C,QAAIA,UAAU,CAACjB,MAAX,GAAoB,CAAxB,EAA2B;AACvBiB,MAAAA,UAAU,CAAChB,GAAX,CAAgBiB,MAAD,IAAY;AACvB,YAAIpE,WAAW,IAAIoE,MAAM,CAACC,UAAtB,IAAoCD,MAAM,CAACE,QAA3C,IAAuDF,MAAM,CAACG,GAAlE,EAAuE;AACnElF,UAAAA,oBAAoB,CAACW,WAAD,EAAcoE,MAAM,CAACC,UAArB,EAAiCD,MAAM,CAACE,QAAxC,EAAkD;AAClEC,YAAAA,GAAG,EAAEH,MAAM,CAACG,GADsD;AAElEf,YAAAA,QAAQ,EAAEY,MAAM,CAACC,UAFiD;AAGlEG,YAAAA,UAAU,EAAEJ,MAAM,CAACI,UAH+C;AAIlEC,YAAAA,SAAS,EAAEL,MAAM,CAACK,SAJgD;AAKlEC,YAAAA,aAAa,EAAEN,MAAM,CAACM,aAL4C;AAMlEC,YAAAA,QAAQ,EAAEP,MAAM,CAACO,QANiD;AAOlEC,YAAAA,UAAU,EAAER,MAAM,CAACQ,UAP+C;AAQlEC,YAAAA,SAAS,EAAET,MAAM,CAACS,SARgD;AASlEC,YAAAA,SAAS,EAAEV,MAAM,CAACU;AATgD,WAAlD,CAApB;AAWH;AACJ,OAdD;AAeH;AACJ,GAlBD;;AAoBA,QAAMC,sBAAsB,GAAG,MAAM;AACjCzE,IAAAA,iBAAiB,CAAC;AACd0E,MAAAA,SAAS,EAAE7E,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEqC,GADT;AAEdyC,MAAAA,WAAW,EAAE9E,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEW,UAFX;AAGdgB,MAAAA,QAAQ,EAAE,CAAApC,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEqC,EAAZ,KAAkBjC,OAAO,CAACoF;AAHtB,KAAD,CAAjB;AAKH,GAND;;AAQA,QAAMC,WAAW,GAAG,MAAM;AACtB3E,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAI,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAF,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAJD;;AAQA,SACI,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQC,eAAe,CAACuC,MAAhB,GAAyB,CAAzB,IACI,MAAC,SAAD;AAAW,IAAA,SAAS,EAAEhE,OAAO,CAACJ,SAA9B;AAAyC,IAAA,QAAQ,EAAE,IAAnD;AAAyD,IAAA,cAAc,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAY,IAAA,SAAS,EAAEI,OAAO,CAACzB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCgC,CAAC,CAAC,0BAAD,CAAxC,CADJ,CADJ,EAII,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAEP,OAAO,CAACjB,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAkB,IAAA,SAAS,EAAEiB,OAAO,CAACZ,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,SAAS,EAAEY,OAAO,CAACP,IAA9B;AAAoC,IAAA,KAAK,EAAE,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAACyG,MAAAA,OAAO,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ,CAAAzE,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEuC,MAAjB,IAA0B,CAA1B,IACI,MAAC,YAAD;AACI,IAAA,MAAM,EAAEvC,eADZ;AAEI,IAAA,SAAS,EAAER,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEqC,GAF3B;AAGI,IAAA,WAAW,EAAErC,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEW,UAH7B;AAII,IAAA,QAAQ,EAAEpB,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEqC,EAJ1B;AAKI,IAAA,uBAAuB,MAL3B;AAMI,IAAA,cAAc,EAAEtB,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEyC,MANlC;AAOI,IAAA,sBAAsB,EAAE6B,sBAP5B;AAQI,IAAA,WAAW,EAAEI,WARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHZ,CADJ,CAJJ,CADJ,CADJ,CAJJ,CADJ,CADJ,CADJ,CAHZ,EA0CI,MAAC,gBAAD;AACI,IAAA,IAAI,EAAE9E,cADV;AAEI,IAAA,QAAQ,EAAEX,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEqC,EAF1B;AAGI,IAAA,IAAI,EAAE1B,cAHV;AAII,IAAA,OAAO,EAAG+B,MAAD,IAAY;AACjB9B,MAAAA,iBAAiB,CAAC8B,MAAD,CAAjB;AACA+C,MAAAA,WAAW;AACd,KAPL;AAQI,IAAA,iBAAiB,EAAE5E,cARvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1CJ,CADJ;AAwDH;;AAED,eAAetB,WAAf","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport { useSelector } from 'react-redux'\nimport {\n    Card,\n    CardContent,\n    Container,\n    Grid,\n    Typography,\n} from '@material-ui/core'\nimport ForumIcon from '@material-ui/icons/Forum';\nimport axios from 'axios';\nimport useTranslation from \"../../../../lib/translations/hooks/useTranslation\";\nimport WebCmsGlobal from \"../../../webcms-global\";\nimport { REQUEST_METHOD_CONST } from \"../../../../model/orest/constants\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport SurveyTreeDialog from \"../../../survey/surveytree/dialog\";\nimport useSurveyAction from \"../../../../model/survey/useSurveyAction\";\nimport RenderSurvey from \"../../../survey/surveytree/RenderSurvey\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        color: theme.palette.primary.dark,\n        fontWeight: '600',\n        paddingBottom: '8px'\n    },\n    surveyName: {\n        fontWeight: '600',\n        paddingBottom: '8px'\n    },\n    borderWrapper: {\n        border: 'dashed',\n        borderColor: theme.palette.primary.main,\n        borderRadius: '4px',\n    },\n    iconGrid: {\n        backgroundColor: '#FAFAFA',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    icon: {\n        width: '1.5em',\n        height: '1.5em'\n    },\n    container: {\n        marginLeft: 'inherit',\n        marginRight: 'inherit'\n    }\n}))\n\n\nfunction QuickSurvey() {\n    const classes = useStyles();\n\n    const { setSurveyTrans, setSurveyIsValid, setSurveyAnswerMulti, setSurveyBgColor } = useSurveyAction()\n    const { GENERAL_SETTINGS, locale } = useContext(WebCmsGlobal)\n    const { t } = useTranslation()\n\n\n    const clientBase = useSelector((state) => state?.orest?.state?.client || false)\n    const loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n    const surveyTrans = useSelector((state) => state.survey.trans)\n\n\n    const [homeSurvey, setHomeSurvey] = useState(false);\n    const [openSurveyData, setOpenSurveyData] = useState(false);\n    const [surveyTreeData, setSurveyTreeData] = useState([])\n    const [questionList, setQuestionList] = useState([])\n    const [oneQuestionTree, setOneQuestionTree] = useState([])\n\n\n    const clientParams = {}\n    clientParams.hotelrefno = loginfo && loginfo.hotelrefno\n    clientParams.isportal = GENERAL_SETTINGS.ISPORTAL\n\n\n    if(GENERAL_SETTINGS.ISCHAIN &&  String(clientParams.hotelrefno) !== String(GENERAL_SETTINGS.HOTELREFNO)){\n        clientParams.chainid = loginfo && loginfo.hotelrefno\n        clientParams.ischain = true\n    }\n\n    useEffect(() => {\n        let active = true\n\n        if (active && clientBase && !homeSurvey) {\n            getHomeSurvey()\n        }\n\n        return () => {\n            active = false\n        }\n    }, [clientBase])\n\n    useEffect(() => {\n        if(homeSurvey && clientBase) {\n            getSurveyTree()\n        }\n    }, [homeSurvey, clientBase])\n\n\n\n\n    const getHomeSurvey = () => {\n        axios({\n            url: GENERAL_SETTINGS.BASE_URL + 'api/guestweb/home-survey',\n            method: REQUEST_METHOD_CONST.POST,\n            params: {\n                clientid: clientBase?.id,\n                lancode: locale,\n                limit: 1\n            }\n        }).then(res => {\n            if(res.status === 200 && res.data.count > 0) {\n                const survey = res.data.data[0]\n                setHomeSurvey(survey)\n            }\n        })\n    }\n\n    const getSurveyTree = () => {\n        axios({\n            url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n            method: REQUEST_METHOD_CONST.POST,\n            params: clientParams,\n            timeout: 1000 * 30, // Wait for 30 sec.\n            data: {\n                client: clientBase?.gid,\n                survey: homeSurvey?.gid,\n            },\n        }).then((r) => {\n            if(r.status === 200 && r.data?.survey) {\n                const survey = r.data?.survey\n                const onlyQuestions = [...r.data?.onlyQuestions]\n                const surveyTransData = r.data.trans\n                const oldAnswersData = r.data.answers\n                const surveyIsValidData = r.data.isvalid\n                const bgColor = r.data.bgcolor\n                setQuestionList(r.data?.onlyQuestions)\n\n                if(oldAnswersData && oldAnswersData?.length > 0) {\n                    oldAnswersData.map((item) => {\n                        const findQuestion = onlyQuestions.find(e => e.id === item?.parentid)\n                        if(findQuestion) {\n                            const index = onlyQuestions.findIndex(e => e.id === findQuestion.id)\n                            index !== -1 && onlyQuestions.splice(index, 1)\n                        }\n                    })\n                }\n\n                setOldAnswers(surveyTransData, oldAnswersData)\n\n                if(onlyQuestions.length > 0) {\n                    const rand = onlyQuestions?.length === 1 ? 0 : Math.floor(Math.random() * onlyQuestions?.length);\n                    const randomQuestion = onlyQuestions[rand]\n                    setOneQuestionTree([randomQuestion])\n                }\n\n                setSurveyTreeData(survey)\n                setSurveyTrans(surveyTransData)\n                setSurveyIsValid(surveyIsValidData)\n                setSurveyBgColor(bgColor)\n            }\n        }).catch(() => {\n\n        })\n    }\n\n    const setOldAnswers = (surveyTrans, oldAnswers) => {\n        if (oldAnswers.length > 0) {\n            oldAnswers.map((answer) => {\n                if (surveyTrans && answer.questionid && answer.answerid && answer.typ) {\n                    setSurveyAnswerMulti(surveyTrans, answer.questionid, answer.answerid, {\n                        typ: answer.typ,\n                        parentid: answer.questionid,\n                        answernote: answer.answernote,\n                        valuetext: answer.valuetext,\n                        valuelongtext: answer.valuelongtext,\n                        valueint: answer.valueint,\n                        valuefloat: answer.valuefloat,\n                        valuedate: answer.valuedate,\n                        valuetime: answer.valuetime,\n                    })\n                }\n            })\n        }\n    }\n\n    const handleOpenSurveyDialog = () => {\n        setOpenSurveyData({\n            surveygid: homeSurvey?.gid,\n            surveyrefno: homeSurvey?.hotelrefno,\n            clientid: clientBase?.id || loginfo.refid,\n        })\n    }\n\n    const handleReset = () => {\n        setSurveyTreeData([])\n        setOneQuestionTree([])\n        setQuestionList([])\n    }\n\n\n\n    return(\n        <React.Fragment>\n            {\n                oneQuestionTree.length > 0 && (\n                    <Container className={classes.container} maxWidth={'sm'} disableGutters>\n                        <Card>\n                            <CardContent>\n                                <Grid container>\n                                    <Grid item xs={12}>\n                                        <Typography className={classes.title}>{t('str_helpUnderstandBetter')}</Typography>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <div className={classes.borderWrapper}>\n                                            <Grid container>\n                                                <Grid item xs={3} className={classes.iconGrid}>\n                                                    <ForumIcon className={classes.icon} color={'primary'}/>\n                                                </Grid>\n                                                <Grid item xs={9}>\n                                                    <div style={{padding: '12px'}}>\n                                                        {\n                                                            oneQuestionTree?.length > 0 && (\n                                                                <RenderSurvey\n                                                                    survey={oneQuestionTree}\n                                                                    surveygid={homeSurvey?.gid}\n                                                                    surveyrefno={homeSurvey?.hotelrefno}\n                                                                    clientid={clientBase?.id}\n                                                                    isOnlyOneQuestionRender\n                                                                    questionLength={questionList?.length}\n                                                                    handleOpenSurveyDialog={handleOpenSurveyDialog}\n                                                                    handleReset={handleReset}\n                                                                />\n                                                            )\n                                                        }\n                                                    </div>\n                                                </Grid>\n                                            </Grid>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </CardContent>\n                        </Card>\n                    </Container>\n                )}\n            <SurveyTreeDialog\n                open={openSurveyData}\n                clientId={clientBase?.id}\n                data={openSurveyData}\n                onClose={(status) => {\n                    setOpenSurveyData(status)\n                    handleReset()\n                }}\n                isAlreadyLoadTree={surveyTreeData}\n            />\n        </React.Fragment>\n    )\n\n}\n\nexport default QuickSurvey;"]},"metadata":{},"sourceType":"module"}