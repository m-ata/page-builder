{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/LoginComponent/LoginComponent.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { resetState, setToState, updateState } from 'state/actions';\nimport styles from './style/LoginComponent.style';\nimport { makeStyles } from '@material-ui/core/styles';\nimport WebCmsGlobal from 'components/webcms-global';\nimport { useOrestAction } from 'model/orest';\nimport { AuthLogin, UseOrest } from '@webcms/orest';\nimport moment from 'moment';\nimport { DatePicker, LocalizationProvider, MobileDatePicker } from '@material-ui/pickers';\nimport MomentAdapter from '@date-io/moment';\nimport { Button, Checkbox, CircularProgress, FormControlLabel, Grid, Tab, Tabs, TextField, Typography } from '@material-ui/core';\nimport { Email, Person, Phone, Room, RoomService } from '@material-ui/icons';\nimport { CONTENTYPE, FILETYPE, LOCAL_STORAGE_EMAIL, LOCAL_STORAGE_OREST_HOTELNAME_TEXT, LOCAL_STORAGE_OREST_HOTELREFNO_TEXT, LOCAL_STORAGE_OREST_TOKEN_TEXT, LOCAL_STORAGE_PHONE_NUMBER, LOCAL_STORAGE_REMEMBER_ME, LOCAL_STORAGE_WEBCMS_COLUMNS_SETTINGS, mobileTelNoFormat } from 'model/orest/constants';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport Router, { useRouter } from 'next/router';\nimport PhoneInput from '../../@webcms-ui/core/phone-input';\nimport Update from 'components/guest/account/Client/Update';\nimport GuestSelection from 'components/guest/account/Details/GuestSelection';\nimport { useHotelInfoAction } from 'model/orest/components/ChangeHotel/redux_store';\nimport { useSnackbar } from 'notistack';\nimport clsx from 'clsx';\nimport Alert from '@material-ui/lab/Alert';\nimport { defaultLocale } from 'lib/translations/config';\nimport { objectTransliterate } from '@webcms-globals/helpers';\nimport utfTransliteration from '../../@webcms-globals/utf-transliteration';\nconst useStyles = makeStyles(styles);\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  const classes = useStyles();\n  return __jsx(Typography, _extends({\n    component: \"div\",\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `scrollable-auto-tabpanel-${index}`,\n    \"aria-labelledby\": `scrollable-auto-tab-${index}`,\n    className: classes.tabPanel\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), value === index && __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 33\n    }\n  }, children));\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`\n  };\n}\n\nconst urlFixer = (baseUrl, retUrl, lang) => {\n  let isLang = !!lang;\n\n  if (isLang) {\n    let useUrl = new URL(baseUrl + retUrl.replace('/', ''));\n    useUrl.searchParams.delete('lang');\n    useUrl = useUrl.toString();\n    useUrl = '/' + useUrl.replace(baseUrl, '');\n    return useUrl + `${useUrl.includes('?') ? '&' : '?'}lang=${lang}`;\n  } else {\n    return retUrl;\n  }\n};\n\nconst LoginComponent = props => {\n  var _GENERAL_SETTINGS$hot, _GENERAL_SETTINGS$hot2, _GENERAL_SETTINGS$hot3, _GENERAL_SETTINGS$hot4, _GENERAL_SETTINGS$hot5, _GENERAL_SETTINGS$hot6, _loginComponentTypeLi, _GENERAL_SETTINGS$hot7, _GENERAL_SETTINGS$hot8, _GENERAL_SETTINGS$hot9, _GENERAL_SETTINGS$hot10, _GENERAL_SETTINGS$hot11, _GENERAL_SETTINGS$hot12, _GENERAL_SETTINGS$hot13, _GENERAL_SETTINGS$hot14;\n\n  const {\n    GENERAL_SETTINGS,\n    locale\n  } = useContext(WebCmsGlobal),\n        {\n    t\n  } = useTranslation(),\n        {\n    transliteration\n  } = utfTransliteration(),\n        router = useRouter(),\n        {\n    state,\n    locationName,\n    redirectUrl,\n    isOnlyEmail,\n    isUserPortalLogin,\n    isEmpPortal,\n    updateState,\n    isCloudWikiLogin,\n    setWikiLoginDialog,\n    isLoginWrapper,\n    noQuery,\n    setToState,\n    getEmail\n  } = props,\n        emailParam = !noQuery && router.query.email || '',\n        passParam = !noQuery && router.query.pass || '',\n        refUrlParam = router.query.refurl,\n        isKiosk = router.query.kiosk === 'true',\n        {\n    enqueueSnackbar\n  } = useSnackbar(); //redux\n\n  const {\n    setOrestState,\n    setOrestUserInfo,\n    deleteOrestCurrentUserInfo\n  } = useOrestAction(),\n        {\n    setHotelRefNo,\n    setHotelName,\n    setHotelRefNoIsInitializing,\n    updateLicenceMenuStatus\n  } = useHotelInfoAction(); //state\n\n  const {\n    0: username,\n    1: setUsername\n  } = useState(emailParam || ''),\n        {\n    0: password,\n    1: setPassword\n  } = useState(passParam || ''),\n        {\n    0: birthDate,\n    1: setBirthDate\n  } = useState(null),\n        {\n    0: isLoggingIn,\n    1: setIsLoggingIn\n  } = useState(false),\n        {\n    0: tabValue,\n    1: setTabValue\n  } = useState(0),\n        {\n    0: isPrevControl,\n    1: setIsPrevControl\n  } = useState(false),\n        {\n    0: getAuthInfo,\n    1: setAuthInfo\n  } = useState({}),\n        {\n    0: getLoginInfo,\n    1: setLoginInfo\n  } = useState({}),\n        {\n    0: isEmail,\n    1: setIsEmail\n  } = useState(true),\n        {\n    0: isPhoneNumber,\n    1: setIsPhoneNumber\n  } = useState(false),\n        {\n    0: rememberMe,\n    1: setRememberMe\n  } = useState(false),\n        {\n    0: useGuestSelection,\n    1: setUseGuestSelection\n  } = useState({\n    isVisible: false,\n    isLoading: false,\n    data: false\n  }); //settings\n\n  const allowedRoles = ['6500315', '6500300', '6500310'],\n        colorObject = {\n    backgroundColor: isUserPortalLogin ? '#063E8D' : isEmpPortal ? '#064E42' : 'inherit',\n    hoverColor: isUserPortalLogin ? 'rgb(6, 62, 141, 0.8)' : isEmpPortal ? '#4E8179' : 'inherit',\n    borderColor: isUserPortalLogin ? '#063E8D' : isEmpPortal ? '#064E42' : 'inherit',\n    labelColor: isUserPortalLogin ? '#063E8D' : isEmpPortal ? '#064E42' : 'inherit',\n    checkboxColor: isUserPortalLogin ? '#4666B0' : isEmpPortal ? '#4E8179' : 'inherit'\n  },\n        classes = useStyles(colorObject);\n  useEffect(() => {\n    if (emailParam && passParam) {\n      handleClickLogin();\n    }\n\n    const localRememberMe = localStorage.getItem(LOCAL_STORAGE_REMEMBER_ME) ? localStorage.getItem(LOCAL_STORAGE_REMEMBER_ME) !== 'false' : false;\n    const localUsername = localStorage.getItem(LOCAL_STORAGE_EMAIL) ? localStorage.getItem(LOCAL_STORAGE_EMAIL) : \"\";\n    const localPhoneNumber = localStorage.getItem(LOCAL_STORAGE_PHONE_NUMBER) ? localStorage.getItem(LOCAL_STORAGE_PHONE_NUMBER) : \"\";\n\n    if (localRememberMe && localRememberMe !== false) {\n      if (isEmail) {\n        setUsername(localUsername);\n        setRememberMe(localRememberMe);\n      } else if (isPhoneNumber) {\n        setUsername(localPhoneNumber);\n        setRememberMe(localRememberMe);\n      }\n    }\n\n    deleteOrestCurrentUserInfo();\n  }, [isEmail]);\n  useEffect(() => {\n    typeof getEmail === 'function' && getEmail(username);\n  }, [username]);\n\n  const handleOnChangeCheckBox = event => {\n    setRememberMe(event.target.checked);\n  };\n\n  const handleCheckPrv = client => {\n    if (locationName === \"guest\") {\n      return client && client.hasdatapolicy === true && client.haspref === true;\n    } else if (locationName === \"survey\") {\n      return client && client.hasdatapolicy === true;\n    } else {\n      return true;\n    }\n  };\n\n  const handleUsernameChange = (e, type) => {\n    let value;\n\n    if (type === 'phone') {\n      value = e;\n    } else {\n      value = transliteration(e.target.value);\n    }\n\n    setUsername(value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n  };\n\n  const handleBirthChange = e => {\n    setBirthDate(e);\n    setPassword(moment(e).locale(defaultLocale).format('DDMMYYYY'));\n  };\n\n  const checkLicenceMenuStatus = (infoAuth, infoLogin) => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'info/hotel',\n      token: infoAuth.access_token,\n      params: {\n        keyval: infoLogin.hotelrefno\n      }\n    }).then(infoHotelResponse => {\n      if (!infoHotelResponse.data.data.ischain) {\n        updateLicenceMenuStatus(true);\n        localStorage.setItem('licenceMenuStatus', 'true');\n        return true;\n      } else {\n        updateLicenceMenuStatus(false);\n        localStorage.setItem('licenceMenuStatus', 'false');\n        return true;\n      }\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const loginOptions = {\n    hasemail: ((_GENERAL_SETTINGS$hot = GENERAL_SETTINGS.hotelSettings) === null || _GENERAL_SETTINGS$hot === void 0 ? void 0 : _GENERAL_SETTINGS$hot.hasemail) || false,\n    hasreserv: ((_GENERAL_SETTINGS$hot2 = GENERAL_SETTINGS.hotelSettings) === null || _GENERAL_SETTINGS$hot2 === void 0 ? void 0 : _GENERAL_SETTINGS$hot2.hasreserv) || false,\n    hastel: ((_GENERAL_SETTINGS$hot3 = GENERAL_SETTINGS.hotelSettings) === null || _GENERAL_SETTINGS$hot3 === void 0 ? void 0 : _GENERAL_SETTINGS$hot3.hastel) || false,\n    hasroom: ((_GENERAL_SETTINGS$hot4 = GENERAL_SETTINGS.hotelSettings) === null || _GENERAL_SETTINGS$hot4 === void 0 ? void 0 : _GENERAL_SETTINGS$hot4.hasroom) || false,\n    haslastname: ((_GENERAL_SETTINGS$hot5 = GENERAL_SETTINGS.hotelSettings) === null || _GENERAL_SETTINGS$hot5 === void 0 ? void 0 : _GENERAL_SETTINGS$hot5.haslastname) || false\n  };\n  const loginTypeCodeList = {\n    room: 'ROOM',\n    reservation: 'RESERVATION',\n    email: 'EMAIL',\n    tel: 'TEL',\n    lastname: 'LASTNAME'\n  };\n  const loginTypeOrderList = {\n    room: 1,\n    reservation: (_GENERAL_SETTINGS$hot6 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot6 !== void 0 && _GENERAL_SETTINGS$hot6.loginwithci ? -1 : 2,\n    email: emailParam && -99 || 3,\n    tel: 4,\n    lastname: 5\n  };\n  const loginComponentTypeList = [{\n    label: t('str_room') + '#',\n    icon: __jsx(Room, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 19\n      }\n    }),\n    order: loginTypeOrderList.room,\n    isHide: !loginOptions.hasroom || isUserPortalLogin || isEmpPortal || false,\n    loginType: 'roomno',\n    loginTypeCode: loginTypeCodeList.room\n  }, {\n    label: t('str_reservation') + '#',\n    icon: __jsx(RoomService, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 19\n      }\n    }),\n    order: loginTypeOrderList.reservation,\n    isHide: !loginOptions.hasreserv || isUserPortalLogin || isEmpPortal || false,\n    loginType: 'refcode',\n    loginTypeCode: loginTypeCodeList.reservation\n  }, {\n    label: t('str_email'),\n    icon: __jsx(Email, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 19\n      }\n    }),\n    order: loginTypeOrderList.email,\n    isHide: !loginOptions.hasemail || false,\n    loginType: 'email',\n    loginTypeCode: loginTypeCodeList.email\n  }, {\n    label: t('str_phone'),\n    icon: __jsx(Phone, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 19\n      }\n    }),\n    order: loginTypeOrderList.tel,\n    isHide: !loginOptions.hastel || isUserPortalLogin || isEmpPortal || false,\n    loginType: 'mobile',\n    loginTypeCode: loginTypeCodeList.tel\n  }, {\n    label: t('str_lastName'),\n    icon: __jsx(Person, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 19\n      }\n    }),\n    order: loginTypeOrderList.lastname,\n    isHide: !loginOptions.haslastname || isUserPortalLogin || isEmpPortal || false,\n    loginType: 'refcode',\n    loginTypeCode: loginTypeCodeList.lastname\n  }];\n  const {\n    0: loginTypeSelect,\n    1: setLoginTypeSelect\n  } = useState(emailParam && 'email' || ((_loginComponentTypeLi = loginComponentTypeList.sort((a, b) => a.order - b.order).filter(item => !item.isHide)[0]) === null || _loginComponentTypeLi === void 0 ? void 0 : _loginComponentTypeLi.loginType) || false);\n\n  if (!loginTypeSelect) {\n    return __jsx(Alert, {\n      variant: \"outlined\",\n      severity: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }\n    }, t('str_validLoginTypeDoesNotExist'));\n  }\n\n  const doAuthLogin = authData => {\n    return AuthLogin({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      data: authData\n    }).then(authLoginResponse => {\n      if (authLoginResponse !== null && authLoginResponse !== void 0 && authLoginResponse.data) {\n        return authLoginResponse;\n      } else {\n        return authLoginResponse;\n      }\n    }).catch(error => {\n      return error;\n    });\n  };\n\n  const authStatusAllowed = statusCode => {\n    return statusCode === 200;\n  };\n\n  const showAuthRelatedErrorMessage = infoAuth => {\n    if (infoAuth.status === 400) {\n      setIsLoggingIn(false);\n      enqueueSnackbar('Username or Password Wrong!', {\n        variant: 'error'\n      });\n    } else if (infoAuth.status === 403) {\n      setIsLoggingIn(false);\n      enqueueSnackbar('You blocked! Try again in ' + infoAuth.data.blockdurationmin + ' minute(s)', {\n        variant: 'error'\n      });\n    } else if (infoAuth.status === 500) {\n      setIsLoggingIn(false);\n      enqueueSnackbar(t('str_checkCredentials'), {\n        variant: 'error'\n      });\n    } else if (infoAuth.status === 0) {\n      setIsLoggingIn(false);\n      enqueueSnackbar('No internet connection!', {\n        variant: 'error'\n      });\n    } else {\n      setIsLoggingIn(false);\n      enqueueSnackbar('Login Error!', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const useLoginInfo = (infoAuth, hotelRefNo) => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'info/login',\n      token: infoAuth.data.access_token,\n      params: {\n        hotelrefno: hotelRefNo\n      }\n    }).then(infoLoginResponse => {\n      var _infoLoginResponse$da;\n\n      if (infoLoginResponse !== null && infoLoginResponse !== void 0 && (_infoLoginResponse$da = infoLoginResponse.data) !== null && _infoLoginResponse$da !== void 0 && _infoLoginResponse$da.data) {\n        return infoLoginResponse.data.data;\n      } else {\n        return false;\n      }\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const useClientLoginId = ({\n    infoAuth,\n    refCode,\n    birthDate,\n    hotelRefNo\n  }) => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'client/loginid',\n      method: 'PUT',\n      token: infoAuth.data.access_token,\n      params: {\n        refcode: refCode,\n        birthdate: birthDate,\n        hotelrefno: hotelRefNo\n      }\n    }).then(clientLoginIdResponse => {\n      var _clientLoginIdRespons;\n\n      return clientLoginIdResponse.status === 200 && (clientLoginIdResponse === null || clientLoginIdResponse === void 0 ? void 0 : (_clientLoginIdRespons = clientLoginIdResponse.data) === null || _clientLoginIdRespons === void 0 ? void 0 : _clientLoginIdRespons.data);\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const useReservatClientList = ({\n    infoAuth,\n    reservNo\n  }) => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'reservat/client/list',\n      token: infoAuth.data.access_token,\n      params: {\n        field: 'reservno',\n        text: reservNo,\n        sort: 'paxno',\n        allhotels: true\n      }\n    }).then(reservatClientListResponse => {\n      var _reservatClientListRe, _reservatClientListRe2;\n\n      return reservatClientListResponse.status === 200 && (reservatClientListResponse === null || reservatClientListResponse === void 0 ? void 0 : (_reservatClientListRe = reservatClientListResponse.data) === null || _reservatClientListRe === void 0 ? void 0 : _reservatClientListRe.data.length) > 1 && (reservatClientListResponse === null || reservatClientListResponse === void 0 ? void 0 : (_reservatClientListRe2 = reservatClientListResponse.data) === null || _reservatClientListRe2 === void 0 ? void 0 : _reservatClientListRe2.data);\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const getLoginTypeInfo = () => {\n    return loginComponentTypeList.sort((a, b) => a.order - b.order).filter(item => !item.isHide)[tabValue];\n  };\n\n  const useAuthData = () => {\n    let authData = {\n      grant_type: 'password',\n      client_id: 'orestClient',\n      client_secret: 'top_secret',\n      username: username,\n      password: password,\n      hotelrefno: GENERAL_SETTINGS.useHotelRefno\n    };\n\n    if (state.changeHotelRefno) {\n      authData.hotelrefno = state.changeHotelRefno;\n    }\n\n    if (loginTypeSelect !== 'email') {\n      authData.logintype = loginTypeSelect;\n    }\n\n    if (loginTypeSelect === 'mobile') {\n      authData.username = mobileTelNoFormat(authData.username);\n    }\n\n    if (isOnlyEmail) {\n      delete authData.logintype;\n    }\n\n    return authData;\n  };\n\n  const handleClickLogin = async () => {\n    setIsLoggingIn(true);\n    setHotelRefNoIsInitializing(true);\n    const authData = useAuthData();\n    const infoAuth = await doAuthLogin(authData);\n    setAuthInfo(infoAuth.data);\n\n    if (!authStatusAllowed(infoAuth.status)) {\n      showAuthRelatedErrorMessage(infoAuth.status);\n      return false;\n    }\n\n    const infoLogin = await useLoginInfo(infoAuth, authData.hotelrefno);\n    setLoginInfo(infoLogin);\n\n    if (getLoginTypeInfo().loginTypeCode === loginTypeCodeList.lastname) {\n      const infoClientLoginId = await useClientLoginId({\n        infoAuth: infoAuth,\n        refCode: authData.username,\n        birthDate: moment(birthDate).locale(defaultLocale).format('YYYY-MM-DD'),\n        hotelRefNo: authData.hotelrefno\n      });\n\n      if (infoClientLoginId.ismulti && infoClientLoginId.reservno) {\n        const infoReservatClientList = await useReservatClientList({\n          infoAuth: infoAuth,\n          reservNo: infoClientLoginId.reservno\n        });\n\n        if (infoReservatClientList) {\n          setUseGuestSelection({\n            isVisible: true,\n            data: infoReservatClientList\n          });\n          return true;\n        }\n      }\n    }\n\n    setOrestState(['isLoginWithOtherGuest'], false);\n    setIsLoggingIn(false);\n\n    if (locationName === 'guest' && !allowedRoles.includes(infoLogin.roletype)) {\n      enqueueSnackbar(t('str_yourLoggedInUserRoleIsInvalid'), {\n        variant: 'warning'\n      });\n      return true;\n    }\n\n    if (!state.profile.loadGuest) {\n      setToState('guest', ['profile', 'loadGuest'], true);\n    }\n\n    if (rememberMe) {\n      localStorage.setItem(LOCAL_STORAGE_REMEMBER_ME, rememberMe.toString());\n      localStorage.setItem(LOCAL_STORAGE_EMAIL, username);\n    } else {\n      localStorage.setItem(LOCAL_STORAGE_REMEMBER_ME, rememberMe.toString());\n      localStorage.removeItem(LOCAL_STORAGE_EMAIL);\n    }\n\n    if (!isKiosk && !handleCheckPrv(infoLogin) && infoLogin.authorities.find(item => item.authority === 'CLIENT')) {\n      setIsPrevControl(true);\n    } else {\n      await getClientInfoLoader(infoAuth.data, infoLogin);\n      await checkLicenceMenuStatus(infoAuth.data, infoLogin);\n    }\n\n    if (isCloudWikiLogin) {\n      setWikiLoginDialog(false);\n    }\n  };\n\n  const getClientInfoLoader = async (authInfo, loginInfo, otherGuestResname) => {\n    const auth = authInfo || getAuthInfo;\n    const loginfo = loginInfo || getLoginInfo;\n    const allLogInfo = {\n      auth,\n      loginfo,\n      otherGuestResname\n    };\n    localStorage.setItem(LOCAL_STORAGE_OREST_HOTELREFNO_TEXT, loginfo.hotelrefno);\n    localStorage.setItem(LOCAL_STORAGE_OREST_HOTELNAME_TEXT, loginfo.hotelname);\n    localStorage.setItem(LOCAL_STORAGE_OREST_TOKEN_TEXT, auth && loginfo && `{\"auth\": ${JSON.stringify(auth)},\"loginfo\": ${JSON.stringify(loginfo)} ${otherGuestResname ? `,\"otherGuestResname\": ${JSON.stringify(otherGuestResname)}}` : '}'}` || null);\n    await UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'tools/file/find',\n      token: auth.access_token,\n      params: {\n        code: LOCAL_STORAGE_WEBCMS_COLUMNS_SETTINGS,\n        masterid: loginfo.mid,\n        contentype: CONTENTYPE.JSON\n      }\n    }).then(toolsFileFindResponse => {\n      var _toolsFileFindRespons, _toolsFileFindRespons2;\n\n      let useFileData = (toolsFileFindResponse === null || toolsFileFindResponse === void 0 ? void 0 : (_toolsFileFindRespons = toolsFileFindResponse.data) === null || _toolsFileFindRespons === void 0 ? void 0 : (_toolsFileFindRespons2 = _toolsFileFindRespons.data) === null || _toolsFileFindRespons2 === void 0 ? void 0 : _toolsFileFindRespons2.filedata) || false;\n\n      if (toolsFileFindResponse.status === 200 && useFileData) {\n        useFileData = JSON.parse(Buffer.from(useFileData, 'base64').toString('utf-8'));\n        localStorage.setItem(LOCAL_STORAGE_WEBCMS_COLUMNS_SETTINGS, JSON.stringify(useFileData));\n      }\n    });\n    setHotelRefNoIsInitializing(false);\n    setHotelName(loginfo.hotelname);\n    setHotelRefNo(loginfo.hotelrefno);\n\n    if (loginfo.roletype === '6500310' && loginfo !== null && loginfo !== void 0 && loginfo.accgid) {\n      await UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'client/view/get',\n        token: auth.access_token,\n        params: {\n          gid: loginfo.accgid,\n          chkselfish: false,\n          allhotels: true\n        }\n      }).then(clientGetResponse => {\n        var _clientGetResponse$da;\n\n        if (clientGetResponse.status === 200 && clientGetResponse !== null && clientGetResponse !== void 0 && (_clientGetResponse$da = clientGetResponse.data) !== null && _clientGetResponse$da !== void 0 && _clientGetResponse$da.data) {\n          const clientGetResponseData = clientGetResponse.data.data;\n          setOrestState(['client'], objectTransliterate(clientGetResponseData, ['firstname', 'lastname', 'address1', 'note']));\n        }\n      });\n      await UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'client/reservno',\n        token: auth.access_token,\n        params: {\n          clientid: loginfo.accid,\n          isgapp: true\n        }\n      }).then(clientReservnoResponse => {\n        var _clientReservnoRespon;\n\n        if (clientReservnoResponse !== null && clientReservnoResponse !== void 0 && (_clientReservnoRespon = clientReservnoResponse.data) !== null && _clientReservnoRespon !== void 0 && _clientReservnoRespon.data) {\n          if (!GENERAL_SETTINGS.ISPORTAL) {\n            updateState('guest', 'changeHotelRefno', clientReservnoResponse.data.data.hotelrefno);\n            updateState('guest', 'changeHotelName', clientReservnoResponse.data.data.hotelname);\n          }\n\n          updateState('guest', 'clientReservation', clientReservnoResponse.data.data);\n          updateState('guest', 'totalPax', clientReservnoResponse.data.data.totalpax || 1);\n          updateState('guest', 'totalChd', clientReservnoResponse.data.data.totalchd || 0);\n        } else {\n          updateState('guest', 'clientReservation', null);\n        }\n      }).catch(() => {\n        updateState('guest', 'clientReservation', null);\n      });\n    }\n\n    setOrestUserInfo(allLogInfo);\n    enqueueSnackbar(t('str_loggedIn'), {\n      variant: 'success'\n    });\n\n    if (redirectUrl) {\n      if (redirectUrl.includes('/hup')) {\n        window.location.href = urlFixer(GENERAL_SETTINGS.BASE_URL, redirectUrl, loginfo.langshort);\n      } else {\n        if (refUrlParam) {\n          let refUrlDec = decodeURIComponent(refUrlParam);\n\n          if (refUrlParam.includes('eventlocid')) {\n            Router.push(urlFixer(GENERAL_SETTINGS.BASE_URL, refUrlDec, loginfo.langshort));\n          } else {\n            if (!refUrlDec.includes('?lang')) {\n              if (refUrlDec.includes('&')) {\n                Router.push(urlFixer(GENERAL_SETTINGS.BASE_URL, refUrlDec, loginfo.langshort));\n              } else {\n                Router.push(urlFixer(GENERAL_SETTINGS.BASE_URL, refUrlDec, loginfo.langshort));\n              }\n            } else {\n              Router.push(refUrlDec);\n            }\n          }\n        } else {\n          Router.push(urlFixer(GENERAL_SETTINGS.BASE_URL, redirectUrl, loginfo.langshort));\n        }\n      }\n    }\n  };\n\n  const handleKeyLogin = async event => {\n    if (event.keyCode === 13) {\n      await handleClickLogin();\n      event.preventDefault();\n    }\n  };\n\n  if (isOnlyEmail) {\n    return __jsx(Grid, {\n      container: true,\n      className: classes.gridContainer,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 13\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.gridItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 17\n      }\n    }, __jsx(TextField, {\n      disabled: isLoggingIn,\n      variant: \"filled\",\n      required: true,\n      fullWidth: true,\n      id: \"username\",\n      name: \"username\",\n      label: t('str_email'),\n      value: username,\n      onChange: handleUsernameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 21\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.gridItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 17\n      }\n    }, __jsx(TextField, {\n      disabled: isLoggingIn,\n      onKeyDown: e => handleKeyLogin(e),\n      variant: \"filled\",\n      required: true,\n      fullWidth: true,\n      id: \"userpassword\",\n      name: \"userpassword\",\n      type: \"password\",\n      label: t('str_password'),\n      value: password,\n      onChange: handlePasswordChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 21\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.gridItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: classes.wrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 21\n      }\n    }, __jsx(Button, {\n      onClick: handleClickLogin,\n      disabled: isLoggingIn,\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"large\",\n      disableElevation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 25\n      }\n    }, t('str_login'), isLoggingIn && __jsx(CircularProgress, {\n      size: 24,\n      className: classes.buttonProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 45\n      }\n    })))));\n  }\n\n  const getTabIndex = newValue => {\n    var _getIndex$newValue;\n\n    let getIndex = loginComponentTypeList.filter(item => !item.isHide);\n    return ((_getIndex$newValue = getIndex[newValue]) === null || _getIndex$newValue === void 0 ? void 0 : _getIndex$newValue.order) || loginComponentTypeList[0].order;\n  };\n\n  const handleChangeTab = (event, newValue) => {\n    var _loginComponentTypeLi2;\n\n    const getIndex = getTabIndex(newValue);\n\n    if (getIndex === loginTypeOrderList.email) {\n      setIsEmail(true);\n      setIsPhoneNumber(false);\n    } else if (getIndex === loginTypeOrderList.tel) {\n      setIsEmail(false);\n      setIsPhoneNumber(true);\n    } else {\n      setIsEmail(false);\n      setIsPhoneNumber(false);\n    }\n\n    const getLoginType = ((_loginComponentTypeLi2 = loginComponentTypeList.filter(item => item.order === getIndex)[0]) === null || _loginComponentTypeLi2 === void 0 ? void 0 : _loginComponentTypeLi2.loginType) || false;\n    setLoginTypeSelect(getLoginType);\n    setTabValue(newValue);\n  };\n\n  const renderLoginComponent = loginTypeCode => {\n    switch (loginTypeCode) {\n      case loginTypeCodeList.room:\n        return __jsx(TextField, {\n          disabled: isLoggingIn,\n          className: clsx('', {\n            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n            [classes.textFieldDestinationPortal]: isLoginWrapper\n          }),\n          variant: !isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined',\n          required: true,\n          fullWidth: true,\n          id: \"username\",\n          name: \"username\",\n          label: t('str_roomNo'),\n          value: username,\n          onKeyUp: handleUsernameChange,\n          onKeyDown: handleUsernameChange,\n          onChange: handleUsernameChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 21\n          }\n        });\n\n      case loginTypeCodeList.reservation:\n        return __jsx(TextField, {\n          disabled: isLoggingIn,\n          className: clsx('', {\n            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n            [classes.textFieldDestinationPortal]: isLoginWrapper\n          }),\n          color: 'primary',\n          variant: !isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined',\n          required: true,\n          fullWidth: true,\n          id: \"username\",\n          name: \"username\",\n          label: t('str_resNo'),\n          value: username,\n          onKeyUp: handleUsernameChange,\n          onKeyDown: handleUsernameChange,\n          onChange: handleUsernameChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 21\n          }\n        });\n\n      case loginTypeCodeList.email:\n        return __jsx(TextField, {\n          disabled: isLoggingIn,\n          className: clsx('', {\n            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n            [classes.textFieldDestinationPortal]: isLoginWrapper\n          }),\n          color: 'primary',\n          variant: !isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined',\n          required: true,\n          fullWidth: true,\n          id: \"username\",\n          name: \"username\",\n          label: t('str_email'),\n          value: username,\n          onKeyUp: handleUsernameChange,\n          onKeyDown: handleUsernameChange,\n          onChange: handleUsernameChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 21\n          }\n        });\n\n      case loginTypeCodeList.tel:\n        return __jsx(PhoneInput, {\n          disabled: isLoggingIn,\n          className: clsx('', {\n            [classes.textFieldUserPortal]: isUserPortalLogin,\n            [classes.textFieldDestinationPortal]: isLoginWrapper\n          }),\n          defaultCountry: locale === 'en' ? 'us' : locale,\n          preferredCountries: ['it', 'ie', 'de', 'fr', 'es', 'gb'],\n          regions: ['america', 'europe', 'asia', 'oceania', 'africa'],\n          variant: !isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined',\n          id: \"username\",\n          name: \"username\",\n          label: t('str_phone'),\n          fullWidth: true,\n          value: username,\n          onChange: e => handleUsernameChange(e, 'phone'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 21\n          }\n        });\n\n      case loginTypeCodeList.lastname:\n        return __jsx(TextField, {\n          disabled: isLoggingIn,\n          className: clsx('', {\n            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n            [classes.textFieldDestinationPortal]: isLoginWrapper\n          }),\n          color: 'primary',\n          variant: !isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined',\n          required: true,\n          fullWidth: true,\n          id: \"lastname\",\n          name: \"lastname\",\n          label: t('str_lastName'),\n          value: username,\n          onKeyUp: handleUsernameChange,\n          onKeyDown: handleUsernameChange,\n          onChange: handleUsernameChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 779,\n            columnNumber: 21\n          }\n        });\n    }\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    className: classes.gridContainer,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 804,\n      columnNumber: 13\n    }\n  }, isPrevControl && getAuthInfo && locationName ? __jsx(Update, {\n    open: isPrevControl,\n    auth: getAuthInfo,\n    logInfo: getLoginInfo,\n    locationName: locationName,\n    onCallback: (auth, loginInfo) => getClientInfoLoader(auth, loginInfo, false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 21\n    }\n  }) : null, useGuestSelection.isVisible ? __jsx(GuestSelection, {\n    open: useGuestSelection.isVisible,\n    isLoading: useGuestSelection.isLoading,\n    data: useGuestSelection.data || [],\n    auth: getAuthInfo,\n    logInfo: getLoginInfo,\n    onLoginCallback: (auth, loginInfo, otherGuestResname) => getClientInfoLoader(auth, loginInfo, otherGuestResname),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 815,\n      columnNumber: 21\n    }\n  }) : null, __jsx(Tabs, {\n    classes: {\n      root: isUserPortalLogin || isEmpPortal ? classes.tabsRootUserPortal : \"\",\n      indicator: isUserPortalLogin || isEmpPortal ? classes.tabsIndicatorUserPortal : classes.tabsIndicator\n    },\n    variant: isUserPortalLogin || isEmpPortal ? \"standard\" : \"fullWidth\",\n    value: tabValue,\n    onChange: handleChangeTab,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 17\n    }\n  }, loginComponentTypeList.sort((a, b) => a.order - b.order).filter(item => !item.isHide).map((loginCompenent, index) => {\n    return __jsx(Tab, _extends({\n      key: index,\n      className: classes.loginTab,\n      label: loginCompenent.label,\n      icon: loginCompenent.icon\n    }, a11yProps(index), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 29\n      }\n    }));\n  })), loginComponentTypeList.sort((a, b) => a.order - b.order).filter(item => !item.isHide).map((loginCompenent, index) => {\n    return __jsx(TabPanel, {\n      value: tabValue,\n      index: index,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 25\n      }\n    }, isUserPortalLogin || isLoginWrapper || isEmpPortal ? __jsx(\"div\", {\n      style: {\n        paddingTop: '16px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 83\n      }\n    }) : null, renderLoginComponent(loginCompenent.loginTypeCode));\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 13\n    }\n  }, getTabIndex(tabValue) === loginTypeOrderList.email && __jsx(TextField, {\n    disabled: isLoggingIn,\n    className: clsx(\"\", {\n      [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n      [classes.textFieldDestinationPortal]: isLoginWrapper\n    }),\n    variant: !isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? \"filled\" : \"outlined\",\n    required: true,\n    fullWidth: true,\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    label: t('str_password'),\n    value: password,\n    inputProps: {\n      autoComplete: 'new-password'\n    },\n    onKeyDown: e => handleKeyLogin(e),\n    onChange: handlePasswordChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 21\n    }\n  }), (getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.tel || getTabIndex(tabValue) === loginTypeOrderList.lastname) && __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 874,\n      columnNumber: 21\n    }\n  }, isKiosk ? __jsx(MobileDatePicker, {\n    allowKeyboardControl: true,\n    disabled: isLoggingIn,\n    autoOk: true,\n    id: \"birthdate\",\n    name: \"birthdate\",\n    label: (getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (_GENERAL_SETTINGS$hot7 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot7 !== void 0 && _GENERAL_SETTINGS$hot7.loginwithci ? t('str_checkinDate') : t('str_birthDate'),\n    inputFormat: \"DD/MM/YYYY\",\n    disableFuture: !((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (_GENERAL_SETTINGS$hot8 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot8 !== void 0 && _GENERAL_SETTINGS$hot8.loginwithci),\n    openTo: (getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (_GENERAL_SETTINGS$hot9 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot9 !== void 0 && _GENERAL_SETTINGS$hot9.loginwithci || birthDate ? 'date' : 'year',\n    views: (getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (_GENERAL_SETTINGS$hot10 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot10 !== void 0 && _GENERAL_SETTINGS$hot10.loginwithci ? ['date'] : ['year', 'month', 'date'],\n    value: birthDate,\n    onChange: date => handleBirthChange(date),\n    renderInput: props => {\n      return __jsx(TextField, _extends({}, props, {\n        className: clsx(\"\", {\n          [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n          [classes.textFieldDestinationPortal]: isLoginWrapper\n        }),\n        required: true,\n        fullWidth: true,\n        variant: !isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? \"filled\" : \"outlined\",\n        helperText: 'dd.mm.yyyy',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 41\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 29\n    }\n  }) : __jsx(DatePicker, {\n    allowKeyboardControl: true,\n    disabled: isLoggingIn,\n    autoOk: true,\n    id: \"birthdate\",\n    name: \"birthdate\",\n    label: (getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (_GENERAL_SETTINGS$hot11 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot11 !== void 0 && _GENERAL_SETTINGS$hot11.loginwithci ? t('str_checkinDate') : t('str_birthDate'),\n    inputFormat: \"DD/MM/YYYY\",\n    disableFuture: !((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (_GENERAL_SETTINGS$hot12 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot12 !== void 0 && _GENERAL_SETTINGS$hot12.loginwithci),\n    openTo: (getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (_GENERAL_SETTINGS$hot13 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot13 !== void 0 && _GENERAL_SETTINGS$hot13.loginwithci || birthDate ? 'date' : 'year',\n    views: (getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (_GENERAL_SETTINGS$hot14 = GENERAL_SETTINGS.hotelSettings) !== null && _GENERAL_SETTINGS$hot14 !== void 0 && _GENERAL_SETTINGS$hot14.loginwithci ? ['date'] : ['year', 'month', 'date'],\n    value: birthDate,\n    onChange: date => handleBirthChange(date),\n    renderInput: props => {\n      return __jsx(TextField, _extends({}, props, {\n        required: true,\n        className: clsx(\"\", {\n          [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n          [classes.textFieldDestinationPortal]: isLoginWrapper\n        }),\n        fullWidth: true,\n        variant: !isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? \"filled\" : \"outlined\",\n        helperText: 'dd.mm.yyyy',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 41\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 906,\n      columnNumber: 29\n    }\n  }))), isUserPortalLogin || isLoginWrapper || isEmpPortal ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 940,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 25\n    }\n  }, __jsx(FormControlLabel, {\n    className: classes.formControlLabel,\n    checked: rememberMe,\n    onChange: e => handleOnChangeCheckBox(e),\n    control: __jsx(Checkbox, {\n      className: clsx(\"\", {\n        [classes.checkboxUserPortal]: isUserPortalLogin || isEmpPortal,\n        [classes.checkboxDestinationPortal]: isLoginWrapper\n      }),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 37\n      }\n    }),\n    label: __jsx(Typography, {\n      className: clsx(\"\", {\n        [classes.checkboxLabel]: isUserPortalLogin || isEmpPortal,\n        [classes.checkboxLabelDestinationPortal]: isLoginWrapper\n      }),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 37\n      }\n    }, t(\"str_rememberMe\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 29\n    }\n  }))) : null, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 971,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: classes.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    className: clsx(classes.loginButton, {\n      [classes.loginButtonUserPortal]: isUserPortalLogin || isEmpPortal\n    }),\n    onClick: handleClickLogin,\n    disabled: isLoggingIn,\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    size: isUserPortalLogin ? \"medium\" : \"large\",\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 973,\n      columnNumber: 21\n    }\n  }, t('str_login')), isLoggingIn && __jsx(CircularProgress, {\n    size: 24,\n    className: classes.buttonProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 37\n    }\n  }))));\n};\n\nLoginComponent.propTypes = {\n  redirectUrl: PropTypes.string\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  resetState: () => dispatch(resetState()),\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n  setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginComponent);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/LoginComponent/LoginComponent.js"],"names":["React","useContext","useEffect","useState","PropTypes","connect","resetState","setToState","updateState","styles","makeStyles","WebCmsGlobal","useOrestAction","AuthLogin","UseOrest","moment","DatePicker","LocalizationProvider","MobileDatePicker","MomentAdapter","Button","Checkbox","CircularProgress","FormControlLabel","Grid","Tab","Tabs","TextField","Typography","Email","Person","Phone","Room","RoomService","CONTENTYPE","FILETYPE","LOCAL_STORAGE_EMAIL","LOCAL_STORAGE_OREST_HOTELNAME_TEXT","LOCAL_STORAGE_OREST_HOTELREFNO_TEXT","LOCAL_STORAGE_OREST_TOKEN_TEXT","LOCAL_STORAGE_PHONE_NUMBER","LOCAL_STORAGE_REMEMBER_ME","LOCAL_STORAGE_WEBCMS_COLUMNS_SETTINGS","mobileTelNoFormat","useTranslation","Router","useRouter","PhoneInput","Update","GuestSelection","useHotelInfoAction","useSnackbar","clsx","Alert","defaultLocale","objectTransliterate","utfTransliteration","useStyles","TabPanel","props","children","value","index","other","classes","tabPanel","propTypes","node","any","isRequired","a11yProps","id","urlFixer","baseUrl","retUrl","lang","isLang","useUrl","URL","replace","searchParams","delete","toString","includes","LoginComponent","GENERAL_SETTINGS","locale","t","transliteration","router","state","locationName","redirectUrl","isOnlyEmail","isUserPortalLogin","isEmpPortal","isCloudWikiLogin","setWikiLoginDialog","isLoginWrapper","noQuery","getEmail","emailParam","query","email","passParam","pass","refUrlParam","refurl","isKiosk","kiosk","enqueueSnackbar","setOrestState","setOrestUserInfo","deleteOrestCurrentUserInfo","setHotelRefNo","setHotelName","setHotelRefNoIsInitializing","updateLicenceMenuStatus","username","setUsername","password","setPassword","birthDate","setBirthDate","isLoggingIn","setIsLoggingIn","tabValue","setTabValue","isPrevControl","setIsPrevControl","getAuthInfo","setAuthInfo","getLoginInfo","setLoginInfo","isEmail","setIsEmail","isPhoneNumber","setIsPhoneNumber","rememberMe","setRememberMe","useGuestSelection","setUseGuestSelection","isVisible","isLoading","data","allowedRoles","colorObject","backgroundColor","hoverColor","borderColor","labelColor","checkboxColor","handleClickLogin","localRememberMe","localStorage","getItem","localUsername","localPhoneNumber","handleOnChangeCheckBox","event","target","checked","handleCheckPrv","client","hasdatapolicy","haspref","handleUsernameChange","e","type","handlePasswordChange","handleBirthChange","format","checkLicenceMenuStatus","infoAuth","infoLogin","apiUrl","OREST_URL","endpoint","token","access_token","params","keyval","hotelrefno","then","infoHotelResponse","ischain","setItem","catch","loginOptions","hasemail","hotelSettings","hasreserv","hastel","hasroom","haslastname","loginTypeCodeList","room","reservation","tel","lastname","loginTypeOrderList","loginwithci","loginComponentTypeList","label","icon","order","isHide","loginType","loginTypeCode","loginTypeSelect","setLoginTypeSelect","sort","a","b","filter","item","doAuthLogin","authData","authLoginResponse","error","authStatusAllowed","statusCode","showAuthRelatedErrorMessage","status","variant","blockdurationmin","useLoginInfo","hotelRefNo","infoLoginResponse","useClientLoginId","refCode","method","refcode","birthdate","clientLoginIdResponse","useReservatClientList","reservNo","field","text","allhotels","reservatClientListResponse","length","getLoginTypeInfo","useAuthData","grant_type","client_id","client_secret","useHotelRefno","changeHotelRefno","logintype","infoClientLoginId","ismulti","reservno","infoReservatClientList","roletype","profile","loadGuest","removeItem","authorities","find","authority","getClientInfoLoader","authInfo","loginInfo","otherGuestResname","auth","loginfo","allLogInfo","hotelname","JSON","stringify","code","masterid","mid","contentype","toolsFileFindResponse","useFileData","filedata","parse","Buffer","from","accgid","gid","chkselfish","clientGetResponse","clientGetResponseData","clientid","accid","isgapp","clientReservnoResponse","ISPORTAL","totalpax","totalchd","window","location","href","BASE_URL","langshort","refUrlDec","decodeURIComponent","push","handleKeyLogin","keyCode","preventDefault","gridContainer","gridItem","wrapper","buttonProgress","getTabIndex","newValue","getIndex","handleChangeTab","getLoginType","renderLoginComponent","textFieldUserPortal","textFieldDestinationPortal","root","tabsRootUserPortal","indicator","tabsIndicatorUserPortal","tabsIndicator","map","loginCompenent","loginTab","paddingTop","autoComplete","date","textAlign","formControlLabel","checkboxUserPortal","checkboxDestinationPortal","checkboxLabel","checkboxLabelDestinationPortal","loginButton","loginButtonUserPortal","string","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { resetState, setToState, updateState } from 'state/actions'\nimport styles from './style/LoginComponent.style'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WebCmsGlobal from 'components/webcms-global'\nimport { useOrestAction } from 'model/orest'\nimport { AuthLogin, UseOrest } from '@webcms/orest'\nimport moment from 'moment'\nimport { DatePicker, LocalizationProvider, MobileDatePicker } from '@material-ui/pickers'\nimport MomentAdapter from '@date-io/moment'\nimport {\n    Button,\n    Checkbox,\n    CircularProgress,\n    FormControlLabel,\n    Grid,\n    Tab,\n    Tabs,\n    TextField,\n    Typography,\n} from '@material-ui/core'\nimport { Email, Person, Phone, Room, RoomService } from '@material-ui/icons'\nimport {\n    CONTENTYPE,\n    FILETYPE,\n    LOCAL_STORAGE_EMAIL,\n    LOCAL_STORAGE_OREST_HOTELNAME_TEXT,\n    LOCAL_STORAGE_OREST_HOTELREFNO_TEXT,\n    LOCAL_STORAGE_OREST_TOKEN_TEXT,\n    LOCAL_STORAGE_PHONE_NUMBER,\n    LOCAL_STORAGE_REMEMBER_ME,\n    LOCAL_STORAGE_WEBCMS_COLUMNS_SETTINGS,\n    mobileTelNoFormat,\n} from 'model/orest/constants'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport Router, { useRouter } from 'next/router'\nimport PhoneInput from '../../@webcms-ui/core/phone-input'\nimport Update from 'components/guest/account/Client/Update'\nimport GuestSelection from 'components/guest/account/Details/GuestSelection'\nimport { useHotelInfoAction } from 'model/orest/components/ChangeHotel/redux_store'\nimport { useSnackbar } from 'notistack'\nimport clsx from 'clsx'\nimport Alert from '@material-ui/lab/Alert'\nimport { defaultLocale } from 'lib/translations/config'\nimport { objectTransliterate } from '@webcms-globals/helpers'\nimport utfTransliteration from '../../@webcms-globals/utf-transliteration'\n\nconst useStyles = makeStyles(styles)\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    const classes = useStyles()\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            className={classes.tabPanel}\n            {...other}\n        >\n            {value === index && <React.Fragment>{children}</React.Fragment>}\n        </Typography>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `scrollable-auto-tab-${index}`,\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    }\n}\n\nconst urlFixer = (baseUrl, retUrl, lang) => {\n    let isLang = !!lang\n    if (isLang) {\n        let useUrl = new URL(baseUrl + retUrl.replace('/', ''))\n        useUrl.searchParams.delete('lang')\n        useUrl = useUrl.toString()\n        useUrl = '/' + useUrl.replace(baseUrl, '')\n        return useUrl + `${useUrl.includes('?') ? '&' : '?'}lang=${lang}`\n    } else {\n        return retUrl\n    }\n}\n\nconst LoginComponent = (props) => {\n\n    const { GENERAL_SETTINGS, locale } = useContext(WebCmsGlobal)\n        , { t } = useTranslation()\n        , { transliteration } = utfTransliteration()\n        , router = useRouter()\n        , { state, locationName, redirectUrl, isOnlyEmail, isUserPortalLogin, isEmpPortal, updateState, isCloudWikiLogin, setWikiLoginDialog, isLoginWrapper, noQuery, setToState, getEmail } = props\n        , emailParam = !noQuery && router.query.email || ''\n        , passParam = !noQuery && router.query.pass || ''\n        , refUrlParam = router.query.refurl\n        , isKiosk = router.query.kiosk === 'true'\n        , { enqueueSnackbar } = useSnackbar()\n\n    //redux\n    const { setOrestState, setOrestUserInfo, deleteOrestCurrentUserInfo } = useOrestAction()\n        , { setHotelRefNo, setHotelName, setHotelRefNoIsInitializing, updateLicenceMenuStatus  } = useHotelInfoAction()\n\n    //state\n    const [username, setUsername] = useState(emailParam || '')\n        , [password, setPassword] = useState(passParam || '')\n        , [birthDate, setBirthDate] = useState(null)\n        , [isLoggingIn, setIsLoggingIn] = useState(false)\n        , [tabValue, setTabValue] = useState(0)\n        , [isPrevControl, setIsPrevControl] = useState(false)\n        , [getAuthInfo, setAuthInfo] = useState({})\n        , [getLoginInfo, setLoginInfo] = useState({})\n        , [isEmail, setIsEmail] = useState(true)\n        , [isPhoneNumber, setIsPhoneNumber] = useState(false)\n        , [rememberMe, setRememberMe] = useState(false)\n        , [useGuestSelection, setUseGuestSelection] = useState({\n        isVisible: false,\n        isLoading: false,\n        data: false\n    })\n\n    //settings\n    const allowedRoles = ['6500315', '6500300', '6500310']\n        , colorObject = {\n        backgroundColor: isUserPortalLogin ? '#063E8D' : isEmpPortal ? '#064E42' : 'inherit',\n        hoverColor: isUserPortalLogin ? 'rgb(6, 62, 141, 0.8)' : isEmpPortal ? '#4E8179' : 'inherit',\n        borderColor: isUserPortalLogin ? '#063E8D' : isEmpPortal ? '#064E42' : 'inherit',\n        labelColor: isUserPortalLogin ? '#063E8D' : isEmpPortal ? '#064E42' : 'inherit',\n        checkboxColor: isUserPortalLogin ? '#4666B0' : isEmpPortal ? '#4E8179' : 'inherit',\n    }\n    , classes = useStyles(colorObject)\n\n    useEffect(() => {\n        if (emailParam && passParam) {\n            handleClickLogin()\n        }\n        const localRememberMe = localStorage.getItem(LOCAL_STORAGE_REMEMBER_ME) ?\n            localStorage.getItem(LOCAL_STORAGE_REMEMBER_ME) !== 'false' : false\n        const localUsername = localStorage.getItem(LOCAL_STORAGE_EMAIL) ?\n            localStorage.getItem(LOCAL_STORAGE_EMAIL) : \"\"\n        const localPhoneNumber = localStorage.getItem(LOCAL_STORAGE_PHONE_NUMBER) ?\n            localStorage.getItem(LOCAL_STORAGE_PHONE_NUMBER) : \"\"\n        if(localRememberMe && localRememberMe !== false) {\n            if(isEmail) {\n                setUsername(localUsername)\n                setRememberMe(localRememberMe)\n            } else if(isPhoneNumber) {\n                setUsername(localPhoneNumber)\n                setRememberMe(localRememberMe)\n            }\n        }\n\n        deleteOrestCurrentUserInfo()\n    }, [isEmail])\n\n    useEffect(() => {\n        typeof getEmail === 'function' && getEmail(username)\n    }, [username])\n    \n    const handleOnChangeCheckBox = (event) => {\n        setRememberMe(event.target.checked);\n    }\n\n    const handleCheckPrv = (client) =>{\n        if(locationName === \"guest\"){\n            return client && client.hasdatapolicy === true && client.haspref === true\n        }else if(locationName === \"survey\"){\n            return client && client.hasdatapolicy === true\n        }else {\n            return true\n        }\n    }\n\n    const handleUsernameChange = (e, type) => {\n        let value\n        if(type === 'phone') {\n            value = e\n        }else{\n            value = transliteration(e.target.value)\n        }\n\n        setUsername(value)\n    }\n\n    const handlePasswordChange = (e) => {\n        setPassword(e.target.value)\n    }\n\n    const handleBirthChange = (e) => {\n        setBirthDate(e)\n        setPassword(moment(e).locale(defaultLocale).format('DDMMYYYY'))\n    }\n\n    const checkLicenceMenuStatus = (infoAuth, infoLogin) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'info/hotel',\n            token: infoAuth.access_token,\n            params: {\n                keyval: infoLogin.hotelrefno,\n            },\n        }).then((infoHotelResponse) => {\n            if (!infoHotelResponse.data.data.ischain) {\n                updateLicenceMenuStatus(true)\n                localStorage.setItem('licenceMenuStatus', 'true')\n                return true\n            } else {\n                updateLicenceMenuStatus(false)\n                localStorage.setItem('licenceMenuStatus', 'false')\n                return true\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const loginOptions = {\n        hasemail: GENERAL_SETTINGS.hotelSettings?.hasemail || false,\n        hasreserv: GENERAL_SETTINGS.hotelSettings?.hasreserv || false,\n        hastel: GENERAL_SETTINGS.hotelSettings?.hastel || false,\n        hasroom: GENERAL_SETTINGS.hotelSettings?.hasroom || false,\n        haslastname: GENERAL_SETTINGS.hotelSettings?.haslastname || false\n    }\n\n    const loginTypeCodeList = {\n        room: 'ROOM',\n        reservation: 'RESERVATION',\n        email: 'EMAIL',\n        tel: 'TEL',\n        lastname: 'LASTNAME',\n    }\n\n    const loginTypeOrderList = {\n        room: 1,\n        reservation: GENERAL_SETTINGS.hotelSettings?.loginwithci ? -1 : 2,\n        email: emailParam && -99 || 3,\n        tel: 4,\n        lastname: 5,\n    }\n\n    const loginComponentTypeList = [\n        {\n            label: t('str_room') + '#',\n            icon: <Room />,\n            order: loginTypeOrderList.room,\n            isHide: ((!loginOptions.hasroom) || isUserPortalLogin || isEmpPortal) || false,\n            loginType: 'roomno',\n            loginTypeCode: loginTypeCodeList.room\n        },\n        {\n            label: t('str_reservation') + '#',\n            icon: <RoomService />,\n            order: loginTypeOrderList.reservation,\n            isHide: ((!loginOptions.hasreserv) || isUserPortalLogin || isEmpPortal) || false,\n            loginType: 'refcode',\n            loginTypeCode: loginTypeCodeList.reservation\n        },\n        {\n            label: t('str_email'),\n            icon: <Email />,\n            order: loginTypeOrderList.email,\n            isHide: (!loginOptions.hasemail) || false,\n            loginType: 'email',\n            loginTypeCode: loginTypeCodeList.email\n        },\n        {\n            label: t('str_phone'),\n            icon: <Phone />,\n            order: loginTypeOrderList.tel,\n            isHide: (!loginOptions.hastel) || isUserPortalLogin || isEmpPortal || false,\n            loginType: 'mobile',\n            loginTypeCode: loginTypeCodeList.tel\n        },\n        {\n            label: t('str_lastName'),\n            icon: <Person />,\n            order: loginTypeOrderList.lastname,\n            isHide: ((!loginOptions.haslastname) || isUserPortalLogin || isEmpPortal) || false,\n            loginType: 'refcode',\n            loginTypeCode: loginTypeCodeList.lastname\n        }\n    ]\n\n    const [loginTypeSelect, setLoginTypeSelect] = useState(emailParam && 'email' || loginComponentTypeList.sort((a, b) => a.order - b.order).filter(item => !item.isHide)[0]?.loginType || false)\n\n    if(!loginTypeSelect){\n        return (\n            <Alert variant=\"outlined\" severity=\"warning\">\n                {t('str_validLoginTypeDoesNotExist')}\n            </Alert>\n        )\n    }\n\n    const doAuthLogin = (authData) => {\n        return AuthLogin({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            data: authData,\n        }).then((authLoginResponse) => {\n            if (authLoginResponse?.data) {\n                return authLoginResponse\n            } else {\n                return authLoginResponse\n            }\n        }).catch((error) => {\n            return error\n        })\n    }\n\n    const authStatusAllowed = (statusCode) => {\n        return statusCode === 200\n    }\n\n    const showAuthRelatedErrorMessage = (infoAuth) => {\n        if (infoAuth.status === 400) {\n            setIsLoggingIn(false)\n            enqueueSnackbar('Username or Password Wrong!', { variant: 'error' })\n        } else if (infoAuth.status === 403) {\n            setIsLoggingIn(false)\n            enqueueSnackbar('You blocked! Try again in ' + infoAuth.data.blockdurationmin + ' minute(s)', { variant: 'error' })\n        } else if (infoAuth.status === 500) {\n            setIsLoggingIn(false)\n            enqueueSnackbar(t('str_checkCredentials'), { variant: 'error' })\n        } else if (infoAuth.status === 0) {\n            setIsLoggingIn(false)\n            enqueueSnackbar('No internet connection!', { variant: 'error' })\n        } else {\n            setIsLoggingIn(false)\n            enqueueSnackbar('Login Error!', { variant: 'error' })\n        }\n    }\n\n    const useLoginInfo = (infoAuth, hotelRefNo) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'info/login',\n            token: infoAuth.data.access_token,\n            params: {\n                hotelrefno: hotelRefNo,\n            }\n        }).then((infoLoginResponse) => {\n            if (infoLoginResponse?.data?.data) {\n                return infoLoginResponse.data.data\n            } else {\n                return false\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const useClientLoginId = ({ infoAuth, refCode, birthDate, hotelRefNo }) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'client/loginid',\n            method: 'PUT',\n            token: infoAuth.data.access_token,\n            params: {\n                refcode: refCode,\n                birthdate: birthDate,\n                hotelrefno: hotelRefNo,\n            },\n        }).then((clientLoginIdResponse) => {\n            return clientLoginIdResponse.status === 200 && clientLoginIdResponse?.data?.data\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const useReservatClientList = ({ infoAuth, reservNo }) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'reservat/client/list',\n            token: infoAuth.data.access_token,\n            params: {\n                field: 'reservno',\n                text: reservNo,\n                sort: 'paxno',\n                allhotels: true\n            }\n        }).then((reservatClientListResponse) => {\n            return reservatClientListResponse.status === 200 && reservatClientListResponse?.data?.data.length > 1 && reservatClientListResponse?.data?.data\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const getLoginTypeInfo = () => {\n        return loginComponentTypeList.sort((a, b) => a.order - b.order).filter(item => !item.isHide)[tabValue]\n    }\n\n    const useAuthData = () => {\n        let authData = {\n            grant_type: 'password',\n            client_id: 'orestClient',\n            client_secret: 'top_secret',\n            username: username,\n            password: password,\n            hotelrefno: GENERAL_SETTINGS.useHotelRefno,\n        }\n\n        if (state.changeHotelRefno) {\n            authData.hotelrefno = state.changeHotelRefno\n        }\n\n        if (loginTypeSelect !== 'email') {\n            authData.logintype = loginTypeSelect\n        }\n\n        if (loginTypeSelect === 'mobile') {\n            authData.username = mobileTelNoFormat(authData.username)\n        }\n\n        if (isOnlyEmail) {\n            delete authData.logintype\n        }\n\n        return authData\n    }\n\n    const handleClickLogin = async () => {\n        setIsLoggingIn(true)\n        setHotelRefNoIsInitializing(true)\n\n        const authData = useAuthData()\n        const infoAuth = await doAuthLogin(authData)\n        setAuthInfo(infoAuth.data)\n\n        if (!authStatusAllowed(infoAuth.status)) {\n            showAuthRelatedErrorMessage(infoAuth.status)\n            return false\n        }\n\n        const infoLogin = await useLoginInfo(infoAuth, authData.hotelrefno)\n        setLoginInfo(infoLogin)\n\n        if (getLoginTypeInfo().loginTypeCode === loginTypeCodeList.lastname) {\n            const infoClientLoginId = await useClientLoginId({\n                infoAuth: infoAuth,\n                refCode: authData.username,\n                birthDate: moment(birthDate).locale(defaultLocale).format('YYYY-MM-DD'),\n                hotelRefNo: authData.hotelrefno,\n            })\n\n            if (infoClientLoginId.ismulti && infoClientLoginId.reservno) {\n                const infoReservatClientList = await useReservatClientList({\n                    infoAuth: infoAuth,\n                    reservNo: infoClientLoginId.reservno,\n                })\n\n                if (infoReservatClientList) {\n                    setUseGuestSelection({ isVisible: true, data: infoReservatClientList })\n                    return true\n                }\n            }\n        }\n\n        setOrestState(['isLoginWithOtherGuest'], false)\n        setIsLoggingIn(false)\n        if (locationName === 'guest' && !allowedRoles.includes(infoLogin.roletype)) {\n            enqueueSnackbar(t('str_yourLoggedInUserRoleIsInvalid'), { variant: 'warning' })\n            return true\n        }\n\n        if (!state.profile.loadGuest) {\n            setToState('guest', ['profile', 'loadGuest'], true)\n        }\n\n        if (rememberMe) {\n            localStorage.setItem(LOCAL_STORAGE_REMEMBER_ME, rememberMe.toString())\n            localStorage.setItem(LOCAL_STORAGE_EMAIL, username)\n        } else {\n            localStorage.setItem(LOCAL_STORAGE_REMEMBER_ME, rememberMe.toString())\n            localStorage.removeItem(LOCAL_STORAGE_EMAIL)\n        }\n\n        if (!isKiosk && !handleCheckPrv(infoLogin) && infoLogin.authorities.find(item => item.authority === 'CLIENT')) {\n            setIsPrevControl(true)\n        } else {\n            await getClientInfoLoader(infoAuth.data, infoLogin)\n            await checkLicenceMenuStatus(infoAuth.data, infoLogin)\n        }\n\n        if (isCloudWikiLogin) {\n            setWikiLoginDialog(false)\n        }\n    }\n\n    const getClientInfoLoader = async (authInfo, loginInfo, otherGuestResname) => {\n        const auth = authInfo || getAuthInfo\n        const loginfo = loginInfo || getLoginInfo\n        const allLogInfo = { auth, loginfo, otherGuestResname }\n\n        localStorage.setItem(LOCAL_STORAGE_OREST_HOTELREFNO_TEXT, loginfo.hotelrefno)\n        localStorage.setItem(LOCAL_STORAGE_OREST_HOTELNAME_TEXT, loginfo.hotelname)\n        localStorage.setItem(LOCAL_STORAGE_OREST_TOKEN_TEXT, auth && loginfo && `{\"auth\": ${JSON.stringify(auth)},\"loginfo\": ${JSON.stringify(loginfo)} ${otherGuestResname ? `,\"otherGuestResname\": ${JSON.stringify(otherGuestResname)}}` : '}'}` || null)\n\n        await UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'tools/file/find',\n            token: auth.access_token,\n            params: {\n                code: LOCAL_STORAGE_WEBCMS_COLUMNS_SETTINGS,\n                masterid: loginfo.mid,\n                contentype: CONTENTYPE.JSON,\n            },\n        }).then((toolsFileFindResponse) => {\n            let useFileData = toolsFileFindResponse?.data?.data?.filedata || false\n            if (toolsFileFindResponse.status === 200 && useFileData) {\n                useFileData = JSON.parse(Buffer.from(useFileData, 'base64').toString('utf-8'))\n                localStorage.setItem(LOCAL_STORAGE_WEBCMS_COLUMNS_SETTINGS, JSON.stringify(useFileData))\n            }\n        })\n\n        setHotelRefNoIsInitializing(false)\n        setHotelName(loginfo.hotelname)\n        setHotelRefNo(loginfo.hotelrefno)\n\n        if (loginfo.roletype === '6500310' && loginfo?.accgid) {\n            await UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'client/view/get',\n                token: auth.access_token,\n                params: {\n                    gid: loginfo.accgid,\n                    chkselfish: false,\n                    allhotels: true,\n                },\n            }).then((clientGetResponse) => {\n                if (clientGetResponse.status === 200 && clientGetResponse?.data?.data) {\n                    const clientGetResponseData = clientGetResponse.data.data\n                    setOrestState(['client'], objectTransliterate(clientGetResponseData, ['firstname', 'lastname', 'address1', 'note']))\n                }\n            })\n\n            await UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'client/reservno',\n                token: auth.access_token,\n                params: {\n                    clientid: loginfo.accid,\n                    isgapp: true,\n                },\n            }).then((clientReservnoResponse) => {\n                if (clientReservnoResponse?.data?.data) {\n                    if (!GENERAL_SETTINGS.ISPORTAL) {\n                        updateState('guest', 'changeHotelRefno', clientReservnoResponse.data.data.hotelrefno)\n                        updateState('guest', 'changeHotelName', clientReservnoResponse.data.data.hotelname)\n                    }\n                    updateState('guest', 'clientReservation', clientReservnoResponse.data.data)\n                    updateState('guest', 'totalPax', clientReservnoResponse.data.data.totalpax || 1)\n                    updateState('guest', 'totalChd', clientReservnoResponse.data.data.totalchd || 0)\n                } else {\n                    updateState('guest', 'clientReservation', null)\n                }\n            }).catch(() => {\n                updateState('guest', 'clientReservation', null)\n            })\n        }\n\n        setOrestUserInfo(allLogInfo)\n        enqueueSnackbar(t('str_loggedIn'), { variant: 'success' })\n\n        if (redirectUrl) {\n            if (redirectUrl.includes('/hup')) {\n                window.location.href = urlFixer(GENERAL_SETTINGS.BASE_URL, redirectUrl, loginfo.langshort)\n            } else {\n                if (refUrlParam) {\n                    let refUrlDec = decodeURIComponent(refUrlParam)\n                    if (refUrlParam.includes('eventlocid')) {\n                        Router.push(urlFixer(GENERAL_SETTINGS.BASE_URL, refUrlDec, loginfo.langshort))\n                    } else {\n                        if (!refUrlDec.includes('?lang')) {\n                            if (refUrlDec.includes('&')) {\n                                Router.push(urlFixer(GENERAL_SETTINGS.BASE_URL, refUrlDec, loginfo.langshort))\n                            } else {\n                                Router.push(urlFixer(GENERAL_SETTINGS.BASE_URL, refUrlDec, loginfo.langshort))\n                            }\n                        } else {\n                            Router.push(refUrlDec)\n                        }\n                    }\n                } else {\n                    Router.push(urlFixer(GENERAL_SETTINGS.BASE_URL, redirectUrl, loginfo.langshort))\n                }\n            }\n        }\n    }\n\n    const handleKeyLogin = async (event) => {\n        if (event.keyCode === 13) {\n            await handleClickLogin()\n            event.preventDefault()\n        }\n    }\n\n    if (isOnlyEmail) {\n        return (\n            <Grid container className={classes.gridContainer} spacing={2}>\n                <Grid item xs={12} className={classes.gridItem}>\n                    <TextField\n                        disabled={isLoggingIn}\n                        variant='filled'\n                        required\n                        fullWidth\n                        id='username'\n                        name='username'\n                        label={t('str_email')}\n                        value={username}\n                        onChange={handleUsernameChange}\n                    />\n                </Grid>\n                <Grid item xs={12} className={classes.gridItem}>\n                    <TextField\n                        disabled={isLoggingIn}\n                        onKeyDown={(e) => handleKeyLogin(e)}\n                        variant='filled'\n                        required\n                        fullWidth\n                        id='userpassword'\n                        name='userpassword'\n                        type='password'\n                        label={t('str_password')}\n                        value={password}\n                        onChange={handlePasswordChange}\n                    />\n                </Grid>\n                <Grid item xs={12} className={classes.gridItem}>\n                    <div className={classes.wrapper}>\n                        <Button\n                            onClick={handleClickLogin}\n                            disabled={isLoggingIn}\n                            fullWidth\n                            variant='contained'\n                            color='primary'\n                            size='large'\n                            disableElevation\n                        >\n                            {t('str_login')}\n                            {isLoggingIn && <CircularProgress size={24} className={classes.buttonProgress} />}\n                        </Button>\n                    </div>\n                </Grid>\n            </Grid>\n        )\n    }\n\n    const getTabIndex = (newValue) => {\n        let getIndex = loginComponentTypeList.filter(item => !item.isHide)\n        return getIndex[newValue]?.order || loginComponentTypeList[0].order\n    }\n\n    const handleChangeTab = (event, newValue) => {\n        const getIndex = getTabIndex(newValue)\n        if (getIndex === loginTypeOrderList.email) {\n            setIsEmail(true)\n            setIsPhoneNumber(false)\n        } else if (getIndex === loginTypeOrderList.tel) {\n            setIsEmail(false)\n            setIsPhoneNumber(true)\n        } else {\n            setIsEmail(false)\n            setIsPhoneNumber(false)\n        }\n\n        const getLoginType = loginComponentTypeList.filter(item => item.order === getIndex)[0]?.loginType || false\n        setLoginTypeSelect(getLoginType)\n        setTabValue(newValue)\n    }\n\n    const renderLoginComponent = (loginTypeCode) => {\n        switch (loginTypeCode) {\n            case loginTypeCodeList.room:\n                return (\n                    <TextField\n                        disabled={isLoggingIn}\n                        className={clsx('', {\n                            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n                            [classes.textFieldDestinationPortal]: isLoginWrapper,\n                        })}\n                        variant={!isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined'}\n                        required\n                        fullWidth\n                        id='username'\n                        name='username'\n                        label={t('str_roomNo')}\n                        value={username}\n                        onKeyUp={handleUsernameChange}\n                        onKeyDown={handleUsernameChange}\n                        onChange={handleUsernameChange}\n                    />\n                )\n            case loginTypeCodeList.reservation:\n                return (\n                    <TextField\n                        disabled={isLoggingIn}\n                        className={clsx('', {\n                            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n                            [classes.textFieldDestinationPortal]: isLoginWrapper,\n                        })}\n                        color={'primary'}\n                        variant={!isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined'}\n                        required\n                        fullWidth\n                        id='username'\n                        name='username'\n                        label={t('str_resNo')}\n                        value={username}\n                        onKeyUp={handleUsernameChange}\n                        onKeyDown={handleUsernameChange}\n                        onChange={handleUsernameChange}\n                    />\n                )\n            case loginTypeCodeList.email:\n                return (\n                    <TextField\n                        disabled={isLoggingIn}\n                        className={clsx('', {\n                            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n                            [classes.textFieldDestinationPortal]: isLoginWrapper,\n                        })}\n                        color={'primary'}\n                        variant={!isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined'}\n                        required\n                        fullWidth\n                        id='username'\n                        name='username'\n                        label={t('str_email')}\n                        value={username}\n                        onKeyUp={handleUsernameChange}\n                        onKeyDown={handleUsernameChange}\n                        onChange={handleUsernameChange}\n                    />\n                )\n            case loginTypeCodeList.tel:\n                return (\n                    <PhoneInput\n                        disabled={isLoggingIn}\n                        className={clsx('', {\n                            [classes.textFieldUserPortal]: isUserPortalLogin,\n                            [classes.textFieldDestinationPortal]: isLoginWrapper,\n                        })}\n                        defaultCountry={locale === 'en' ? 'us' : locale}\n                        preferredCountries={[\n                            'it',\n                            'ie',\n                            'de',\n                            'fr',\n                            'es',\n                            'gb',\n                        ]}\n                        regions={[\n                            'america',\n                            'europe',\n                            'asia',\n                            'oceania',\n                            'africa',\n                        ]}\n                        variant={!isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined'}\n                        id='username'\n                        name='username'\n                        label={t('str_phone')}\n                        fullWidth\n                        value={username}\n                        onChange={e => handleUsernameChange(e, 'phone')}\n                    />\n                )\n            case loginTypeCodeList.lastname:\n                return (\n                    <TextField\n                        disabled={isLoggingIn}\n                        className={clsx('', {\n                            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n                            [classes.textFieldDestinationPortal]: isLoginWrapper,\n                        })}\n                        color={'primary'}\n                        variant={!isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? 'filled' : 'outlined'}\n                        required\n                        fullWidth\n                        id='lastname'\n                        name='lastname'\n                        label={t('str_lastName')}\n                        value={username}\n                        onKeyUp={handleUsernameChange}\n                        onKeyDown={handleUsernameChange}\n                        onChange={handleUsernameChange}\n                    />\n                )\n        }\n\n    }\n\n    return (\n        <Grid container className={classes.gridContainer} spacing={2}>\n            <Grid item xs={12} className={classes.gridItem}>\n                {(isPrevControl && getAuthInfo && locationName) ? (\n                    <Update\n                        open={isPrevControl}\n                        auth={getAuthInfo}\n                        logInfo={getLoginInfo}\n                        locationName={locationName}\n                        onCallback={(auth, loginInfo) => getClientInfoLoader(auth, loginInfo, false)}\n                    />\n                ) : null}\n                {useGuestSelection.isVisible ? (\n                    <GuestSelection\n                        open={useGuestSelection.isVisible}\n                        isLoading={useGuestSelection.isLoading}\n                        data={useGuestSelection.data || []}\n                        auth={getAuthInfo}\n                        logInfo={getLoginInfo}\n                        onLoginCallback={(auth, loginInfo, otherGuestResname) => getClientInfoLoader(auth, loginInfo, otherGuestResname)}\n                    />\n                ): null}\n                <Tabs\n                    classes={{\n                        root: isUserPortalLogin || isEmpPortal  ? classes.tabsRootUserPortal : \"\",\n                        indicator: isUserPortalLogin || isEmpPortal ?  classes.tabsIndicatorUserPortal: classes.tabsIndicator\n                    }}\n                    variant={isUserPortalLogin || isEmpPortal ? \"standard\" : \"fullWidth\"}\n                    value={tabValue}\n                    onChange={handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                >\n                    {loginComponentTypeList.sort((a, b) => a.order - b.order).filter(item => !item.isHide).map((loginCompenent, index)=> {\n                        return (\n                            <Tab key={index} className={classes.loginTab} label={loginCompenent.label} icon={loginCompenent.icon} {...a11yProps(index)}/>\n                        )\n                    })}\n                </Tabs>\n                {loginComponentTypeList.sort((a, b) => a.order - b.order).filter(item => !item.isHide).map((loginCompenent, index)=> {\n                    return  (\n                        <TabPanel value={tabValue} index={index} key={index}>\n                            {isUserPortalLogin || isLoginWrapper || isEmpPortal ? <div style={{ paddingTop: '16px' }} /> : null}\n                            {renderLoginComponent(loginCompenent.loginTypeCode)}\n                        </TabPanel>\n                    )\n                })}\n            </Grid>\n            <Grid item xs={12} className={classes.gridItem}>\n                {(getTabIndex(tabValue) === loginTypeOrderList.email) && (\n                    <TextField\n                        disabled={isLoggingIn}\n                        className={clsx(\"\", {\n                            [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n                            [classes.textFieldDestinationPortal]: isLoginWrapper,\n                        })}\n                        variant={!isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? \"filled\" : \"outlined\"}\n                        required\n                        fullWidth\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        label={t('str_password')}\n                        value={password}\n                        inputProps={{\n                            autoComplete: 'new-password',\n                        }}\n                        onKeyDown={(e) => handleKeyLogin(e)}\n                        onChange={handlePasswordChange}\n                    />\n                )}\n                {(getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.tel || getTabIndex(tabValue) === loginTypeOrderList.lastname) && (\n                    <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                        {isKiosk ? (\n                            <MobileDatePicker\n                                allowKeyboardControl\n                                disabled={isLoggingIn}\n                                autoOk\n                                id=\"birthdate\"\n                                name=\"birthdate\"\n                                label={((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.lastname) && GENERAL_SETTINGS.hotelSettings?.loginwithci) ? t('str_checkinDate') : t('str_birthDate')}\n                                inputFormat=\"DD/MM/YYYY\"\n                                disableFuture={(!((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && GENERAL_SETTINGS.hotelSettings?.loginwithci))}\n                                openTo={(((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && GENERAL_SETTINGS.hotelSettings?.loginwithci)) || birthDate ? 'date' : 'year'}\n                                views={(((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && GENERAL_SETTINGS.hotelSettings?.loginwithci)) ? ['date'] : ['year', 'month', 'date']}\n                                value={birthDate}\n                                onChange={(date) => handleBirthChange(date)}\n                                renderInput={(props) => {\n                                    return (\n                                        <TextField\n                                            {...props}\n                                            className={clsx(\"\", {\n                                                [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n                                                [classes.textFieldDestinationPortal]: isLoginWrapper,\n                                            })}\n                                            required\n                                            fullWidth\n                                            variant={!isUserPortalLogin && !isLoginWrapper && !isEmpPortal ? \"filled\" : \"outlined\"}\n                                            helperText={'dd.mm.yyyy'}\n                                        />\n                                    )\n                                }}\n                            />\n                        ): (\n                            <DatePicker\n                                allowKeyboardControl\n                                disabled={isLoggingIn}\n                                autoOk\n                                id=\"birthdate\"\n                                name=\"birthdate\"\n                                label={(((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && GENERAL_SETTINGS.hotelSettings?.loginwithci)) ? t('str_checkinDate') : t('str_birthDate')}\n                                inputFormat=\"DD/MM/YYYY\"\n                                disableFuture={((!((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && GENERAL_SETTINGS.hotelSettings?.loginwithci)))}\n                                openTo={(((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && GENERAL_SETTINGS.hotelSettings?.loginwithci)) || birthDate ? 'date' : 'year'}\n                                views={(((getTabIndex(tabValue) === loginTypeOrderList.reservation || getTabIndex(tabValue) === loginTypeOrderList.room || getTabIndex(tabValue) === loginTypeOrderList.lastname) && GENERAL_SETTINGS.hotelSettings?.loginwithci)) ? ['date'] : ['year', 'month', 'date']}\n                                value={birthDate}\n                                onChange={(date) => handleBirthChange(date)}\n                                renderInput={(props) => {\n                                    return (\n                                        <TextField\n                                            {...props}\n                                            required\n                                            className={clsx(\"\", {\n                                                [classes.textFieldUserPortal]: isUserPortalLogin || isEmpPortal,\n                                                [classes.textFieldDestinationPortal]: isLoginWrapper,\n                                            })}\n                                            fullWidth\n                                            variant={!isUserPortalLogin && !isLoginWrapper && !isEmpPortal? \"filled\" : \"outlined\"}\n                                            helperText={'dd.mm.yyyy'}\n                                        />\n                                    )\n                                }}\n                            />\n                        )}\n                    </LocalizationProvider>\n                )}\n            </Grid>\n            {isUserPortalLogin || isLoginWrapper || isEmpPortal ? (\n                    <Grid item xs={12}>\n                        <div style={{textAlign:\"left\"}}>\n                            <FormControlLabel\n                                className={classes.formControlLabel}\n                                checked={rememberMe}\n                                onChange={(e) => handleOnChangeCheckBox(e)}\n                                control={\n                                    <Checkbox\n                                        className={clsx(\"\", {\n                                            [classes.checkboxUserPortal]: isUserPortalLogin || isEmpPortal,\n                                            [classes.checkboxDestinationPortal]: isLoginWrapper\n                                        })}\n                                        color={\"primary\"}\n                                    />\n                                }\n                                label={\n                                    <Typography\n                                        className={clsx(\"\", {\n                                            [classes.checkboxLabel]: isUserPortalLogin || isEmpPortal,\n                                            [classes.checkboxLabelDestinationPortal]: isLoginWrapper}\n                                        )}\n                                        color={\"primary\"}\n                                    >\n                                        {t(\"str_rememberMe\")}\n                                    </Typography>\n                                }\n                            />\n                        </div>\n                    </Grid>\n                ) : null\n            }\n            <Grid item xs={12} className={classes.gridItem}>\n                <div className={classes.wrapper}>\n                    <Button\n                        className={clsx(classes.loginButton, {\n                            [classes.loginButtonUserPortal]: isUserPortalLogin || isEmpPortal,\n                        })}\n                        onClick={handleClickLogin}\n                        disabled={isLoggingIn}\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size={isUserPortalLogin ? \"medium\" : \"large\"}\n                        disableElevation\n                    >\n                        {t('str_login')}\n                    </Button>\n                    {isLoggingIn && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n            </Grid>\n        </Grid>\n    )\n}\n\nLoginComponent.propTypes = {\n    redirectUrl: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    resetState: () => dispatch(resetState()),\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginComponent)"]},"metadata":{},"sourceType":"module"}