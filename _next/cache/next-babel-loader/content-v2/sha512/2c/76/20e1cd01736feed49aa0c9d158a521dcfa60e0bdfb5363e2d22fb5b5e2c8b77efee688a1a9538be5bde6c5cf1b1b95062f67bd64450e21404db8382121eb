{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/card-type-slider/AddCardSlider.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport WebCmsGlobal from \"../../../../../../webcms-global\";\nimport { Delete, Insert, Patch, UseOrest, ViewList } from \"@webcms/orest\";\nimport { FIELDTYPE, isErrorMsg, OREST_ENDPOINT, OREST_UPLOAD, REQUEST_METHOD_CONST } from \"../../../../../../../model/orest/constants\";\nimport { toast } from \"react-toastify\";\nimport { COLORS, DELETE_SUCCESS, PERCENTAGE_VALUES, SAVED_SUCCESS, UPLOAD_SUCCESS } from \"../../../../constants\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"../../../../../../LoadingSpinner\";\nimport { Button, Card, Container, Divider, IconButton, Paper, Radio, TextField, Typography, Switch, FormControl, RadioGroup, Grid, FormControlLabel } from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport validator from \"validator\";\nimport { DropzoneDialog } from \"material-ui-dropzone\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { PercentageSlider } from \"../../../../../../../model/slider\";\nimport InputColor from \"react-input-color\";\nimport { getSliderImages, patchListSliderImage } from \"../../../../helpers/slider\";\nimport TextEditor from \"../text-editor\";\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport { toSelfName } from './../../../../../../../lib/helpers/useFunction';\nimport moment from \"moment\";\nimport { DatePicker, LocalizationProvider } from \"@material-ui/pickers\";\nimport MomentAdapter from \"@date-io/moment\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  },\n  submit: {\n    marginRight: theme.spacing(3),\n    marginTop: theme.spacing(1),\n    borderRadius: 20,\n    float: \"right\"\n  },\n  disableUpload: {\n    pointerEvents: \"none\",\n    opacity: 0.5\n  },\n  paperBlock: {\n    height: 350,\n    border: `2px solid ${COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary}`,\n    overflow: \"auto\"\n  },\n  disableEvent: {\n    pointerEvents: \"none\",\n    opacity: 0.5\n  },\n  uploadButton: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    borderRadius: 20 // float: 'right'\n\n  },\n  card: {\n    height: 200,\n    width: 300,\n    margin: theme.spacing(1),\n    cursor: \"pointer\"\n  },\n  alignText: {\n    textAlign: \"right\",\n    color: \"red\"\n  },\n  text: {\n    marginTop: 16,\n    fontWeight: \"bold\",\n    fontSize: 15\n  },\n  alignRight: {\n    float: 'right'\n  }\n}));\n\nconst AddCardSlider = props => {\n  var _state$assets, _state$assets$meta, _state$assets2, _state$assets2$colors, _state$assets2$colors2, _state$assets3, _state$assets3$colors, _state$assets3$colors2;\n\n  const {\n    handleSectionComponent\n  } = props;\n  const state = useSelector(state => state.formReducer.pageBuilder);\n  const {\n    0: localState,\n    1: setLocalState\n  } = useState({\n    isRequested: false,\n    openDialog: false,\n    title: '',\n    description: '',\n    selectedIndex: null,\n    hoverIndex: null,\n    showDeleteButton: false,\n    itemCount: 1,\n    sliderID: null,\n    sliderGID: null,\n    sliderImages: [],\n    selectedImage: null,\n    isCta: false,\n    ctaTitle: '',\n    ctaLink: '',\n    cta: '',\n    ctaLinkType: 'external',\n    pageData: [],\n    isOptimizeImages: false,\n    quality: state !== null && state !== void 0 && (_state$assets = state.assets) !== null && _state$assets !== void 0 && (_state$assets$meta = _state$assets.meta) !== null && _state$assets$meta !== void 0 && _state$assets$meta.imageQuality ? state.assets.meta.imageQuality * 100 : 50,\n    textColor: state !== null && state !== void 0 && (_state$assets2 = state.assets) !== null && _state$assets2 !== void 0 && (_state$assets2$colors = _state$assets2.colors) !== null && _state$assets2$colors !== void 0 && (_state$assets2$colors2 = _state$assets2$colors.slider) !== null && _state$assets2$colors2 !== void 0 && _state$assets2$colors2.main ? state.assets.colors.slider.main : '#fff',\n    buttonColor: state !== null && state !== void 0 && (_state$assets3 = state.assets) !== null && _state$assets3 !== void 0 && (_state$assets3$colors = _state$assets3.colors) !== null && _state$assets3$colors !== void 0 && (_state$assets3$colors2 = _state$assets3$colors.button) !== null && _state$assets3$colors2 !== void 0 && _state$assets3$colors2.main ? state.assets.colors.button.main : '#000',\n    isDialogOpen: false,\n    editorValue: '',\n    dialogType: '',\n    expiryDate: moment().format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n  });\n  const {\n    isRequested,\n    openDialog,\n    description,\n    title,\n    selectedIndex,\n    hoverIndex,\n    showDeleteButton,\n    itemCount,\n    sliderID,\n    sliderImages,\n    selectedImage,\n    isCta,\n    ctaLink,\n    ctaTitle,\n    cta,\n    ctaLinkType,\n    pageData,\n    quality,\n    isOptimizeImages,\n    buttonColor,\n    textColor,\n    sliderGID,\n    isDialogOpen,\n    dialogType,\n    editorValue,\n    expiryDate\n  } = localState;\n  const classes = useStyles();\n  const router = useRouter();\n  const companyId = router.query.companyID;\n  const {\n    GENERAL_SETTINGS,\n    token\n  } = useContext(WebCmsGlobal);\n  const authToken = token || router.query.authToken;\n  useEffect(() => {\n    handleSectionComponent && handleSectionComponent({\n      service: \"hcmitemsld\",\n      type: \"card-slider\",\n      gid: sliderGID,\n      textColor: textColor,\n      buttonColor: buttonColor\n    });\n  }, [textColor, buttonColor]); //insert slider record on mount of component\n\n  useEffect(() => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isRequested: true\n    }));\n    Insert({\n      // insert slider\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMSLD,\n      token: authToken,\n      data: {\n        itemid: state.hcmItemId,\n        hotelrefno: Number(companyId)\n      }\n    }).then(res => {\n      var _res$data;\n\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: false\n      }));\n\n      if ((res === null || res === void 0 ? void 0 : res.status) === 200 && res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && _res$data.data) {\n        var _res$data$data3;\n\n        setLocalState(prev => {\n          var _res$data$data, _res$data$data2;\n\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            sliderID: (_res$data$data = res.data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.id,\n            sliderGID: (_res$data$data2 = res.data.data) === null || _res$data$data2 === void 0 ? void 0 : _res$data$data2.gid\n          });\n        });\n        handleSectionComponent({\n          service: \"hcmitemsld\",\n          type: \"card-slider\",\n          gid: (_res$data$data3 = res.data.data) === null || _res$data$data3 === void 0 ? void 0 : _res$data$data3.gid,\n          textColor: textColor,\n          buttonColor: buttonColor\n        });\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }); //getting data from rafile\n\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.RAFILE,\n      token: authToken,\n      params: {\n        hotelrefno: Number(companyId),\n        query: `filetype::WEBPAGE,istemplate::false}`\n      }\n    }).then(res => {\n      var _res$data2;\n\n      if (res.status === 200 && res !== null && res !== void 0 && (_res$data2 = res.data) !== null && _res$data2 !== void 0 && _res$data2.data) {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          pageData: res.data.data\n        }));\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (ctaTitle && ctaLink) {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        cta: `<a target=\"_blank\" href=\"${ctaLink}\" > ${ctaTitle} </a>`\n      }));\n    }\n  }, [ctaTitle, ctaLink]);\n\n  const handleSaveImage = files => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isRequested: true\n    }));\n    let orderNo = itemCount;\n    let requests = files.map(file => {\n      return new Promise(resolve => {\n        asyncUpload(file, orderNo, resolve);\n        orderNo++;\n      });\n    });\n    Promise.all(requests).then(async () => {\n      const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n      sldImages.sort((a, b) => a.orderno > b.orderno ? 1 : -1);\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: false\n      }));\n\n      if (sldImages) {\n        let updatedImages = [];\n        sldImages.map(data => {\n          updatedImages.push(data);\n        });\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          sliderImages: updatedImages,\n          itemCount: updatedImages.length + 1,\n          openDialog: false\n        }));\n        handleSelectedImage(1, updatedImages[0]);\n        toast.success(UPLOAD_SUCCESS, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      } else {\n        toast.warn('Something went wrong while saving image. Please check network tab.', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  const handleDeleteImage = gid => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isRequested: true\n    }));\n    Delete({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMIMG,\n      token: authToken,\n      gid: gid,\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(async res => {\n      if (res.status === 200) {\n        const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n        sldImages.sort((a, b) => a.orderno > b.orderno ? 1 : -1);\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n\n        if (sldImages) {\n          let updatedImages = [];\n          sldImages.map((data, index) => {\n            data.orderno = index + 1;\n            updatedImages.push(data);\n          });\n          let requestPassed = true;\n\n          for (const sldImage of sldImages) {\n            const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {\n              orderno: sldImage.orderno\n            }, {\n              hotelrefno: Number(companyId)\n            }, sldImage.gid);\n            updatedSliderImage ? requestPassed = true : requestPassed = false;\n          }\n\n          if (requestPassed) {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              sliderImages: updatedImages,\n              selectedIndex: 1\n            }));\n            handleSelectedImage(1, updatedImages[0]);\n          } else {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              selectedIndex: null\n            }));\n          }\n\n          toast.success(DELETE_SUCCESS, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      } else {\n        const retErr = isErrorMsg(res);\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  const handleSelectedImage = (index, image) => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      selectedIndex: index,\n      selectedImage: image\n    }));\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMIMG,\n      token: authToken,\n      params: {\n        query: `gid:${image.gid}`,\n        sort: 'orderno',\n        hotelrefno: Number(companyId)\n      }\n    }).then(res => {\n      if ((res === null || res === void 0 ? void 0 : res.status) === 200) {\n        var _res$data3, _res$data3$data;\n\n        if ((res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$data = _res$data3.data) === null || _res$data3$data === void 0 ? void 0 : _res$data3$data.length) > 0) {\n          setLocalState(prev => {\n            var _res$data$data$, _res$data$data$2, _res$data$data$3, _res$data$data$4, _res$data$data$5;\n\n            return _objectSpread(_objectSpread({}, prev), {}, {\n              title: (_res$data$data$ = res.data.data[0]) !== null && _res$data$data$ !== void 0 && _res$data$data$.title ? (_res$data$data$2 = res.data.data[0]) === null || _res$data$data$2 === void 0 ? void 0 : _res$data$data$2.title : '',\n              description: (_res$data$data$3 = res.data.data[0]) !== null && _res$data$data$3 !== void 0 && _res$data$data$3.description ? (_res$data$data$4 = res.data.data[0]) === null || _res$data$data$4 === void 0 ? void 0 : _res$data$data$4.description : '',\n              cta: (_res$data$data$5 = res.data.data[0]) === null || _res$data$data$5 === void 0 ? void 0 : _res$data$data$5.cta\n            });\n          });\n\n          if (res.data.data[0].cta) {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              isCta: true\n            }));\n            const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n            if ((matchs === null || matchs === void 0 ? void 0 : matchs.length) > 0) {\n              const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLink: matchs[0],\n                ctaTitle: cta_title,\n                ctaLinkType: 'external'\n              }));\n            } else {\n              const gid = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('\" >', '').replace('</a>', '').split(' ')[0];\n              const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(gid, '').replace('\" >', '').replace('</a>', '').trim();\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLink: gid,\n                ctaTitle: cta_title,\n                ctaLinkType: 'internal'\n              }));\n            }\n          } else {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              ctaLink: '',\n              ctaTitle: '',\n              isCta: false\n            }));\n          }\n        }\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  const handleUpdateImage = () => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isRequested: true\n    }));\n    Patch({\n      // update image\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMIMG,\n      token: authToken,\n      gid: selectedImage === null || selectedImage === void 0 ? void 0 : selectedImage.gid,\n      params: {\n        hotelrefno: Number(companyId)\n      },\n      data: {\n        title: title,\n        description: description,\n        cta: cta\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n        toast.success(SAVED_SUCCESS, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  const asyncUpload = (file, itemTreated, callback) => {\n    if (state.hcmItemId) {\n      setTimeout(() => {\n        Insert({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG,\n          token: authToken,\n          data: {\n            itemid: state.hcmItemId,\n            imgtype: FIELDTYPE.IMG,\n            orderno: itemTreated,\n            sliderid: sliderID,\n            hotelrefno: Number(companyId),\n            imgquality: quality / 100,\n            imgscale: quality / 100\n          }\n        }).then(r1 => {\n          var _r1$data;\n\n          if (r1.status === 200 && r1 !== null && r1 !== void 0 && (_r1$data = r1.data) !== null && _r1$data !== void 0 && _r1$data.data) {\n            var _r1$data2;\n\n            let updatedImages = [...sliderImages];\n            updatedImages.push(r1 === null || r1 === void 0 ? void 0 : (_r1$data2 = r1.data) === null || _r1$data2 === void 0 ? void 0 : _r1$data2.data);\n            ImageUpload(GENERAL_SETTINGS.OREST_URL, OREST_ENDPOINT.RAFILE, authToken, r1.data.data.mid, file).then(r => {\n              if (r.status === 200) {\n                callback();\n              } else {\n                callback();\n              }\n            });\n          } else {\n            callback();\n          }\n        });\n      }, 100);\n    }\n  };\n\n  const ImageUpload = (apiUrl, endPoint, token, masterID, file) => {\n    const url = apiUrl + '/' + endPoint + OREST_UPLOAD;\n    let binaryData = [];\n    binaryData.push(file);\n    let formData = new FormData();\n    formData.append('file', new Blob(binaryData, {\n      type: file.type\n    }), toSelfName(file.name));\n    const options = {\n      url: url,\n      method: 'post',\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      },\n      params: {\n        orsactive: true,\n        masterid: masterID,\n        hotelrefno: companyId,\n        quality: quality / 100,\n        scale: quality / 100\n      },\n      data: formData\n    };\n    return axios(options).then(response => {\n      return response;\n    }).catch(error => {\n      return error.response || {\n        status: 0\n      };\n    });\n  };\n\n  const handleUpdateOrderNo = async (gid, orderNo, orderType) => {\n    // update order no of slider images\n    if (orderNo <= 0 || orderNo > sliderImages.length) {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        selectedIndex: null\n      }));\n    } else {\n      const tmpSliderImages = [...sliderImages];\n\n      if (orderType === 'increment') {\n        const tmp = tmpSliderImages[orderNo - 1];\n        tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo - 2];\n        tmpSliderImages[orderNo - 2] = tmp;\n      } else {\n        const tmp = tmpSliderImages[orderNo - 1];\n        tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo];\n        tmpSliderImages[orderNo] = tmp;\n      }\n\n      let updatedImages = [];\n      tmpSliderImages.map((data, index) => {\n        data.orderno = index + 1;\n        updatedImages.push(data);\n      });\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: true\n      }));\n      let requestPassed = true;\n\n      for (const sldImage of tmpSliderImages) {\n        const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {\n          orderno: sldImage.orderno\n        }, {\n          hotelrefno: Number(companyId)\n        }, sldImage.gid);\n        updatedSliderImage ? requestPassed = true : requestPassed = false;\n      }\n\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: false\n      }));\n\n      if (requestPassed) {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          sliderImages: updatedImages,\n          itemCount: (updatedImages === null || updatedImages === void 0 ? void 0 : updatedImages.length) + 1\n        }));\n        toast.success('Order No Updated Successfully', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n        handleSelectedImage(1, tmpSliderImages[0]);\n      } else {\n        toast.error('Something went wrong while updating order no. Please check network tab.', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }\n  };\n\n  const handleImageQualityChange = value => {\n    if (value >= 10 && value <= 90 && value % 10 === 0) {\n      if (sliderImages.length) {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: true\n        }));\n        const gids = sliderImages.map(image => {\n          return {\n            gid: image.gid,\n            imgquality: value / 100,\n            imgscale: value / 100\n          };\n        });\n        UseOrest({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n          token: authToken,\n          method: REQUEST_METHOD_CONST.PATCH,\n          data: gids,\n          params: {\n            hotelrefno: Number(companyId)\n          }\n        }).then(res => {\n          var _res$data4;\n\n          if ((res === null || res === void 0 ? void 0 : res.status) === 200 && res !== null && res !== void 0 && (_res$data4 = res.data) !== null && _res$data4 !== void 0 && _res$data4.data) {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              isRequested: false,\n              quality: value\n            }));\n          } else {\n            const retErr = isErrorMsg(res);\n            toast.error(retErr.errorMsg, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        });\n      } else {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          quality: value\n        }));\n      }\n    }\n  };\n\n  const handleTextEditorValue = value => {\n    if (dialogType === 'title') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        title: value\n      }));\n    }\n\n    if (dialogType === 'description') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        description: value\n      }));\n    }\n\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isDialogOpen: false,\n      dialogType: '',\n      editorValue: ''\n    }));\n  };\n\n  const handleCancelEditor = () => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isDialogOpen: false,\n      dialogType: '',\n      editorValue: ''\n    }));\n  };\n\n  const handleDialogOpen = type => {\n    if (type === 'title') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isDialogOpen: true,\n        dialogType: type,\n        editorValue: title\n      }));\n    }\n\n    if (type === 'description') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isDialogOpen: true,\n        dialogType: type,\n        editorValue: description\n      }));\n    }\n  };\n\n  const handleChangeDatePicker = date => {\n    const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE);\n    setLocalState(_objectSpread(_objectSpread({}, localState), {}, {\n      expiryDate: dateValue\n    }));\n\n    if (dateValue !== 'Invalid date') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: true\n      }));\n      Patch({\n        // update slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        gid: sliderGID,\n        params: {\n          hotelrefno: Number(companyId)\n        },\n        data: {\n          expiredt: dateValue\n        }\n      }).then(res => {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n\n        if (res.status === 200) {\n          toast.success(SAVED_SUCCESS, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        } else {\n          console.log(res);\n        }\n      });\n    }\n  };\n\n  if (isRequested) {\n    return __jsx(LoadingSpinner, {\n      size: 50,\n      style: {\n        color: COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 9\n    }\n  }, state.hcmItemId && __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 29\n    }\n  }, __jsx(\"div\", {\n    className: classes.alignRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 33\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 37\n    }\n  }, __jsx(DatePicker, {\n    id: \"sliderExpiryDate\",\n    name: \"sliderExpiryDate\",\n    label: 'Select Expiry',\n    value: expiryDate,\n    inputFormat: \"DD/MM/YYYY\",\n    disablePast: true,\n    onChange: handleChangeDatePicker,\n    renderInput: props => __jsx(TextField, _extends({}, props, {\n      variant: 'filled',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 69\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 41\n    }\n  }))))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-end',\n    className: isRequested ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 29\n    }\n  }, __jsx(FormControlLabel, {\n    className: classes.labelFont,\n    control: __jsx(Checkbox, {\n      size: 'small',\n      checked: isOptimizeImages,\n      onChange: () => setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isOptimizeImages: !isOptimizeImages\n      })),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 41\n      }\n    }),\n    label: \"Optimize Images\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 33\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 1,\n    style: {\n      marginTop: 6,\n      marginLeft: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    style: {\n      marginLeft: -8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 41\n    }\n  }, \"Text\")), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 37\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setLocalState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      textColor: color.hex\n    })),\n    placement: \"right\",\n    initialValue: textColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 41\n    }\n  }, \"Button\")), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 37\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setLocalState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      buttonColor: color.hex\n    })),\n    placement: \"right\",\n    initialValue: buttonColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 37\n    }\n  }, __jsx(Button, {\n    onClick: () => setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      openDialog: true\n    })),\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"upload\",\n    className: classes.uploadButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 41\n    }\n  }, __jsx(CloudUploadIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 45\n    }\n  }), \"UPLOAD\"))))), isOptimizeImages && __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 37\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 41\n    }\n  }, __jsx(PercentageSlider, {\n    marks: PERCENTAGE_VALUES,\n    value: quality,\n    onChange: (e, value) => handleImageQualityChange(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 45\n    }\n  }))))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    spacing: 3,\n    className: isRequested ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 29\n    }\n  }, __jsx(Paper, {\n    className: classes.paperBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 33\n    }\n  }, (sliderImages === null || sliderImages === void 0 ? void 0 : sliderImages.length) > 0 && sliderImages.map((value, index) => {\n    return __jsx(Grid, {\n      key: index,\n      container: true,\n      justify: 'center',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 49\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 53\n      }\n    }, __jsx(Card, {\n      className: classes.card,\n      style: {\n        border: index + 1 === selectedIndex ? '2px solid red' : `1px solid ${COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 57\n      }\n    }, __jsx(\"div\", {\n      style: {\n        backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL + value.fileurl})`,\n        height: '100%',\n        width: '100%',\n        backgroundSize: 'cover',\n        borderRadius: 5\n      },\n      onMouseEnter: () => {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          showDeleteButton: true,\n          hoverIndex: index\n        }));\n      },\n      onMouseLeave: () => {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          showDeleteButton: false,\n          hoverIndex: index\n        }));\n      },\n      onClick: () => handleSelectedImage(index + 1, value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 61\n      }\n    }, showDeleteButton && hoverIndex === index && __jsx(IconButton, {\n      disabled: isRequested,\n      component: \"span\",\n      color: 'primary',\n      className: index === sliderImages.length - 1 ? classes.disableEvent : '',\n      onClick: () => handleUpdateOrderNo(value.gid, value.orderno + 1, 'increment'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 113\n      }\n    }, __jsx(AddCircleIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 73\n      }\n    })), showDeleteButton && hoverIndex === index && __jsx(Typography, {\n      component: \"span\",\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 113\n      }\n    }, value.orderno), showDeleteButton && hoverIndex === index && __jsx(IconButton, {\n      disabled: isRequested,\n      component: \"span\",\n      color: 'primary',\n      className: index === 0 ? classes.disableEvent : '',\n      onClick: () => handleUpdateOrderNo(value.gid, value.orderno - 1, 'decrement'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 113\n      }\n    }, __jsx(RemoveCircleIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 73\n      }\n    })), showDeleteButton && hoverIndex === index && __jsx(IconButton, {\n      onClick: () => handleDeleteImage(value.gid),\n      disabled: isRequested,\n      \"aria-label\": \"upload picture\",\n      component: \"span\",\n      style: {\n        float: \"right\"\n      },\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 113\n      }\n    }, __jsx(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 73\n      }\n    }))))));\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 29\n    }\n  }, __jsx(Paper, {\n    className: classes.paperBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 33\n    }\n  }, selectedIndex && __jsx(React.Fragment, null, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 730,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 732,\n      columnNumber: 57\n    }\n  }, \"Title\")), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 53\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit Title\",\n    color: \"primary\",\n    onClick: () => handleDialogOpen('title'),\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 57\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 747,\n      columnNumber: 61\n    }\n  }))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 57\n    }\n  }, \"Description\")), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 53\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit Title\",\n    color: \"primary\",\n    onClick: () => handleDialogOpen('description'),\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 57\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 61\n    }\n  }))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 57\n    }\n  }, \"Do you want to add button for image ?\")), __jsx(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    component: 'div',\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 57\n    }\n  }, __jsx(Switch, {\n    size: 'small',\n    checked: isCta,\n    onChange: () => {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        cta: '',\n        isCta: !isCta,\n        ctaTitle: '',\n        ctaLink: '',\n        ctaLinkType: 'external'\n      }));\n    },\n    inputProps: {\n      'aria-label': 'secondary checkbox'\n    },\n    color: 'primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 61\n    }\n  }))))), isCta && __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 804,\n      columnNumber: 53\n    }\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 57\n    }\n  }, __jsx(RadioGroup, {\n    \"aria-label\": \"link-type\",\n    row: true,\n    value: ctaLinkType,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setLocalState(prev => {\n        var _pageData$;\n\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          ctaLinkType: value,\n          ctaLink: value === 'internal' ? (_pageData$ = pageData[0]) === null || _pageData$ === void 0 ? void 0 : _pageData$.code : ''\n        });\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 61\n    }\n  }, __jsx(FormControlLabel, {\n    value: \"external\",\n    control: __jsx(Radio, {\n      color: 'primary',\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 109\n      }\n    }),\n    label: \"External Link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 65\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"internal\",\n    control: __jsx(Radio, {\n      color: 'primary',\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 109\n      }\n    }),\n    label: \"Internal Link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 65\n    }\n  })))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 815,\n      columnNumber: 53\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 816,\n      columnNumber: 57\n    }\n  }, __jsx(TextField, {\n    size: 'small',\n    id: \"button-title\",\n    variant: \"outlined\",\n    label: 'Title',\n    value: ctaTitle,\n    fullWidth: true,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaTitle: value\n      }));\n    },\n    style: {\n      marginTop: 8\n    },\n    helperText: ctaTitle && __jsx(Typography, {\n      variant: \"caption\",\n      className: classes.alignText,\n      display: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 81\n      }\n    }, `${ctaTitle === null || ctaTitle === void 0 ? void 0 : ctaTitle.length} < 100`),\n    inputProps: {\n      maxLength: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 817,\n      columnNumber: 61\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 57\n    }\n  }, ctaLinkType === 'external' && __jsx(TextField, {\n    size: 'small',\n    id: \"button-link\",\n    variant: \"outlined\",\n    label: 'Link',\n    value: ctaLink,\n    error: ctaLink ? !validator.isURL(ctaLink) : false,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaLink: value\n      }));\n    },\n    style: {\n      marginTop: 8\n    },\n    fullWidth: true,\n    helperText: ctaLink && __jsx(Typography, {\n      variant: \"caption\",\n      className: classes.alignText,\n      display: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 84\n      }\n    }, `${ctaLink === null || ctaLink === void 0 ? void 0 : ctaLink.length} < 100`),\n    inputProps: {\n      maxLength: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 844,\n      columnNumber: 65\n    }\n  }), ctaLinkType === 'internal' && __jsx(FormControl, {\n    variant: \"outlined\",\n    size: 'small',\n    style: {\n      marginTop: 8\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 65\n    }\n  }, __jsx(Select, {\n    value: ctaLink,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaLink: value\n      }));\n    },\n    label: \"Web Pages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 872,\n      columnNumber: 69\n    }\n  }, pageData.map((option, index) => {\n    return __jsx(MenuItem, {\n      value: option.code,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 85\n      }\n    }, ' ', option.code, ' ');\n  })))))), __jsx(Divider, {\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 897,\n      columnNumber: 45\n    }\n  }), __jsx(Button, {\n    onClick: handleUpdateImage,\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 45\n    }\n  }, \"SUBMIT\"))))), __jsx(DropzoneDialog, {\n    open: openDialog,\n    onSave: handleSaveImage,\n    acceptedFiles: ['image/jpeg', 'image/png', 'image/bmp'],\n    showPreviews: true,\n    maxFileSize: 5000000,\n    filesLimit: 5,\n    onClose: () => setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      openDialog: false\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 913,\n      columnNumber: 25\n    }\n  }), isDialogOpen && __jsx(TextEditor, {\n    handleSaveTextEditor: handleTextEditorValue,\n    handleCancelTextEditor: handleCancelEditor,\n    data: editorValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 924,\n      columnNumber: 29\n    }\n  })));\n};\n\nexport default AddCardSlider;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/card-type-slider/AddCardSlider.js"],"names":["React","useContext","useEffect","useState","useSelector","useRouter","WebCmsGlobal","Delete","Insert","Patch","UseOrest","ViewList","FIELDTYPE","isErrorMsg","OREST_ENDPOINT","OREST_UPLOAD","REQUEST_METHOD_CONST","toast","COLORS","DELETE_SUCCESS","PERCENTAGE_VALUES","SAVED_SUCCESS","UPLOAD_SUCCESS","axios","LoadingSpinner","Button","Card","Container","Divider","IconButton","Paper","Radio","TextField","Typography","Switch","FormControl","RadioGroup","Grid","FormControlLabel","CloudUploadIcon","CancelIcon","validator","DropzoneDialog","makeStyles","Select","MenuItem","AddCircleIcon","RemoveCircleIcon","Checkbox","PercentageSlider","InputColor","getSliderImages","patchListSliderImage","TextEditor","BorderColorSharpIcon","toSelfName","moment","DatePicker","LocalizationProvider","MomentAdapter","useStyles","theme","root","margin","spacing","submit","marginRight","marginTop","borderRadius","float","disableUpload","pointerEvents","opacity","paperBlock","height","border","secondary","overflow","disableEvent","uploadButton","marginBottom","marginLeft","card","width","cursor","alignText","textAlign","color","text","fontWeight","fontSize","alignRight","AddCardSlider","props","handleSectionComponent","state","formReducer","pageBuilder","localState","setLocalState","isRequested","openDialog","title","description","selectedIndex","hoverIndex","showDeleteButton","itemCount","sliderID","sliderGID","sliderImages","selectedImage","isCta","ctaTitle","ctaLink","cta","ctaLinkType","pageData","isOptimizeImages","quality","assets","meta","imageQuality","textColor","colors","slider","main","buttonColor","button","isDialogOpen","editorValue","dialogType","expiryDate","format","DATEFORMAT_LOCALE","classes","router","companyId","query","companyID","GENERAL_SETTINGS","token","authToken","service","type","gid","prev","apiUrl","OREST_URL","endpoint","HCMITEMSLD","data","itemid","hcmItemId","hotelrefno","Number","then","res","status","id","retErr","error","errorMsg","position","POSITION","TOP_RIGHT","RAFILE","params","handleSaveImage","files","orderNo","requests","map","file","Promise","resolve","asyncUpload","all","sldImages","sort","a","b","orderno","updatedImages","push","length","handleSelectedImage","success","warn","handleDeleteImage","HCMITEMIMG","index","requestPassed","sldImage","updatedSliderImage","image","matchs","match","cta_title","replace","trim","split","handleUpdateImage","itemTreated","callback","setTimeout","imgtype","IMG","sliderid","imgquality","imgscale","r1","ImageUpload","mid","r","endPoint","masterID","url","binaryData","formData","FormData","append","Blob","name","options","method","headers","orsactive","masterid","scale","response","catch","handleUpdateOrderNo","orderType","tmpSliderImages","tmp","handleImageQualityChange","value","gids","LIST","PATCH","handleTextEditorValue","handleCancelEditor","handleDialogOpen","handleChangeDatePicker","date","dateValue","expiredt","console","log","labelFont","prevState","hex","e","backgroundImage","STATIC_URL","fileurl","backgroundSize","target","code","maxLength","isURL","option"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {useRouter} from \"next/router\";\nimport WebCmsGlobal from \"../../../../../../webcms-global\";\nimport {Delete, Insert, Patch, UseOrest, ViewList} from \"@webcms/orest\";\nimport {\n    FIELDTYPE,\n    isErrorMsg,\n    OREST_ENDPOINT,\n    OREST_UPLOAD,\n    REQUEST_METHOD_CONST\n} from \"../../../../../../../model/orest/constants\";\nimport {toast} from \"react-toastify\";\nimport {COLORS, DELETE_SUCCESS, PERCENTAGE_VALUES, SAVED_SUCCESS, UPLOAD_SUCCESS} from \"../../../../constants\";\nimport axios from \"axios\";\nimport LoadingSpinner from \"../../../../../../LoadingSpinner\";\nimport {Button, Card, Container, Divider, IconButton, Paper, Radio, TextField,\n        Typography, Switch, FormControl, RadioGroup, Grid, FormControlLabel} from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport validator from \"validator\";\nimport {DropzoneDialog} from \"material-ui-dropzone\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport {PercentageSlider} from \"../../../../../../../model/slider\";\nimport InputColor from \"react-input-color\";\nimport {getSliderImages, patchListSliderImage} from \"../../../../helpers/slider\";\nimport TextEditor from \"../text-editor\";\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport { toSelfName } from './../../../../../../../lib/helpers/useFunction';\nimport moment from \"moment\";\nimport {DatePicker, LocalizationProvider} from \"@material-ui/pickers\";\nimport MomentAdapter from \"@date-io/moment\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    submit: {\n        marginRight: theme.spacing(3),\n        marginTop: theme.spacing(1),\n        borderRadius: 20,\n        float: \"right\"\n    },\n    disableUpload: {\n        pointerEvents: \"none\",\n        opacity: 0.5\n    },\n    paperBlock: {\n        height: 350,\n        border: `2px solid ${COLORS?.secondary}`,\n        overflow: \"auto\"\n    },\n    disableEvent: {\n        pointerEvents: \"none\",\n        opacity: 0.5\n    },\n    uploadButton: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n        // float: 'right'\n    },\n    card: {\n        height: 200,\n        width: 300,\n        margin: theme.spacing(1),\n        cursor: \"pointer\"\n    },\n    alignText: {\n        textAlign: \"right\",\n        color: \"red\"\n    },\n    text: {\n        marginTop: 16,\n        fontWeight: \"bold\",\n        fontSize: 15\n    },\n    alignRight: {\n        float: 'right'\n    }\n}));\n\nconst AddCardSlider = (props) => {\n\n    const { handleSectionComponent } = props\n    const state = useSelector(state => state.formReducer.pageBuilder);\n    const [localState, setLocalState] = useState({\n        isRequested: false,\n        openDialog: false,\n        title: '',\n        description: '',\n        selectedIndex: null,\n        hoverIndex: null,\n        showDeleteButton: false,\n        itemCount: 1,\n        sliderID: null,\n        sliderGID: null,\n        sliderImages: [],\n        selectedImage: null,\n        isCta: false,\n        ctaTitle: '',\n        ctaLink: '',\n        cta: '',\n        ctaLinkType: 'external',\n        pageData: [],\n        isOptimizeImages: false,\n        quality: state?.assets?.meta?.imageQuality ? (state.assets.meta.imageQuality * 100) : 50,\n        textColor: state?.assets?.colors?.slider?.main ? state.assets.colors.slider.main : '#fff',\n        buttonColor: state?.assets?.colors?.button?.main ? state.assets.colors.button.main : '#000',\n        isDialogOpen: false,\n        editorValue: '',\n        dialogType: '',\n        expiryDate: moment().format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n    });\n    const { isRequested, openDialog, description, title, selectedIndex,\n        hoverIndex, showDeleteButton, itemCount, sliderID, sliderImages,\n        selectedImage, isCta, ctaLink, ctaTitle, cta, ctaLinkType, pageData, quality,\n        isOptimizeImages, buttonColor, textColor, sliderGID, isDialogOpen, dialogType, editorValue, expiryDate} = localState;\n\n    const classes = useStyles();\n\n    const router = useRouter();\n    const companyId = router.query.companyID;\n    const {GENERAL_SETTINGS, token} = useContext(WebCmsGlobal);\n    const authToken = token || router.query.authToken;\n\n    useEffect(() => {\n        handleSectionComponent &&\n        handleSectionComponent({\n            service: \"hcmitemsld\",\n            type: \"card-slider\",\n            gid: sliderGID,\n            textColor: textColor,\n            buttonColor: buttonColor\n        });\n    }, [textColor, buttonColor]);\n\n    //insert slider record on mount of component\n    useEffect(() => {\n        setLocalState(prev => ({...prev, isRequested: true}));\n        Insert({ // insert slider\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMSLD,\n            token: authToken,\n            data: {\n                itemid: state.hcmItemId,\n                hotelrefno: Number(companyId)\n            },\n        }).then(res => {\n            setLocalState(prev => ({...prev, isRequested: false}));\n            if (res?.status === 200 && res?.data?.data) {\n                setLocalState(prev => ({...prev, sliderID: res.data.data?.id, sliderGID: res.data.data?.gid}));\n                handleSectionComponent({\n                    service: \"hcmitemsld\",\n                    type: \"card-slider\",\n                    gid: res.data.data?.gid,\n                    textColor: textColor,\n                    buttonColor: buttonColor\n                });\n            } else {\n                const retErr = isErrorMsg(res);\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        })\n        //getting data from rafile\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RAFILE,\n            token: authToken,\n            params: {\n                hotelrefno: Number(companyId),\n                query: `filetype::WEBPAGE,istemplate::false}`,\n            }\n        }).then(res => {\n            if (res.status === 200 && res?.data?.data) {\n                setLocalState(prev => ({...prev, pageData: res.data.data}))\n            } else {\n                const retErr = isErrorMsg(res);\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        })\n    }, []);\n\n    useEffect(() => {\n        if(ctaTitle && ctaLink) {\n            setLocalState(prev => ({...prev, cta: `<a target=\"_blank\" href=\"${ctaLink}\" > ${ctaTitle} </a>`}));\n        }\n    }, [ctaTitle, ctaLink]);\n\n    const handleSaveImage = (files) => {\n        setLocalState(prev => ({...prev, isRequested: true}))\n        let orderNo = itemCount;\n        let requests = files.map((file) => {\n            return new Promise( (resolve) => {\n                asyncUpload(file, orderNo, resolve);\n                orderNo ++ ;\n            });\n        });\n\n        Promise.all(requests).then(async () => {\n            const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n            sldImages.sort((a, b) => (a.orderno > b.orderno) ? 1 : -1)\n            setLocalState(prev => ({...prev, isRequested: false}));\n            if (sldImages) {\n                let updatedImages = [];\n                sldImages.map((data) => {\n                    updatedImages.push(data);\n                });\n                setLocalState(prev => ({...prev, sliderImages: updatedImages, itemCount: updatedImages.length + 1, openDialog: false}));\n                handleSelectedImage(1, updatedImages[0]);\n                toast.success(UPLOAD_SUCCESS, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            } else {\n                toast.warn('Something went wrong while saving image. Please check network tab.', {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        });\n    }\n\n    const handleDeleteImage = (gid) => {\n        setLocalState(prev => ({...prev, isRequested: true}))\n        Delete({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            gid: gid,\n            params: {\n                hotelrefno: Number(companyId)\n            }\n        }).then(async res => {\n            if (res.status === 200) {\n                const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n                sldImages.sort((a, b) => (a.orderno > b.orderno) ? 1 : -1);\n                setLocalState(prev => ({...prev, isRequested: false}));\n                if (sldImages) {\n                    let updatedImages = [];\n                    sldImages.map((data, index) => {\n                        data.orderno = index + 1;\n                        updatedImages.push(data);\n                    });\n                    let requestPassed = true;\n                    for (const sldImage of sldImages) {\n                        const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {orderno: sldImage.orderno}, {hotelrefno: Number(companyId)}, sldImage.gid);\n                        updatedSliderImage ? requestPassed = true : requestPassed = false;\n                    }\n                    if (requestPassed) {\n                        setLocalState(prev => ({...prev, sliderImages: updatedImages, selectedIndex: 1}));\n                        handleSelectedImage(1, updatedImages[0]);\n                    } else {\n                        setLocalState(prev => ({...prev, selectedIndex: null}));\n                    }\n                    toast.success(DELETE_SUCCESS, {\n                        position: toast.POSITION.TOP_RIGHT\n                    });\n                }\n            } else {\n                const retErr = isErrorMsg(res);\n                setLocalState(prev => ({...prev, isRequested: false}))\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        });\n    }\n\n    const handleSelectedImage = (index, image) => {\n        setLocalState(prev => ({...prev, selectedIndex: index, selectedImage: image}));\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            params: {\n                query: `gid:${image.gid}`,\n                sort: 'orderno',\n                hotelrefno:  Number(companyId)\n            }\n        }).then(res => {\n            if (res?.status === 200) {\n                if (res?.data?.data?.length > 0) {\n                    setLocalState(prev => ({...prev, title: res.data.data[0]?.title ? res.data.data[0]?.title : '',\n                        description: res.data.data[0]?.description ? res.data.data[0]?.description : '',\n                        cta: res.data.data[0]?.cta}));\n                    if (res.data.data[0].cta) {\n                        setLocalState(prev => ({...prev, isCta: true}));\n                        const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                        if (matchs?.length > 0) {\n                            const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`,\n                                '').replace(matchs[0], '').replace('>',\n                                '').replace('</a>', '').trim();\n                            setLocalState(prev => ({...prev, ctaLink: matchs[0], ctaTitle: cta_title, ctaLinkType: 'external'}));\n                        } else {\n                            const gid = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`,\n                                '').replace('\" >', '').replace('</a>', '').split(' ')[0];\n                            const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`,\n                                '').replace(gid, '').replace('\" >',\n                                '').replace('</a>', '').trim();\n                            setLocalState(prev => ({...prev, ctaLink: gid, ctaTitle: cta_title, ctaLinkType: 'internal'}));\n                        }\n                    } else {\n                        setLocalState(prev => ({...prev, ctaLink: '', ctaTitle: '', isCta: false}));\n                    }\n                }\n            } else {\n                const retErr = isErrorMsg(res);\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        })\n    }\n\n    const handleUpdateImage = () => {\n        setLocalState(prev => ({...prev, isRequested: true}));\n        Patch({ // update image\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            gid: selectedImage?.gid,\n            params: {\n                hotelrefno: Number(companyId),\n            },\n            data: {\n                title: title,\n                description: description,\n                cta: cta\n            }\n        }).then(res => {\n            if(res.status === 200) {\n                setLocalState(prev => ({...prev, isRequested: false}));\n                toast.success(SAVED_SUCCESS, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            } else {\n                const retErr = isErrorMsg(res);\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        })\n    }\n\n    const asyncUpload = (file, itemTreated, callback) => {\n        if (state.hcmItemId) {\n            setTimeout(() => {\n                Insert({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                    token: authToken,\n                    data: {\n                        itemid: state.hcmItemId,\n                        imgtype: FIELDTYPE.IMG,\n                        orderno: itemTreated,\n                        sliderid: sliderID,\n                        hotelrefno: Number(companyId),\n                        imgquality: quality/100,\n                        imgscale: quality/100\n                    },\n                }).then(r1 => {\n                    if (r1.status === 200 && r1?.data?.data) {\n                        let updatedImages = [...sliderImages];\n                        updatedImages.push(r1?.data?.data);\n                        ImageUpload(\n                            GENERAL_SETTINGS.OREST_URL,\n                            OREST_ENDPOINT.RAFILE,\n                            authToken,\n                            r1.data.data.mid,\n                            file\n                        ).then(r => {\n                            if (r.status === 200) {\n                                callback();\n                            } else {\n                                callback();\n                            }\n                        });\n                    } else {\n                        callback();\n                    }\n                });\n            }, 100);\n        }\n    }\n\n    const ImageUpload = (apiUrl, endPoint, token, masterID, file) => {\n        const url = apiUrl + '/' + endPoint + OREST_UPLOAD;\n        let binaryData = [];\n        binaryData.push(file);\n        let formData = new FormData();\n        formData.append('file', new Blob(binaryData, {type: file.type}), toSelfName(file.name));\n\n        const options = {\n            url: url,\n            method: 'post',\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                'Content-Type': 'multipart/form-data'\n            },\n            params: {\n                orsactive: true,\n                masterid: masterID,\n                hotelrefno: companyId,\n                quality: quality/100,\n                scale: quality/100\n            },\n            data: formData\n        };\n\n        return axios(options).then(response => {\n            return response\n        }).catch(error => {\n            return error.response || {status: 0};\n        });\n    };\n\n    const handleUpdateOrderNo = async (gid, orderNo, orderType) => { // update order no of slider images\n        if (orderNo <= 0 || orderNo > sliderImages.length) {\n            setLocalState(prev => ({...prev, selectedIndex: null}))\n        } else {\n            const tmpSliderImages = [...sliderImages];\n            if (orderType === 'increment') {\n                const tmp = tmpSliderImages[orderNo - 1];\n                tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo - 2];\n                tmpSliderImages[orderNo - 2] = tmp;\n            } else {\n                const tmp = tmpSliderImages[orderNo - 1];\n                tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo];\n                tmpSliderImages[orderNo] = tmp;\n            }\n            let updatedImages = [];\n            tmpSliderImages.map((data, index) => {\n                data.orderno = index + 1;\n                updatedImages.push(data);\n            });\n            setLocalState(prev => ({...prev, isRequested: true}));\n            let requestPassed = true;\n            for (const sldImage of tmpSliderImages) {\n                const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {orderno: sldImage.orderno}, {hotelrefno: Number(companyId)}, sldImage.gid);\n                updatedSliderImage ? requestPassed = true : requestPassed = false;\n            }\n            setLocalState(prev => ({...prev, isRequested: false}));\n            if (requestPassed) {\n                setLocalState(prev => ({...prev, sliderImages: updatedImages, itemCount: updatedImages?.length + 1}));\n                toast.success('Order No Updated Successfully', {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n                handleSelectedImage(1, tmpSliderImages[0]);\n            } else {\n                toast.error('Something went wrong while updating order no. Please check network tab.', {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        }\n    }\n\n    const handleImageQualityChange = (value) => {\n        if (value >= 10 && value <= 90 && value % 10 === 0) {\n            if (sliderImages.length) {\n                setLocalState(prev => ({...prev, isRequested: true}));\n                const gids = sliderImages.map(image => {\n                    return {gid: image.gid, imgquality: value / 100, imgscale: value / 100};\n                });\n                UseOrest({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n                    token: authToken,\n                    method: REQUEST_METHOD_CONST.PATCH,\n                    data: gids,\n                    params: {\n                        hotelrefno: Number(companyId),\n                    },\n                }).then(res => {\n                    if (res?.status === 200 && res?.data?.data) {\n                        setLocalState(prev => ({...prev, isRequested: false, quality: value}))\n                    } else {\n                        const retErr = isErrorMsg(res);\n                        toast.error(retErr.errorMsg, {\n                            position: toast.POSITION.TOP_RIGHT\n                        });\n                    }\n                })\n            } else {\n                setLocalState(prev => ({...prev, quality: value}))\n            }\n        }\n    }\n\n    const handleTextEditorValue = (value) => {\n        if (dialogType === 'title') {\n            setLocalState(prev => ({...prev, title: value}));\n        }\n        if (dialogType === 'description') {\n            setLocalState(prev => ({...prev, description: value}));\n        }\n        setLocalState(prev => ({...prev, isDialogOpen: false, dialogType: '', editorValue: ''}));\n    }\n\n    const handleCancelEditor = () => {\n        setLocalState(prev => ({...prev, isDialogOpen: false, dialogType: '', editorValue: ''}));\n    }\n\n    const handleDialogOpen = (type) => {\n        if (type === 'title') {\n            setLocalState(prev => ({...prev, isDialogOpen: true, dialogType: type, editorValue: title}));\n        }\n        if (type === 'description') {\n            setLocalState(prev => ({...prev, isDialogOpen: true, dialogType: type, editorValue: description}));\n        }\n    }\n\n    const handleChangeDatePicker = (date) => {\n        const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n        setLocalState({...localState, expiryDate: dateValue});\n        if (dateValue !== 'Invalid date') {\n            setLocalState(prev => ({...prev, isRequested: true}))\n            Patch({\n                // update slider\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                gid: sliderGID,\n                params: {\n                    hotelrefno: Number(companyId),\n                },\n                data: {\n                    expiredt: dateValue,\n                },\n            }).then((res) => {\n                setLocalState(prev => ({...prev, isRequested: false}))\n                if (res.status === 200) {\n                    toast.success(SAVED_SUCCESS, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                } else {\n                    console.log(res)\n                }\n            })\n        }\n    }\n\n    if (isRequested) {\n        return <LoadingSpinner size={50} style={{color: COLORS?.secondary}} />\n    }\n\n    return (\n        <React.Fragment>\n            {\n                state.hcmItemId && (\n                    <>\n                        <Grid container={true}>\n                            <Grid item xs={12}>\n                                <div className={classes.alignRight}>\n                                    <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                        <DatePicker\n                                            id=\"sliderExpiryDate\"\n                                            name=\"sliderExpiryDate\"\n                                            label={'Select Expiry'}\n                                            value={expiryDate}\n                                            inputFormat=\"DD/MM/YYYY\"\n                                            disablePast\n                                            onChange={handleChangeDatePicker}\n                                            renderInput={(props) => <TextField {...props}\n                                                                               variant={'filled'}\n                                                                               required={true}\n                                            />}\n                                        />\n                                    </LocalizationProvider>\n                                </div>\n                            </Grid>\n                        </Grid>\n                        <Grid container={true} justify={'flex-end'} className={isRequested ? classes.disableEvent : ''} >\n                            <Grid item xs={5}>\n                                <FormControlLabel\n                                    className={classes.labelFont}\n                                    control={\n                                        <Checkbox\n                                            size={'small'}\n                                            checked={isOptimizeImages}\n                                            onChange={() => setLocalState(prev => ({...prev, isOptimizeImages: !isOptimizeImages}))}\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"Optimize Images\"\n                                />\n                            </Grid>\n                            <Grid item xs={7}>\n                                <Grid container>\n                                    <Grid item xs={1} style={{marginTop: 6, marginLeft: 16}}>\n                                        <Typography component={'span'} style={{marginLeft: -8}}>Text</Typography>\n                                    </Grid>\n                                    <Grid item xs={2} style={{marginTop: 8}}>\n                                        <InputColor\n                                            onChange={(color) => setLocalState(prevState => ({...prevState, textColor: color.hex}))}\n                                            placement=\"right\"\n                                            initialValue={textColor}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={2} style={{marginTop: 6}}>\n                                        <Typography component={'span'}>Button</Typography>\n                                    </Grid>\n                                    <Grid item xs={4} style={{marginTop: 8}}>\n                                        <InputColor\n                                            onChange={(color) => setLocalState(prevState => ({...prevState, buttonColor: color.hex}))}\n                                            placement=\"right\"\n                                            initialValue={buttonColor}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={2}>\n                                        <Button\n                                            onClick={() => setLocalState(prev => ({...prev, openDialog: true}))}\n                                            variant=\"contained\"\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            aria-label=\"upload\"\n                                            className={classes.uploadButton}\n                                        >\n                                            <CloudUploadIcon/>\n                                            UPLOAD\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        {\n                            isOptimizeImages && <Grid container>\n                                <Grid item xs={12}>\n                                    <Grid container>\n                                        <Grid item xs={12}>\n                                            <PercentageSlider\n                                                marks={PERCENTAGE_VALUES}\n                                                value={quality}\n                                                onChange={(e, value) => handleImageQualityChange(value)}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        }\n                        <Grid container justify={'flex-start'} spacing={3} className={isRequested ? classes.disableEvent : ''}>\n                            <Grid item xs={5}>\n                                <Paper className={classes.paperBlock}>\n                                    {\n                                        sliderImages?.length > 0 && sliderImages.map((value, index) => {\n                                            return (\n                                                <Grid key={index} container justify={'center'}>\n                                                    <Grid item={true}>\n                                                        <Card  className={classes.card}\n                                                               style={{border: index + 1 === selectedIndex ? '2px solid red' :\n                                                                       `1px solid ${COLORS?.secondary}`}}>\n                                                            <div style={{\n                                                                backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL + value.fileurl})`,\n                                                                height: '100%',\n                                                                width: '100%',\n                                                                backgroundSize: 'cover',\n                                                                borderRadius: 5,\n                                                            }}\n                                                                 onMouseEnter={() => {setLocalState(prev => ({...prev, showDeleteButton: true, hoverIndex: index}))}}\n                                                                 onMouseLeave={() => {setLocalState(prev => ({...prev, showDeleteButton: false, hoverIndex: index}))}}\n                                                                 onClick={() => handleSelectedImage(index + 1, value)}\n                                                            >\n                                                                {\n                                                                    showDeleteButton && hoverIndex === index && <IconButton\n                                                                        disabled={isRequested}\n                                                                        component=\"span\"\n                                                                        color={'primary'}\n                                                                        className={index === sliderImages.length - 1 ? classes.disableEvent : ''}\n                                                                        onClick={() => handleUpdateOrderNo(value.gid, value.orderno + 1, 'increment')}\n                                                                    >\n                                                                        <AddCircleIcon />\n                                                                    </IconButton>\n                                                                }\n                                                                {\n                                                                    showDeleteButton && hoverIndex === index && <Typography\n                                                                        component=\"span\"\n                                                                        color={'primary'}\n                                                                    >\n                                                                        {value.orderno}\n                                                                    </Typography>\n                                                                }\n                                                                {\n                                                                    showDeleteButton && hoverIndex === index && <IconButton\n                                                                        disabled={isRequested}\n                                                                        component=\"span\"\n                                                                        color={'primary'}\n                                                                        className={index === 0 ? classes.disableEvent : ''}\n                                                                        onClick={() => handleUpdateOrderNo(value.gid, value.orderno - 1, 'decrement')}\n                                                                    >\n                                                                        <RemoveCircleIcon />\n                                                                    </IconButton>\n                                                                }\n                                                                {\n                                                                    showDeleteButton && hoverIndex === index && <IconButton\n                                                                        onClick={() => handleDeleteImage(value.gid)}\n                                                                        disabled={isRequested}\n                                                                        aria-label=\"upload picture\"\n                                                                        component=\"span\"\n                                                                        style={{float: \"right\"}}\n                                                                        color={'primary'}\n                                                                    >\n                                                                        <CancelIcon/>\n                                                                    </IconButton>\n                                                                }\n                                                            </div>\n                                                        </Card>\n                                                    </Grid>\n                                                </Grid>\n                                            )\n                                        })\n                                    }\n                                </Paper>\n                            </Grid>\n                            <Grid item xs={7}>\n                                <Paper className={classes.paperBlock}>\n                                    {\n                                        selectedIndex &&\n                                        <>\n                                            <Container>\n                                                <Grid container justify={'flex-start'}>\n                                                    <Grid item xs={3}>\n                                                        <Typography\n                                                            component={'h6'}\n                                                            variant={'h6'}\n                                                            className={classes.text}\n                                                        >\n                                                            Title\n                                                        </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={9}>\n                                                        <IconButton\n                                                            aria-label=\"Edit Title\"\n                                                            color=\"primary\"\n                                                            onClick={() => handleDialogOpen('title')}\n                                                            style={{float: 'right'}}\n                                                        >\n                                                            <BorderColorSharpIcon color=\"primary\" />\n                                                        </IconButton>\n                                                    </Grid>\n                                                </Grid>\n                                            </Container>\n                                            <Container>\n                                                <Grid container justify={'flex-start'}>\n                                                    <Grid item xs={3}>\n                                                        <Typography\n                                                            component={'h6'}\n                                                            variant={'h6'}\n                                                            className={classes.text}\n                                                        >\n                                                            Description\n                                                        </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={9}>\n                                                        <IconButton\n                                                            aria-label=\"Edit Title\"\n                                                            color=\"primary\"\n                                                            onClick={() => handleDialogOpen('description')}\n                                                            style={{float: 'right'}}\n                                                        >\n                                                            <BorderColorSharpIcon color=\"primary\" />\n                                                        </IconButton>\n                                                    </Grid>\n                                                </Grid>\n                                            </Container>\n                                            <Container>\n                                                <Grid container justify={'flex-start'}>\n                                                    <Grid item xs={11}>\n                                                        <Typography\n                                                            component={'h6'}\n                                                            variant={'h6'}\n                                                            className={classes.text}\n                                                        >\n                                                            Do you want to add button for image ?\n                                                        </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={1} >\n                                                        <Typography component={'div'} style={{marginTop: 20}}>\n                                                            <Switch\n                                                                size={'small'}\n                                                                checked={isCta}\n                                                                onChange={() => {\n                                                                    setLocalState(prev => ({...prev, cta: '', isCta: !isCta, ctaTitle: '', ctaLink: '', ctaLinkType: 'external'}))\n                                                                }}\n                                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                                color={'primary'}\n                                                            />\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Container>\n                                            {\n                                                isCta &&\n                                                <Container>\n                                                    <Grid container>\n                                                        <FormControl component=\"fieldset\">\n                                                            <RadioGroup aria-label=\"link-type\" row value={ctaLinkType} onChange={(e) => {\n                                                                const { value } = e?.target;\n                                                                setLocalState(prev => ({...prev, ctaLinkType: value, ctaLink: value === 'internal' ? pageData[0]?.code : ''}));\n                                                            }}>\n                                                                <FormControlLabel value=\"external\" control={<Radio color={'primary'} size={'small'} />} label=\"External Link\" />\n                                                                <FormControlLabel value=\"internal\" control={<Radio color={'primary'} size={'small'} />} label=\"Internal Link\" />\n                                                            </RadioGroup>\n                                                        </FormControl>\n                                                    </Grid>\n                                                    <Grid container justify={'flex-start'} spacing={3}>\n                                                        <Grid item xs={6}>\n                                                            <TextField\n                                                                size={'small'}\n                                                                id=\"button-title\"\n                                                                variant={\"outlined\"}\n                                                                label={'Title'}\n                                                                value={ctaTitle}\n                                                                fullWidth\n                                                                onChange={(e) => {\n                                                                    const { value } = e?.target;\n                                                                    setLocalState(prev => ({...prev, ctaTitle: value}))\n                                                                }}\n                                                                style={{marginTop: 8}}\n                                                                helperText={\n                                                                    ctaTitle && <Typography\n                                                                        variant=\"caption\"\n                                                                        className={classes.alignText}\n                                                                        display=\"block\"\n                                                                    >\n                                                                        { `${ctaTitle?.length} < 100` }\n                                                                    </Typography>\n                                                                }\n                                                                inputProps={{maxLength: 99}}\n                                                            />\n                                                        </Grid>\n                                                        <Grid item xs={6}>\n                                                            {\n                                                                ctaLinkType === 'external' &&\n                                                                <TextField\n                                                                    size={'small'}\n                                                                    id=\"button-link\"\n                                                                    variant={\"outlined\"}\n                                                                    label={'Link'}\n                                                                    value={ctaLink}\n                                                                    error={ctaLink ? !validator.isURL(ctaLink) : false}\n                                                                    onChange={(e) => {\n                                                                        const { value } = e?.target;\n                                                                        setLocalState(prev => ({...prev, ctaLink: value}))\n                                                                    }}\n                                                                    style={{marginTop: 8}}\n                                                                    fullWidth\n                                                                    helperText={\n                                                                        ctaLink && <Typography\n                                                                            variant=\"caption\"\n                                                                            className={classes.alignText}\n                                                                            display=\"block\"\n                                                                        >\n                                                                            { `${ctaLink?.length} < 100` }\n                                                                        </Typography>\n                                                                    }\n                                                                    inputProps={{maxLength: 99}}\n                                                                />\n                                                            }\n                                                            {\n                                                                ctaLinkType === 'internal' &&\n                                                                <FormControl variant=\"outlined\" size={'small'} style={{marginTop: 8}} fullWidth>\n                                                                    <Select\n                                                                        value={ctaLink}\n                                                                        onChange={(e) => {\n                                                                            const { value } = e?.target;\n                                                                            setLocalState(prev => ({...prev, ctaLink: value}))\n                                                                        }}\n                                                                        label=\"Web Pages\"\n                                                                    >\n                                                                        {\n                                                                            pageData.map((option, index) => {\n                                                                                return (\n                                                                                    <MenuItem value={option.code} key={index}>\n                                                                                        {' '}\n                                                                                        {option.code}{' '}\n                                                                                    </MenuItem>\n                                                                                )\n                                                                            })\n                                                                        }\n                                                                    </Select>\n                                                                </FormControl>\n                                                            }\n                                                        </Grid>\n                                                    </Grid>\n                                                </Container>\n                                            }\n                                            <Divider style={{marginTop: 8}} />\n                                            <Button\n                                                onClick={handleUpdateImage}\n                                                variant=\"contained\"\n                                                size=\"small\"\n                                                color=\"primary\"\n                                                aria-label=\"add\"\n                                                className={classes.submit}\n                                            >\n                                                SUBMIT\n                                            </Button>\n                                        </>\n                                    }\n                                </Paper>\n                            </Grid>\n                        </Grid>\n                        <DropzoneDialog\n                            open={openDialog}\n                            onSave={handleSaveImage}\n                            acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\n                            showPreviews={true}\n                            maxFileSize={5000000}\n                            filesLimit={5}\n                            onClose={() => setLocalState(prev => ({...prev, openDialog: false}))}\n                        />\n                        {\n                            isDialogOpen &&\n                            <TextEditor\n                                handleSaveTextEditor={handleTextEditorValue}\n                                handleCancelTextEditor={handleCancelEditor}\n                                data={editorValue}\n                            />\n                        }\n                    </>\n                )\n            }\n        </React.Fragment>\n    )\n}\n\nexport default AddCardSlider;"]},"metadata":{},"sourceType":"module"}