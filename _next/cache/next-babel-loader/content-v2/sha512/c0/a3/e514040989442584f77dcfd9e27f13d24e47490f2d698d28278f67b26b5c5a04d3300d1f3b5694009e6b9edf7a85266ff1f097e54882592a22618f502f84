{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider-gallery/AddSliderGallery.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { COLORS, DELETE_SUCCESS, PERCENTAGE_VALUES, SAVED_SUCCESS, UPLOAD_SUCCESS, verticalAlignments, horizontalAlignments } from \"../../../../constants\";\nimport { useSelector } from 'react-redux';\nimport Grid from \"@material-ui/core/Grid\";\nimport { Button, Typography, IconButton, Divider, TextField, Container, Card, Paper, FormControlLabel, Switch, Checkbox, FormControl, MenuItem, Select, FormLabel } from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport { DropzoneDialog } from \"material-ui-dropzone\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { FIELDTYPE, isErrorMsg, OREST_ENDPOINT, OREST_UPLOAD, REQUEST_METHOD_CONST } from \"../../../../../../../model/orest/constants\";\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport WebCmsGlobal from \"components/webcms-global\";\nimport { Delete, Insert, Patch, UseOrest, ViewList } from \"@webcms/orest\";\nimport { toast } from \"react-toastify\";\nimport LoadingSpinner from \"../../../../../../LoadingSpinner\";\nimport validator from \"validator\";\nimport { PercentageSlider } from \"../../../../../../../model/slider\";\nimport InputColor from \"react-input-color\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport { getSliderImages, patchListSliderImage } from \"../../../../helpers/slider\";\nimport TextEditor from \"../text-editor\";\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport { toSelfName } from './../../../../../../../lib/helpers/useFunction';\nimport { DatePicker, LocalizationProvider } from \"@material-ui/pickers\";\nimport moment from \"moment\";\nimport MomentAdapter from \"@date-io/moment\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  },\n  submit: {\n    marginRight: theme.spacing(3),\n    marginTop: theme.spacing(1),\n    borderRadius: 20,\n    float: \"right\"\n  },\n  disableUpload: {\n    pointerEvents: \"none\",\n    opacity: 0.5\n  },\n  paperBlock: {\n    height: 350,\n    border: `2px solid ${COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary}`,\n    overflow: \"auto\"\n  },\n  disableEvent: {\n    pointerEvents: \"none\",\n    opacity: 0.5\n  },\n  uploadButton: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    borderRadius: 20 // float: 'right'\n\n  },\n  card: {\n    height: 200,\n    width: 300,\n    margin: theme.spacing(1),\n    cursor: \"pointer\"\n  },\n  alignText: {\n    textAlign: \"right\",\n    color: \"red\"\n  },\n  text: {\n    marginTop: 16,\n    fontWeight: \"bold\",\n    fontSize: 15\n  },\n  alignRight: {\n    float: 'right'\n  }\n}));\n\nconst AddSliderGallery = props => {\n  var _state$assets, _state$assets$meta, _state$assets2, _state$assets2$colors, _state$assets2$colors2, _state$assets3, _state$assets3$colors, _state$assets3$colors2;\n\n  const {\n    handleSectionComponent\n  } = props;\n  const state = useSelector(state => state.formReducer.pageBuilder);\n  const {\n    0: localState,\n    1: setLocalState\n  } = useState({\n    isRequested: false,\n    openDialog: false,\n    title: '',\n    description: '',\n    selectedIndex: null,\n    hoverIndex: null,\n    showDeleteButton: false,\n    itemCount: 1,\n    sliderID: null,\n    sliderGID: null,\n    sliderImages: [],\n    selectedImage: null,\n    isCta: false,\n    ctaTitle: '',\n    ctaLink: '',\n    cta: '',\n    isOptimizeImages: false,\n    quality: state !== null && state !== void 0 && (_state$assets = state.assets) !== null && _state$assets !== void 0 && (_state$assets$meta = _state$assets.meta) !== null && _state$assets$meta !== void 0 && _state$assets$meta.imageQuality ? state.assets.meta.imageQuality * 100 : 50,\n    textColor: state !== null && state !== void 0 && (_state$assets2 = state.assets) !== null && _state$assets2 !== void 0 && (_state$assets2$colors = _state$assets2.colors) !== null && _state$assets2$colors !== void 0 && (_state$assets2$colors2 = _state$assets2$colors.slider) !== null && _state$assets2$colors2 !== void 0 && _state$assets2$colors2.main ? state.assets.colors.slider.main : '#fff',\n    buttonColor: state !== null && state !== void 0 && (_state$assets3 = state.assets) !== null && _state$assets3 !== void 0 && (_state$assets3$colors = _state$assets3.colors) !== null && _state$assets3$colors !== void 0 && (_state$assets3$colors2 = _state$assets3$colors.button) !== null && _state$assets3$colors2 !== void 0 && _state$assets3$colors2.main ? state.assets.colors.button.main : '#fff',\n    isDialogOpen: false,\n    editorValue: '',\n    dialogType: '',\n    ctaVerticalAlignment: '0000192',\n    ctaHorizontalAlignment: '0000182',\n    expiryDate: moment().format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n  });\n  const {\n    isRequested,\n    openDialog,\n    description,\n    title,\n    selectedIndex,\n    hoverIndex,\n    showDeleteButton,\n    itemCount,\n    sliderID,\n    sliderImages,\n    selectedImage,\n    isCta,\n    ctaLink,\n    ctaTitle,\n    cta,\n    isOptimizeImages,\n    quality,\n    buttonColor,\n    textColor,\n    sliderGID,\n    isDialogOpen,\n    dialogType,\n    editorValue,\n    ctaVerticalAlignment,\n    ctaHorizontalAlignment,\n    expiryDate\n  } = localState;\n  const classes = useStyles();\n  const router = useRouter();\n  const companyId = router.query.companyID;\n  const {\n    GENERAL_SETTINGS,\n    token\n  } = useContext(WebCmsGlobal);\n  const authToken = token || router.query.authToken;\n  useEffect(() => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isRequested: true\n    }));\n    Insert({\n      // insert slider\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMSLD,\n      token: authToken,\n      data: {\n        itemid: state.hcmItemId,\n        hotelrefno: Number(companyId)\n      }\n    }).then(res => {\n      var _res$data;\n\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: false\n      }));\n\n      if ((res === null || res === void 0 ? void 0 : res.status) === 200 && res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && _res$data.data) {\n        var _res$data$data3;\n\n        setLocalState(prev => {\n          var _res$data$data, _res$data$data2;\n\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            sliderID: (_res$data$data = res.data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.id,\n            sliderGID: (_res$data$data2 = res.data.data) === null || _res$data$data2 === void 0 ? void 0 : _res$data$data2.gid\n          });\n        });\n        handleSectionComponent({\n          service: \"hcmitemsld\",\n          type: \"slider-gallery\",\n          gid: (_res$data$data3 = res.data.data) === null || _res$data$data3 === void 0 ? void 0 : _res$data$data3.gid,\n          textColor: textColor,\n          buttonColor: buttonColor\n        });\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  }, []);\n  useEffect(() => {\n    handleSectionComponent && handleSectionComponent({\n      service: \"hcmitemsld\",\n      type: \"slider-gallery\",\n      gid: sliderGID,\n      textColor: textColor,\n      buttonColor: buttonColor\n    });\n  }, [textColor, buttonColor]);\n  useEffect(() => {\n    if (ctaTitle && ctaLink) {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        cta: `<a target=\"_blank\" href=\"${ctaLink}\" > ${ctaTitle} </a>`\n      }));\n    }\n  }, [ctaTitle, ctaLink]);\n\n  const handleSaveImage = files => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isRequested: true\n    }));\n    let orderNo = itemCount;\n    let requests = files.map(file => {\n      return new Promise(resolve => {\n        asyncUpload(file, orderNo, resolve);\n        orderNo++;\n      });\n    });\n    Promise.all(requests).then(() => {\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMIMG,\n        token: authToken,\n        params: {\n          query: `sliderid:${sliderID}`,\n          sort: 'orderno',\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n\n        if ((res === null || res === void 0 ? void 0 : res.status) === 200) {\n          var _res$data2, _res$data2$data;\n\n          let updatedImages = [];\n          res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : _res$data2$data.map(data => {\n            updatedImages.push(data);\n          });\n          setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n            sliderImages: updatedImages,\n            itemCount: updatedImages.length + 1,\n            openDialog: false\n          }));\n          handleSelectedImage(1, updatedImages[0]);\n          toast.success(UPLOAD_SUCCESS, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        } else {\n          const retErr = isErrorMsg(res);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    });\n  };\n\n  const handleDeleteImage = gid => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isRequested: true\n    }));\n    Delete({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMIMG,\n      token: authToken,\n      gid: gid,\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(async res => {\n      if (res.status === 200) {\n        const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n        sldImages.sort((a, b) => a.orderno > b.orderno ? 1 : -1);\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n\n        if (sldImages) {\n          let updatedImages = [];\n          sldImages.map((data, index) => {\n            data.orderno = index + 1;\n            updatedImages.push(data);\n          });\n          let requestPassed = true;\n\n          for (const sldImage of sldImages) {\n            const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {\n              orderno: sldImage.orderno\n            }, {\n              hotelrefno: Number(companyId)\n            }, sldImage.gid);\n            updatedSliderImage ? requestPassed = true : requestPassed = false;\n          }\n\n          if (requestPassed) {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              sliderImages: updatedImages,\n              selectedIndex: 1,\n              itemCount: updatedImages.length + 1\n            }));\n            handleSelectedImage(1, updatedImages[0]);\n            toast.success(DELETE_SUCCESS, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          } else {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              selectedIndex: null\n            }));\n            toast.error('Something went wrong while deleting image. Please check network tab.', {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        } else {\n          toast.warn('Something went wrong while deleting image. Please check network tab.', {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      } else {\n        const retErr = isErrorMsg(res);\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  const handleSelectedImage = (index, image) => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      selectedIndex: index,\n      selectedImage: image\n    }));\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMIMG,\n      token: authToken,\n      params: {\n        query: `gid:${image.gid}`,\n        sort: 'orderno',\n        hotelrefno: Number(companyId)\n      }\n    }).then(res => {\n      if ((res === null || res === void 0 ? void 0 : res.status) === 200) {\n        var _res$data3, _res$data3$data;\n\n        if ((res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$data = _res$data3.data) === null || _res$data3$data === void 0 ? void 0 : _res$data3$data.length) > 0) {\n          setLocalState(prev => {\n            var _res$data$data$, _res$data$data$2, _res$data$data$3, _res$data$data$4, _res$data$data$5, _res$data$data$6, _res$data$data$7;\n\n            return _objectSpread(_objectSpread({}, prev), {}, {\n              title: (_res$data$data$ = res.data.data[0]) !== null && _res$data$data$ !== void 0 && _res$data$data$.title ? (_res$data$data$2 = res.data.data[0]) === null || _res$data$data$2 === void 0 ? void 0 : _res$data$data$2.title : '',\n              description: (_res$data$data$3 = res.data.data[0]) !== null && _res$data$data$3 !== void 0 && _res$data$data$3.description ? (_res$data$data$4 = res.data.data[0]) === null || _res$data$data$4 === void 0 ? void 0 : _res$data$data$4.description : '',\n              ctaVerticalAlignment: (_res$data$data$5 = res.data.data[0]) === null || _res$data$data$5 === void 0 ? void 0 : _res$data$data$5.alignver,\n              ctaHorizontalAlignment: (_res$data$data$6 = res.data.data[0]) === null || _res$data$data$6 === void 0 ? void 0 : _res$data$data$6.alignhor,\n              cta: (_res$data$data$7 = res.data.data[0]) === null || _res$data$data$7 === void 0 ? void 0 : _res$data$data$7.cta\n            });\n          });\n\n          if (res.data.data[0].cta) {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              isCta: true\n            }));\n            const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n            if (matchs.length > 0) {\n              const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLink: matchs[0],\n                ctaTitle: cta_title\n              }));\n            }\n          } else {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              ctaLink: '',\n              ctaTitle: '',\n              isCta: false\n            }));\n          }\n        }\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  const handleUpdateImage = () => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isRequested: true\n    }));\n    Patch({\n      // update image\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMIMG,\n      token: authToken,\n      gid: selectedImage === null || selectedImage === void 0 ? void 0 : selectedImage.gid,\n      params: {\n        hotelrefno: Number(companyId)\n      },\n      data: {\n        title: title,\n        description: description,\n        cta: cta,\n        alignhor: ctaHorizontalAlignment,\n        alignver: ctaVerticalAlignment\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n        toast.success(SAVED_SUCCESS, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  const asyncUpload = (file, itemTreated, callback) => {\n    if (state.hcmItemId) {\n      setTimeout(() => {\n        Insert({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG,\n          token: authToken,\n          data: {\n            itemid: state.hcmItemId,\n            imgtype: FIELDTYPE.IMG,\n            orderno: itemTreated,\n            sliderid: sliderID,\n            hotelrefno: Number(companyId)\n          }\n        }).then(r1 => {\n          var _r1$data;\n\n          if (r1.status === 200 && r1 !== null && r1 !== void 0 && (_r1$data = r1.data) !== null && _r1$data !== void 0 && _r1$data.data) {\n            var _r1$data2;\n\n            let updatedImages = [...sliderImages];\n            updatedImages.push(r1 === null || r1 === void 0 ? void 0 : (_r1$data2 = r1.data) === null || _r1$data2 === void 0 ? void 0 : _r1$data2.data);\n            ImageUpload(GENERAL_SETTINGS.OREST_URL, OREST_ENDPOINT.RAFILE, authToken, r1.data.data.mid, file).then(r => {\n              if (r.status === 200) {\n                callback();\n              } else {\n                callback();\n              }\n            });\n          } else {\n            callback();\n          }\n        });\n      }, 100);\n    }\n  };\n\n  const ImageUpload = (apiUrl, endPoint, token, masterID, file) => {\n    const url = apiUrl + '/' + endPoint + OREST_UPLOAD;\n    let binaryData = [];\n    binaryData.push(file);\n    let formData = new FormData();\n    formData.append('file', new Blob(binaryData, {\n      type: file.type\n    }), toSelfName(file.name));\n    const options = {\n      url: url,\n      method: 'post',\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      },\n      params: {\n        orsactive: true,\n        masterid: masterID,\n        hotelrefno: companyId\n      },\n      data: formData\n    };\n    return axios(options).then(response => {\n      return response;\n    }).catch(error => {\n      return error.response || {\n        status: 0\n      };\n    });\n  };\n\n  const handleImageQualityChange = value => {\n    if (value >= 10 && value <= 90 && value % 10 === 0) {\n      if (sliderImages.length) {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: true\n        }));\n        const gids = sliderImages.map(image => {\n          return {\n            gid: image.gid,\n            imgquality: value / 100,\n            imgscale: value / 100\n          };\n        });\n        UseOrest({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n          token: authToken,\n          method: REQUEST_METHOD_CONST.PATCH,\n          data: gids,\n          params: {\n            hotelrefno: Number(companyId)\n          }\n        }).then(res => {\n          var _res$data4;\n\n          if ((res === null || res === void 0 ? void 0 : res.status) === 200 && res !== null && res !== void 0 && (_res$data4 = res.data) !== null && _res$data4 !== void 0 && _res$data4.data) {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              isRequested: false,\n              quality: value\n            }));\n          } else {\n            const retErr = isErrorMsg(res);\n            toast.error(retErr.errorMsg, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        });\n      } else {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          quality: value\n        }));\n      }\n    }\n  };\n\n  const handleUpdateOrderNo = async (gid, orderNo, orderType) => {\n    // update order no of slider images\n    if (orderNo <= 0 || orderNo > sliderImages.length) {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        selectedIndex: null\n      }));\n    } else {\n      const tmpSliderImages = [...sliderImages];\n\n      if (orderType === 'increment') {\n        const tmp = tmpSliderImages[orderNo - 1];\n        tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo - 2];\n        tmpSliderImages[orderNo - 2] = tmp;\n      } else {\n        const tmp = tmpSliderImages[orderNo - 1];\n        tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo];\n        tmpSliderImages[orderNo] = tmp;\n      }\n\n      let updatedImages = [];\n      tmpSliderImages.map((data, index) => {\n        data.orderno = index + 1;\n        updatedImages.push(data);\n      });\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: true\n      }));\n      let requestPassed = true;\n\n      for (const sldImage of tmpSliderImages) {\n        const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {\n          orderno: sldImage.orderno\n        }, {\n          hotelrefno: Number(companyId)\n        }, sldImage.gid);\n        updatedSliderImage ? requestPassed = true : requestPassed = false;\n      }\n\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: false\n      }));\n\n      if (requestPassed) {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          sliderImages: updatedImages,\n          itemCount: (updatedImages === null || updatedImages === void 0 ? void 0 : updatedImages.length) + 1\n        }));\n        toast.success('Order No Updated Successfully', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n        handleSelectedImage(1, tmpSliderImages[0]);\n      } else {\n        toast.error('Something went wrong while updating order no. Please check network tab.', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }\n  };\n\n  const handleTextEditorValue = value => {\n    if (dialogType === 'title') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        title: value\n      }));\n    }\n\n    if (dialogType === 'description') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        description: value\n      }));\n    }\n\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isDialogOpen: false,\n      dialogType: '',\n      editorValue: ''\n    }));\n  };\n\n  const handleCancelEditor = () => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isDialogOpen: false,\n      dialogType: '',\n      editorValue: ''\n    }));\n  };\n\n  const handleDialogOpen = type => {\n    if (type === 'title') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isDialogOpen: true,\n        dialogType: type,\n        editorValue: title\n      }));\n    }\n\n    if (type === 'description') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isDialogOpen: true,\n        dialogType: type,\n        editorValue: description\n      }));\n    }\n  };\n\n  const handleAlignment = (type, value) => {\n    if (type === 'horizontal') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaHorizontalAlignment: value\n      }));\n    }\n\n    if (type === 'vertical') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaVerticalAlignment: value\n      }));\n    }\n  };\n\n  const handleChangeDatePicker = date => {\n    const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE);\n    setLocalState(_objectSpread(_objectSpread({}, localState), {}, {\n      expiryDate: dateValue\n    }));\n\n    if (dateValue !== 'Invalid date') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isRequested: true\n      }));\n      Patch({\n        // update slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        gid: sliderGID,\n        params: {\n          hotelrefno: Number(companyId)\n        },\n        data: {\n          expiredt: dateValue\n        }\n      }).then(res => {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          isRequested: false\n        }));\n\n        if (res.status === 200) {\n          toast.success(SAVED_SUCCESS, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        } else {\n          console.log(res);\n        }\n      });\n    }\n  };\n\n  if (isRequested) {\n    return __jsx(LoadingSpinner, {\n      size: 50,\n      style: {\n        color: COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 9\n    }\n  }, state.hcmItemId && __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 29\n    }\n  }, __jsx(\"div\", {\n    className: classes.alignRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 33\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 37\n    }\n  }, __jsx(DatePicker, {\n    id: \"sliderExpiryDate\",\n    name: \"sliderExpiryDate\",\n    label: 'Select Expiry',\n    value: expiryDate,\n    inputFormat: \"DD/MM/YYYY\",\n    disablePast: true,\n    onChange: handleChangeDatePicker,\n    renderInput: props => __jsx(TextField, _extends({}, props, {\n      variant: 'filled',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 69\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 41\n    }\n  }))))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-end',\n    className: isRequested ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 29\n    }\n  }, __jsx(FormControlLabel, {\n    className: classes.labelFont,\n    control: __jsx(Checkbox, {\n      size: 'small',\n      checked: isOptimizeImages,\n      onChange: () => setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isOptimizeImages: !isOptimizeImages\n      })),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 41\n      }\n    }),\n    label: \"Optimize Images\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 33\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 1,\n    style: {\n      marginTop: 6,\n      marginLeft: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    style: {\n      marginLeft: -8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 41\n    }\n  }, \"Text\")), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 37\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setLocalState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      textColor: color.hex\n    })),\n    placement: \"right\",\n    initialValue: textColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 41\n    }\n  }, \"Button\")), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 37\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setLocalState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      buttonColor: color.hex\n    })),\n    placement: \"right\",\n    initialValue: buttonColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 37\n    }\n  }, __jsx(Button, {\n    onClick: () => setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      openDialog: true\n    })),\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"upload\",\n    className: classes.uploadButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 41\n    }\n  }, __jsx(CloudUploadIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 45\n    }\n  }), \"UPLOAD\"))))), isOptimizeImages && __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 37\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 41\n    }\n  }, __jsx(PercentageSlider, {\n    marks: PERCENTAGE_VALUES,\n    value: quality,\n    onChange: (e, value) => handleImageQualityChange(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 45\n    }\n  }))))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    spacing: 3,\n    className: isRequested ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 29\n    }\n  }, __jsx(Paper, {\n    className: classes.paperBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 33\n    }\n  }, (sliderImages === null || sliderImages === void 0 ? void 0 : sliderImages.length) > 0 && sliderImages.map((value, index) => {\n    return __jsx(Grid, {\n      key: index,\n      container: true,\n      justify: 'center',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 49\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 53\n      }\n    }, __jsx(Card, {\n      className: classes.card,\n      style: {\n        border: index + 1 === selectedIndex ? '2px solid red' : `1px solid ${COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 57\n      }\n    }, __jsx(\"div\", {\n      style: {\n        backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL + value.fileurl})`,\n        height: '100%',\n        width: '100%',\n        backgroundSize: 'cover',\n        borderRadius: 5\n      },\n      onMouseEnter: () => {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          showDeleteButton: true,\n          hoverIndex: index\n        }));\n      },\n      onMouseLeave: () => {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          showDeleteButton: false,\n          hoverIndex: index\n        }));\n      },\n      onClick: () => handleSelectedImage(index + 1, value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 61\n      }\n    }, showDeleteButton && hoverIndex === index && __jsx(IconButton, {\n      disabled: isRequested,\n      component: \"span\",\n      color: 'primary',\n      className: index === sliderImages.length - 1 ? classes.disableEvent : '',\n      onClick: () => handleUpdateOrderNo(value.gid, value.orderno + 1, 'increment'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 113\n      }\n    }, __jsx(AddCircleIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 73\n      }\n    })), showDeleteButton && hoverIndex === index && __jsx(Typography, {\n      component: \"span\",\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 113\n      }\n    }, value.orderno), showDeleteButton && hoverIndex === index && __jsx(IconButton, {\n      disabled: isRequested,\n      component: \"span\",\n      color: 'primary',\n      className: index === 0 ? classes.disableEvent : '',\n      onClick: () => handleUpdateOrderNo(value.gid, value.orderno - 1, 'decrement'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 113\n      }\n    }, __jsx(RemoveCircleIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 73\n      }\n    })), showDeleteButton && hoverIndex === index && __jsx(IconButton, {\n      onClick: () => handleDeleteImage(value.gid),\n      disabled: isRequested,\n      \"aria-label\": \"upload picture\",\n      component: \"span\",\n      style: {\n        float: \"right\"\n      },\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 113\n      }\n    }, __jsx(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 73\n      }\n    }))))));\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 747,\n      columnNumber: 29\n    }\n  }, __jsx(Paper, {\n    className: classes.paperBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 33\n    }\n  }, selectedIndex && __jsx(React.Fragment, null, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 57\n    }\n  }, \"Title\")), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 53\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit Title\",\n    color: \"primary\",\n    onClick: () => handleDialogOpen('title'),\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 57\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 61\n    }\n  }))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 57\n    }\n  }, \"Description\")), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 53\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit Title\",\n    color: \"primary\",\n    onClick: () => handleDialogOpen('description'),\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 57\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 61\n    }\n  }))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 57\n    }\n  }, \"Do you want to add button for image ?\")), __jsx(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    component: 'div',\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 57\n    }\n  }, __jsx(Switch, {\n    size: 'small',\n    checked: isCta,\n    onChange: () => {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        cta: '',\n        isCta: !isCta,\n        ctaTitle: '',\n        ctaLink: ''\n      }));\n    },\n    inputProps: {\n      'aria-label': 'secondary checkbox'\n    },\n    color: 'primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 61\n    }\n  }))))), isCta && __jsx(React.Fragment, null, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 57\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 828,\n      columnNumber: 61\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 829,\n      columnNumber: 65\n    }\n  }, __jsx(FormLabel, {\n    id: \"align-horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 830,\n      columnNumber: 69\n    }\n  }, \"Horizontal Alignment :\")), __jsx(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 65\n    }\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    size: 'small',\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 69\n    }\n  }, __jsx(Select, {\n    value: ctaHorizontalAlignment,\n    onChange: e => handleAlignment('horizontal', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 73\n    }\n  }, horizontalAlignments.map((align, index) => {\n    return __jsx(MenuItem, {\n      value: align.value,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 85\n      }\n    }, ' ', align.text, ' ');\n  }))))), __jsx(Grid, {\n    container: true,\n    style: {\n      marginTop: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 61\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 848,\n      columnNumber: 65\n    }\n  }, __jsx(FormLabel, {\n    id: \"align-vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 849,\n      columnNumber: 69\n    }\n  }, \"Vertical Alignment : \")), __jsx(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 65\n    }\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    size: 'small',\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 69\n    }\n  }, __jsx(Select, {\n    value: ctaVerticalAlignment,\n    onChange: e => handleAlignment('vertical', e.target.value),\n    label: \"Vertical Alignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 73\n    }\n  }, verticalAlignments.map((align, index) => {\n    return __jsx(MenuItem, {\n      value: align.value,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 85\n      }\n    }, ' ', align.text, ' ');\n  })))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 872,\n      columnNumber: 53\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 57\n    }\n  }, __jsx(TextField, {\n    size: 'small',\n    id: \"button-title\",\n    variant: \"outlined\",\n    label: 'Title',\n    value: ctaTitle,\n    fullWidth: true,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaTitle: value\n      }));\n    },\n    style: {\n      marginTop: 8\n    },\n    helperText: ctaTitle && __jsx(Typography, {\n      variant: \"caption\",\n      className: classes.alignText,\n      display: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 81\n      }\n    }, `${ctaTitle === null || ctaTitle === void 0 ? void 0 : ctaTitle.length} < 100`),\n    inputProps: {\n      maxLength: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 874,\n      columnNumber: 61\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 57\n    }\n  }, __jsx(TextField, {\n    size: 'small',\n    id: \"button-link\",\n    variant: \"outlined\",\n    label: 'Link',\n    value: ctaLink,\n    error: ctaLink ? !validator.isURL(ctaLink) : false,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        ctaLink: value\n      }));\n    },\n    style: {\n      marginTop: 8\n    },\n    fullWidth: true,\n    helperText: ctaLink && __jsx(Typography, {\n      variant: \"caption\",\n      className: classes.alignText,\n      display: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 80\n      }\n    }, `${ctaLink === null || ctaLink === void 0 ? void 0 : ctaLink.length} < 100`),\n    inputProps: {\n      maxLength: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 61\n    }\n  }))))), __jsx(Divider, {\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 928,\n      columnNumber: 45\n    }\n  }), __jsx(Button, {\n    onClick: handleUpdateImage,\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 45\n    }\n  }, \"SUBMIT\"))))), __jsx(DropzoneDialog, {\n    open: openDialog,\n    onSave: handleSaveImage,\n    acceptedFiles: ['image/jpeg', 'image/png', 'image/bmp'],\n    showPreviews: true,\n    maxFileSize: 5000000,\n    filesLimit: 5,\n    onClose: () => setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      openDialog: false\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 25\n    }\n  }), isDialogOpen && __jsx(TextEditor, {\n    handleSaveTextEditor: handleTextEditorValue,\n    handleCancelTextEditor: handleCancelEditor,\n    data: editorValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 955,\n      columnNumber: 29\n    }\n  })));\n};\n\nexport default AddSliderGallery;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider-gallery/AddSliderGallery.js"],"names":["React","useContext","useEffect","useState","makeStyles","COLORS","DELETE_SUCCESS","PERCENTAGE_VALUES","SAVED_SUCCESS","UPLOAD_SUCCESS","verticalAlignments","horizontalAlignments","useSelector","Grid","Button","Typography","IconButton","Divider","TextField","Container","Card","Paper","FormControlLabel","Switch","Checkbox","FormControl","MenuItem","Select","FormLabel","CloudUploadIcon","DropzoneDialog","CancelIcon","FIELDTYPE","isErrorMsg","OREST_ENDPOINT","OREST_UPLOAD","REQUEST_METHOD_CONST","axios","useRouter","WebCmsGlobal","Delete","Insert","Patch","UseOrest","ViewList","toast","LoadingSpinner","validator","PercentageSlider","InputColor","AddCircleIcon","RemoveCircleIcon","getSliderImages","patchListSliderImage","TextEditor","BorderColorSharpIcon","toSelfName","DatePicker","LocalizationProvider","moment","MomentAdapter","useStyles","theme","root","margin","spacing","submit","marginRight","marginTop","borderRadius","float","disableUpload","pointerEvents","opacity","paperBlock","height","border","secondary","overflow","disableEvent","uploadButton","marginBottom","marginLeft","card","width","cursor","alignText","textAlign","color","text","fontWeight","fontSize","alignRight","AddSliderGallery","props","handleSectionComponent","state","formReducer","pageBuilder","localState","setLocalState","isRequested","openDialog","title","description","selectedIndex","hoverIndex","showDeleteButton","itemCount","sliderID","sliderGID","sliderImages","selectedImage","isCta","ctaTitle","ctaLink","cta","isOptimizeImages","quality","assets","meta","imageQuality","textColor","colors","slider","main","buttonColor","button","isDialogOpen","editorValue","dialogType","ctaVerticalAlignment","ctaHorizontalAlignment","expiryDate","format","DATEFORMAT_LOCALE","classes","router","companyId","query","companyID","GENERAL_SETTINGS","token","authToken","prev","apiUrl","OREST_URL","endpoint","HCMITEMSLD","data","itemid","hcmItemId","hotelrefno","Number","then","res","status","id","gid","service","type","retErr","error","errorMsg","position","POSITION","TOP_RIGHT","handleSaveImage","files","orderNo","requests","map","file","Promise","resolve","asyncUpload","all","HCMITEMIMG","params","sort","updatedImages","push","length","handleSelectedImage","success","handleDeleteImage","sldImages","a","b","orderno","index","requestPassed","sldImage","updatedSliderImage","warn","image","alignver","alignhor","matchs","match","cta_title","replace","trim","handleUpdateImage","itemTreated","callback","setTimeout","imgtype","IMG","sliderid","r1","ImageUpload","RAFILE","mid","r","endPoint","masterID","url","binaryData","formData","FormData","append","Blob","name","options","method","headers","orsactive","masterid","response","catch","handleImageQualityChange","value","gids","imgquality","imgscale","LIST","PATCH","handleUpdateOrderNo","orderType","tmpSliderImages","tmp","handleTextEditorValue","handleCancelEditor","handleDialogOpen","handleAlignment","handleChangeDatePicker","date","dateValue","expiredt","console","log","labelFont","prevState","hex","e","backgroundImage","STATIC_URL","fileurl","backgroundSize","target","align","maxLength","isURL"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {\n    COLORS,\n    DELETE_SUCCESS,\n    PERCENTAGE_VALUES,\n    SAVED_SUCCESS,\n    UPLOAD_SUCCESS,\n    verticalAlignments,\n    horizontalAlignments\n} from \"../../../../constants\";\nimport {useSelector} from 'react-redux'\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n    Button,\n    Typography,\n    IconButton,\n    Divider,\n    TextField,\n    Container,\n    Card,\n    Paper,\n    FormControlLabel,\n    Switch,\n    Checkbox,\n    FormControl,\n    MenuItem,\n    Select,\n    FormLabel\n} from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport {DropzoneDialog} from \"material-ui-dropzone\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport {\n    FIELDTYPE,\n    isErrorMsg,\n    OREST_ENDPOINT,\n    OREST_UPLOAD,\n    REQUEST_METHOD_CONST\n} from \"../../../../../../../model/orest/constants\";\nimport axios from \"axios\";\nimport {useRouter} from \"next/router\";\nimport WebCmsGlobal from \"components/webcms-global\";\nimport {Delete, Insert, Patch, UseOrest, ViewList} from \"@webcms/orest\";\nimport {toast} from \"react-toastify\";\nimport LoadingSpinner from \"../../../../../../LoadingSpinner\";\nimport validator from \"validator\";\nimport {PercentageSlider} from \"../../../../../../../model/slider\";\nimport InputColor from \"react-input-color\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport {getSliderImages, patchListSliderImage} from \"../../../../helpers/slider\";\nimport TextEditor from \"../text-editor\";\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport { toSelfName } from './../../../../../../../lib/helpers/useFunction';\nimport {DatePicker, LocalizationProvider} from \"@material-ui/pickers\";\nimport moment from \"moment\";\nimport MomentAdapter from \"@date-io/moment\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    submit: {\n        marginRight: theme.spacing(3),\n        marginTop: theme.spacing(1),\n        borderRadius: 20,\n        float: \"right\"\n    },\n    disableUpload: {\n        pointerEvents: \"none\",\n        opacity: 0.5\n    },\n    paperBlock: {\n        height: 350,\n        border: `2px solid ${COLORS?.secondary}`,\n        overflow: \"auto\"\n    },\n    disableEvent: {\n        pointerEvents: \"none\",\n        opacity: 0.5\n    },\n    uploadButton: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n        // float: 'right'\n    },\n    card: {\n        height: 200,\n        width: 300,\n        margin: theme.spacing(1),\n        cursor: \"pointer\"\n    },\n    alignText: {\n        textAlign: \"right\",\n        color: \"red\"\n    },\n    text: {\n        marginTop: 16,\n        fontWeight: \"bold\",\n        fontSize: 15\n    },\n    alignRight: {\n        float: 'right'\n    }\n}));\n\nconst AddSliderGallery = (props) =>  {\n\n    const { handleSectionComponent } = props\n    const state = useSelector(state => state.formReducer.pageBuilder);\n    const [localState, setLocalState] = useState({\n        isRequested: false,\n        openDialog: false,\n        title: '',\n        description: '',\n        selectedIndex: null,\n        hoverIndex: null,\n        showDeleteButton: false,\n        itemCount: 1,\n        sliderID: null,\n        sliderGID: null,\n        sliderImages: [],\n        selectedImage: null,\n        isCta: false,\n        ctaTitle: '',\n        ctaLink: '',\n        cta: '',\n        isOptimizeImages: false,\n        quality: state?.assets?.meta?.imageQuality ? (state.assets.meta.imageQuality * 100) : 50,\n        textColor: state?.assets?.colors?.slider?.main ? state.assets.colors.slider.main : '#fff',\n        buttonColor: state?.assets?.colors?.button?.main ? state.assets.colors.button.main : '#fff',\n        isDialogOpen: false,\n        editorValue: '',\n        dialogType: '',\n        ctaVerticalAlignment: '0000192',\n        ctaHorizontalAlignment: '0000182',\n        expiryDate: moment().format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n    });\n\n    const {\n        isRequested, openDialog, description, title, selectedIndex,\n        hoverIndex, showDeleteButton, itemCount, sliderID, sliderImages,\n        selectedImage, isCta, ctaLink, ctaTitle, cta, isOptimizeImages, quality,\n        buttonColor, textColor, sliderGID, isDialogOpen, dialogType, editorValue,\n        ctaVerticalAlignment, ctaHorizontalAlignment, expiryDate\n    } = localState;\n\n    const classes = useStyles();\n\n    const router = useRouter();\n    const companyId = router.query.companyID;\n    const {GENERAL_SETTINGS, token} = useContext(WebCmsGlobal);\n    const authToken = token || router.query.authToken;\n\n    useEffect(() => {\n        setLocalState(prev => ({...prev, isRequested: true}));\n        Insert({ // insert slider\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMSLD,\n            token: authToken,\n            data: {\n                itemid: state.hcmItemId,\n                hotelrefno: Number(companyId)\n            },\n        }).then(res => {\n            setLocalState(prev => ({...prev, isRequested: false}));\n            if (res?.status === 200 && res?.data?.data) {\n                setLocalState(prev => ({...prev, sliderID: res.data.data?.id, sliderGID: res.data.data?.gid}));\n                handleSectionComponent({\n                    service: \"hcmitemsld\",\n                    type: \"slider-gallery\",\n                    gid: res.data.data?.gid,\n                    textColor: textColor,\n                    buttonColor: buttonColor,\n                });\n            } else {\n                const retErr = isErrorMsg(res);\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        })\n    }, []);\n\n    useEffect(() => {\n        handleSectionComponent &&\n        handleSectionComponent({\n            service: \"hcmitemsld\",\n            type: \"slider-gallery\",\n            gid: sliderGID,\n            textColor: textColor,\n            buttonColor: buttonColor,\n        });\n    }, [textColor, buttonColor]);\n\n    useEffect(() => {\n        if(ctaTitle && ctaLink) {\n            setLocalState(prev => ({...prev, cta: `<a target=\"_blank\" href=\"${ctaLink}\" > ${ctaTitle} </a>`}));\n        }\n    }, [ctaTitle, ctaLink]);\n\n    const handleSaveImage = (files) => {\n        setLocalState(prev => ({...prev, isRequested: true}))\n        let orderNo = itemCount;\n        let requests = files.map((file) => {\n            return new Promise( (resolve) => {\n                asyncUpload(file, orderNo, resolve);\n                orderNo ++ ;\n            });\n        });\n\n        Promise.all(requests).then(() => {\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                token: authToken,\n                params: {\n                    query: `sliderid:${sliderID}`,\n                    sort: 'orderno',\n                    hotelrefno:  Number(companyId)\n                }\n            }).then(res => {\n                setLocalState(prev => ({...prev, isRequested: false}))\n                if (res?.status === 200) {\n                    let updatedImages = [];\n                    res?.data?.data?.map((data) => {\n                        updatedImages.push(data);\n                    });\n                    setLocalState(prev => ({...prev, sliderImages: updatedImages, itemCount: updatedImages.length + 1, openDialog: false}));\n                    handleSelectedImage(1, updatedImages[0]);\n                    toast.success(UPLOAD_SUCCESS, {\n                        position: toast.POSITION.TOP_RIGHT\n                    });\n                } else {\n                    const retErr = isErrorMsg(res);\n                    toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT\n                    });\n                }\n            });\n        });\n    }\n\n    const handleDeleteImage = (gid) => {\n        setLocalState(prev => ({...prev, isRequested: true}))\n        Delete({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            gid: gid,\n            params: {\n                hotelrefno: Number(companyId)\n            }\n        }).then(async res => {\n            if (res.status === 200) {\n                const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n                sldImages.sort((a, b) => (a.orderno > b.orderno) ? 1 : -1)\n                setLocalState(prev => ({...prev, isRequested: false}));\n                if (sldImages) {\n                    let updatedImages = [];\n                    sldImages.map((data, index) => {\n                        data.orderno = index + 1;\n                        updatedImages.push(data);\n                    });\n                    let requestPassed = true;\n                    for (const sldImage of sldImages) {\n                        const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {orderno: sldImage.orderno}, {hotelrefno: Number(companyId)}, sldImage.gid);\n                        updatedSliderImage ? requestPassed = true : requestPassed = false;\n                    }\n                    if (requestPassed) {\n                        setLocalState(prev => ({...prev, sliderImages: updatedImages, selectedIndex: 1, itemCount: updatedImages.length + 1}));\n                        handleSelectedImage(1, updatedImages[0]);\n                        toast.success(DELETE_SUCCESS, {\n                            position: toast.POSITION.TOP_RIGHT\n                        });\n                    } else {\n                        setLocalState(prev => ({...prev, selectedIndex: null}));\n                        toast.error('Something went wrong while deleting image. Please check network tab.', {\n                            position: toast.POSITION.TOP_RIGHT\n                        });\n                    }\n                } else {\n                    toast.warn('Something went wrong while deleting image. Please check network tab.', {\n                        position: toast.POSITION.TOP_RIGHT\n                    });\n                }\n            } else {\n                const retErr = isErrorMsg(res);\n                setLocalState(prev => ({...prev, isRequested: false}))\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        });\n    }\n\n    const handleSelectedImage = (index, image) => {\n        setLocalState(prev => ({...prev, selectedIndex: index, selectedImage: image}));\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            params: {\n                query: `gid:${image.gid}`,\n                sort: 'orderno',\n                hotelrefno:  Number(companyId)\n            }\n        }).then(res => {\n            if (res?.status === 200) {\n                if (res?.data?.data?.length > 0) {\n                    setLocalState(prev => ({...prev, title: res.data.data[0]?.title ? res.data.data[0]?.title : '',\n                                description: res.data.data[0]?.description ? res.data.data[0]?.description : '',\n                        ctaVerticalAlignment: res.data.data[0]?.alignver, ctaHorizontalAlignment: res.data.data[0]?.alignhor,\n                        cta: res.data.data[0]?.cta}));\n                    if (res.data.data[0].cta) {\n                        setLocalState(prev => ({...prev, isCta: true}));\n                        const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                        if (matchs.length > 0) {\n                            const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`,\n                                '').replace(matchs[0], '').replace('>',\n                                '').replace('</a>', '').trim();\n                            setLocalState(prev => ({...prev, ctaLink: matchs[0], ctaTitle: cta_title}));\n                        }\n                    } else {\n                        setLocalState(prev => ({...prev, ctaLink: '', ctaTitle: '', isCta: false}));\n                    }\n                }\n            } else {\n                const retErr = isErrorMsg(res);\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        })\n    }\n\n    const handleUpdateImage = () => {\n        setLocalState(prev => ({...prev, isRequested: true}));\n        Patch({ // update image\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            gid: selectedImage?.gid,\n            params: {\n                hotelrefno: Number(companyId),\n            },\n            data: {\n                title: title,\n                description: description,\n                cta: cta,\n                alignhor: ctaHorizontalAlignment,\n                alignver: ctaVerticalAlignment\n            }\n        }).then(res => {\n            if(res.status === 200) {\n                setLocalState(prev => ({...prev, isRequested: false}));\n                toast.success(SAVED_SUCCESS, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            } else {\n                const retErr = isErrorMsg(res);\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        })\n    }\n\n    const asyncUpload = (file, itemTreated, callback) => {\n        if (state.hcmItemId) {\n            setTimeout(() => {\n                Insert({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                    token: authToken,\n                    data: {\n                        itemid: state.hcmItemId,\n                        imgtype: FIELDTYPE.IMG,\n                        orderno: itemTreated,\n                        sliderid: sliderID,\n                        hotelrefno: Number(companyId)\n                    },\n                }).then(r1 => {\n                    if (r1.status === 200 && r1?.data?.data) {\n                        let updatedImages = [...sliderImages];\n                        updatedImages.push(r1?.data?.data);\n                        ImageUpload(\n                            GENERAL_SETTINGS.OREST_URL,\n                            OREST_ENDPOINT.RAFILE,\n                            authToken,\n                            r1.data.data.mid,\n                            file\n                        ).then(r => {\n                            if (r.status === 200) {\n                                callback();\n                            } else {\n                                callback();\n                            }\n                        });\n                    } else {\n                        callback();\n                    }\n                });\n            }, 100);\n        }\n    }\n\n    const ImageUpload = (apiUrl, endPoint, token, masterID, file) => {\n        const url = apiUrl + '/' + endPoint + OREST_UPLOAD;\n        let binaryData = [];\n        binaryData.push(file);\n        let formData = new FormData();\n        formData.append('file', new Blob(binaryData, {type: file.type}), toSelfName(file.name));\n\n        const options = {\n            url: url,\n            method: 'post',\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                'Content-Type': 'multipart/form-data'\n            },\n            params: {\n                orsactive: true,\n                masterid: masterID,\n                hotelrefno: companyId,\n            },\n            data: formData\n        };\n\n        return axios(options).then(response => {\n            return response\n        }).catch(error => {\n            return error.response || {status: 0};\n        });\n    };\n\n    const handleImageQualityChange = (value) => {\n        if (value >= 10 && value <= 90 && value % 10 === 0) {\n            if (sliderImages.length) {\n                setLocalState(prev => ({...prev, isRequested: true}));\n                const gids = sliderImages.map(image => {\n                    return {gid: image.gid, imgquality: value / 100, imgscale: value / 100};\n                });\n                UseOrest({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n                    token: authToken,\n                    method: REQUEST_METHOD_CONST.PATCH,\n                    data: gids,\n                    params: {\n                        hotelrefno: Number(companyId),\n                    },\n                }).then(res => {\n                    if (res?.status === 200 && res?.data?.data) {\n                        setLocalState(prev => ({...prev, isRequested: false, quality: value}))\n                    } else {\n                        const retErr = isErrorMsg(res);\n                        toast.error(retErr.errorMsg, {\n                            position: toast.POSITION.TOP_RIGHT\n                        });\n                    }\n                })\n            } else {\n                setLocalState(prev => ({...prev, quality: value}))\n            }\n        }\n    }\n\n    const handleUpdateOrderNo = async (gid, orderNo, orderType) => { // update order no of slider images\n        if (orderNo <= 0 || orderNo > sliderImages.length) {\n            setLocalState(prev => ({...prev, selectedIndex: null}))\n        } else {\n            const tmpSliderImages = [...sliderImages];\n            if (orderType === 'increment') {\n                const tmp = tmpSliderImages[orderNo - 1];\n                tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo - 2];\n                tmpSliderImages[orderNo - 2] = tmp;\n            } else {\n                const tmp = tmpSliderImages[orderNo - 1];\n                tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo];\n                tmpSliderImages[orderNo] = tmp;\n            }\n            let updatedImages = [];\n            tmpSliderImages.map((data, index) => {\n                data.orderno = index + 1;\n                updatedImages.push(data);\n            });\n            setLocalState(prev => ({...prev, isRequested: true}));\n            let requestPassed = true;\n            for (const sldImage of tmpSliderImages) {\n                const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {orderno: sldImage.orderno}, {hotelrefno: Number(companyId)}, sldImage.gid);\n                updatedSliderImage ? requestPassed = true : requestPassed = false;\n            }\n            setLocalState(prev => ({...prev, isRequested: false}));\n            if (requestPassed) {\n                setLocalState(prev => ({...prev, sliderImages: updatedImages, itemCount: updatedImages?.length + 1}));\n                toast.success('Order No Updated Successfully', {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n                handleSelectedImage(1, tmpSliderImages[0]);\n            } else {\n                toast.error('Something went wrong while updating order no. Please check network tab.', {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        }\n    }\n\n    const handleTextEditorValue = (value) => {\n        if (dialogType === 'title') {\n            setLocalState(prev => ({...prev, title: value}));\n        }\n        if (dialogType === 'description') {\n            setLocalState(prev => ({...prev, description: value}));\n        }\n        setLocalState(prev => ({...prev, isDialogOpen: false, dialogType: '', editorValue: ''}));\n    }\n\n    const handleCancelEditor = () => {\n        setLocalState(prev => ({...prev, isDialogOpen: false, dialogType: '', editorValue: ''}));\n    }\n\n    const handleDialogOpen = (type) => {\n        if (type === 'title') {\n            setLocalState(prev => ({...prev, isDialogOpen: true, dialogType: type, editorValue: title}));\n        }\n        if (type === 'description') {\n            setLocalState(prev => ({...prev, isDialogOpen: true, dialogType: type, editorValue: description}));\n        }\n    }\n\n    const handleAlignment = (type, value) => {\n        if (type === 'horizontal') {\n            setLocalState(prev => ({...prev, ctaHorizontalAlignment: value}));\n        }\n        if (type === 'vertical') {\n            setLocalState(prev => ({...prev, ctaVerticalAlignment: value}));\n        }\n    }\n\n    const handleChangeDatePicker = (date) => {\n        const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n        setLocalState({...localState, expiryDate: dateValue});\n        if (dateValue !== 'Invalid date') {\n            setLocalState(prev => ({...prev, isRequested: true}))\n            Patch({\n                // update slider\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                gid: sliderGID,\n                params: {\n                    hotelrefno: Number(companyId),\n                },\n                data: {\n                    expiredt: dateValue,\n                },\n            }).then((res) => {\n                setLocalState(prev => ({...prev, isRequested: false}))\n                if (res.status === 200) {\n                    toast.success(SAVED_SUCCESS, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                } else {\n                    console.log(res)\n                }\n            })\n        }\n    }\n\n    if (isRequested) {\n        return <LoadingSpinner size={50} style={{color: COLORS?.secondary}} />\n    }\n\n    return (\n        <React.Fragment>\n            {\n                state.hcmItemId && (\n                    <>\n                        <Grid container={true}>\n                            <Grid item xs={12}>\n                                <div className={classes.alignRight}>\n                                    <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                        <DatePicker\n                                            id=\"sliderExpiryDate\"\n                                            name=\"sliderExpiryDate\"\n                                            label={'Select Expiry'}\n                                            value={expiryDate}\n                                            inputFormat=\"DD/MM/YYYY\"\n                                            disablePast\n                                            onChange={handleChangeDatePicker}\n                                            renderInput={(props) => <TextField {...props}\n                                                                               variant={'filled'}\n                                                                               required={true}\n                                            />}\n                                        />\n                                    </LocalizationProvider>\n                                </div>\n                            </Grid>\n                        </Grid>\n                        <Grid container={true} justify={'flex-end'} className={isRequested ? classes.disableEvent : ''}>\n                            <Grid item xs={5}>\n                                <FormControlLabel\n                                    className={classes.labelFont}\n                                    control={\n                                        <Checkbox\n                                            size={'small'}\n                                            checked={isOptimizeImages}\n                                            onChange={() => setLocalState(prev => ({...prev, isOptimizeImages: !isOptimizeImages}))}\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"Optimize Images\"\n                                />\n                            </Grid>\n                            <Grid item xs={7}>\n                                <Grid container>\n                                    <Grid item xs={1} style={{marginTop: 6, marginLeft: 16}}>\n                                        <Typography component={'span'} style={{marginLeft: -8}}>Text</Typography>\n                                    </Grid>\n                                    <Grid item xs={2} style={{marginTop: 8}}>\n                                        <InputColor\n                                            onChange={(color) => setLocalState(prevState => ({...prevState, textColor: color.hex}))}\n                                            placement=\"right\"\n                                            initialValue={textColor}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={2} style={{marginTop: 6}}>\n                                        <Typography component={'span'}>Button</Typography>\n                                    </Grid>\n                                    <Grid item xs={4} style={{marginTop: 8}}>\n                                        <InputColor\n                                            onChange={(color) => setLocalState(prevState => ({...prevState, buttonColor: color.hex}))}\n                                            placement=\"right\"\n                                            initialValue={buttonColor}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={2}>\n                                        <Button\n                                            onClick={() => setLocalState(prev => ({...prev, openDialog: true}))}\n                                            variant=\"contained\"\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            aria-label=\"upload\"\n                                            className={classes.uploadButton}\n                                        >\n                                            <CloudUploadIcon/>\n                                            UPLOAD\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        {\n                            isOptimizeImages && <Grid container>\n                                <Grid item xs={12}>\n                                    <Grid container>\n                                        <Grid item xs={12}>\n                                            <PercentageSlider\n                                                marks={PERCENTAGE_VALUES}\n                                                value={quality}\n                                                onChange={(e, value) => handleImageQualityChange(value)}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        }\n                        <Grid container justify={'flex-start'} spacing={3} className={isRequested ? classes.disableEvent : ''}>\n                            <Grid item xs={5}>\n                                <Paper className={classes.paperBlock}>\n                                    {\n                                        sliderImages?.length > 0 && sliderImages.map((value, index) => {\n                                            return (\n                                                <Grid key={index} container justify={'center'}>\n                                                    <Grid item={true}>\n                                                        <Card  className={classes.card}\n                                                               style={{border: index + 1 === selectedIndex ? '2px solid red' :\n                                                                       `1px solid ${COLORS?.secondary}`}}>\n                                                            <div style={{\n                                                                backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL + value.fileurl})`,\n                                                                height: '100%',\n                                                                width: '100%',\n                                                                backgroundSize: 'cover',\n                                                                borderRadius: 5,\n                                                            }}\n                                                                 onMouseEnter={() => {setLocalState(prev => ({...prev, showDeleteButton: true, hoverIndex: index}))}}\n                                                                 onMouseLeave={() => {setLocalState(prev => ({...prev, showDeleteButton: false, hoverIndex: index}))}}\n                                                                 onClick={() => handleSelectedImage(index + 1, value)}\n                                                            >\n                                                                {\n                                                                    showDeleteButton && hoverIndex === index && <IconButton\n                                                                        disabled={isRequested}\n                                                                        component=\"span\"\n                                                                        color={'primary'}\n                                                                        className={index === sliderImages.length - 1 ? classes.disableEvent : ''}\n                                                                        onClick={() => handleUpdateOrderNo(value.gid, value.orderno + 1, 'increment')}\n                                                                    >\n                                                                        <AddCircleIcon />\n                                                                    </IconButton>\n                                                                }\n                                                                {\n                                                                    showDeleteButton && hoverIndex === index && <Typography\n                                                                        component=\"span\"\n                                                                        color={'primary'}\n                                                                    >\n                                                                        {value.orderno}\n                                                                    </Typography>\n                                                                }\n                                                                {\n                                                                    showDeleteButton && hoverIndex === index && <IconButton\n                                                                        disabled={isRequested}\n                                                                        component=\"span\"\n                                                                        color={'primary'}\n                                                                        className={index === 0 ? classes.disableEvent : ''}\n                                                                        onClick={() => handleUpdateOrderNo(value.gid, value.orderno - 1, 'decrement')}\n                                                                    >\n                                                                        <RemoveCircleIcon />\n                                                                    </IconButton>\n                                                                }\n                                                                {\n                                                                    showDeleteButton && hoverIndex === index && <IconButton\n                                                                        onClick={() => handleDeleteImage(value.gid)}\n                                                                        disabled={isRequested}\n                                                                        aria-label=\"upload picture\"\n                                                                        component=\"span\"\n                                                                        style={{float: \"right\"}}\n                                                                        color={'primary'}\n                                                                    >\n                                                                        <CancelIcon/>\n                                                                    </IconButton>\n                                                                }\n                                                            </div>\n                                                        </Card>\n                                                    </Grid>\n                                                </Grid>\n                                            )\n                                        })\n                                    }\n                                </Paper>\n                            </Grid>\n                            <Grid item xs={7}>\n                                <Paper className={classes.paperBlock}>\n                                    {\n                                        selectedIndex &&\n                                        <>\n                                            <Container>\n                                                <Grid container justify={'flex-start'}>\n                                                    <Grid item xs={3}>\n                                                        <Typography\n                                                            component={'h6'}\n                                                            variant={'h6'}\n                                                            className={classes.text}\n                                                        >\n                                                            Title\n                                                        </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={9}>\n                                                        <IconButton\n                                                            aria-label=\"Edit Title\"\n                                                            color=\"primary\"\n                                                            onClick={() => handleDialogOpen('title')}\n                                                            style={{float: 'right'}}\n                                                        >\n                                                            <BorderColorSharpIcon color=\"primary\" />\n                                                        </IconButton>\n                                                    </Grid>\n                                                </Grid>\n                                            </Container>\n                                            <Container>\n                                                <Grid container justify={'flex-start'}>\n                                                    <Grid item xs={3}>\n                                                        <Typography\n                                                            component={'h6'}\n                                                            variant={'h6'}\n                                                            className={classes.text}\n                                                        >\n                                                            Description\n                                                        </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={9}>\n                                                        <IconButton\n                                                            aria-label=\"Edit Title\"\n                                                            color=\"primary\"\n                                                            onClick={() => handleDialogOpen('description')}\n                                                            style={{float: 'right'}}\n                                                        >\n                                                            <BorderColorSharpIcon color=\"primary\" />\n                                                        </IconButton>\n                                                    </Grid>\n                                                </Grid>\n                                            </Container>\n                                            <Container>\n                                                <Grid container justify={'flex-start'}>\n                                                    <Grid item xs={11}>\n                                                        <Typography\n                                                            component={'h6'}\n                                                            variant={'h6'}\n                                                            className={classes.text}\n                                                        >\n                                                            Do you want to add button for image ?\n                                                        </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={1} >\n                                                        <Typography component={'div'} style={{marginTop: 20}}>\n                                                            <Switch\n                                                                size={'small'}\n                                                                checked={isCta}\n                                                                onChange={() => {\n                                                                    setLocalState(prev => ({...prev, cta: '', isCta: !isCta, ctaTitle: '', ctaLink: ''}))\n                                                                }}\n                                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                                color={'primary'}\n                                                            />\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Container>\n                                            {\n                                                isCta &&\n                                                    <>\n                                                        <Container>\n                                                            <Grid container>\n                                                                <Grid item xs={4}>\n                                                                    <FormLabel id=\"align-horizontal\">Horizontal Alignment :</FormLabel>\n                                                                </Grid>\n                                                                <Grid item xs={8}>\n                                                                    <FormControl variant=\"outlined\" size={'small'} fullWidth>\n                                                                        <Select value={ctaHorizontalAlignment} onChange={(e) => handleAlignment('horizontal', e.target.value)}>\n                                                                            {horizontalAlignments.map((align, index) => {\n                                                                                return (\n                                                                                    <MenuItem value={align.value} key={index}>\n                                                                                        {' '}\n                                                                                        {align.text}{' '}\n                                                                                    </MenuItem>\n                                                                                )\n                                                                            })}\n                                                                        </Select>\n                                                                    </FormControl>\n                                                                </Grid>\n                                                            </Grid>\n                                                            <Grid container style={{marginTop: 4}}>\n                                                                <Grid item xs={4}>\n                                                                    <FormLabel id=\"align-vertical\">Vertical Alignment : </FormLabel>\n                                                                </Grid>\n                                                                <Grid item xs={8}>\n                                                                    <FormControl variant=\"outlined\" size={'small'} fullWidth>\n                                                                        <Select\n                                                                            value={ctaVerticalAlignment}\n                                                                            onChange={(e) => handleAlignment('vertical', e.target.value)}\n                                                                            label=\"Vertical Alignment\"\n                                                                        >\n                                                                            {verticalAlignments.map((align, index) => {\n                                                                                return (\n                                                                                    <MenuItem value={align.value} key={index}>\n                                                                                        {' '}\n                                                                                        {align.text}{' '}\n                                                                                    </MenuItem>\n                                                                                )\n                                                                            })}\n                                                                        </Select>\n                                                                    </FormControl>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </Container>\n                                                <Container>\n                                                    <Grid container justify={'flex-start'} spacing={3}>\n                                                        <Grid item xs={6}>\n                                                            <TextField\n                                                                size={'small'}\n                                                                id=\"button-title\"\n                                                                variant={\"outlined\"}\n                                                                label={'Title'}\n                                                                value={ctaTitle}\n                                                                fullWidth\n                                                                onChange={(e) => {\n                                                                    const { value } = e?.target;\n                                                                    setLocalState(prev => ({...prev, ctaTitle: value}))\n                                                                }}\n                                                                style={{marginTop: 8}}\n                                                                helperText={\n                                                                    ctaTitle && <Typography\n                                                                        variant=\"caption\"\n                                                                        className={classes.alignText}\n                                                                        display=\"block\"\n                                                                    >\n                                                                        { `${ctaTitle?.length} < 100` }\n                                                                    </Typography>\n                                                                }\n                                                                inputProps={{maxLength: 99}}\n                                                            />\n                                                        </Grid>\n                                                        <Grid item xs={6}>\n                                                            <TextField\n                                                                size={'small'}\n                                                                id=\"button-link\"\n                                                                variant={\"outlined\"}\n                                                                label={'Link'}\n                                                                value={ctaLink}\n                                                                error={ctaLink ? !validator.isURL(ctaLink) : false}\n                                                                onChange={(e) => {\n                                                                    const { value } = e?.target;\n                                                                    setLocalState(prev => ({...prev, ctaLink: value}))\n                                                                }}\n                                                                style={{marginTop: 8}}\n                                                                fullWidth\n                                                                helperText={\n                                                                    ctaLink && <Typography\n                                                                        variant=\"caption\"\n                                                                        className={classes.alignText}\n                                                                        display=\"block\"\n                                                                    >\n                                                                        { `${ctaLink?.length} < 100` }\n                                                                    </Typography>\n                                                                }\n                                                                inputProps={{maxLength: 99}}\n                                                            />\n                                                        </Grid>\n                                                    </Grid>\n                                                </Container>\n                                                        </>\n                                            }\n                                            <Divider style={{marginTop: 8}} />\n                                            <Button\n                                                onClick={handleUpdateImage}\n                                                variant=\"contained\"\n                                                size=\"small\"\n                                                color=\"primary\"\n                                                aria-label=\"add\"\n                                                className={classes.submit}\n                                            >\n                                                SUBMIT\n                                            </Button>\n                                        </>\n                                    }\n                                </Paper>\n                            </Grid>\n                        </Grid>\n                        <DropzoneDialog\n                            open={openDialog}\n                            onSave={handleSaveImage}\n                            acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\n                            showPreviews={true}\n                            maxFileSize={5000000}\n                            filesLimit={5}\n                            onClose={() => setLocalState(prev => ({...prev, openDialog: false}))}\n                        />\n                        {\n                            isDialogOpen &&\n                            <TextEditor\n                                handleSaveTextEditor={handleTextEditorValue}\n                                handleCancelTextEditor={handleCancelEditor}\n                                data={editorValue}\n                            />\n                        }\n                    </>\n                )\n            }\n        </React.Fragment>\n    )\n}\nexport  default  AddSliderGallery;"]},"metadata":{},"sourceType":"module"}