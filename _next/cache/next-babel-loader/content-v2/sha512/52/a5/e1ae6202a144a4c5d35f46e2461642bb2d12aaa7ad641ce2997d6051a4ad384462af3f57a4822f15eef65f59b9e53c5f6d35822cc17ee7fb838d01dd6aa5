{"ast":null,"code":"import _toConsumableArray from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/contact-form/AddContactForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react'; //material imports\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport { UseOrest } from \"@webcms/orest\";\nimport { OREST_ENDPOINT } from \"../../../../../../../model/orest/constants\";\nimport WebCmsGlobal from \"../../../../../../webcms-global\";\nimport { useRouter } from \"next/router\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ReCaptcha from 'react-google-recaptcha';\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    actionButton: {\n      marginLeft: theme.spacing(1),\n      borderRadius: 20,\n      \"float\": \"right\"\n    },\n    textArea: {\n      width: '100%',\n      borderColor: 'silver',\n      borderRadius: 5\n    }\n  };\n});\n\nvar AddContactForm = function AddContactForm(props) {\n  _s();\n\n  var handleSectionComponent = props.handleSectionComponent,\n      handleNextDisable = props.handleNextDisable;\n\n  var _useState = useState([]),\n      accTypes = _useState[0],\n      setAccTypes = _useState[1];\n\n  var _useState2 = useState(''),\n      accType = _useState2[0],\n      setAccType = _useState2[1];\n\n  var _useState3 = useState([{\n    id: 'label-1',\n    type: 'heading',\n    label: 'Contact Form',\n    isActive: true,\n    isEditMode: false\n  }, {\n    id: 'label-2',\n    type: 'refcode',\n    label: 'Type',\n    isActive: true,\n    isEditMode: false\n  }, {\n    id: 'label-3',\n    type: 'company',\n    label: 'Company Name',\n    isActive: true,\n    isEditMode: false\n  }, {\n    id: 'label-4',\n    type: 'firstname',\n    label: 'First Name',\n    isActive: true,\n    isEditMode: false\n  }, {\n    id: 'label-5',\n    type: 'lastname',\n    label: 'Last Name',\n    isActive: true,\n    isEditMode: false\n  }, {\n    id: 'label-6',\n    type: 'workemail',\n    label: 'Email',\n    isActive: true,\n    isEditMode: false\n  }, {\n    id: 'label-7',\n    type: 'mobiletel',\n    label: 'Phone',\n    isActive: true,\n    isEditMode: false\n  }, {\n    id: 'label-8',\n    type: 'salesnote',\n    label: 'Message',\n    isActive: true,\n    isEditMode: false\n  }, {\n    id: 'label-9',\n    type: 'recaptcha',\n    label: '',\n    isActive: true,\n    isEditMode: false\n  }]),\n      data = _useState3[0],\n      setData = _useState3[1];\n\n  var _useState4 = useState(false),\n      useBgColor = _useState4[0],\n      setUseBgColor = _useState4[1];\n\n  var classes = useStyles();\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS,\n      token = _useContext.token;\n\n  var router = useRouter();\n  var companyId = router.query.companyID;\n  var authToken = token || router.query.authToken;\n  useEffect(function () {\n    // getting languages from service\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.TRANSTYPE + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.ACCTYPE,\n      token: authToken,\n      method: 'get',\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(function (res) {\n      if (res.status === 200 && res.data && res.data.data.length > 0) {\n        setAccTypes(res.data.data);\n        setAccType(res.data.data[0].code.toLowerCase());\n      }\n    });\n    handleNextDisable(false);\n  }, []);\n  useEffect(function () {\n    var updatedData = [];\n    Promise.all(data.map(function (d) {\n      updatedData.push({\n        id: d.id,\n        type: d.type,\n        label: d.label,\n        isActive: d.isActive\n      });\n    }));\n    handleSectionComponent({\n      service: \"pbook\",\n      type: \"contactForm\",\n      gid: updatedData,\n      useBgColor: useBgColor\n    });\n  }, [data, useBgColor]);\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    component: 'div',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: useBgColor,\n      onChange: function onChange() {\n        return setUseBgColor(!useBgColor);\n      },\n      name: \"background-color\",\n      color: \"primary\",\n      style: {\n        \"float\": 'right'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }\n    }),\n    label: \"Background Color\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  })), data.length > 0 && data.map(function (d, i) {\n    var dataValue = d;\n    return __jsx(Grid, {\n      container: true,\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 33\n      }\n    }, !d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 58\n      }\n    }, d.type === 'heading' ? __jsx(Typography, {\n      component: 'h6',\n      variant: 'h6',\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 72\n      }\n    }, d.label) : __jsx(Typography, {\n      style: {\n        width: '100%'\n      },\n      component: 'span',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 65\n      }\n    }, d.label)), !d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 58\n      }\n    }, d.type !== 'recaptcha' && __jsx(IconButton, {\n      \"aria-label\": \"Edit item\",\n      color: \"primary\",\n      onClick: function onClick() {\n        var updatedData = _toConsumableArray(data);\n\n        updatedData[i].isEditMode = !d.isEditMode;\n        setData(updatedData);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 75\n      }\n    }, __jsx(BorderColorSharpIcon, {\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 53\n      }\n    }))), d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 57\n      }\n    }, __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      value: dataValue.label,\n      InputProps: {\n        endAdornment: __jsx(IconButton, {\n          \"aria-label\": \"Edit item\",\n          color: \"primary\",\n          onClick: function onClick() {\n            var updatedData = _toConsumableArray(data);\n\n            updatedData[i].isEditMode = !d.isEditMode;\n            setData(updatedData);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 67\n          }\n        }, __jsx(CheckBoxIcon, {\n          color: \"primary\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 57\n          }\n        }))\n      },\n      onChange: function onChange(e) {\n        var updatedData = _toConsumableArray(data);\n\n        updatedData[i].label = e.target.value;\n        setData(updatedData);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 45\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 37\n      }\n    }, d.type === 'refcode' && __jsx(FormControl, {\n      variant: \"outlined\",\n      fullWidth: true,\n      size: 'small',\n      disabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 69\n      }\n    }, __jsx(Select, {\n      value: accType,\n      onChange: function onChange(e) {\n        return setAccType(e.target.value);\n      },\n      label: \"Language\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 49\n      }\n    }, accTypes.map(function (type, index) {\n      return __jsx(MenuItem, {\n        value: type.code.toLowerCase(),\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 61\n        }\n      }, ' ', type.description, ' ');\n    }))), (d.type === 'company' || d.type === 'firstname' || d.type === 'lastname' || d.type === 'mobiletel' || d.type === 'workemail') && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      disabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 45\n      }\n    }), d.type === 'recaptcha' && __jsx(Typography, {\n      component: 'div',\n      style: {\n        pointerEvents: \"none\",\n        opacity: 0.5\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 45\n      }\n    }, __jsx(ReCaptcha, {\n      sitekey: GENERAL_SETTINGS.RECAPTCHA_SITE_KEY,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 49\n      }\n    })), d.type === 'salesnote' && __jsx(TextareaAutosize, {\n      rows: 4,\n      className: classes.textArea,\n      disabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 45\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 37\n      }\n    }, __jsx(FormControlLabel, {\n      style: {\n        \"float\": \"right\"\n      },\n      control: __jsx(Checkbox, {\n        checked: d.isActive,\n        onChange: function onChange() {\n          var updatedData = _toConsumableArray(data);\n\n          updatedData[i].isActive = !d.isActive;\n          setData(updatedData);\n        },\n        color: \"primary\",\n        disabled: d.type === 'refcode' || d.type === 'firstname' || d.type === 'workemail',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 49\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 41\n      }\n    })))));\n  }), __jsx(Grid, {\n    container: true,\n    style: {\n      marginTop: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    className: classes.actionButton,\n    style: {\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 21\n    }\n  }, \"SEND\"))));\n};\n\n_s(AddContactForm, \"sTiNGfWWES6wJnJDRvYfn2nzcJc=\", false, function () {\n  return [useStyles, useRouter];\n});\n\n_c = AddContactForm;\nexport default AddContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddContactForm\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/contact-form/AddContactForm.js"],"names":["React","useState","useEffect","useContext","makeStyles","Grid","Button","Typography","TextField","TextareaAutosize","UseOrest","OREST_ENDPOINT","WebCmsGlobal","useRouter","Select","MenuItem","FormControl","ReCaptcha","BorderColorSharpIcon","IconButton","CheckBoxIcon","Checkbox","FormControlLabel","useStyles","theme","actionButton","marginLeft","spacing","borderRadius","textArea","width","borderColor","AddContactForm","props","handleSectionComponent","handleNextDisable","accTypes","setAccTypes","accType","setAccType","id","type","label","isActive","isEditMode","data","setData","useBgColor","setUseBgColor","classes","GENERAL_SETTINGS","token","router","companyId","query","companyID","authToken","apiUrl","OREST_URL","endpoint","TRANSTYPE","SLASH","ACCTYPE","method","params","hotelrefno","Number","then","res","status","length","code","toLowerCase","updatedData","Promise","all","map","d","push","service","gid","i","dataValue","fontWeight","endAdornment","e","target","value","index","description","pointerEvents","opacity","RECAPTCHA_SITE_KEY","marginTop"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\n//material imports\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport {UseOrest} from \"@webcms/orest\";\nimport {OREST_ENDPOINT} from \"../../../../../../../model/orest/constants\";\nimport WebCmsGlobal from \"../../../../../../webcms-global\";\nimport {useRouter} from \"next/router\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ReCaptcha from 'react-google-recaptcha';\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport {Checkbox, FormControlLabel} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    actionButton: {\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n        float: \"right\",\n    },\n    textArea: {\n        width: '100%',\n        borderColor: 'silver',\n        borderRadius: 5\n    }\n}));\n\nconst AddContactForm = (props) => {\n\n    const { handleSectionComponent, handleNextDisable } = props;\n    const [accTypes, setAccTypes] = useState([]);\n    const [accType, setAccType] = useState('');\n    const [data, setData] = useState([{\n        id: 'label-1',\n        type: 'heading',\n        label: 'Contact Form',\n        isActive: true,\n        isEditMode: false\n    },{\n        id: 'label-2',\n        type: 'refcode',\n        label: 'Type',\n        isActive: true,\n        isEditMode: false\n    }, {\n        id: 'label-3',\n        type: 'company',\n        label: 'Company Name',\n        isActive: true,\n        isEditMode: false\n    }, {\n        id: 'label-4',\n        type: 'firstname',\n        label: 'First Name',\n        isActive: true,\n        isEditMode: false\n    }, {\n        id: 'label-5',\n        type: 'lastname',\n        label: 'Last Name',\n        isActive: true,\n        isEditMode: false\n    }, {\n        id: 'label-6',\n        type: 'workemail',\n        label: 'Email',\n        isActive: true,\n        isEditMode: false\n    },{\n        id: 'label-7',\n        type: 'mobiletel',\n        label: 'Phone',\n        isActive: true,\n        isEditMode: false\n    }, {\n        id: 'label-8',\n        type: 'salesnote',\n        label: 'Message',\n        isActive: true,\n        isEditMode: false\n    }, {\n        id: 'label-9',\n        type: 'recaptcha',\n        label: '',\n        isActive: true,\n        isEditMode: false\n    }]);\n    const [useBgColor, setUseBgColor] = useState(false);\n\n    const classes = useStyles();\n    const { GENERAL_SETTINGS, token } = useContext(WebCmsGlobal);\n    const router = useRouter();\n    const companyId = router.query.companyID;\n    const authToken = token || router.query.authToken;\n\n\n    useEffect(() => {\n        // getting languages from service\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.TRANSTYPE + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.ACCTYPE,\n            token: authToken,\n            method: 'get',\n            params: {\n                hotelrefno: Number(companyId),\n            },\n        }).then((res) => {\n            if (res.status === 200 && res.data && res.data.data.length > 0) {\n                setAccTypes(res.data.data);\n                setAccType(res.data.data[0].code.toLowerCase());\n            }\n        })\n\n        handleNextDisable(false);\n    }, []);\n\n    useEffect(() => {\n        let updatedData = [];\n        Promise.all(data.map(d => {\n            updatedData.push({\n                id: d.id,\n                type: d.type,\n                label: d.label,\n                isActive: d.isActive\n            })\n        }))\n        handleSectionComponent({\n            service: \"pbook\",\n            type: \"contactForm\",\n            gid: updatedData,\n            useBgColor: useBgColor\n        });\n    }, [data, useBgColor]);\n\n    return(\n        <React.Fragment>\n            <Typography component={'div'}>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={useBgColor}\n                            onChange={() => setUseBgColor(!useBgColor)}\n                            name=\"background-color\"\n                            color=\"primary\"\n                            style={{float: 'right'}}\n                        />\n                    }\n                    label=\"Background Color\"\n                />\n            </Typography>\n            {\n                data.length > 0 && data.map((d, i) => {\n                    const dataValue = d;\n                    return(\n                        <Grid container key={i}>\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    {\n                                        !d.isEditMode && <Grid item xs={3}>\n                                            {\n                                                d.type === 'heading' ? <Typography component={'h6'} variant={'h6'} style={{fontWeight: \"bold\"}}>\n                                                    {\n                                                        d.label\n                                                    }\n                                                </Typography> : <Typography style={{width: '100%'}} component={'span'}>\n                                                    {\n                                                        d.label\n                                                    }\n                                                </Typography>\n                                            }\n                                        </Grid>\n                                    }\n                                    {\n                                        !d.isEditMode && <Grid item xs={1}>\n                                            {\n                                                d.type !== 'recaptcha' && <IconButton\n                                                    aria-label=\"Edit item\"\n                                                    color=\"primary\"\n                                                    onClick={() => {\n                                                        const updatedData = [...data];\n                                                        updatedData[i].isEditMode = !d.isEditMode\n                                                        setData(updatedData);\n                                                    }\n                                                    }\n                                                >\n                                                    <BorderColorSharpIcon color=\"primary\"/>\n                                                </IconButton>\n                                            }\n                                        </Grid>\n                                    }\n                                    {\n                                        d.isEditMode && <Grid item xs={4}>\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                value={dataValue.label}\n                                                InputProps={{\n                                                    endAdornment: <IconButton\n                                                        aria-label=\"Edit item\"\n                                                        color=\"primary\"\n                                                        onClick={() => {\n                                                            const updatedData = [...data];\n                                                            updatedData[i].isEditMode = !d.isEditMode\n                                                            setData(updatedData);\n                                                        }}\n                                                    >\n                                                        <CheckBoxIcon color=\"primary\"/>\n                                                    </IconButton>\n                                                }}\n                                                onChange={(e) => {\n                                                    const updatedData = [...data];\n                                                    updatedData[i].label = e.target.value\n                                                    setData(updatedData);\n                                                }}\n                                            />\n                                        </Grid>\n                                    }\n                                    <Grid item xs={4}>\n                                        {\n                                            d.type === 'refcode' && <FormControl\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                size={'small'}\n                                                disabled\n                                            >\n                                                <Select\n                                                    value={accType}\n                                                    onChange={(e) => setAccType(e.target.value)}\n                                                    label=\"Language\"\n                                                >\n                                                    {accTypes.map((type, index) => {\n                                                        return (\n                                                            <MenuItem value={type.code.toLowerCase()} key={index}>\n                                                                {' '}\n                                                                {type.description}{' '}\n                                                            </MenuItem>\n                                                        )\n                                                    })}\n                                                </Select>\n                                            </FormControl>\n                                        }\n                                        {\n                                            (d.type === 'company' || d.type === 'firstname' || d.type === 'lastname' ||\n                                            d.type === 'mobiletel' || d.type === 'workemail') &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                disabled\n                                            />\n                                        }\n                                        {\n                                            d.type === 'recaptcha' &&\n                                            <Typography component={'div'} style={{pointerEvents: \"none\", opacity: 0.5}}>\n                                                <ReCaptcha sitekey={GENERAL_SETTINGS.RECAPTCHA_SITE_KEY} />\n                                            </Typography>\n                                        }\n                                        {\n                                            d.type === 'salesnote' &&\n                                            <TextareaAutosize\n                                                rows={4}\n                                                className={classes.textArea}\n                                                disabled\n                                            />\n                                        }\n                                    </Grid>\n                                    <Grid item xs={2}>\n                                        <FormControlLabel\n                                            style={{float: \"right\"}}\n                                            control={\n                                                <Checkbox\n                                                    checked={d.isActive}\n                                                    onChange={() => {\n                                                        const updatedData = [...data];\n                                                        updatedData[i].isActive = !d.isActive;\n                                                        setData(updatedData);\n                                                    }}\n                                                    color=\"primary\"\n                                                    disabled={d.type === 'refcode' || d.type === 'firstname' ||\n                                                    d.type === 'workemail'}\n                                                />\n                                            }\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    )\n                })\n            }\n            <Grid container style={{marginTop: 8}}>\n                <Grid item xs={8}>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        aria-label=\"add\"\n                        className={classes.actionButton}\n                        style={{float: \"right\"}}\n                    >\n                        SEND\n                    </Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    )\n};\nexport default AddContactForm;"]},"metadata":{},"sourceType":"module"}