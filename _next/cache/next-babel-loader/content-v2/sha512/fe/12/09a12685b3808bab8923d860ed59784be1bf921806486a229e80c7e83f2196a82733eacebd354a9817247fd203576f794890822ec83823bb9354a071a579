{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/AccountKiosk/components/Map.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Container, Grid, Icon, List, ListSubheader, ListItem, ListItemText, Box, Typography, Button } from '@material-ui/core';\nimport GoogleMapReact from 'google-map-react';\nimport WebCmsGlobal from '../../../../webcms-global';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { defaultLocale } from '../../../../../lib/translations/config';\nimport { jsonGroupBy } from '../../../../../model/orest/constants';\nimport { connect, useSelector } from 'react-redux';\nimport { setToState, updateState } from '../../../../../state/actions';\nimport clsx from 'clsx';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport LoadingSpinner from '../../../../LoadingSpinner';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport useTranslation from '../../../../../lib/translations/hooks/useTranslation';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 'calc(100vh - 250px)'\n  },\n  listSection: {\n    backgroundColor: 'inherit'\n  },\n  ul: {\n    backgroundColor: 'inherit',\n    padding: 0\n  },\n  subHeader: {\n    background: '#f7f7f7'\n  },\n  locItem: {\n    cursor: 'pointer',\n    boxShadow: 'inset 0 -1px 0px 0px #d6d6d6'\n  },\n  locItemOnSelect: {\n    backgroundColor: '#dee8f1',\n    boxShadow: 'inset 0 -2px 0px 0px #2196f3'\n  },\n  listLocIcon: {\n    color: '#5EC0E8'\n  },\n  markerMyLocIcon: {\n    color: '#E91E62'\n  },\n  markerLocIcon: {\n    marginTop: -25,\n    marginLeft: -15,\n    color: '#5EC0E8'\n  },\n  markerLocIconOnSelect: {\n    color: '#1A5588',\n    animation: '$bounce 0.6s ease-out',\n    animationIterationCount: 'infinite',\n    animationDelay: '0.6s'\n  },\n  \"@keyframes bounce\": {\n    \"0%\": {\n      transform: \"translateY(-2px)\"\n    },\n    \"25%, 75%\": {\n      transform: \"translateY(-5px)\"\n    },\n    \"50%\": {\n      transform: \"translateY(-10px)\"\n    },\n    \"90%\": {\n      transform: \"translateY(-2px)\"\n    },\n    \"100%\": {\n      transform: \"translateY(0)\"\n    }\n  },\n  myLocButton: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    margin: 10,\n    backgroundColor: '#2196f3',\n    padding: '10px 15px 10px 15px',\n    color: '#ffffff',\n    \"&:hover \": {\n      color: '#ffffff',\n      backgroundColor: '#137bcd'\n    }\n  }\n}));\n\nconst geoFormat = number => {\n  const str = String(number);\n  const $1 = str.substr(0, 2);\n  const $2 = str.substr(2, str.length);\n  const res = `${$1}.${$2}`;\n  return parseFloat(res);\n};\n\nconst getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\n  const R = 6371e3; // metres\n\n  const $lat1 = lat1 * Math.PI / 180; // φ, λ in radians\n\n  const $lat2 = lat2 * Math.PI / 180;\n  const $lat = (lat2 - lat1) * Math.PI / 180;\n  const $lon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin($lat / 2) * Math.sin($lat / 2) + Math.cos($lat1) * Math.cos($lat2) * Math.sin($lon / 2) * Math.sin($lon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // in metres\n\n  return d;\n};\n\nconst intlFormat = num => {\n  return new Intl.NumberFormat().format(num);\n};\n\nconst metricFormat = num => {\n  if (Math.round(num) >= 1000) {\n    return intlFormat(num / 1000).slice(0, 4) + 'km';\n  } else {\n    return parseFloat(intlFormat(num)) + 'm';\n  }\n\n  return intlFormat(num);\n};\n\nconst hashSelect = (select, lat, lng) => {\n  const $s1 = String(select[0]).replace('.', '');\n  const $s2 = String(select[1]).replace('.', '');\n  const $r1 = `${$s1}-${$s2}`;\n  const $lat = String(lat).replace('.', '');\n  const $lng = String(lng).replace('.', '');\n  const $r2 = `${$lat}-${$lng}`;\n  return $r1 === $r2;\n};\n\nconst Marker = props => {\n  const {\n    isMyLoc,\n    isSelect,\n    name\n  } = props;\n  const classes = useStyles();\n\n  if (isMyLoc) {\n    return __jsx(Icon, {\n      title: name,\n      className: clsx(classes.markerMyLocIcon, {\n        [classes.markerLocIconOnSelect]: isSelect\n      }),\n      fontSize: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, \"person_pin\");\n  }\n\n  return __jsx(Icon, {\n    title: name,\n    className: clsx(classes.markerLocIcon, {\n      [classes.markerLocIconOnSelect]: isSelect\n    }),\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"location_on\");\n};\n\nconst Map = props => {\n  const {\n    state,\n    setToState\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const {\n    GENERAL_SETTINGS,\n    locale\n  } = useContext(WebCmsGlobal);\n  const loginfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo);\n  const classes = useStyles();\n  const {\n    0: myLocation,\n    1: setMyLocation\n  } = useState(false);\n  const {\n    0: mapCenter,\n    1: setMapCenter\n  } = useState({\n    lat: GENERAL_SETTINGS.hotelLocation.lat,\n    lng: GENERAL_SETTINGS.hotelLocation.lng\n  });\n  const {\n    0: mapZoom,\n    1: setMapZoom\n  } = useState(18);\n  const {\n    0: locSelect,\n    1: setLocSelect\n  } = useState(false);\n  const {\n    0: myLocSelect,\n    1: setMyLocSelect\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  let clientParams = {};\n  clientParams.hotelrefno = loginfo && loginfo.hotelrefno || GENERAL_SETTINGS.HOTELREFNO;\n  useEffect(() => {\n    let active = true;\n\n    if (active) {\n      let isChainHotelChange = false;\n\n      if (GENERAL_SETTINGS.ISCHAIN && state.changeHotelRefno !== false) {\n        clientParams.ischain = true;\n        clientParams.chainid = state.changeHotelRefno;\n        clientParams.hotelrefno = GENERAL_SETTINGS.HOTELREFNO;\n\n        if (clientParams.chainid !== state.mapInfoList.chainid) {\n          isChainHotelChange = true;\n        }\n      } else {\n        clientParams.ischain = false;\n        clientParams.chainid = false;\n      }\n\n      let isLangChange = false;\n\n      if (state.mapInfoList.langcode !== locale) {\n        isLangChange = true;\n        clientParams.langcode = locale;\n      }\n\n      let isRequest;\n\n      if (GENERAL_SETTINGS.ISCHAIN) {\n        isRequest = state.mapInfoList.data === false && GENERAL_SETTINGS.ISCHAIN && state.changeHotelRefno !== false;\n      } else {\n        isRequest = state.mapInfoList.data === false && GENERAL_SETTINGS.ISCHAIN === false;\n      }\n\n      if ((isRequest || isLangChange || isChainHotelChange) && isLoading === false) {\n        setIsLoading(true);\n        axios({\n          url: GENERAL_SETTINGS.BASE_URL + 'api/guestweb/hotel-info',\n          method: 'post',\n          params: {\n            langcode: clientParams.langcode || defaultLocale,\n            chainid: clientParams.chainid,\n            hotelrefno: clientParams.hotelrefno,\n            ischain: clientParams.ischain\n          }\n        }).then(infoResponse => {\n          const infoData = infoResponse.data;\n\n          if (infoData.success && infoData.data.length > 0) {\n            setIsLoading(false);\n            const useData = infoData.data.filter(item => item.locid && item.loclat && item.loclng);\n            setToState('guest', ['mapInfoList', 'data'], useData.length > 0 ? jsonGroupBy(useData, 'localcatdesc') : null);\n            setToState('guest', ['mapInfoList', 'langcode'], locale);\n            setToState('guest', ['mapInfoList', 'chainid'], clientParams.chainid);\n          } else {\n            setIsLoading(false);\n            setToState('guest', ['mapInfoList', 'data'], null);\n            setToState('guest', ['mapInfoList', 'langcode'], locale);\n            setToState('guest', ['mapInfoList', 'chainid'], clientParams.chainid);\n          }\n        }).catch(() => {\n          setIsLoading(false);\n          setToState('guest', ['mapInfoList', 'data'], null);\n          setToState('guest', ['mapInfoList', 'langcode'], locale);\n          setToState('guest', ['mapInfoList', 'chainid'], clientParams.chainid);\n        });\n      }\n    }\n\n    return () => {\n      active = false;\n    };\n  }, [state.changeHotelRefno, locale]);\n  useEffect(() => {\n    let active = true;\n\n    if (active && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setMapCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n\n        if (!myLocation) {\n          setMyLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n        }\n      });\n    }\n  }, [navigator && navigator.geolocation]);\n\n  const handleMyLocation = () => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      const lat = Number(String(position.coords.latitude).replace('.', ''));\n      const lng = Number(String(position.coords.longitude).replace('.', ''));\n      setLocSelect([lat, lng]);\n      setMyLocSelect(true);\n    });\n  };\n\n  if (state.mapInfoList.data === false || isLoading === true) {\n    return __jsx(Container, {\n      maxWidth: \"lg\",\n      style: {\n        padding: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }\n    }, __jsx(Box, {\n      p: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }, __jsx(LoadingSpinner, {\n      size: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  if (state.mapInfoList.data === null && isLoading === false) {\n    return __jsx(Box, {\n      p: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }\n    }, t('str_noDataAvailable')), GENERAL_SETTINGS.ISCHAIN && __jsx(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }\n    }, t('str_ifYouWishYouCanChangeTheHotelAndTryAgain'), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 76\n      }\n    }), __jsx(Button, {\n      startIcon: __jsx(BusinessIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 44\n        }\n      }),\n      onClick: () => setToState(\"guest\", [\"isHotelListOpen\"], true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 25\n      }\n    }, state.changeHotelRefno ? state.changeHotelName : t('str_chooseHotel'))));\n  }\n\n  return __jsx(Container, {\n    fixed: true,\n    maxWidth: \"lg\",\n    style: {\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, __jsx(List, {\n    className: classes.root,\n    subheader: __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 63\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 21\n    }\n  }, state.mapInfoList.data && Object.keys(state.mapInfoList.data).map(sectionId => __jsx(\"li\", {\n    key: `section-${sectionId}`,\n    className: classes.listSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 29\n    }\n  }, __jsx(\"ul\", {\n    className: classes.ul,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 33\n    }\n  }, __jsx(ListSubheader, {\n    className: classes.subHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 36\n    }\n  }, `${sectionId}`), state.mapInfoList.data[sectionId] && state.mapInfoList.data[sectionId].map(item => __jsx(ListItem, {\n    key: `item-${sectionId}-${item.title}`,\n    className: clsx(classes.locItem, {\n      [classes.locItemOnSelect]: hashSelect(locSelect, item.loclat, item.loclng)\n    }),\n    onClick: () => {\n      if (hashSelect(locSelect, item.loclat, item.loclng)) {\n        setLocSelect(false);\n        setMyLocSelect(false);\n      } else {\n        setLocSelect([item.loclat, item.loclng]);\n        setMyLocSelect(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 41\n    }\n  }, __jsx(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 45\n    }\n  }, __jsx(Icon, {\n    className: classes.listLocIcon,\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 49\n    }\n  }, \"location_on\")), __jsx(ListItemText, {\n    primary: `${item.title}`,\n    secondary: `${metricFormat(getDistanceFromLatLonInKm(myLocation.lat, myLocation.lng, geoFormat(item.loclat), geoFormat(item.loclng)))}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 45\n    }\n  })))))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    style: {\n      position: 'relative',\n      height: 'calc(100vh - 250px)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }\n  }, __jsx(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: process.env.GOOGLE_MAP_API_KEY,\n      libraries: ['places', 'geometry']\n    },\n    options: {\n      scrollwheel: false,\n      gestureHandling: \"none\",\n      fullscreenControl: false,\n      zoomControl: false,\n      draggingCursor: \"default\",\n      draggableCursor: \"default\"\n    },\n    center: locSelect && locSelect[0] && locSelect[1] && {\n      lat: geoFormat(locSelect[0]),\n      lng: geoFormat(locSelect[1])\n    } || mapCenter,\n    zoom: mapZoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 25\n    }\n  }, __jsx(Marker, {\n    isSelect: myLocSelect,\n    lat: myLocation.lat,\n    lng: myLocation.lng,\n    isMyLoc: true,\n    name: t('str_myLocation'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 29\n    }\n  }), state.mapInfoList.data && Object.keys(state.mapInfoList.data).map(sectionId => state.mapInfoList.data[sectionId] && state.mapInfoList.data[sectionId].map((item, i) => __jsx(Marker, {\n    key: i,\n    lat: geoFormat(item.loclat),\n    lng: geoFormat(item.loclng),\n    name: item.title,\n    isSelect: hashSelect(locSelect, item.loclat, item.loclng),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 37\n    }\n  })))), __jsx(Button, {\n    onClick: () => handleMyLocation(),\n    variant: \"outlined\",\n    color: \"primary\",\n    className: classes.myLocButton,\n    startIcon: __jsx(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 40\n      }\n    }, \"my_location\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 25\n    }\n  }, t('str_myLocation'))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n  setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/AccountKiosk/components/Map.js"],"names":["React","useState","useContext","useEffect","Container","Grid","Icon","List","ListSubheader","ListItem","ListItemText","Box","Typography","Button","GoogleMapReact","WebCmsGlobal","axios","makeStyles","defaultLocale","jsonGroupBy","connect","useSelector","setToState","updateState","clsx","ListItemAvatar","LoadingSpinner","BusinessIcon","useTranslation","useStyles","theme","root","width","backgroundColor","palette","background","paper","position","overflow","maxHeight","listSection","ul","padding","subHeader","locItem","cursor","boxShadow","locItemOnSelect","listLocIcon","color","markerMyLocIcon","markerLocIcon","marginTop","marginLeft","markerLocIconOnSelect","animation","animationIterationCount","animationDelay","transform","myLocButton","top","right","margin","geoFormat","number","str","String","$1","substr","$2","length","res","parseFloat","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","$lat1","Math","PI","$lat2","$lat","$lon","a","sin","cos","c","atan2","sqrt","d","intlFormat","num","Intl","NumberFormat","format","metricFormat","round","slice","hashSelect","select","lat","lng","$s1","replace","$s2","$r1","$lng","$r2","Marker","props","isMyLoc","isSelect","name","classes","Map","state","t","GENERAL_SETTINGS","locale","loginfo","orest","currentUser","myLocation","setMyLocation","mapCenter","setMapCenter","hotelLocation","mapZoom","setMapZoom","locSelect","setLocSelect","myLocSelect","setMyLocSelect","isLoading","setIsLoading","clientParams","hotelrefno","HOTELREFNO","active","isChainHotelChange","ISCHAIN","changeHotelRefno","ischain","chainid","mapInfoList","isLangChange","langcode","isRequest","data","url","BASE_URL","method","params","then","infoResponse","infoData","success","useData","filter","item","locid","loclat","loclng","catch","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","handleMyLocation","Number","changeHotelName","Object","keys","map","sectionId","title","height","key","process","env","GOOGLE_MAP_API_KEY","libraries","scrollwheel","gestureHandling","fullscreenControl","zoomControl","draggingCursor","draggableCursor","i","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect} from 'react'\nimport { Container, Grid, Icon, List, ListSubheader, ListItem, ListItemText, Box, Typography, Button  } from '@material-ui/core'\nimport GoogleMapReact from 'google-map-react'\nimport WebCmsGlobal from '../../../../webcms-global'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { defaultLocale } from '../../../../../lib/translations/config'\nimport { jsonGroupBy } from '../../../../../model/orest/constants'\nimport { connect, useSelector } from 'react-redux'\nimport { setToState, updateState } from '../../../../../state/actions'\nimport clsx from 'clsx'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport LoadingSpinner from '../../../../LoadingSpinner'\nimport BusinessIcon from '@material-ui/icons/Business'\nimport useTranslation from '../../../../../lib/translations/hooks/useTranslation'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n        position: 'relative',\n        overflow: 'auto',\n        maxHeight: 'calc(100vh - 250px)',\n    },\n    listSection: {\n        backgroundColor: 'inherit',\n    },\n    ul: {\n        backgroundColor: 'inherit',\n        padding: 0,\n    },\n    subHeader: {\n        background: '#f7f7f7'\n    },\n    locItem:{\n        cursor: 'pointer',\n        boxShadow: 'inset 0 -1px 0px 0px #d6d6d6'\n    },\n    locItemOnSelect: {\n        backgroundColor: '#dee8f1',\n        boxShadow: 'inset 0 -2px 0px 0px #2196f3'\n    },\n    listLocIcon: {\n        color: '#5EC0E8'\n    },\n    markerMyLocIcon: {\n        color: '#E91E62'\n    },\n    markerLocIcon: {\n        marginTop: -25,\n        marginLeft: -15,\n        color: '#5EC0E8'\n    },\n    markerLocIconOnSelect: {\n        color: '#1A5588',\n        animation: '$bounce 0.6s ease-out',\n        animationIterationCount: 'infinite',\n        animationDelay: '0.6s'\n    },\n    \"@keyframes bounce\": {\n        \"0%\": { transform: \"translateY(-2px)\" },\n        \"25%, 75%\": { transform: \"translateY(-5px)\" },\n        \"50%\": { transform: \"translateY(-10px)\" },\n        \"90%\": { transform: \"translateY(-2px)\" },\n        \"100%\": { transform: \"translateY(0)\" }\n    },\n    myLocButton: {\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        margin: 10,\n        backgroundColor: '#2196f3',\n        padding: '10px 15px 10px 15px',\n        color: '#ffffff',\n        \"&:hover \": {\n            color: '#ffffff',\n            backgroundColor: '#137bcd'\n        }\n    }\n}))\n\nconst geoFormat = (number) => {\n    const str = String(number)\n    const $1 = str.substr(0, 2)\n    const $2 = str.substr(2, str.length)\n    const res = `${$1}.${$2}`\n\n    return parseFloat(res)\n}\n\nconst getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\n    const R = 6371e3; // metres\n    const $lat1 = lat1 * Math.PI/180; // φ, λ in radians\n    const $lat2 = lat2 * Math.PI/180;\n    const $lat = (lat2-lat1) * Math.PI/180;\n    const $lon = (lon2-lon1) * Math.PI/180;\n\n    const a = Math.sin($lat/2) * Math.sin($lat/2) + Math.cos($lat1) * Math.cos($lat2) * Math.sin($lon/2) * Math.sin($lon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    const d = R * c; // in metres\n    return d\n}\n\nconst intlFormat = (num) =>{\n    return new Intl.NumberFormat().format(num);\n}\n\nconst metricFormat = (num) =>{\n    if(Math.round(num) >= 1000){\n        return intlFormat(num/1000).slice(0,4)+'km';\n    }else{\n        return parseFloat(intlFormat(num))+'m';\n    }\n    return intlFormat(num);\n}\n\nconst hashSelect = (select, lat, lng) => {\n    const $s1 = String(select[0]).replace('.','')\n    const $s2 = String(select[1]).replace('.','')\n    const $r1 = `${$s1}-${$s2}`\n\n    const $lat = String(lat).replace('.','')\n    const $lng = String(lng).replace('.','')\n    const $r2 = `${$lat}-${$lng}`\n\n    return $r1 === $r2\n}\n\nconst Marker = props => {\n    const { isMyLoc, isSelect, name } = props\n    const classes = useStyles()\n\n    if(isMyLoc){\n        return (<Icon title={name} className={clsx(classes.markerMyLocIcon, { [classes.markerLocIconOnSelect]: isSelect})} fontSize='large'>person_pin</Icon>)\n    }\n\n    return (<Icon title={name} className={clsx(classes.markerLocIcon, { [classes.markerLocIconOnSelect]: isSelect})} fontSize='large'>location_on</Icon>)\n}\n\nconst Map = (props) => {\n    const { state, setToState } = props\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS, locale } = useContext(WebCmsGlobal)\n    const loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n\n    const classes = useStyles()\n    const [myLocation, setMyLocation] = useState(false)\n    const [mapCenter, setMapCenter] = useState({ lat: GENERAL_SETTINGS.hotelLocation.lat, lng: GENERAL_SETTINGS.hotelLocation.lng, })\n    const [mapZoom, setMapZoom] = useState(18)\n    const [locSelect, setLocSelect] = useState(false)\n    const [myLocSelect, setMyLocSelect] = useState(false)\n    const [isLoading, setIsLoading] = useState(false)\n\n    let clientParams = {}\n    clientParams.hotelrefno = loginfo && loginfo.hotelrefno || GENERAL_SETTINGS.HOTELREFNO\n\n    useEffect(() => {\n        let active = true\n        if(active){\n            let isChainHotelChange = false\n            if (GENERAL_SETTINGS.ISCHAIN && state.changeHotelRefno !== false) {\n                clientParams.ischain = true\n                clientParams.chainid = state.changeHotelRefno\n                clientParams.hotelrefno = GENERAL_SETTINGS.HOTELREFNO\n\n                if(clientParams.chainid !== state.mapInfoList.chainid){\n                    isChainHotelChange = true\n                }\n\n            } else {\n                clientParams.ischain = false\n                clientParams.chainid = false\n            }\n\n            let isLangChange = false\n            if (state.mapInfoList.langcode !== locale) {\n                isLangChange = true\n                clientParams.langcode = locale\n            }\n\n            let isRequest\n            if (GENERAL_SETTINGS.ISCHAIN) {\n                isRequest = state.mapInfoList.data === false && GENERAL_SETTINGS.ISCHAIN && state.changeHotelRefno !== false\n            } else {\n                isRequest = state.mapInfoList.data === false && GENERAL_SETTINGS.ISCHAIN === false\n            }\n\n            if ((isRequest || isLangChange || isChainHotelChange) && isLoading === false) {\n                setIsLoading(true)\n                axios({\n                    url: GENERAL_SETTINGS.BASE_URL + 'api/guestweb/hotel-info',\n                    method: 'post',\n                    params: {\n                        langcode: clientParams.langcode || defaultLocale,\n                        chainid: clientParams.chainid,\n                        hotelrefno: clientParams.hotelrefno,\n                        ischain: clientParams.ischain,\n                    },\n                }).then((infoResponse) => {\n                    const infoData = infoResponse.data\n                    if (infoData.success && infoData.data.length > 0) {\n                        setIsLoading(false)\n                        const useData = infoData.data.filter(item => item.locid && item.loclat && item.loclng)\n                        setToState('guest', ['mapInfoList', 'data'], useData.length > 0 ? jsonGroupBy(useData, 'localcatdesc') : null)\n                        setToState('guest', ['mapInfoList', 'langcode'], locale)\n                        setToState('guest', ['mapInfoList', 'chainid'], clientParams.chainid)\n                    } else {\n                        setIsLoading(false)\n                        setToState('guest', ['mapInfoList', 'data'], null)\n                        setToState('guest', ['mapInfoList', 'langcode'], locale)\n                        setToState('guest', ['mapInfoList', 'chainid'], clientParams.chainid)\n                    }\n                }).catch(()=> {\n                    setIsLoading(false)\n                    setToState('guest', ['mapInfoList', 'data'], null)\n                    setToState('guest', ['mapInfoList', 'langcode'], locale)\n                    setToState('guest', ['mapInfoList', 'chainid'], clientParams.chainid)\n                })\n            }\n        }\n\n        return () => {\n            active = false\n        }\n    }, [state.changeHotelRefno, locale])\n\n    useEffect(()=> {\n        let active = true\n        if (active && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(function(position) {\n                setMapCenter({\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                })\n\n                if(!myLocation){\n                    setMyLocation({\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    })\n                }\n            })\n        }\n\n    }, [navigator && navigator.geolocation])\n\n    const handleMyLocation = () => {\n        navigator.geolocation.getCurrentPosition(function(position) {\n            const lat = Number(String(position.coords.latitude).replace('.',''))\n            const lng = Number(String(position.coords.longitude).replace('.',''))\n            setLocSelect([lat, lng])\n            setMyLocSelect(true)\n        })\n    }\n\n    if (state.mapInfoList.data === false || isLoading === true) {\n        return (\n            <Container maxWidth=\"lg\" style={{ padding: 0 }}>\n                <Box p={4}>\n                    <LoadingSpinner size={40} />\n                </Box>\n            </Container>\n        )\n    }\n\n    if (state.mapInfoList.data === null && isLoading === false) {\n        return (\n            <Box p={4}>\n                <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                    {t('str_noDataAvailable')}\n                </Typography>\n                {GENERAL_SETTINGS.ISCHAIN && (\n                    <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                        {t('str_ifYouWishYouCanChangeTheHotelAndTryAgain')}<br/>\n                        <Button startIcon={<BusinessIcon />} onClick={()=> setToState(\"guest\", [\"isHotelListOpen\"], true)}>\n                            {state.changeHotelRefno ? state.changeHotelName : t('str_chooseHotel')}\n                        </Button>\n                    </Typography>\n                )}\n            </Box>\n        )\n    }\n\n    return (\n        <Container fixed maxWidth=\"lg\" style={{ padding: 0 }}>\n            <Grid container spacing={3}>\n                <Grid item xs={12} sm={3}>\n                    <List className={classes.root} subheader={<li />}>\n                        {state.mapInfoList.data && Object.keys(state.mapInfoList.data).map((sectionId) => (\n                            <li key={`section-${sectionId}`} className={classes.listSection}>\n                                <ul className={classes.ul}>\n                                   <ListSubheader className={classes.subHeader}>{`${sectionId}`}</ListSubheader>\n                                   {state.mapInfoList.data[sectionId] && state.mapInfoList.data[sectionId].map((item) => (\n                                        <ListItem key={`item-${sectionId}-${item.title}`}\n                                           className={clsx(classes.locItem, { [classes.locItemOnSelect]: hashSelect(locSelect, item.loclat, item.loclng)})}\n                                           onClick={()=> {\n                                               if(hashSelect(locSelect, item.loclat, item.loclng)){\n                                                   setLocSelect(false)\n                                                   setMyLocSelect(false)\n                                               }else{\n                                                   setLocSelect([item.loclat, item.loclng])\n                                                   setMyLocSelect(false)\n                                               }\n                                           }}>\n                                            <ListItemAvatar>\n                                                <Icon className={classes.listLocIcon} fontSize='large' >location_on</Icon>\n                                            </ListItemAvatar>\n                                            <ListItemText primary={`${item.title}`} secondary={`${metricFormat(getDistanceFromLatLonInKm(myLocation.lat, myLocation.lng, geoFormat(item.loclat), geoFormat(item.loclng)))}`}/>\n                                        </ListItem>\n                                    ))}\n                                </ul>\n                            </li>\n                        ))}\n                    </List>\n                </Grid>\n                <Grid item xs={12} sm={8}>\n                    <div style={{ position: 'relative', height: 'calc(100vh - 250px)'}}>\n                        <GoogleMapReact\n                            bootstrapURLKeys={{\n                                key: process.env.GOOGLE_MAP_API_KEY,\n                                libraries: ['places', 'geometry']\n                            }}\n                            options={{\n                                scrollwheel: false,\n                                gestureHandling: \"none\",\n                                fullscreenControl:false,\n                                zoomControl: false,\n                                draggingCursor: \"default\",\n                                draggableCursor: \"default\"\n                            }}\n                            center={locSelect && locSelect[0] && locSelect[1] && { lat: geoFormat(locSelect[0]), lng: geoFormat(locSelect[1]) } || mapCenter}\n                            zoom={mapZoom}\n                        >\n                            <Marker\n                                isSelect={myLocSelect}\n                                lat={myLocation.lat}\n                                lng={myLocation.lng}\n                                isMyLoc={true}\n                                name={t('str_myLocation')}\n                            />\n                            {state.mapInfoList.data && Object.keys(state.mapInfoList.data).map((sectionId) =>\n                                state.mapInfoList.data[sectionId] && state.mapInfoList.data[sectionId].map((item, i) => (\n                                    <Marker\n                                        key={i}\n                                        lat={geoFormat(item.loclat)}\n                                        lng={geoFormat(item.loclng)}\n                                        name={item.title}\n                                        isSelect={hashSelect(locSelect, item.loclat, item.loclng)}\n                                    />\n                                ))\n                            )}\n                        </GoogleMapReact>\n                        <Button\n                            onClick={()=> handleMyLocation()}\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            className={classes.myLocButton}\n                            startIcon={<Icon>my_location</Icon>}\n                        >\n                            {t('str_myLocation')}\n                        </Button>\n                    </div>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map)\n"]},"metadata":{},"sourceType":"module"}