{"ast":null,"code":"import _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/options/Radio.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport useSurveyAction from '../../../../model/survey/useSurveyAction';\nimport { useSelector } from 'react-redux';\nimport OnePageSurvey from '../render-types/OnePageSurvey';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from '../../style/SurveyOptions.style';\nimport HasNote from './sub-components/HasNote';\nimport HasFile from './sub-components/HasFile';\nimport WebCmsGlobal from '../../../webcms-global';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip';\nvar useStyles = makeStyles(styles);\n\nfunction getOptionFromOptionValue(options, optionValue) {\n  if (options && options.length > 0 && optionValue) {\n    var data = [];\n    options.map(function (k) {\n      data = _objectSpread(_objectSpread({}, data), {}, _defineProperty({}, k.id, k));\n    });\n    return data[optionValue];\n  } else {\n    return null;\n  }\n}\n\nexport default function RadioOption(props) {\n  _s();\n\n  var _this = this;\n\n  var options = props.options,\n      optionTyp = props.optionTyp,\n      index = props.index,\n      isHorzintal = props.isHorzintal;\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS; //style\n\n\n  var classes = useStyles(); //redux\n\n  var _useSurveyAction = useSurveyAction(),\n      setSurveyAnswer = _useSurveyAction.setSurveyAnswer;\n\n  var surveyTrans = useSelector(function (state) {\n    return state.survey.trans;\n  });\n  var surveyIsValid = useSelector(function (state) {\n    return state.survey.isValid;\n  });\n  var oldAnswers = useSelector(function (state) {\n    return state.survey.answers[surveyTrans] && state.survey.answers[surveyTrans][options[0].parentid];\n  });\n  var oldAnswer = oldAnswers && Object.keys(oldAnswers).map(function (k) {\n    return _objectSpread(_objectSpread({}, oldAnswers[k]), {}, {\n      id: k\n    });\n  }).filter(function (j) {\n    return j.typ === optionTyp;\n  }); //state\n\n  var _useState = useState(getOptionFromOptionValue(options, oldAnswer && oldAnswer[0] ? oldAnswer[0].id : '')),\n      option = _useState[0],\n      setOption = _useState[1];\n\n  var _useState2 = useState(oldAnswer && oldAnswer[0] ? oldAnswer[0].id : ''),\n      optionValue = _useState2[0],\n      setOptionValue = _useState2[1];\n\n  var _useState3 = useState(oldAnswer && oldAnswer[0] ? oldAnswer[0].answernote || '' : ''),\n      answerNote = _useState3[0],\n      setAnswerNote = _useState3[1];\n\n  var handleChangeOption = function handleChangeOption(event) {\n    var value = event.target.value;\n    var option = options.filter(function (item) {\n      return String(item.id) === String(value);\n    });\n    setOption(option[0]); //clear answerNote\n\n    setAnswerNote('');\n    setOptionValue(value);\n    setSurveyAnswer(surveyTrans, options[0].parentid, option[0].id, {\n      typ: optionTyp,\n      parentid: options[0].parentid\n    });\n  };\n\n  var handleChangeAnswerNote = function handleChangeAnswerNote(event) {\n    var value = event.target.value;\n    setAnswerNote(value);\n    setSurveyAnswer(surveyTrans, options[0].parentid, optionValue, {\n      typ: optionTyp,\n      parentid: options[0].parentid,\n      answernote: value\n    });\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, __jsx(FormLabel, {\n    component: \"legend\",\n    disabled: surveyIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }), __jsx(RadioGroup, {\n    row: isHorzintal,\n    value: optionValue,\n    onChange: function onChange(event) {\n      handleChangeOption(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, options.map(function (option, i) {\n    if (option.typ === optionTyp) {\n      return __jsx(SurveyTooltip, {\n        title: option && option.note || '',\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 33\n        }\n      }, __jsx(FormControlLabel, {\n        labelPlacement: option !== null && option !== void 0 && option.imageurl ? \"bottom\" : \"end\",\n        classes: {\n          root: classes.formControlLabel,\n          label: classes.answerText\n        },\n        name: String(option.id),\n        value: String(option.id),\n        control: __jsx(Radio, {\n          classes: {\n            root: classes.controlRoot,\n            checked: classes.controlChecked,\n            disabled: classes.controlDisabled\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 45\n          }\n        }),\n        label: __jsx(React.Fragment, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 45\n          }\n        }, __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 49\n          }\n        }, option.langwordtxt || option.description), option.imageurl ? __jsx(\"img\", {\n          src: GENERAL_SETTINGS.STATIC_URL + option.imageurl,\n          alt: option.langwordtxt || option.description,\n          className: classes.answerImage,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 53\n          }\n        }) : null),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 37\n        }\n      }));\n    }\n  }))), option && option.hasnote && __jsx(HasNote, {\n    labelvisible: option.itemlabelvisible,\n    name: option.id,\n    label: option.customvalue,\n    value: answerNote,\n    onChange: handleChangeAnswerNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }), option && option.hasfile && __jsx(HasFile, {\n    option: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 42\n    }\n  }), option && option.children && __jsx(OnePageSurvey, {\n    options: option.children,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 43\n    }\n  }));\n}\n\n_s(RadioOption, \"IJRKlmdRUQwj5U4e6mwW/CLKLGs=\", false, function () {\n  return [useStyles, useSurveyAction, useSelector, useSelector, useSelector];\n});\n\n_c = RadioOption;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadioOption\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/options/Radio.js"],"names":["React","useContext","useState","RadioGroup","Radio","FormControlLabel","useSurveyAction","useSelector","OnePageSurvey","makeStyles","styles","HasNote","HasFile","WebCmsGlobal","FormLabel","FormControl","SurveyTooltip","useStyles","getOptionFromOptionValue","options","optionValue","length","data","map","k","id","RadioOption","props","optionTyp","index","isHorzintal","GENERAL_SETTINGS","classes","setSurveyAnswer","surveyTrans","state","survey","trans","surveyIsValid","isValid","oldAnswers","answers","parentid","oldAnswer","Object","keys","filter","j","typ","option","setOption","setOptionValue","answernote","answerNote","setAnswerNote","handleChangeOption","event","value","target","item","String","handleChangeAnswerNote","i","note","imageurl","root","formControlLabel","label","answerText","controlRoot","checked","controlChecked","disabled","controlDisabled","langwordtxt","description","STATIC_URL","answerImage","hasnote","itemlabelvisible","customvalue","hasfile","children"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Radio from '@material-ui/core/Radio'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport useSurveyAction from '../../../../model/survey/useSurveyAction'\nimport { useSelector } from 'react-redux'\nimport OnePageSurvey from '../render-types/OnePageSurvey'\nimport { makeStyles } from '@material-ui/core/styles'\nimport styles from '../../style/SurveyOptions.style'\nimport HasNote from './sub-components/HasNote'\nimport HasFile from './sub-components/HasFile'\nimport WebCmsGlobal from '../../../webcms-global'\n\nimport FormLabel from '@material-ui/core/FormLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip'\n\nconst useStyles = makeStyles(styles)\n\nfunction getOptionFromOptionValue(options, optionValue) {\n    if (options && options.length > 0 && optionValue) {\n        let data = []\n        options.map((k) => {\n            data = { ...data, [k.id]: k }\n        })\n\n        return data[optionValue]\n    } else {\n        return null\n    }\n}\n\nexport default function RadioOption(props) {\n    const { options, optionTyp, index, isHorzintal } = props\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n\n    //style\n    const classes = useStyles()\n\n    //redux\n    const { setSurveyAnswer } = useSurveyAction()\n    const surveyTrans = useSelector((state) => state.survey.trans)\n    const surveyIsValid = useSelector((state) => state.survey.isValid)\n    const oldAnswers = useSelector(\n        (state) => state.survey.answers[surveyTrans] && state.survey.answers[surveyTrans][options[0].parentid],\n    )\n    const oldAnswer =\n        oldAnswers &&\n        Object.keys(oldAnswers)\n            .map((k) => ({ ...oldAnswers[k], id: k }))\n            .filter((j) => {\n                return j.typ === optionTyp\n            })\n\n    //state\n    const [option, setOption] = useState(\n        getOptionFromOptionValue(options, oldAnswer && oldAnswer[0] ? oldAnswer[0].id : ''),\n    )\n    const [optionValue, setOptionValue] = useState(oldAnswer && oldAnswer[0] ? oldAnswer[0].id : '')\n    const [answerNote, setAnswerNote] = useState(oldAnswer && oldAnswer[0] ? oldAnswer[0].answernote || '' : '')\n\n    const handleChangeOption = (event) => {\n        const value = event.target.value\n        const option = options.filter(item => String(item.id) === String(value))\n        setOption(option[0])\n\n        //clear answerNote\n        setAnswerNote('')\n        setOptionValue(value)\n        setSurveyAnswer(surveyTrans, options[0].parentid, option[0].id, {\n            typ: optionTyp,\n            parentid: options[0].parentid,\n        })\n    }\n\n    const handleChangeAnswerNote = (event) => {\n        const value = event.target.value\n        setAnswerNote(value)\n\n        setSurveyAnswer(surveyTrans, options[0].parentid, optionValue, {\n            typ: optionTyp,\n            parentid: options[0].parentid,\n            answernote: value,\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\" disabled={surveyIsValid}></FormLabel>\n                <RadioGroup\n                    row={isHorzintal}\n                    value={optionValue}\n                    onChange={(event) => {\n                        handleChangeOption(event)\n                    }}\n                >\n                    {options.map((option, i) => {\n                        if (option.typ === optionTyp) {\n                            return (\n                                <SurveyTooltip title={option && option.note || ''} key={i}>\n                                    <FormControlLabel\n                                        labelPlacement={option?.imageurl ? \"bottom\" : \"end\"}\n                                        classes={{\n                                            root: classes.formControlLabel,\n                                            label: classes.answerText,\n                                        }}\n                                        name={String(option.id)}\n                                        value={String(option.id)}\n                                        control={\n                                            <Radio\n                                                classes={{\n                                                    root: classes.controlRoot,\n                                                    checked: classes.controlChecked,\n                                                    disabled: classes.controlDisabled,\n                                                }}\n                                            />\n                                        }\n                                        label={\n                                            <React.Fragment>\n                                                <span>{option.langwordtxt || option.description}</span>\n                                                {option.imageurl ? (\n                                                    <img\n                                                        src={GENERAL_SETTINGS.STATIC_URL + option.imageurl}\n                                                        alt={option.langwordtxt || option.description}\n                                                        className={classes.answerImage}\n                                                    />\n                                                ): null}\n                                            </React.Fragment>\n                                        }/>\n                                </SurveyTooltip>\n                            )\n                        }\n                    })}\n                </RadioGroup>\n            </FormControl>\n            {option && option.hasnote && (\n                <HasNote\n                    labelvisible={option.itemlabelvisible}\n                    name={option.id}\n                    label={option.customvalue}\n                    value={answerNote}\n                    onChange={handleChangeAnswerNote}\n                />\n            )}\n            {option && option.hasfile && <HasFile option={option}/>}\n            {option && option.children && <OnePageSurvey options={option.children} index={index}/>}\n        </React.Fragment>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}