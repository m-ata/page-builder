{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/options/Check.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport useSurveyAction from '../../../../model/survey/useSurveyAction';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from '../../style/SurveyOptions.style';\nimport WebCmsGlobal from '../../../webcms-global';\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip';\nvar useStyles = makeStyles(styles);\n\nfunction CheckItem(props) {\n  _s();\n\n  var option = props.option,\n      optionTyp = props.optionTyp;\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS; //style\n\n\n  var classes = useStyles(); //redux\n\n  var _useSurveyAction = useSurveyAction(),\n      setSurveyAnswerMulti = _useSurveyAction.setSurveyAnswerMulti,\n      deleteSurveyAnswer = _useSurveyAction.deleteSurveyAnswer;\n\n  var surveyTrans = useSelector(function (state) {\n    return state.survey.trans;\n  });\n  var surveyIsValid = useSelector(function (state) {\n    return state.survey.isValid;\n  });\n  var oldAnswer = useSelector(function (state) {\n    return state.survey.answers[surveyTrans] && state.survey.answers[surveyTrans][option.parentid] && state.survey.answers[surveyTrans][option.parentid][option.id];\n  }); //state\n\n  var _useState = useState(!!oldAnswer),\n      optionValue = _useState[0],\n      setOptionValue = _useState[1];\n\n  var handleChangeOption = function handleChangeOption(event) {\n    var checked = event.target.checked;\n    setOptionValue(checked);\n\n    if (checked) {\n      setSurveyAnswerMulti(surveyTrans, option.parentid, option.id, {\n        typ: optionTyp,\n        parentid: option.parentid\n      });\n    } else {\n      deleteSurveyAnswer(surveyTrans, option.parentid, option.id);\n    }\n  };\n\n  return __jsx(SurveyTooltip, {\n    title: option && option.note || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(FormControlLabel, {\n    onChange: handleChangeOption,\n    checked: optionValue,\n    disabled: surveyIsValid,\n    name: String(option.id),\n    value: String(option.id),\n    control: __jsx(Checkbox, {\n      classes: {\n        root: classes.controlRoot,\n        checked: classes.controlChecked,\n        disabled: classes.controlDisabled\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }),\n    label: __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, option.langwordtxt || option.description), option.imageurl && __jsx(\"img\", {\n      src: GENERAL_SETTINGS.STATIC_URL + option.imageurl,\n      alt: option.langwordtxt || option.description,\n      className: classes.answerImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    })),\n    classes: {\n      root: classes.formControlLabel,\n      label: classes.answerText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }));\n}\n\n_s(CheckItem, \"PLozKs8MGj+ck5xdW/0MlNl+jzI=\", false, function () {\n  return [useStyles, useSurveyAction, useSelector, useSelector, useSelector];\n});\n\n_c = CheckItem;\nexport default function CheckOption(props) {\n  var _this = this;\n\n  var options = props.options,\n      optionTyp = props.optionTyp,\n      isHorzintal = props.isHorzintal;\n  return __jsx(FormGroup, {\n    row: isHorzintal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, options.map(function (option, i) {\n    if (option.typ === optionTyp) {\n      return __jsx(CheckItem, {\n        option: option,\n        optionTyp: optionTyp,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 28\n        }\n      });\n    }\n  }));\n}\n_c2 = CheckOption;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckItem\");\n$RefreshReg$(_c2, \"CheckOption\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/options/Check.js"],"names":["React","useContext","useState","FormGroup","Checkbox","FormControlLabel","useSurveyAction","useSelector","makeStyles","styles","WebCmsGlobal","SurveyTooltip","useStyles","CheckItem","props","option","optionTyp","GENERAL_SETTINGS","classes","setSurveyAnswerMulti","deleteSurveyAnswer","surveyTrans","state","survey","trans","surveyIsValid","isValid","oldAnswer","answers","parentid","id","optionValue","setOptionValue","handleChangeOption","event","checked","target","typ","note","String","root","controlRoot","controlChecked","disabled","controlDisabled","langwordtxt","description","imageurl","STATIC_URL","answerImage","formControlLabel","label","answerText","CheckOption","options","isHorzintal","map","i"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport useSurveyAction from '../../../../model/survey/useSurveyAction'\nimport { useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport styles from '../../style/SurveyOptions.style'\nimport WebCmsGlobal from '../../../webcms-global'\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip'\n\nconst useStyles = makeStyles(styles)\n\nfunction CheckItem(props) {\n    const { option, optionTyp } = props\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n\n    //style\n    const classes = useStyles()\n\n    //redux\n    const { setSurveyAnswerMulti, deleteSurveyAnswer } = useSurveyAction()\n    const surveyTrans = useSelector((state) => state.survey.trans)\n    const surveyIsValid = useSelector((state) => state.survey.isValid)\n    const oldAnswer = useSelector(\n        (state) =>\n            state.survey.answers[surveyTrans] &&\n            state.survey.answers[surveyTrans][option.parentid] &&\n            state.survey.answers[surveyTrans][option.parentid][option.id],\n    )\n\n    //state\n    const [optionValue, setOptionValue] = useState(!!oldAnswer)\n\n    const handleChangeOption = (event) => {\n        const checked = event.target.checked\n        setOptionValue(checked)\n\n        if (checked) {\n            setSurveyAnswerMulti(surveyTrans, option.parentid, option.id, {\n                typ: optionTyp,\n                parentid: option.parentid,\n            })\n        } else {\n            deleteSurveyAnswer(surveyTrans, option.parentid, option.id)\n        }\n    }\n\n    return (\n        <SurveyTooltip title={option && option.note || ''}>\n            <FormControlLabel\n                onChange={handleChangeOption}\n                checked={optionValue}\n                disabled={surveyIsValid}\n                name={String(option.id)}\n                value={String(option.id)}\n                control={\n                    <Checkbox\n                        classes={{\n                            root: classes.controlRoot,\n                            checked: classes.controlChecked,\n                            disabled: classes.controlDisabled,\n                        }}\n                    />\n                }\n                label={\n                    <React.Fragment>\n                        <span>{option.langwordtxt || option.description}</span>\n                        {option.imageurl && (\n                            <img\n                                src={GENERAL_SETTINGS.STATIC_URL + option.imageurl}\n                                alt={option.langwordtxt || option.description}\n                                className={classes.answerImage}\n                            />\n                        )}\n                    </React.Fragment>\n                }\n                classes={{\n                    root: classes.formControlLabel,\n                    label: classes.answerText,\n                }}\n            />\n        </SurveyTooltip>\n    )\n}\n\nexport default function CheckOption(props) {\n    const { options, optionTyp, isHorzintal } = props\n\n    return (\n        <FormGroup row={isHorzintal}>\n            {options.map((option, i) => {\n                if (option.typ === optionTyp) {\n                    return <CheckItem option={option} optionTyp={optionTyp} key={i}/>\n                }\n            })}\n        </FormGroup>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}