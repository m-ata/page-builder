{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/options/Date.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport MomentAdapter from '@date-io/moment';\nimport { MobileDatePicker, DatePicker, LocalizationProvider } from '@material-ui/pickers';\nimport { SURVEY_INPUT_VARIANT } from '../../../../assets/const';\nimport moment from 'moment';\nimport { OREST_ENDPOINT } from '../../../../model/orest/constants';\nimport useSurveyAction from '../../../../model/survey/useSurveyAction';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport styles from '../../style/SurveyOptions.style';\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip';\nimport { useRouter } from 'next/router';\nconst useStyles = makeStyles(styles);\nexport default function DateOption(props) {\n  const {\n    option,\n    optionTyp\n  } = props;\n  const router = useRouter();\n  const isKiosk = router.query.kiosk === 'true' ? true : false; //style\n\n  const classes = useStyles(); //redux\n\n  const {\n    setSurveyAnswerMulti,\n    deleteSurveyAnswer\n  } = useSurveyAction();\n  const surveyTrans = useSelector(state => state.survey.trans);\n  const surveyIsValid = useSelector(state => state.survey.isValid);\n  const oldAnswer = useSelector(state => state.survey.answers[surveyTrans] && state.survey.answers[surveyTrans][option.parentid] && state.survey.answers[surveyTrans][option.parentid][option.id]); //state\n\n  const {\n    0: optionValue,\n    1: setOptionValue\n  } = useState(oldAnswer ? oldAnswer.valuedate : null);\n\n  const handleChangeOption = date => {\n    const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE);\n    setOptionValue(date);\n\n    if (dateValue !== '' && dateValue !== 'Invalid date') {\n      setSurveyAnswerMulti(surveyTrans, option.parentid, option.id, {\n        typ: optionTyp,\n        parentid: option.parentid,\n        valuedate: dateValue\n      });\n    } else {\n      deleteSurveyAnswer(surveyTrans, option.parentid, option.id);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.optionContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(SurveyTooltip, {\n    title: option && option.note || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, isKiosk ? __jsx(MobileDatePicker, {\n    autoOk: true,\n    disableFuture: true,\n    margin: \"dense\",\n    name: String(option.id),\n    label: option.langwordtxt || option.description,\n    showTodayButton: true,\n    openTo: !optionValue ? 'year' : 'date',\n    views: ['year', 'month', 'date'],\n    fullWidth: true,\n    disabled: surveyIsValid,\n    value: optionValue,\n    onChange: handleChangeOption,\n    className: classes.textField,\n    inputFormat: \"DD/MM/YYYY\",\n    InputProps: {\n      classes: {\n        input: classes.textFieldInput\n      }\n    },\n    InputLabelProps: {\n      className: classes.textFieldLabel\n    },\n    renderInput: props => __jsx(TextField, _extends({}, props, {\n      variant: SURVEY_INPUT_VARIANT,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 53\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }) : __jsx(DatePicker, {\n    autoOk: true,\n    disableFuture: true,\n    margin: \"dense\",\n    name: String(option.id),\n    label: option.langwordtxt || option.description,\n    showTodayButton: true,\n    openTo: !optionValue ? 'year' : 'date',\n    views: ['year', 'month', 'date'],\n    fullWidth: true,\n    disabled: surveyIsValid,\n    value: optionValue,\n    onChange: handleChangeOption,\n    className: classes.textField,\n    inputFormat: \"DD/MM/YYYY\",\n    InputProps: {\n      classes: {\n        input: classes.textFieldInput\n      }\n    },\n    InputLabelProps: {\n      className: classes.textFieldLabel\n    },\n    renderInput: props => __jsx(TextField, _extends({}, props, {\n      variant: SURVEY_INPUT_VARIANT,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 53\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/options/Date.js"],"names":["React","useState","MomentAdapter","MobileDatePicker","DatePicker","LocalizationProvider","SURVEY_INPUT_VARIANT","moment","OREST_ENDPOINT","useSurveyAction","useSelector","makeStyles","TextField","styles","SurveyTooltip","useRouter","useStyles","DateOption","props","option","optionTyp","router","isKiosk","query","kiosk","classes","setSurveyAnswerMulti","deleteSurveyAnswer","surveyTrans","state","survey","trans","surveyIsValid","isValid","oldAnswer","answers","parentid","id","optionValue","setOptionValue","valuedate","handleChangeOption","date","dateValue","format","DATEFORMAT_LOCALE","typ","optionContainer","note","String","langwordtxt","description","textField","input","textFieldInput","className","textFieldLabel"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport MomentAdapter from '@date-io/moment'\nimport { MobileDatePicker, DatePicker, LocalizationProvider } from '@material-ui/pickers'\nimport { SURVEY_INPUT_VARIANT } from '../../../../assets/const'\nimport moment from 'moment'\nimport { OREST_ENDPOINT } from '../../../../model/orest/constants'\nimport useSurveyAction from '../../../../model/survey/useSurveyAction'\nimport { useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport styles from '../../style/SurveyOptions.style'\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip'\nimport { useRouter } from 'next/router'\n\nconst useStyles = makeStyles(styles)\n\nexport default function DateOption(props) {\n    const { option, optionTyp } = props\n    const router = useRouter()\n    const isKiosk = router.query.kiosk === 'true' ? true : false\n    //style\n    const classes = useStyles()\n\n    //redux\n    const { setSurveyAnswerMulti, deleteSurveyAnswer } = useSurveyAction()\n    const surveyTrans = useSelector((state) => state.survey.trans)\n    const surveyIsValid = useSelector((state) => state.survey.isValid)\n    const oldAnswer = useSelector(\n        (state) =>\n            state.survey.answers[surveyTrans] &&\n            state.survey.answers[surveyTrans][option.parentid] &&\n            state.survey.answers[surveyTrans][option.parentid][option.id],\n    )\n\n    //state\n    const [optionValue, setOptionValue] = useState(oldAnswer ? oldAnswer.valuedate : null)\n\n    const handleChangeOption = (date) => {\n        const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n        setOptionValue(date)\n\n        if (dateValue !== '' && dateValue !== 'Invalid date') {\n            setSurveyAnswerMulti(surveyTrans, option.parentid, option.id, {\n                typ: optionTyp,\n                parentid: option.parentid,\n                valuedate: dateValue,\n            })\n        } else {\n            deleteSurveyAnswer(surveyTrans, option.parentid, option.id)\n        }\n    }\n\n    return (\n        <div className={classes.optionContainer}>\n            <SurveyTooltip title={option && option.note || ''}>\n                <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                    {isKiosk ? (\n                        <MobileDatePicker\n                            autoOk\n                            disableFuture\n                            margin=\"dense\"\n                            name={String(option.id)}\n                            label={option.langwordtxt || option.description}\n                            showTodayButton\n                            openTo={!optionValue ? 'year' : 'date'}\n                            views={['year', 'month', 'date']}\n                            fullWidth\n                            disabled={surveyIsValid}\n                            value={optionValue}\n                            onChange={handleChangeOption}\n                            className={classes.textField}\n                            inputFormat=\"DD/MM/YYYY\"\n                            InputProps={{ classes: { input: classes.textFieldInput } }}\n                            InputLabelProps={{ className: classes.textFieldLabel }}\n                            renderInput={(props) => <TextField {...props} variant={SURVEY_INPUT_VARIANT} fullWidth/>}\n                        />\n                    ): (\n                        <DatePicker\n                            autoOk\n                            disableFuture\n                            margin=\"dense\"\n                            name={String(option.id)}\n                            label={option.langwordtxt || option.description}\n                            showTodayButton\n                            openTo={!optionValue ? 'year' : 'date'}\n                            views={['year', 'month', 'date']}\n                            fullWidth\n                            disabled={surveyIsValid}\n                            value={optionValue}\n                            onChange={handleChangeOption}\n                            className={classes.textField}\n                            inputFormat=\"DD/MM/YYYY\"\n                            InputProps={{ classes: { input: classes.textFieldInput } }}\n                            InputLabelProps={{ className: classes.textFieldLabel }}\n                            renderInput={(props) => <TextField {...props} variant={SURVEY_INPUT_VARIANT} fullWidth/>}\n                        />\n                    )}\n                </LocalizationProvider>\n            </SurveyTooltip>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}