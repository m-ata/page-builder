{"ast":null,"code":"import _extends from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/AccountKiosk/components/LanguageSelectionDialog.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport Grid from '@material-ui/core/Grid';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { languageNames, locales } from 'lib/translations/config';\nimport Typography from '@material-ui/core/Typography';\nimport Router from 'next/router';\nimport { connect } from 'react-redux';\nimport { setToState as _setToState } from 'state/actions';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport WebCmsGlobal from '../../../../webcms-global';\nvar Transition = /*#__PURE__*/React.forwardRef(_c = function Transition(props, ref) {\n  return __jsx(Slide, _extends({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }\n  }));\n});\n_c2 = Transition;\nvar useStyles = makeStyles({\n  root: {\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  },\n  content: {\n    paddingTop: 50,\n    paddingBottom: 50\n  }\n});\n\nvar LanguageSelectionDialog = function LanguageSelectionDialog(props) {\n  _s();\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS;\n\n  var _useContext2 = useContext(WebCmsGlobal),\n      locale = _useContext2.locale;\n\n  var open = props.open,\n      setToState = props.setToState;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n  var useLocales = GENERAL_SETTINGS.useFilterLangs ? GENERAL_SETTINGS.useFilterLangs : locales;\n\n  var handleLocaleChange = function handleLocaleChange(lang) {\n    var basePath = Router.asPath.split('?')[0] || Router.asPath;\n    var query = Router.query;\n    query.lang = lang || locale;\n    Object.keys(query).map(function (k) {\n      if (Router.pathname.includes(\"[\".concat(k, \"]\"))) {\n        delete query[k];\n      }\n    });\n    var url = {\n      pathname: Router.pathname,\n      query: query\n    };\n    var urlAs = {\n      pathname: basePath,\n      query: query\n    };\n    setToState(\"guest\", [\"useKioskLanguage\"], query.lang);\n    Router.push(url, urlAs);\n    document.documentElement.lang = lang;\n  };\n\n  return __jsx(Dialog, {\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: open,\n    TransitionComponent: Transition,\n    keepMounted: true,\n    \"aria-labelledby\": \"language-dialog-slide-title\",\n    \"aria-describedby\": \"language-dialog-slide-description\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(DialogTitle, {\n    id: \"language-dialog-slide-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, t('str_selectALanguage')), __jsx(DialogContent, {\n    dividers: true,\n    className: classes.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, useLocales.map(function (item) {\n    return __jsx(Grid, {\n      item: true,\n      xs: 6,\n      sm: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    }, __jsx(Card, {\n      className: classes.root,\n      onClick: function onClick() {\n        return handleLocaleChange(item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }\n    }, __jsx(CardActionArea, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 37\n      }\n    }, __jsx(CardMedia, {\n      className: classes.media,\n      image: \"/imgs/flags/\".concat(item, \".png\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 41\n      }\n    }), __jsx(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 41\n      }\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      component: \"h2\",\n      align: \"center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 45\n      }\n    }, languageNames[item])))));\n  }))));\n};\n\n_s(LanguageSelectionDialog, \"euSAPaRKo9XWWBos8sB1UEzYuqw=\", false, function () {\n  return [useTranslation, useStyles];\n});\n\n_c3 = LanguageSelectionDialog;\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setToState: function setToState(stateType, stateName, value) {\n      return dispatch(_setToState(stateType, stateName, value));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(LanguageSelectionDialog);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Transition$React.forwardRef\");\n$RefreshReg$(_c2, \"Transition\");\n$RefreshReg$(_c3, \"LanguageSelectionDialog\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/AccountKiosk/components/LanguageSelectionDialog.js"],"names":["React","useContext","Dialog","Grid","DialogContent","DialogTitle","Slide","Card","CardActionArea","CardContent","CardMedia","makeStyles","languageNames","locales","Typography","Router","connect","setToState","useTranslation","WebCmsGlobal","Transition","forwardRef","props","ref","useStyles","root","maxWidth","media","height","content","paddingTop","paddingBottom","LanguageSelectionDialog","GENERAL_SETTINGS","locale","open","t","classes","useLocales","useFilterLangs","handleLocaleChange","lang","basePath","asPath","split","query","Object","keys","map","k","pathname","includes","url","urlAs","push","document","documentElement","item","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport Grid from '@material-ui/core/Grid'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Slide from '@material-ui/core/Slide'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { languageNames, locales } from 'lib/translations/config'\nimport Typography from '@material-ui/core/Typography'\nimport Router from 'next/router'\nimport { connect } from 'react-redux'\nimport { setToState } from 'state/actions'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport WebCmsGlobal from '../../../../webcms-global'\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n    },\n    media: {\n        height: 140,\n    },\n    content: {\n        paddingTop: 50,\n        paddingBottom: 50\n    }\n})\n\nconst LanguageSelectionDialog = (props) => {\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const { locale } = useContext(WebCmsGlobal)\n    const { open, setToState } = props\n    const { t } = useTranslation()\n    const classes = useStyles()\n    const useLocales = GENERAL_SETTINGS.useFilterLangs ? GENERAL_SETTINGS.useFilterLangs : locales\n\n    const handleLocaleChange = (lang) => {\n        const basePath = Router.asPath.split('?')[0] || Router.asPath\n        const query = Router.query\n        query.lang = lang || locale\n\n        Object.keys(query).map(function(k) {\n            if (Router.pathname.includes(`[${k}]`)) {\n                delete query[k]\n            }\n        })\n\n        const url = { pathname: Router.pathname, query }\n        const urlAs = { pathname: basePath, query }\n\n        setToState(\"guest\", [\"useKioskLanguage\"],  query.lang)\n        Router.push(url, urlAs)\n        document.documentElement.lang = lang\n    }\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"md\"\n            open={open}\n            TransitionComponent={Transition}\n            keepMounted\n            aria-labelledby='language-dialog-slide-title'\n            aria-describedby='language-dialog-slide-description'\n        >\n            <DialogTitle id='language-dialog-slide-title'>{t('str_selectALanguage')}</DialogTitle>\n            <DialogContent dividers className={classes.content}>\n                <Grid container spacing={3}>\n                    {useLocales.map((item)=> {\n                        return (\n                            <Grid item xs={6} sm={3}>\n                                <Card className={classes.root} onClick={()=> handleLocaleChange(item)}>\n                                    <CardActionArea>\n                                        <CardMedia\n                                            className={classes.media}\n                                            image={`/imgs/flags/${item}.png`}\n                                        />\n                                        <CardContent>\n                                            <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n                                                {languageNames[item]}\n                                            </Typography>\n                                        </CardContent>\n                                    </CardActionArea>\n                                </Card>\n                            </Grid>\n                        )\n                    }) }\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n})\n\nexport default connect(null, mapDispatchToProps)(LanguageSelectionDialog)"]},"metadata":{},"sourceType":"module"}