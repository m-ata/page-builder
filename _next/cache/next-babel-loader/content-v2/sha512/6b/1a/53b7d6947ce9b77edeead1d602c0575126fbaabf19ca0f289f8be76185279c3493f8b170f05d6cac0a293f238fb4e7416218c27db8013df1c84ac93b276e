{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/LocaleSwitcher/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { languageNames, locales } from 'lib/translations/config';\nimport { LocaleContext } from 'lib/translations/context/LocaleContext';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport WebCmsGlobal from '../webcms-global';\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: 16,\n    height: 'auto'\n  },\n  listItem: {\n    paddingTop: 3,\n    paddingBottom: 3,\n    borderBottom: '1px solid #00000014'\n  },\n  listItemIcon: {\n    minWidth: 30\n  },\n  listItemText: {\n    paddingTop: 2,\n    fontSize: 16\n  }\n}));\n\nconst LocaleSwitcher = props => {\n  const Router = useRouter();\n  const {\n    isPortal,\n    className\n  } = props;\n  const {\n    locale\n  } = useContext(LocaleContext);\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const classes = useStyles();\n\n  const getLocales = () => {\n    if (GENERAL_SETTINGS.useFilterLangs) {\n      let useLocales = [];\n      Object.keys(GENERAL_SETTINGS.useFilterLangs).forEach(keyIndex => {\n        const key = GENERAL_SETTINGS.useFilterLangs[keyIndex];\n\n        if (locales.includes(key)) {\n          useLocales.push(key);\n        }\n      });\n      return useLocales;\n    }\n\n    return locales;\n  };\n\n  const handleLocaleChange = lang => {\n    const basePath = Router.asPath.split('?')[0] || Router.asPath;\n    const query = Router.query;\n    query.lang = lang || locale;\n    Object.keys(query).map(function (k) {\n      if (Router.pathname.includes(`[${k}]`)) {\n        delete query[k];\n      }\n    });\n    const url = {\n      pathname: Router.pathname,\n      query\n    };\n    const urlAs = {\n      pathname: basePath,\n      query\n    };\n    Router.push(url, urlAs);\n    document.documentElement.lang = lang;\n    document.body.style.direction = lang === 'ar' ? 'rtl' : 'ltr';\n    document.body.style.textAlign = lang === 'ar' ? 'right' : '';\n  };\n\n  return __jsx(PopupState, {\n    variant: \"popover\",\n    popupId: \"lang-popup-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, popupState => __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, __jsx(Button, _extends({\n    className: className || \"\",\n    style: isPortal ? {\n      textTransform: \"none\"\n    } : null,\n    startIcon: __jsx(Avatar, {\n      classes: {\n        root: classes.root\n      },\n      variant: \"rounded\",\n      src: `/imgs/flags/icons/${locale}.png`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 36\n      }\n    })\n  }, bindTrigger(popupState), {\n    endIcon: __jsx(ExpandMoreIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }), languageNames[locale]), __jsx(Menu, _extends({}, bindMenu(popupState), {\n    getContentAnchorEl: null,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"top\",\n      horizontal: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }), getLocales().map(locale => __jsx(MenuItem, {\n    classes: {\n      root: classes.listItem\n    },\n    key: locale,\n    onClick: () => {\n      handleLocaleChange(locale);\n      popupState.close();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }\n  }, __jsx(ListItemIcon, {\n    classes: {\n      root: classes.listItemIcon\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 33\n    }\n  }, __jsx(Avatar, {\n    classes: {\n      root: classes.root\n    },\n    variant: \"rounded\",\n    src: `/imgs/flags/icons/${locale}.png`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 37\n    }\n  })), __jsx(ListItemText, {\n    classes: {\n      root: classes.listItemText\n    },\n    primary: languageNames[locale],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 33\n    }\n  }))))));\n};\n\nexport default LocaleSwitcher;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/LocaleSwitcher/index.js"],"names":["React","useContext","useRouter","languageNames","locales","LocaleContext","ExpandMoreIcon","Button","Menu","MenuItem","PopupState","bindMenu","bindTrigger","Avatar","ListItemIcon","ListItemText","makeStyles","WebCmsGlobal","useStyles","root","width","height","listItem","paddingTop","paddingBottom","borderBottom","listItemIcon","minWidth","listItemText","fontSize","LocaleSwitcher","props","Router","isPortal","className","locale","GENERAL_SETTINGS","classes","getLocales","useFilterLangs","useLocales","Object","keys","forEach","keyIndex","key","includes","push","handleLocaleChange","lang","basePath","asPath","split","query","map","k","pathname","url","urlAs","document","documentElement","body","style","direction","textAlign","popupState","textTransform","vertical","horizontal","close"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { useRouter } from 'next/router'\nimport { languageNames, locales } from 'lib/translations/config'\nimport { LocaleContext } from 'lib/translations/context/LocaleContext'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport Button from '@material-ui/core/Button'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state'\nimport Avatar from '@material-ui/core/Avatar'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WebCmsGlobal from '../webcms-global'\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: 16,\n        height: 'auto'\n    },\n    listItem: {\n      paddingTop: 3,\n      paddingBottom: 3,\n      borderBottom: '1px solid #00000014'\n    },\n    listItemIcon: {\n        minWidth: 30,\n    },\n    listItemText: {\n        paddingTop: 2,\n        fontSize: 16\n    }\n}))\n\nconst LocaleSwitcher = (props) => {\n    const Router = useRouter()\n    const { isPortal, className } = props;\n    const { locale } = useContext(LocaleContext)\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const classes = useStyles()\n\n    const getLocales = () => {\n        if (GENERAL_SETTINGS.useFilterLangs) {\n            let useLocales = []\n            Object.keys(GENERAL_SETTINGS.useFilterLangs).forEach((keyIndex) => {\n                const key = GENERAL_SETTINGS.useFilterLangs[keyIndex]\n                if (locales.includes(key)) {\n                    useLocales.push(key)\n                }\n            })\n            return useLocales\n        }\n\n        return locales\n    }\n\n    const handleLocaleChange = (lang) => {\n        const basePath = Router.asPath.split('?')[0] || Router.asPath\n        const query = Router.query\n        query.lang = lang || locale\n\n        Object.keys(query).map(function(k) {\n            if (Router.pathname.includes(`[${k}]`)) {\n                delete query[k]\n            }\n        })\n\n        const url = { pathname: Router.pathname, query }\n        const urlAs = { pathname: basePath, query }\n\n        Router.push(url, urlAs)\n        document.documentElement.lang = lang\n        document.body.style.direction = lang === 'ar' ? 'rtl' : 'ltr'\n        document.body.style.textAlign = lang === 'ar' ? 'right' : ''\n    }\n\n    return (\n        <PopupState variant=\"popover\" popupId=\"lang-popup-menu\">\n            {(popupState) => (\n                <React.Fragment>\n                    <Button\n                        className={className || \"\"}\n                        style={isPortal ? {textTransform: \"none\"} : null}\n                        startIcon={<Avatar classes={{ root: classes.root }} variant=\"rounded\" src={`/imgs/flags/icons/${locale}.png`} />}\n                        {...bindTrigger(popupState)}\n                        endIcon={<ExpandMoreIcon />}\n                    >\n                        {languageNames[locale]}\n                    </Button>\n                    <Menu\n                        {...bindMenu(popupState)}\n                        getContentAnchorEl={null}\n                        anchorOrigin= {{\n                            vertical: \"bottom\",\n                            horizontal: \"left\"\n                        }}\n                        transformOrigin={{\n                            vertical: \"top\",\n                            horizontal: \"left\"\n                        }}\n                    >\n                        {getLocales().map((locale) => (\n                            <MenuItem\n                                classes={{ root: classes.listItem }}\n                                key={locale}\n                                onClick={() => {\n                                    handleLocaleChange(locale)\n                                    popupState.close()\n                                }}>\n                                <ListItemIcon classes={{ root: classes.listItemIcon }}>\n                                    <Avatar classes={{ root: classes.root }} variant=\"rounded\" src={`/imgs/flags/icons/${locale}.png`} />\n                                </ListItemIcon>\n                                <ListItemText classes={{ root: classes.listItemText }} primary={languageNames[locale]}/>\n                            </MenuItem>\n                        ))}\n                    </Menu>\n                </React.Fragment>\n            )}\n        </PopupState>\n    )\n}\nexport default LocaleSwitcher\n"]},"metadata":{},"sourceType":"module"}