{"ast":null,"code":"import _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/Preferences/RemarkCheckbox.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { TextField } from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { useSelector } from 'react-redux';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport { connect } from 'react-redux';\nimport { setToState as _setToState, updateState as _updateState } from \"../../../../state/actions\";\n\nvar RemarkCheckbox = function RemarkCheckbox(props) {\n  _s();\n\n  var _state$profile$checkb, _state$profile$checkb2, _state$profile$checkb3, _state$profile$checkb4;\n\n  var state = props.state,\n      remark = props.remark,\n      isDisabled = props.isDisabled,\n      setToState = props.setToState;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; //redux\n\n\n  var clientBase = useSelector(function (state) {\n    var _state$orest, _state$orest$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$state = _state$orest.state) === null || _state$orest$state === void 0 ? void 0 : _state$orest$state.client) || false;\n  });\n  var selectedRemarkList = useSelector(function (state) {\n    var _state$orest2, _state$orest2$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest2 = state.orest) === null || _state$orest2 === void 0 ? void 0 : (_state$orest2$state = _state$orest2.state) === null || _state$orest2$state === void 0 ? void 0 : _state$orest2$state.selectedRemarkList) || false;\n  }); //state\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      isChecked = _useState2[0],\n      setIsChecked = _useState2[1];\n\n  useEffect(function () {\n    var active = true;\n\n    if (active) {\n      if (isLoading) {\n        return undefined;\n      }\n\n      setIsLoading(true);\n\n      if (remark) {\n        if (clientBase) {\n          if (selectedRemarkList) {\n            var checkExistRemark = selectedRemarkList.find(function (e) {\n              return e.remarkid === remark.id;\n            });\n\n            if (checkExistRemark) {\n              var data = _defineProperty({}, remark.id, remark.hasnote ? {\n                canBeDelete: checkExistRemark.gid,\n                canBeInsert: true,\n                note: checkExistRemark.note,\n                isUpdateNote: false\n              } : {\n                canBeDelete: checkExistRemark.gid,\n                canBeInsert: true\n              });\n\n              setToState('guest', ['profile', 'checkboxGroupAll'], Object.assign(state.profile.checkboxGroupAll, data));\n              setToState('guest', ['profile', 'checkboxGroupAllBase'], Object.assign(state.profile.checkboxGroupAllBase, data));\n              setIsChecked(true);\n            }\n\n            setIsLoading(false);\n          } else {\n            setIsLoading(false);\n          }\n        }\n      } else {\n        setIsLoading(false);\n      }\n    }\n\n    return function () {\n      active = false;\n    };\n  }, [selectedRemarkList]);\n\n  var handleChangeRemark = function handleChangeRemark(event) {\n    var _state$profile, _group$remark$id, _group$remark$id2, _group$remark$id3, _group$remark$id4;\n\n    var oldValue = selectedRemarkList === null || selectedRemarkList === void 0 ? void 0 : selectedRemarkList.find(function (e) {\n      return e.remarkid === remark.id;\n    });\n    var checked = event.target.checked;\n    var value = checked ? selectedRemarkList.find(function (e) {\n      return e.remarkid === remark.id;\n    }) ? true : Number(event.target.value) : false;\n    var group = (state === null || state === void 0 ? void 0 : (_state$profile = state.profile) === null || _state$profile === void 0 ? void 0 : _state$profile.checkboxGroupAll) || false;\n\n    var obj = _defineProperty({}, remark.id, remark.hasnote ? {\n      canBeDelete: group && ((_group$remark$id = group[remark.id]) === null || _group$remark$id === void 0 ? void 0 : _group$remark$id.canBeDelete) || false,\n      canBeInsert: value,\n      note: group && ((_group$remark$id2 = group[remark.id]) === null || _group$remark$id2 === void 0 ? void 0 : _group$remark$id2.note) || null,\n      isUpdateNote: group && ((_group$remark$id3 = group[remark.id]) === null || _group$remark$id3 === void 0 ? void 0 : _group$remark$id3.isUpdateNote) || false,\n      info: {\n        remarkgr: remark.remarkgrdesc,\n        remark: remark.description\n      }\n    } : {\n      canBeDelete: group && ((_group$remark$id4 = group[remark.id]) === null || _group$remark$id4 === void 0 ? void 0 : _group$remark$id4.canBeDelete) || false,\n      canBeInsert: value,\n      info: {\n        remarkgr: remark.remarkgrdesc,\n        remark: remark.description\n      }\n    });\n\n    if (oldValue) {\n      if (obj[remark.id].info && checked) {\n        delete obj[remark.id].info;\n      }\n    }\n\n    if (checked) {\n      setToState('guest', ['profile', 'checkboxGroupAll'], Object.assign(group, obj));\n    } else {\n      if (!state.profile.checkboxGroupAll[event.target.value].canBeDelete) {\n        delete group[event.target.value];\n        setToState('guest', ['profile', 'checkboxGroupAll'], group);\n      } else {\n        setToState('guest', ['profile', 'checkboxGroupAll'], Object.assign(group, obj));\n      }\n    }\n\n    setIsChecked(checked);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(FormControlLabel, {\n    checked: isChecked,\n    onChange: handleChangeRemark,\n    name: String(remark.id),\n    value: String(remark.id),\n    control: __jsx(Checkbox, {\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 26\n      }\n    }),\n    disabled: isDisabled || isLoading,\n    label: t(remark.description),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), (remark === null || remark === void 0 ? void 0 : remark.hasnote) && __jsx(TextField, {\n    value: ((_state$profile$checkb = state.profile.checkboxGroupAll) === null || _state$profile$checkb === void 0 ? void 0 : (_state$profile$checkb2 = _state$profile$checkb[remark === null || remark === void 0 ? void 0 : remark.id]) === null || _state$profile$checkb2 === void 0 ? void 0 : _state$profile$checkb2.note) || '',\n    disabled: remark.hasnote && !((_state$profile$checkb3 = state.profile.checkboxGroupAll) !== null && _state$profile$checkb3 !== void 0 && (_state$profile$checkb4 = _state$profile$checkb3[remark === null || remark === void 0 ? void 0 : remark.id]) !== null && _state$profile$checkb4 !== void 0 && _state$profile$checkb4.canBeInsert),\n    onChange: function onChange(e) {\n      var _state$profile$checkb5, _state$profile$checkb6, _state$profile$checkb7;\n\n      setToState('guest', ['profile', 'checkboxGroupAll', remark.id], _objectSpread(_objectSpread({}, (_state$profile$checkb5 = state.profile.checkboxGroupAll) === null || _state$profile$checkb5 === void 0 ? void 0 : _state$profile$checkb5[remark === null || remark === void 0 ? void 0 : remark.id]), {}, {\n        note: e.target.value,\n        isUpdateNote: ((_state$profile$checkb6 = state.profile.checkboxGroupAllBase) === null || _state$profile$checkb6 === void 0 ? void 0 : (_state$profile$checkb7 = _state$profile$checkb6[remark === null || remark === void 0 ? void 0 : remark.id]) === null || _state$profile$checkb7 === void 0 ? void 0 : _state$profile$checkb7.note) !== e.target.value\n      }));\n    },\n    variant: 'outlined',\n    size: 'small',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }));\n};\n\n_s(RemarkCheckbox, \"DZnzGtWbU4O6QvTQ5Ldbz3n9MhQ=\", false, function () {\n  return [useTranslation, useSelector, useSelector];\n});\n\n_c = RemarkCheckbox;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setToState: function setToState(stateType, stateName, value) {\n      return dispatch(_setToState(stateType, stateName, value));\n    },\n    updateState: function updateState(stateType, stateName, value) {\n      return dispatch(_updateState(stateType, stateName, value));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemarkCheckbox);\n\nvar _c;\n\n$RefreshReg$(_c, \"RemarkCheckbox\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/Preferences/RemarkCheckbox.js"],"names":["React","useContext","useEffect","useState","TextField","FormControlLabel","useSelector","Checkbox","useTranslation","connect","setToState","updateState","RemarkCheckbox","props","state","remark","isDisabled","t","clientBase","orest","client","selectedRemarkList","isLoading","setIsLoading","isChecked","setIsChecked","active","undefined","checkExistRemark","find","e","remarkid","id","data","hasnote","canBeDelete","gid","canBeInsert","note","isUpdateNote","Object","assign","profile","checkboxGroupAll","checkboxGroupAllBase","handleChangeRemark","event","oldValue","checked","target","value","Number","group","obj","info","remarkgr","remarkgrdesc","description","display","String","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport {\n    TextField\n} from '@material-ui/core'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport { useSelector } from 'react-redux'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport { connect } from 'react-redux'\nimport { setToState, updateState } from \"../../../../state/actions\";\n\nconst RemarkCheckbox = (props) => {\n    const { state, remark, isDisabled, setToState } = props\n    const { t } = useTranslation()\n\n    //redux\n    const clientBase = useSelector((state) => state?.orest?.state?.client || false)\n    const selectedRemarkList = useSelector((state) => state?.orest?.state?.selectedRemarkList || false);\n\n    //state\n    const [isLoading, setIsLoading] = useState(false)\n    const [isChecked, setIsChecked] = useState(false)\n\n    useEffect(() => {\n        let active = true\n        if (active) {\n            if (isLoading) {\n                return undefined\n            }\n\n            setIsLoading(true)\n            if (remark) {\n                if (clientBase) {\n                    if(selectedRemarkList) {\n                        const checkExistRemark = selectedRemarkList.find(e => e.remarkid === remark.id)\n                        if(checkExistRemark) {\n                            const data = {\n                                [remark.id]: remark.hasnote ? {\n                                    canBeDelete: checkExistRemark.gid,\n                                    canBeInsert: true,\n                                    note: checkExistRemark.note,\n                                    isUpdateNote: false\n                                } : {\n                                    canBeDelete: checkExistRemark.gid,\n                                    canBeInsert: true,\n                                }\n                            }\n\n                            setToState('guest', ['profile', 'checkboxGroupAll'], Object.assign(state.profile.checkboxGroupAll, data))\n                            setToState('guest', ['profile', 'checkboxGroupAllBase'], Object.assign(state.profile.checkboxGroupAllBase, data))\n                            setIsChecked(true);\n\n                        }\n                        setIsLoading(false);\n                    } else {\n                        setIsLoading(false);\n                    }\n\n                }\n            } else {\n                setIsLoading(false)\n            }\n        }\n\n        return () => {\n            active = false\n        }\n    }, [selectedRemarkList])\n\n    const handleChangeRemark = (event) => {\n        const oldValue = selectedRemarkList?.find(e => e.remarkid === remark.id)\n        const checked = event.target.checked\n        const value = checked ? selectedRemarkList.find(e => e.remarkid === remark.id) ? true : Number(event.target.value) : false\n        const group = state?.profile?.checkboxGroupAll || false\n\n        const obj = {\n            [remark.id]: remark.hasnote ? {\n                canBeDelete: group && group[remark.id]?.canBeDelete || false,\n                canBeInsert: value,\n                note: group && group[remark.id]?.note || null,\n                isUpdateNote: group && group[remark.id]?.isUpdateNote || false,\n                info: {\n                    remarkgr: remark.remarkgrdesc,\n                    remark: remark.description\n                }\n            } : {\n                canBeDelete: group && group[remark.id]?.canBeDelete || false,\n                canBeInsert: value,\n                info: {\n                    remarkgr: remark.remarkgrdesc,\n                    remark: remark.description\n                }\n            }\n        }\n\n        if(oldValue) {\n            if(obj[remark.id].info && checked) {\n                delete obj[remark.id].info\n            }\n        }\n\n        if(checked) {\n            setToState('guest', ['profile', 'checkboxGroupAll'], Object.assign(group, obj))\n        } else {\n            if(!state.profile.checkboxGroupAll[event.target.value].canBeDelete) {\n                delete group[event.target.value]\n                setToState('guest', ['profile', 'checkboxGroupAll'], group)\n            } else {\n                setToState('guest', ['profile', 'checkboxGroupAll'], Object.assign(group, obj))\n            }\n        }\n        setIsChecked(checked)\n    }\n\n    return (\n        <div style={{display: 'flex'}}>\n\n            <FormControlLabel\n                checked={isChecked}\n                onChange={handleChangeRemark}\n                name={String(remark.id)}\n                value={String(remark.id)}\n                control={<Checkbox color=\"primary\" />}\n                disabled={isDisabled || isLoading}\n                label={t(remark.description)}\n            />\n            {\n                remark?.hasnote && (\n                    <TextField\n                        value={state.profile.checkboxGroupAll?.[remark?.id]?.note || ''}\n                        disabled={remark.hasnote && !state.profile.checkboxGroupAll?.[remark?.id]?.canBeInsert}\n                        onChange={(e) => {\n                            setToState(\n                                'guest',\n                                ['profile', 'checkboxGroupAll', remark.id],\n                                {\n                                    ...state.profile.checkboxGroupAll?.[remark?.id],\n                                    note: e.target.value,\n                                    isUpdateNote: state.profile.checkboxGroupAllBase?.[remark?.id]?.note !== e.target.value\n                                }\n                            )\n                        }}\n                        variant={'outlined'}\n                        size={'small'}\n                    />\n                )\n            }\n        </div>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemarkCheckbox)\n\n"]},"metadata":{},"sourceType":"module"}