{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/@webcms-ui/core/frame-checkbox/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormGroup, FormControlLabel, Checkbox, Typography, Dialog, DialogTitle, DialogContent, DialogActions, Tooltip, Button } from '@material-ui/core';\nimport LoadingSpinner from 'components/LoadingSpinner';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\n\nvar FrameCheckbox = function FrameCheckbox(props) {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var disabled = props.disabled,\n      required = props.required,\n      isError = props.isError,\n      isCheck = props.isCheck,\n      value = props.value,\n      ifamePageUrl = props.ifamePageUrl,\n      title = props.title,\n      linkText = props.linkText,\n      linkTextADesc = props.linkTextADesc,\n      acceptButtonText = props.acceptButtonText,\n      cancelButtonText = props.cancelButtonText,\n      fontSize = props.fontSize,\n      variant = props.variant,\n      checkboxColor = props.checkboxColor,\n      linkColor = props.linkColor;\n\n  var _useState = useState(false),\n      isIframeLoaded = _useState[0],\n      setIsIframeLoaded = _useState[1];\n\n  var _useState2 = useState(false),\n      openModal = _useState2[0],\n      setOpenModal = _useState2[1];\n\n  var _useState3 = useState(value),\n      isAccept = _useState3[0],\n      setIsAccept = _useState3[1];\n\n  var handleIframeOnLoad = function handleIframeOnLoad() {\n    setIsIframeLoaded(true);\n  };\n\n  var handleOpenModal = function handleOpenModal() {\n    setOpenModal(true);\n  };\n\n  var handleCloseModal = function handleCloseModal() {\n    setOpenModal(false);\n  };\n\n  var handleCheckBox = function handleCheckBox(value, newValue) {\n    if (typeof newValue !== 'undefined') {\n      setIsAccept(newValue);\n    }\n  };\n\n  useEffect(function () {\n    if (typeof isCheck === 'function' && typeof isAccept !== 'undefined') {\n      isCheck(isAccept);\n    }\n  }, [isAccept]);\n  useEffect(function () {\n    setIsAccept(value);\n  }, [value]);\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    required: required,\n    error: isError,\n    component: \"fieldset\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, __jsx(FormGroup, {\n    row: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, __jsx(FormControlLabel, {\n    disabled: disabled,\n    control: __jsx(Checkbox, {\n      color: \"primary\",\n      checked: isAccept,\n      onClick: function onClick() {\n        return handleCheckBox(isAccept, isAccept ? false : true);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }),\n    label: __jsx(Typography, {\n      variant: variant,\n      style: {\n        fontSize: fontSize\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, t(linkText, {\n      link: __jsx(\"a\", {\n        onClick: function onClick() {\n          return handleOpenModal();\n        },\n        style: {\n          textDecoration: 'underline',\n          fontWeight: 'bold',\n          color: linkColor ? linkColor : '#198C9B'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 41\n        }\n      }, ' ', t(linkTextADesc))\n    }), required && __jsx(\"div\", {\n      style: {\n        color: 'red',\n        display: 'inline-block'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 47\n      }\n    }, \"*\")),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }))), __jsx(Dialog, {\n    open: openModal,\n    onClose: function onClose() {\n      return handleCloseModal();\n    },\n    scroll: 'paper',\n    fullWidth: true,\n    maxWidth: 'md',\n    \"aria-labelledby\": \"scroll-dialog-title\",\n    \"aria-describedby\": \"scroll-dialog-description\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, __jsx(DialogTitle, {\n    id: \"scroll-dialog-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, title ? t(title).toUpperCase() : ''), __jsx(DialogContent, {\n    dividers: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, !isIframeLoaded && __jsx(LoadingSpinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 41\n    }\n  }), __jsx(\"iframe\", {\n    src: ifamePageUrl,\n    onLoad: function onLoad() {\n      return handleIframeOnLoad();\n    },\n    style: {\n      width: '100%',\n      height: '100%',\n      margin: 0,\n      border: 0,\n      minHeight: '50vh'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  })), __jsx(DialogActions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    color: \"primary\",\n    onClick: function onClick() {\n      handleCheckBox(isAccept, false);\n      handleCloseModal();\n      setIsIframeLoaded(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, t(cancelButtonText)), __jsx(Button, {\n    variant: 'contained',\n    color: \"primary\",\n    disabled: !isIframeLoaded,\n    onClick: function onClick() {\n      handleCheckBox(isAccept, true);\n      handleCloseModal();\n      setIsIframeLoaded(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, t(acceptButtonText)))));\n};\n\n_s(FrameCheckbox, \"zFORS+2uDuzSVag+/ZIymSZr4V4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = FrameCheckbox;\nFrameCheckbox.defaultProps = {\n  required: false,\n  isError: false,\n  value: false,\n  ifamePageUrl: '',\n  title: '',\n  linkText: '',\n  linkTextIn: '',\n  acceptButtonText: 'str_iAccept',\n  cancelButtonText: 'str_close',\n  disabled: false,\n  fontSize: '1rem',\n  variant: 'subtitle2'\n};\nFrameCheckbox.propTypes = {\n  required: PropTypes.bool,\n  isError: PropTypes.bool,\n  value: PropTypes.bool,\n  isCheck: PropTypes.func,\n  ifamePageUrl: PropTypes.string,\n  title: PropTypes.string,\n  linkText: PropTypes.string,\n  linkTextADesc: PropTypes.string,\n  acceptButtonText: PropTypes.string,\n  cancelButtonText: PropTypes.string,\n  disabled: PropTypes.bool,\n  fontSize: PropTypes.string,\n  variant: PropTypes.string\n};\nexport default FrameCheckbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"FrameCheckbox\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/@webcms-ui/core/frame-checkbox/index.js"],"names":["React","useState","useEffect","PropTypes","FormControl","FormGroup","FormControlLabel","Checkbox","Typography","Dialog","DialogTitle","DialogContent","DialogActions","Tooltip","Button","LoadingSpinner","useTranslation","FrameCheckbox","props","t","disabled","required","isError","isCheck","value","ifamePageUrl","title","linkText","linkTextADesc","acceptButtonText","cancelButtonText","fontSize","variant","checkboxColor","linkColor","isIframeLoaded","setIsIframeLoaded","openModal","setOpenModal","isAccept","setIsAccept","handleIframeOnLoad","handleOpenModal","handleCloseModal","handleCheckBox","newValue","link","textDecoration","fontWeight","color","display","toUpperCase","width","height","margin","border","minHeight","defaultProps","linkTextIn","propTypes","bool","func","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    FormControl,\n    FormGroup,\n    FormControlLabel,\n    Checkbox,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Tooltip,\n    Button,\n} from '@material-ui/core'\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\n\nconst FrameCheckbox = (props) => {\n    const { t } = useTranslation()\n    let {\n        disabled,\n        required,\n        isError,\n        isCheck,\n        value,\n        ifamePageUrl,\n        title,\n        linkText,\n        linkTextADesc,\n        acceptButtonText,\n        cancelButtonText,\n        fontSize,\n        variant,\n        checkboxColor,\n        linkColor\n    } = props\n\n    const [isIframeLoaded, setIsIframeLoaded] = useState(false)\n    const [openModal, setOpenModal] = useState(false)\n    const [isAccept, setIsAccept] = useState(value)\n\n    const handleIframeOnLoad = () => {\n        setIsIframeLoaded(true)\n    }\n\n    const handleOpenModal = () => {\n        setOpenModal(true)\n    }\n\n    const handleCloseModal = () => {\n        setOpenModal(false)\n    }\n\n    const handleCheckBox = (value, newValue) => {\n        if (typeof newValue !== 'undefined') {\n            setIsAccept(newValue)\n        }\n    }\n\n    useEffect(() => {\n        if (typeof isCheck === 'function' && typeof isAccept !== 'undefined') {\n            isCheck(isAccept)\n        }\n    }, [isAccept])\n\n    useEffect(() => {\n        setIsAccept(value)\n    }, [value])\n\n    return (\n        <React.Fragment>\n            <FormControl required={required} error={isError} component=\"fieldset\">\n                <FormGroup row>\n                    <FormControlLabel\n                        disabled={disabled}\n                        control={\n                            <Checkbox\n                                color={\"primary\"}\n                                checked={isAccept}\n                                onClick={() => handleCheckBox(isAccept, isAccept ? false : true)}\n                            />\n                        }\n                        label={\n                            <Typography variant={variant} style={{ fontSize: fontSize }}>\n                                {t(linkText, {\n                                    link: (\n                                        <a\n                                            onClick={() => handleOpenModal()}\n                                            style={{\n                                                textDecoration: 'underline',\n                                                fontWeight: 'bold',\n                                                color: linkColor ? linkColor : '#198C9B',\n                                            }}\n                                        >\n                                            {' '}\n                                            {t(linkTextADesc)}\n                                        </a>\n                                    ),\n                                })}\n                                {required && (<div style={{color:'red', display: 'inline-block'}}>*</div>)}\n                            </Typography>\n                        }\n                    />\n                </FormGroup>\n            </FormControl>\n            <Dialog\n                open={openModal}\n                onClose={()=> handleCloseModal()}\n                scroll={'paper'}\n                fullWidth\n                maxWidth={'md'}\n                aria-labelledby=\"scroll-dialog-title\"\n                aria-describedby=\"scroll-dialog-description\"\n            >\n                <DialogTitle id=\"scroll-dialog-title\">{title ? t(title).toUpperCase() : ''}</DialogTitle>\n                <DialogContent dividers={true}>\n                    {!isIframeLoaded && <LoadingSpinner />}\n                    <iframe\n                        src={ifamePageUrl}\n                        onLoad={()=> handleIframeOnLoad()}\n                        style={{ width: '100%', height: '100%', margin: 0, border: 0, minHeight: '50vh' }}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        color=\"primary\"\n                        onClick={() => {\n                            handleCheckBox(isAccept, false)\n                            handleCloseModal()\n                            setIsIframeLoaded(false)\n                        }}\n                    >\n                        {t(cancelButtonText)}\n                    </Button>\n                    <Button\n                        variant={'contained'}\n                        color=\"primary\"\n                        disabled={!isIframeLoaded}\n                        onClick={() => {\n                            handleCheckBox(isAccept, true)\n                            handleCloseModal()\n                            setIsIframeLoaded(false)\n                        }}\n                    >\n                        {t(acceptButtonText)}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nFrameCheckbox.defaultProps = {\n    required: false,\n    isError: false,\n    value: false,\n    ifamePageUrl: '',\n    title: '',\n    linkText: '',\n    linkTextIn: '',\n    acceptButtonText: 'str_iAccept',\n    cancelButtonText: 'str_close',\n    disabled: false,\n    fontSize: '1rem',\n    variant: 'subtitle2'\n}\n\nFrameCheckbox.propTypes = {\n    required: PropTypes.bool,\n    isError: PropTypes.bool,\n    value: PropTypes.bool,\n    isCheck: PropTypes.func,\n    ifamePageUrl: PropTypes.string,\n    title: PropTypes.string,\n    linkText: PropTypes.string,\n    linkTextADesc: PropTypes.string,\n    acceptButtonText: PropTypes.string,\n    cancelButtonText: PropTypes.string,\n    disabled: PropTypes.bool,\n    fontSize: PropTypes.string,\n    variant: PropTypes.string,\n}\n\nexport default FrameCheckbox\n"]},"metadata":{},"sourceType":"module"}