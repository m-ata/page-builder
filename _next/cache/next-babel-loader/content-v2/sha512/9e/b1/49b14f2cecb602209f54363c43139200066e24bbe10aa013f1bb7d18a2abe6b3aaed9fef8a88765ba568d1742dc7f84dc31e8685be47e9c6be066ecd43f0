{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/Details/OtherGuests/index.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport { UseOrest, ViewList } from '@webcms/orest';\nimport { connect, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Icon from '@material-ui/core/Icon';\nimport WebCmsGlobal from 'components/webcms-global';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport { useSnackbar } from 'notistack';\nimport { OREST_ENDPOINT } from 'model/orest/constants';\nimport { updateState } from 'state/actions';\nimport MaterialTable from 'material-table';\nimport { Alert } from '@material-ui/lab';\nimport ClientBase from '../ClientBase';\nimport { clientInitialState } from '../clientInitialState';\nimport LoadingSpinner from '../../../../LoadingSpinner';\n\nconst OtherGuestDetails = ({\n  resNameInfo,\n  clientInfo,\n  onClose,\n  usePrimaryClientReservation\n}) => {\n  const {\n    t\n  } = useTranslation(); //For Other Guest\n\n  const {\n    0: useClientInitialState,\n    1: setUseClientInitialState\n  } = useState(clientInitialState);\n  const useClientOrestState = clientInfo || false;\n  const useClientResName = resNameInfo || false;\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: () => onClose(),\n    style: {\n      marginLeft: 10,\n      marginBottom: 10\n    },\n    startIcon: __jsx(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 103\n      }\n    }, \"arrow_back\"),\n    variant: \"outlined\",\n    color: \"primary\",\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, t('str_back')), __jsx(ClientBase, {\n    isPrimaryGuest: false,\n    useClientInitialState: useClientInitialState,\n    setUseClientInitialState: setUseClientInitialState,\n    useClientOrestState: useClientOrestState,\n    useClientReservation: useClientResName,\n    usePrimaryClientReservation: usePrimaryClientReservation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst getNumberOfOtherGuest = useClientReservation => {\n  return Number(useClientReservation.totalpax + useClientReservation.totalchd - 1);\n};\n\nconst OtherGuests = ({\n  open,\n  onClose,\n  useClientReservation,\n  isCheckInPossible,\n  onCallBackCheckInButton,\n  otherGuestRequiredFieldCheck,\n  confirmClassName\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: useResNameList,\n    1: setUseResNameList\n  } = useState(false);\n  const {\n    0: useResNameInfo,\n    1: setUseResNameInfo\n  } = useState(false);\n  const {\n    0: useOtherGuestsClientList,\n    1: setUseOtherGuestsClientList\n  } = useState([]);\n  const {\n    0: useSelectClientIndex,\n    1: setUseSelectClientIndex\n  } = useState(false);\n  const useToken = useSelector(state => {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  const numberOfOtherGuest = getNumberOfOtherGuest(useClientReservation);\n  const isRequired = GENERAL_SETTINGS.hotelSettings.ci_chkallcards || false;\n  useEffect(() => {\n    let isEffect = true;\n\n    if (isEffect && open && useClientReservation) {\n      getClientLoader(useClientReservation.reservno);\n    }\n\n    return () => {\n      isEffect = false;\n    };\n  }, [open]);\n\n  const getClientLoader = async reservno => {\n    setIsLoading(true);\n    const otherGuestsClientIdList = await getOtherGuestsClientIdList(reservno);\n\n    if (otherGuestsClientIdList) {\n      const otherGuestsClientList = await getOtherGuestsClientList(otherGuestsClientIdList);\n      setUseOtherGuestsClientList(otherGuestsClientList);\n      setIsLoading(false);\n    } else {\n      setIsLoading(false);\n    }\n  };\n\n  const getOtherGuestsClientIdList = reservno => {\n    return ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.RESNAME,\n      token: useToken,\n      params: {\n        query: `reservno:${reservno}`,\n        allhotels: true\n      }\n    }).then(resnameResponse => {\n      var _resnameResponse$data, _resnameResponse$data2;\n\n      if (resnameResponse.status === 200 && resnameResponse !== null && resnameResponse !== void 0 && (_resnameResponse$data = resnameResponse.data) !== null && _resnameResponse$data !== void 0 && _resnameResponse$data.data && (resnameResponse === null || resnameResponse === void 0 ? void 0 : (_resnameResponse$data2 = resnameResponse.data) === null || _resnameResponse$data2 === void 0 ? void 0 : _resnameResponse$data2.data.length) > 0) {\n        setUseResNameList(resnameResponse.data.data);\n        return resnameResponse.data.data.map(resname => resname.clientid);\n      } else {\n        return false;\n      }\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const getOtherGuestsClientList = otherGuestsClientIdList => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'client/view/list/get/id',\n      method: 'POST',\n      token: useToken,\n      params: {\n        allhotels: true\n      },\n      data: otherGuestsClientIdList\n    }).then(clientViewListGetIdResponse => {\n      var _clientViewListGetIdR;\n\n      if (clientViewListGetIdResponse.status === 200 && clientViewListGetIdResponse !== null && clientViewListGetIdResponse !== void 0 && (_clientViewListGetIdR = clientViewListGetIdResponse.data) !== null && _clientViewListGetIdR !== void 0 && _clientViewListGetIdR.data) {\n        return clientViewListGetIdResponse.data.data;\n      } else {\n        return false;\n      }\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const createClient = numberOfClient => {\n    const getList = Array.from({\n      length: numberOfClient\n    }).map(() => {\n      return {\n        firstname: '',\n        lastname: '',\n        hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n      };\n    });\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'client/list/ins',\n      method: 'POST',\n      token: useToken,\n      params: {\n        hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n      },\n      data: getList\n    }).then(clientListInsResponse => {\n      var _clientListInsRespons;\n\n      if (clientListInsResponse.status === 200 && clientListInsResponse !== null && clientListInsResponse !== void 0 && (_clientListInsRespons = clientListInsResponse.data) !== null && _clientListInsRespons !== void 0 && _clientListInsRespons.data) {\n        return clientListInsResponse.data.data;\n      } else {\n        return false;\n      }\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const createClientLoginId = clientId => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'client/loginid',\n      method: 'PUT',\n      token: useToken,\n      params: {\n        id: clientId,\n        pref: true,\n        datapolicy: true,\n        force: true\n      }\n    }).then(clientLoginIdResponse => {\n      var _clientLoginIdRespons;\n\n      return !!(clientLoginIdResponse.status === 200 && clientLoginIdResponse !== null && clientLoginIdResponse !== void 0 && (_clientLoginIdRespons = clientLoginIdResponse.data) !== null && _clientLoginIdRespons !== void 0 && _clientLoginIdRespons.data);\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const createClientLoginIdList = async getClientList => {\n    for (let client of getClientList) {\n      await createClientLoginId(client.id);\n    }\n  };\n\n  const createResName = async (getClientList, reservno) => {\n    const getList = getClientList.map(client => {\n      return {\n        firstname: '',\n        lastname: '',\n        clientid: client.id,\n        reservno: reservno,\n        hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n      };\n    });\n    await createClientLoginIdList(getClientList);\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: '/resname/list/ins',\n      method: 'POST',\n      token: useToken,\n      params: {\n        hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n      },\n      data: getList\n    }).then(resnameListInsResponse => {\n      var _resnameListInsRespon;\n\n      return !!(resnameListInsResponse.status === 200 && resnameListInsResponse !== null && resnameListInsResponse !== void 0 && (_resnameListInsRespon = resnameListInsResponse.data) !== null && _resnameListInsRespon !== void 0 && _resnameListInsRespon.data);\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const createMissingGuests = async numberOfOtherGuest => {\n    setIsLoading(true);\n    const getClientList = await createClient(numberOfOtherGuest);\n    const isCreateResName = await createResName(getClientList, useClientReservation.reservno);\n\n    if (isCreateResName) {\n      await getClientLoader(useClientReservation.reservno);\n      enqueueSnackbar(t('str_missingGuestRecordsHaveBeenCreatedYouCanEditNewlyAddedRecords'), {\n        variant: 'success'\n      });\n      setIsLoading(false);\n    } else {\n      setIsLoading(false);\n    }\n  };\n\n  const otherGuestColumns = [{\n    title: `${t('str_firstName')} ${isRequired ? `*` : ''}`,\n    field: 'firstname',\n    render: state => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, state.firstname || \"-\")\n  }, {\n    title: `${t('str_lastName')} ${isRequired ? `*` : ''}`,\n    field: 'lastname',\n    render: state => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }, state.lastname || \"-\")\n  }, {\n    title: `${t('str_birthDate')} ${isRequired ? `*` : ''}`,\n    field: 'birthdate',\n    type: 'date',\n    render: state => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    }, state.birthdate || \"-\")\n  }, {\n    title: `${t('str_nationality')} ${isRequired ? `*` : ''}`,\n    field: 'nationdesc',\n    render: state => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }, state.nationdesc || \"-\")\n  }, {\n    title: `${t('str_idNumber')} ${isRequired ? `*` : ''}`,\n    field: 'idno',\n    render: state => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }, state.idno || state.tridno || \"-\")\n  }];\n\n  const handleOnClose = async () => {\n    setUseSelectClientIndex(false);\n    onClose();\n    return true;\n  };\n\n  const handleOnCallBackCheckInButton = async () => {\n    const getOtherGuestRequiredFieldCheck = await otherGuestRequiredFieldCheck(numberOfOtherGuest);\n\n    if (!getOtherGuestRequiredFieldCheck) {\n      return false;\n    }\n\n    onCallBackCheckInButton();\n    onClose();\n    return true;\n  };\n\n  const showCreateMissingGuestsAlert = (useOtherGuestsClientList, numberOfOtherGuest) => {\n    return useOtherGuestsClientList && useOtherGuestsClientList.length !== numberOfOtherGuest && useOtherGuestsClientList.length <= numberOfOtherGuest;\n  };\n\n  return __jsx(Dialog, {\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: open,\n    onClose: () => onClose(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }, __jsx(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }\n  }, t('str_otherGuests')), __jsx(DialogContent, {\n    dividers: true,\n    style: {\n      overflowX: 'hidden',\n      overflowY: 'scroll'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, isLoading ? __jsx(LoadingSpinner, {\n    size: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }\n  }) : __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 21\n    }\n  }, useSelectClientIndex !== false && useSelectClientIndex >= 0 ? __jsx(OtherGuestDetails, {\n    usePrimaryClientReservation: useClientReservation,\n    resNameInfo: useResNameInfo,\n    clientInfo: useOtherGuestsClientList[useSelectClientIndex],\n    onClose: async () => {\n      setUseSelectClientIndex(false);\n      await getClientLoader(useClientReservation.reservno);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 29\n    }\n  }) : __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 29\n    }\n  }, showCreateMissingGuestsAlert(useOtherGuestsClientList, numberOfOtherGuest) ? __jsx(Alert, {\n    severity: \"info\",\n    action: __jsx(Button, {\n      onClick: () => createMissingGuests(numberOfOtherGuest - useOtherGuestsClientList.length),\n      variant: \"outlined\",\n      color: \"inherit\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 68\n      }\n    }, t('str_yes')),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 37\n    }\n  }, t('str_theNumberOfGuestsInTheReservationIsNotEqualToTheNumberOfRegisteredGuestsWouldYouLikeToAddTheMissingRecordsToTheList')) : null, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 33\n    }\n  }), __jsx(MaterialTable, {\n    title: t('str_guestList'),\n    columns: otherGuestColumns,\n    data: useOtherGuestsClientList,\n    options: {\n      search: false\n    },\n    isLoading: isLoading,\n    actions: [{\n      icon: 'edit',\n      onClick: (e, rowData) => {\n        const getResName = useResNameList.find(resname => resname.clientid === rowData.id);\n        setUseResNameInfo(getResName);\n        setUseSelectClientIndex(rowData.tableData.id);\n      }\n    }],\n    localization: {\n      body: {\n        emptyDataSourceMessage: t('str_noRecords'),\n        addTooltip: t('str_add'),\n        deleteTooltip: t('str_delete'),\n        editTooltip: t('str_edit'),\n        filterRow: {\n          filterTooltip: t('str_filter')\n        },\n        editRow: {\n          deleteText: t('str_confirmDeleteRecord'),\n          cancelTooltip: t('str_cancel'),\n          saveTooltip: t('str_save')\n        }\n      },\n      toolbar: {\n        searchTooltip: t('str_search'),\n        searchPlaceholder: t('str_search')\n      },\n      pagination: {\n        labelRowsSelect: t('str_line'),\n        labelDisplayedRows: t('str_labelDisplayedRows'),\n        firstTooltip: t('str_firstPage'),\n        previousTooltip: t('str_previousPage'),\n        nextTooltip: t('str_nextPage'),\n        lastTooltip: t('str_lastPage')\n      },\n      header: {\n        actions: ''\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 33\n    }\n  })))), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    disabled: isLoading,\n    color: \"primary\",\n    onClick: () => handleOnClose(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 17\n    }\n  }, t('str_close')), isCheckInPossible ? __jsx(Button, {\n    disabled: isLoading,\n    className: confirmClassName,\n    onClick: () => handleOnCallBackCheckInButton(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 21\n    }\n  }, t('str_proceedToCheckin')) : null));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OtherGuests);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/Details/OtherGuests/index.js"],"names":["React","useContext","useEffect","useState","UseOrest","ViewList","connect","useSelector","Button","Dialog","DialogActions","DialogContent","DialogTitle","Icon","WebCmsGlobal","useTranslation","useSnackbar","OREST_ENDPOINT","updateState","MaterialTable","Alert","ClientBase","clientInitialState","LoadingSpinner","OtherGuestDetails","resNameInfo","clientInfo","onClose","usePrimaryClientReservation","t","useClientInitialState","setUseClientInitialState","useClientOrestState","useClientResName","marginLeft","marginBottom","getNumberOfOtherGuest","useClientReservation","Number","totalpax","totalchd","OtherGuests","open","isCheckInPossible","onCallBackCheckInButton","otherGuestRequiredFieldCheck","confirmClassName","GENERAL_SETTINGS","enqueueSnackbar","isLoading","setIsLoading","useResNameList","setUseResNameList","useResNameInfo","setUseResNameInfo","useOtherGuestsClientList","setUseOtherGuestsClientList","useSelectClientIndex","setUseSelectClientIndex","useToken","state","orest","currentUser","auth","access_token","numberOfOtherGuest","isRequired","hotelSettings","ci_chkallcards","isEffect","getClientLoader","reservno","otherGuestsClientIdList","getOtherGuestsClientIdList","otherGuestsClientList","getOtherGuestsClientList","apiUrl","OREST_URL","endpoint","RESNAME","token","params","query","allhotels","then","resnameResponse","status","data","length","map","resname","clientid","catch","method","clientViewListGetIdResponse","createClient","numberOfClient","getList","Array","from","firstname","lastname","hotelrefno","HOTELREFNO","clientListInsResponse","createClientLoginId","clientId","id","pref","datapolicy","force","clientLoginIdResponse","createClientLoginIdList","getClientList","client","createResName","resnameListInsResponse","createMissingGuests","isCreateResName","variant","otherGuestColumns","title","field","render","type","birthdate","nationdesc","idno","tridno","handleOnClose","handleOnCallBackCheckInButton","getOtherGuestRequiredFieldCheck","showCreateMissingGuestsAlert","overflowX","overflowY","search","icon","onClick","e","rowData","getResName","find","tableData","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","filterRow","filterTooltip","editRow","deleteText","cancelTooltip","saveTooltip","toolbar","searchTooltip","searchPlaceholder","pagination","labelRowsSelect","labelDisplayedRows","firstTooltip","previousTooltip","nextTooltip","lastTooltip","header","actions","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,eAAnC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA,OAA3B;AAAoCC,EAAAA;AAApC,CAAD,KAAuE;AAC7F,QAAM;AAACC,IAAAA;AAAD,MAAMd,cAAc,EAA1B,CAD6F,CAG7F;;AACA,QAAM;AAAA,OAACe,qBAAD;AAAA,OAAwBC;AAAxB,MAAoD5B,QAAQ,CAACmB,kBAAD,CAAlE;AACA,QAAMU,mBAAmB,GAAGN,UAAU,IAAI,KAA1C;AACA,QAAMO,gBAAgB,GAAGR,WAAW,IAAI,KAAxC;AAEA,SACI,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAME,OAAO,EAA9B;AAAkC,IAAA,KAAK,EAAE;AAAEO,MAAAA,UAAU,EAAE,EAAd;AAAkBC,MAAAA,YAAY,EAAE;AAAhC,KAAzC;AAA+E,IAAA,SAAS,EAAE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA1F;AAAmH,IAAA,OAAO,EAAC,UAA3H;AAAsI,IAAA,KAAK,EAAC,SAA5I;AAAsJ,IAAA,gBAAgB,MAAtK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,CAAC,CAAC,UAAD,CADN,CADJ,EAII,MAAC,UAAD;AACI,IAAA,cAAc,EAAE,KADpB;AAEI,IAAA,qBAAqB,EAAEC,qBAF3B;AAGI,IAAA,wBAAwB,EAAEC,wBAH9B;AAII,IAAA,mBAAmB,EAAEC,mBAJzB;AAKI,IAAA,oBAAoB,EAAEC,gBAL1B;AAMI,IAAA,2BAA2B,EAAEL,2BANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAeH,CAvBD;;AAyBA,MAAMQ,qBAAqB,GAAIC,oBAAD,IAA0B;AACpD,SAAOC,MAAM,CAAED,oBAAoB,CAACE,QAArB,GAAgCF,oBAAoB,CAACG,QAAtD,GAAkE,CAAnE,CAAb;AACH,CAFD;;AAIA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQf,EAAAA,OAAR;AAAiBU,EAAAA,oBAAjB;AAAuCM,EAAAA,iBAAvC;AAA0DC,EAAAA,uBAA1D;AAAmFC,EAAAA,4BAAnF;AAAiHC,EAAAA;AAAjH,CAAD,KAAyI;AACzJ,QAAM;AAAEjB,IAAAA;AAAF,MAAQd,cAAc,EAA5B;AACA,QAAM;AAAEgC,IAAAA;AAAF,MAAuB9C,UAAU,CAACa,YAAD,CAAvC;AACA,QAAM;AAAEkC,IAAAA;AAAF,MAAsBhC,WAAW,EAAvC;AACA,QAAM;AAAA,OAACiC,SAAD;AAAA,OAAYC;AAAZ,MAA4B/C,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACgD,cAAD;AAAA,OAAiBC;AAAjB,MAAsCjD,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAACkD,cAAD;AAAA,OAAiBC;AAAjB,MAAsCnD,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAACoD,wBAAD;AAAA,OAA2BC;AAA3B,MAA0DrD,QAAQ,CAAC,EAAD,CAAxE;AACA,QAAM;AAAA,OAACsD,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDvD,QAAQ,CAAC,KAAD,CAAhE;AACA,QAAMwD,QAAQ,GAAGpD,WAAW,CAAEqD,KAAD;AAAA;;AAAA,WAAW,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,4BAAAA,KAAK,CAAEC,KAAP,uFAAcC,WAAd,0GAA2BC,IAA3B,kFAAiCC,YAAjC,KAAiD,KAA5D;AAAA,GAAD,CAA5B;AACA,QAAMC,kBAAkB,GAAG7B,qBAAqB,CAACC,oBAAD,CAAhD;AACA,QAAM6B,UAAU,GAAGnB,gBAAgB,CAACoB,aAAjB,CAA+BC,cAA/B,IAAiD,KAApE;AAEAlE,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAImE,QAAQ,GAAG,IAAf;;AAEA,QAAIA,QAAQ,IAAI3B,IAAZ,IAAoBL,oBAAxB,EAA8C;AAC1CiC,MAAAA,eAAe,CAACjC,oBAAoB,CAACkC,QAAtB,CAAf;AACH;;AAED,WAAO,MAAM;AACTF,MAAAA,QAAQ,GAAG,KAAX;AACH,KAFD;AAGH,GAVQ,EAUN,CAAC3B,IAAD,CAVM,CAAT;;AAYA,QAAM4B,eAAe,GAAG,MAAOC,QAAP,IAAoB;AACxCrB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMsB,uBAAuB,GAAG,MAAMC,0BAA0B,CAACF,QAAD,CAAhE;;AACA,QAAIC,uBAAJ,EAA6B;AACzB,YAAME,qBAAqB,GAAG,MAAMC,wBAAwB,CAACH,uBAAD,CAA5D;AACAhB,MAAAA,2BAA2B,CAACkB,qBAAD,CAA3B;AACAxB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAJD,MAIO;AACHA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAVD;;AAYA,QAAMuB,0BAA0B,GAAIF,QAAD,IAAc;AAC7C,WAAOlE,QAAQ,CAAC;AACZuE,MAAAA,MAAM,EAAE7B,gBAAgB,CAAC8B,SADb;AAEZC,MAAAA,QAAQ,EAAE7D,cAAc,CAAC8D,OAFb;AAGZC,MAAAA,KAAK,EAAErB,QAHK;AAIZsB,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAG,YAAWX,QAAS,EADxB;AAEJY,QAAAA,SAAS,EAAE;AAFP;AAJI,KAAD,CAAR,CAQJC,IARI,CAQEC,eAAD,IAAqB;AAAA;;AACzB,UAAIA,eAAe,CAACC,MAAhB,KAA2B,GAA3B,IAAkCD,eAAlC,aAAkCA,eAAlC,wCAAkCA,eAAe,CAAEE,IAAnD,kDAAkC,sBAAuBA,IAAzD,IAAiE,CAAAF,eAAe,SAAf,IAAAA,eAAe,WAAf,sCAAAA,eAAe,CAAEE,IAAjB,kFAAuBA,IAAvB,CAA4BC,MAA5B,IAAqC,CAA1G,EAA6G;AACzGpC,QAAAA,iBAAiB,CAACiC,eAAe,CAACE,IAAhB,CAAqBA,IAAtB,CAAjB;AACA,eAAOF,eAAe,CAACE,IAAhB,CAAqBA,IAArB,CAA0BE,GAA1B,CAA+BC,OAAD,IAAaA,OAAO,CAACC,QAAnD,CAAP;AACH,OAHD,MAGO;AACH,eAAO,KAAP;AACH;AACJ,KAfM,EAeJC,KAfI,CAeE,MAAM;AACX,aAAO,KAAP;AACH,KAjBM,CAAP;AAkBH,GAnBD;;AAqBA,QAAMjB,wBAAwB,GAAIH,uBAAD,IAA6B;AAC1D,WAAOpE,QAAQ,CAAC;AACZwE,MAAAA,MAAM,EAAE7B,gBAAgB,CAAC8B,SADb;AAEZC,MAAAA,QAAQ,EAAE,yBAFE;AAGZe,MAAAA,MAAM,EAAE,MAHI;AAIZb,MAAAA,KAAK,EAAErB,QAJK;AAKZsB,MAAAA,MAAM,EAAE;AACJE,QAAAA,SAAS,EAAE;AADP,OALI;AAQZI,MAAAA,IAAI,EAAEf;AARM,KAAD,CAAR,CASJY,IATI,CASEU,2BAAD,IAAiC;AAAA;;AACrC,UAAIA,2BAA2B,CAACR,MAA5B,KAAuC,GAAvC,IAA8CQ,2BAA9C,aAA8CA,2BAA9C,wCAA8CA,2BAA2B,CAAEP,IAA3E,kDAA8C,sBAAmCA,IAArF,EAA2F;AACvF,eAAOO,2BAA2B,CAACP,IAA5B,CAAiCA,IAAxC;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KAfM,EAeJK,KAfI,CAeE,MAAM;AACX,aAAO,KAAP;AACH,KAjBM,CAAP;AAkBH,GAnBD;;AAqBA,QAAMG,YAAY,GAAIC,cAAD,IAAoB;AACrC,UAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEX,MAAAA,MAAM,EAAEQ;AAAV,KAAX,EAAuCP,GAAvC,CAA2C,MAAM;AAC7D,aAAO;AACHW,QAAAA,SAAS,EAAE,EADR;AAEHC,QAAAA,QAAQ,EAAE,EAFP;AAGHC,QAAAA,UAAU,EAAEvD,gBAAgB,CAACwD;AAH1B,OAAP;AAKH,KANe,CAAhB;AAQA,WAAOnG,QAAQ,CAAC;AACZwE,MAAAA,MAAM,EAAE7B,gBAAgB,CAAC8B,SADb;AAEZC,MAAAA,QAAQ,EAAE,iBAFE;AAGZe,MAAAA,MAAM,EAAE,MAHI;AAIZb,MAAAA,KAAK,EAAErB,QAJK;AAKZsB,MAAAA,MAAM,EAAE;AACJqB,QAAAA,UAAU,EAAEvD,gBAAgB,CAACwD;AADzB,OALI;AAQZhB,MAAAA,IAAI,EAAEU;AARM,KAAD,CAAR,CASJb,IATI,CASEoB,qBAAD,IAA2B;AAAA;;AAC/B,UAAIA,qBAAqB,CAAClB,MAAtB,KAAiC,GAAjC,IAAwCkB,qBAAxC,aAAwCA,qBAAxC,wCAAwCA,qBAAqB,CAAEjB,IAA/D,kDAAwC,sBAA6BA,IAAzE,EAA+E;AAC3E,eAAOiB,qBAAqB,CAACjB,IAAtB,CAA2BA,IAAlC;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KAfM,EAeJK,KAfI,CAeE,MAAM;AACX,aAAO,KAAP;AACH,KAjBM,CAAP;AAkBH,GA3BD;;AA6BA,QAAMa,mBAAmB,GAAIC,QAAD,IAAc;AACtC,WAAOtG,QAAQ,CAAC;AACZwE,MAAAA,MAAM,EAAE7B,gBAAgB,CAAC8B,SADb;AAEZC,MAAAA,QAAQ,EAAE,gBAFE;AAGZe,MAAAA,MAAM,EAAE,KAHI;AAIZb,MAAAA,KAAK,EAAErB,QAJK;AAKZsB,MAAAA,MAAM,EAAE;AACJ0B,QAAAA,EAAE,EAAED,QADA;AAEJE,QAAAA,IAAI,EAAE,IAFF;AAGJC,QAAAA,UAAU,EAAE,IAHR;AAIJC,QAAAA,KAAK,EAAE;AAJH;AALI,KAAD,CAAR,CAWJ1B,IAXI,CAWE2B,qBAAD,IAA2B;AAAA;;AAC/B,aAAO,CAAC,EAAEA,qBAAqB,CAACzB,MAAtB,KAAiC,GAAjC,IAAwCyB,qBAAxC,aAAwCA,qBAAxC,wCAAwCA,qBAAqB,CAAExB,IAA/D,kDAAwC,sBAA6BA,IAAvE,CAAR;AACH,KAbM,EAaJK,KAbI,CAaE,MAAM;AACX,aAAO,KAAP;AACH,KAfM,CAAP;AAgBH,GAjBD;;AAmBA,QAAMoB,uBAAuB,GAAG,MAAOC,aAAP,IAAyB;AACrD,SAAK,IAAIC,MAAT,IAAmBD,aAAnB,EAAkC;AAC9B,YAAMR,mBAAmB,CAACS,MAAM,CAACP,EAAR,CAAzB;AACH;AACJ,GAJD;;AAMA,QAAMQ,aAAa,GAAG,OAAOF,aAAP,EAAsB1C,QAAtB,KAAmC;AACrD,UAAM0B,OAAO,GAAGgB,aAAa,CAACxB,GAAd,CAAmByB,MAAD,IAAY;AAC1C,aAAO;AACHd,QAAAA,SAAS,EAAE,EADR;AAEHC,QAAAA,QAAQ,EAAE,EAFP;AAGHV,QAAAA,QAAQ,EAAEuB,MAAM,CAACP,EAHd;AAIHpC,QAAAA,QAAQ,EAAEA,QAJP;AAKH+B,QAAAA,UAAU,EAAEvD,gBAAgB,CAACwD;AAL1B,OAAP;AAOH,KARe,CAAhB;AAUA,UAAMS,uBAAuB,CAACC,aAAD,CAA7B;AAEA,WAAO7G,QAAQ,CAAC;AACZwE,MAAAA,MAAM,EAAE7B,gBAAgB,CAAC8B,SADb;AAEZC,MAAAA,QAAQ,EAAE,mBAFE;AAGZe,MAAAA,MAAM,EAAE,MAHI;AAIZb,MAAAA,KAAK,EAAErB,QAJK;AAKZsB,MAAAA,MAAM,EAAE;AACJqB,QAAAA,UAAU,EAAEvD,gBAAgB,CAACwD;AADzB,OALI;AAQZhB,MAAAA,IAAI,EAAEU;AARM,KAAD,CAAR,CASJb,IATI,CASEgC,sBAAD,IAA4B;AAAA;;AAChC,aAAO,CAAC,EAAEA,sBAAsB,CAAC9B,MAAvB,KAAkC,GAAlC,IAAyC8B,sBAAzC,aAAyCA,sBAAzC,wCAAyCA,sBAAsB,CAAE7B,IAAjE,kDAAyC,sBAA8BA,IAAzE,CAAR;AACH,KAXM,EAWJK,KAXI,CAWE,MAAM;AACX,aAAO,KAAP;AACH,KAbM,CAAP;AAcH,GA3BD;;AA6BA,QAAMyB,mBAAmB,GAAG,MAAOpD,kBAAP,IAA8B;AACtDf,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAM+D,aAAa,GAAG,MAAMlB,YAAY,CAAC9B,kBAAD,CAAxC;AACA,UAAMqD,eAAe,GAAG,MAAMH,aAAa,CAACF,aAAD,EAAgB5E,oBAAoB,CAACkC,QAArC,CAA3C;;AAEA,QAAG+C,eAAH,EAAmB;AACf,YAAMhD,eAAe,CAACjC,oBAAoB,CAACkC,QAAtB,CAArB;AACAvB,MAAAA,eAAe,CAACnB,CAAC,CAAC,mEAAD,CAAF,EAAyE;AAAE0F,QAAAA,OAAO,EAAE;AAAX,OAAzE,CAAf;AACArE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAJD,MAIM;AACFA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAZD;;AAcA,QAAMsE,iBAAiB,GAAG,CACtB;AACIC,IAAAA,KAAK,EAAG,GAAE5F,CAAC,CAAC,eAAD,CAAkB,IAAGqC,UAAU,GAAI,GAAJ,GAAS,EAAG,EAD1D;AAEIwD,IAAAA,KAAK,EAAE,WAFX;AAGIC,IAAAA,MAAM,EAAG/D,KAAD,IACJ,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,KAAK,CAACwC,SAAN,IAAmB,GAApC;AAJR,GADsB,EAQtB;AACIqB,IAAAA,KAAK,EAAG,GAAE5F,CAAC,CAAC,cAAD,CAAiB,IAAGqC,UAAU,GAAI,GAAJ,GAAS,EAAG,EADzD;AAEIwD,IAAAA,KAAK,EAAE,UAFX;AAGIC,IAAAA,MAAM,EAAG/D,KAAD,IACJ,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,KAAK,CAACyC,QAAN,IAAkB,GAAnC;AAJR,GARsB,EAetB;AACIoB,IAAAA,KAAK,EAAG,GAAE5F,CAAC,CAAC,eAAD,CAAkB,IAAGqC,UAAU,GAAI,GAAJ,GAAS,EAAG,EAD1D;AAEIwD,IAAAA,KAAK,EAAE,WAFX;AAGIE,IAAAA,IAAI,EAAE,MAHV;AAIID,IAAAA,MAAM,EAAG/D,KAAD,IACJ,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,KAAK,CAACiE,SAAN,IAAmB,GAApC;AALR,GAfsB,EAuBtB;AACIJ,IAAAA,KAAK,EAAG,GAAE5F,CAAC,CAAC,iBAAD,CAAoB,IAAGqC,UAAU,GAAI,GAAJ,GAAS,EAAG,EAD5D;AAEIwD,IAAAA,KAAK,EAAE,YAFX;AAGIC,IAAAA,MAAM,EAAG/D,KAAD,IACJ,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,KAAK,CAACkE,UAAN,IAAoB,GAArC;AAJR,GAvBsB,EA8BtB;AACIL,IAAAA,KAAK,EAAG,GAAE5F,CAAC,CAAC,cAAD,CAAiB,IAAGqC,UAAU,GAAI,GAAJ,GAAS,EAAG,EADzD;AAEIwD,IAAAA,KAAK,EAAE,MAFX;AAGIC,IAAAA,MAAM,EAAG/D,KAAD,IACJ,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,KAAK,CAACmE,IAAN,IAAcnE,KAAK,CAACoE,MAApB,IAA8B,GAA/C;AAJR,GA9BsB,CAA1B;;AAuCA,QAAMC,aAAa,GAAG,YAAW;AAC7BvE,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACA/B,IAAAA,OAAO;AACP,WAAO,IAAP;AACH,GAJD;;AAMA,QAAMuG,6BAA6B,GAAG,YAAW;AAC7C,UAAMC,+BAA+B,GAAG,MAAMtF,4BAA4B,CAACoB,kBAAD,CAA1E;;AACA,QAAI,CAACkE,+BAAL,EAAsC;AAClC,aAAO,KAAP;AACH;;AAEDvF,IAAAA,uBAAuB;AACvBjB,IAAAA,OAAO;AACP,WAAO,IAAP;AACH,GATD;;AAWA,QAAMyG,4BAA4B,GAAG,CAAC7E,wBAAD,EAA2BU,kBAA3B,KAAkD;AACnF,WAAOV,wBAAwB,IAAIA,wBAAwB,CAACiC,MAAzB,KAAoCvB,kBAAhE,IAAsFV,wBAAwB,CAACiC,MAAzB,IAAmCvB,kBAAhI;AACH,GAFD;;AAIA,SACI,MAAC,MAAD;AAAQ,IAAA,SAAS,MAAjB;AAAkB,IAAA,QAAQ,EAAC,IAA3B;AAAgC,IAAA,IAAI,EAAEvB,IAAtC;AAA4C,IAAA,OAAO,EAAE,MAAMf,OAAO,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcE,CAAC,CAAC,iBAAD,CAAf,CADJ,EAEI,MAAC,aAAD;AAAe,IAAA,QAAQ,MAAvB;AAAwB,IAAA,KAAK,EAAE;AAAEwG,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,SAAS,EAAE;AAAlC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrF,SAAS,GACN,MAAC,cAAD;AAAgB,IAAA,IAAI,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGN,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKQ,oBAAoB,KAAK,KAAzB,IAAkCA,oBAAoB,IAAI,CAA1D,GACG,MAAC,iBAAD;AACI,IAAA,2BAA2B,EAAEpB,oBADjC;AAEI,IAAA,WAAW,EAAEgB,cAFjB;AAGI,IAAA,UAAU,EAAEE,wBAAwB,CAACE,oBAAD,CAHxC;AAII,IAAA,OAAO,EAAE,YAAY;AACjBC,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACA,YAAMY,eAAe,CAACjC,oBAAoB,CAACkC,QAAtB,CAArB;AACH,KAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAWG,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK6D,4BAA4B,CAAC7E,wBAAD,EAA2BU,kBAA3B,CAA5B,GACG,MAAC,KAAD;AAAO,IAAA,QAAQ,EAAC,MAAhB;AAAuB,IAAA,MAAM,EAAE,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAMoD,mBAAmB,CAACpD,kBAAkB,GAAGV,wBAAwB,CAACiC,MAA/C,CAA1C;AAAkG,MAAA,OAAO,EAAC,UAA1G;AAAqH,MAAA,KAAK,EAAC,SAA3H;AAAqI,MAAA,IAAI,EAAC,OAA1I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmJ3D,CAAC,CAAC,SAAD,CAApJ,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,CAAC,CAAC,yHAAD,CADN,CADH,GAIE,IALP,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI,MAAC,aAAD;AACI,IAAA,KAAK,EAAEA,CAAC,CAAC,eAAD,CADZ;AAEI,IAAA,OAAO,EAAE2F,iBAFb;AAGI,IAAA,IAAI,EAAEjE,wBAHV;AAII,IAAA,OAAO,EAAE;AAAEgF,MAAAA,MAAM,EAAE;AAAV,KAJb;AAKI,IAAA,SAAS,EAAEtF,SALf;AAMI,IAAA,OAAO,EAAE,CACL;AACIuF,MAAAA,IAAI,EAAE,MADV;AAEIC,MAAAA,OAAO,EAAE,CAACC,CAAD,EAAIC,OAAJ,KAAgB;AACrB,cAAMC,UAAU,GAAGzF,cAAc,CAAC0F,IAAf,CAAoBnD,OAAO,IAAIA,OAAO,CAACC,QAAR,KAAqBgD,OAAO,CAAChC,EAA5D,CAAnB;AACArD,QAAAA,iBAAiB,CAACsF,UAAD,CAAjB;AACAlF,QAAAA,uBAAuB,CAACiF,OAAO,CAACG,SAAR,CAAkBnC,EAAnB,CAAvB;AACH;AANL,KADK,CANb;AAgBI,IAAA,YAAY,EAAE;AACVoC,MAAAA,IAAI,EAAE;AACFC,QAAAA,sBAAsB,EAAEnH,CAAC,CAAC,eAAD,CADvB;AAEFoH,QAAAA,UAAU,EAAEpH,CAAC,CAAC,SAAD,CAFX;AAGFqH,QAAAA,aAAa,EAAErH,CAAC,CAAC,YAAD,CAHd;AAIFsH,QAAAA,WAAW,EAAEtH,CAAC,CAAC,UAAD,CAJZ;AAKFuH,QAAAA,SAAS,EAAE;AACPC,UAAAA,aAAa,EAAExH,CAAC,CAAC,YAAD;AADT,SALT;AAQFyH,QAAAA,OAAO,EAAE;AACLC,UAAAA,UAAU,EAAE1H,CAAC,CAAC,yBAAD,CADR;AAEL2H,UAAAA,aAAa,EAAE3H,CAAC,CAAC,YAAD,CAFX;AAGL4H,UAAAA,WAAW,EAAE5H,CAAC,CAAC,UAAD;AAHT;AARP,OADI;AAeV6H,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE9H,CAAC,CAAC,YAAD,CADX;AAEL+H,QAAAA,iBAAiB,EAAE/H,CAAC,CAAC,YAAD;AAFf,OAfC;AAmBVgI,MAAAA,UAAU,EAAE;AACRC,QAAAA,eAAe,EAAEjI,CAAC,CAAC,UAAD,CADV;AAERkI,QAAAA,kBAAkB,EAAElI,CAAC,CAAC,wBAAD,CAFb;AAGRmI,QAAAA,YAAY,EAAEnI,CAAC,CAAC,eAAD,CAHP;AAIRoI,QAAAA,eAAe,EAAEpI,CAAC,CAAC,kBAAD,CAJV;AAKRqI,QAAAA,WAAW,EAAErI,CAAC,CAAC,cAAD,CALN;AAMRsI,QAAAA,WAAW,EAAEtI,CAAC,CAAC,cAAD;AANN,OAnBF;AA2BVuI,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL;AA3BE,KAhBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAZR,CAJR,CAFJ,EA8EI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AACI,IAAA,QAAQ,EAAEpH,SADd;AAEI,IAAA,KAAK,EAAC,SAFV;AAGI,IAAA,OAAO,EAAE,MAAMgF,aAAa,EAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKpG,CAAC,CAAC,WAAD,CALN,CADJ,EAQKc,iBAAiB,GACd,MAAC,MAAD;AACI,IAAA,QAAQ,EAAEM,SADd;AAEI,IAAA,SAAS,EAAEH,gBAFf;AAGI,IAAA,OAAO,EAAE,MAAMoF,6BAA6B,EAHhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKrG,CAAC,CAAC,sBAAD,CALN,CADc,GAOH,IAfnB,CA9EJ,CADJ;AAmGH,CA/UD;;AAiVA,MAAMyI,eAAe,GAAI1G,KAAD,IAAW;AAC/B,SAAO;AACHA,IAAAA,KAAK,EAAEA,KAAK,CAAC2G,WAAN,CAAkBC;AADtB,GAAP;AAGH,CAJD;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACtCxJ,EAAAA,WAAW,EAAE,CAACyJ,SAAD,EAAYC,SAAZ,EAAuBC,KAAvB,KAAiCH,QAAQ,CAACxJ,WAAW,CAACyJ,SAAD,EAAYC,SAAZ,EAAuBC,KAAvB,CAAZ;AADhB,CAAf,CAA3B;;AAIA,eAAevK,OAAO,CAACgK,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ChI,WAA7C,CAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { UseOrest, ViewList } from '@webcms/orest'\nimport { connect, useSelector } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Icon from '@material-ui/core/Icon'\nimport WebCmsGlobal from 'components/webcms-global'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport { useSnackbar } from 'notistack'\nimport { OREST_ENDPOINT } from 'model/orest/constants'\nimport { updateState } from 'state/actions'\nimport MaterialTable from 'material-table'\nimport { Alert } from '@material-ui/lab'\nimport ClientBase from '../ClientBase'\nimport { clientInitialState } from '../clientInitialState'\nimport LoadingSpinner from '../../../../LoadingSpinner'\n\nconst OtherGuestDetails = ({ resNameInfo, clientInfo, onClose, usePrimaryClientReservation }) => {\n    const {t} = useTranslation()\n\n    //For Other Guest\n    const [useClientInitialState, setUseClientInitialState] = useState(clientInitialState)\n    const useClientOrestState = clientInfo || false\n    const useClientResName = resNameInfo || false\n\n    return (\n        <React.Fragment>\n            <Button onClick={() => onClose()} style={{ marginLeft: 10, marginBottom: 10 }} startIcon={<Icon>arrow_back</Icon>} variant='outlined' color='primary' disableElevation>\n                {t('str_back')}\n            </Button>\n            <ClientBase\n                isPrimaryGuest={false}\n                useClientInitialState={useClientInitialState}\n                setUseClientInitialState={setUseClientInitialState}\n                useClientOrestState={useClientOrestState}\n                useClientReservation={useClientResName}\n                usePrimaryClientReservation={usePrimaryClientReservation}\n            />\n        </React.Fragment>\n    )\n}\n\nconst getNumberOfOtherGuest = (useClientReservation) => {\n    return Number((useClientReservation.totalpax + useClientReservation.totalchd) - 1)\n}\n\nconst OtherGuests = ({ open, onClose, useClientReservation, isCheckInPossible, onCallBackCheckInButton, otherGuestRequiredFieldCheck, confirmClassName }) => {\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const { enqueueSnackbar } = useSnackbar()\n    const [isLoading, setIsLoading] = useState(false)\n    const [useResNameList, setUseResNameList] = useState(false)\n    const [useResNameInfo, setUseResNameInfo] = useState(false)\n    const [useOtherGuestsClientList, setUseOtherGuestsClientList] = useState([])\n    const [useSelectClientIndex, setUseSelectClientIndex] = useState(false)\n    const useToken = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n    const numberOfOtherGuest = getNumberOfOtherGuest(useClientReservation)\n    const isRequired = GENERAL_SETTINGS.hotelSettings.ci_chkallcards || false\n\n    useEffect(() => {\n        let isEffect = true\n\n        if (isEffect && open && useClientReservation) {\n            getClientLoader(useClientReservation.reservno)\n        }\n\n        return () => {\n            isEffect = false\n        }\n    }, [open])\n\n    const getClientLoader = async (reservno) => {\n        setIsLoading(true)\n        const otherGuestsClientIdList = await getOtherGuestsClientIdList(reservno)\n        if (otherGuestsClientIdList) {\n            const otherGuestsClientList = await getOtherGuestsClientList(otherGuestsClientIdList)\n            setUseOtherGuestsClientList(otherGuestsClientList)\n            setIsLoading(false)\n        } else {\n            setIsLoading(false)\n        }\n    }\n\n    const getOtherGuestsClientIdList = (reservno) => {\n        return ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RESNAME,\n            token: useToken,\n            params: {\n                query: `reservno:${reservno}`,\n                allhotels: true,\n            },\n        }).then((resnameResponse) => {\n            if (resnameResponse.status === 200 && resnameResponse?.data?.data && resnameResponse?.data?.data.length > 0) {\n                setUseResNameList(resnameResponse.data.data)\n                return resnameResponse.data.data.map((resname) => resname.clientid)\n            } else {\n                return false\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const getOtherGuestsClientList = (otherGuestsClientIdList) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'client/view/list/get/id',\n            method: 'POST',\n            token: useToken,\n            params: {\n                allhotels: true,\n            },\n            data: otherGuestsClientIdList,\n        }).then((clientViewListGetIdResponse) => {\n            if (clientViewListGetIdResponse.status === 200 && clientViewListGetIdResponse?.data?.data) {\n                return clientViewListGetIdResponse.data.data\n            } else {\n                return false\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const createClient = (numberOfClient) => {\n        const getList = Array.from({ length: numberOfClient }).map(() => {\n            return {\n                firstname: '',\n                lastname: '',\n                hotelrefno: GENERAL_SETTINGS.HOTELREFNO,\n            }\n        })\n\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'client/list/ins',\n            method: 'POST',\n            token: useToken,\n            params: {\n                hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n            },\n            data: getList,\n        }).then((clientListInsResponse) => {\n            if (clientListInsResponse.status === 200 && clientListInsResponse?.data?.data) {\n                return clientListInsResponse.data.data\n            } else {\n                return false\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const createClientLoginId = (clientId) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'client/loginid',\n            method: 'PUT',\n            token: useToken,\n            params: {\n                id: clientId,\n                pref: true,\n                datapolicy: true,\n                force: true\n            }\n        }).then((clientLoginIdResponse) => {\n            return !!(clientLoginIdResponse.status === 200 && clientLoginIdResponse?.data?.data);\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const createClientLoginIdList = async (getClientList) => {\n        for (let client of getClientList) {\n            await createClientLoginId(client.id)\n        }\n    }\n\n    const createResName = async (getClientList, reservno) => {\n        const getList = getClientList.map((client) => {\n            return {\n                firstname: '',\n                lastname: '',\n                clientid: client.id,\n                reservno: reservno,\n                hotelrefno: GENERAL_SETTINGS.HOTELREFNO,\n            }\n        })\n\n        await createClientLoginIdList(getClientList)\n\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: '/resname/list/ins',\n            method: 'POST',\n            token: useToken,\n            params: {\n                hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n            },\n            data: getList,\n        }).then((resnameListInsResponse) => {\n            return !!(resnameListInsResponse.status === 200 && resnameListInsResponse?.data?.data)\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const createMissingGuests = async (numberOfOtherGuest) => {\n        setIsLoading(true)\n        const getClientList = await createClient(numberOfOtherGuest)\n        const isCreateResName = await createResName(getClientList, useClientReservation.reservno)\n\n        if(isCreateResName){\n            await getClientLoader(useClientReservation.reservno)\n            enqueueSnackbar(t('str_missingGuestRecordsHaveBeenCreatedYouCanEditNewlyAddedRecords'), { variant: 'success' });\n            setIsLoading(false)\n        }else {\n            setIsLoading(false)\n        }\n    }\n\n    const otherGuestColumns = [\n        {\n            title: `${t('str_firstName')} ${isRequired ? `*` : ''}`,\n            field: 'firstname',\n            render: (state) => (\n                <React.Fragment>{state.firstname || \"-\"}</React.Fragment>\n            ),\n        },\n        {\n            title: `${t('str_lastName')} ${isRequired ? `*` : ''}`,\n            field: 'lastname',\n            render: (state) => (\n                <React.Fragment>{state.lastname || \"-\"}</React.Fragment>\n            ),\n        },\n        {\n            title: `${t('str_birthDate')} ${isRequired ? `*` : ''}`,\n            field: 'birthdate',\n            type: 'date',\n            render: (state) => (\n                <React.Fragment>{state.birthdate || \"-\"}</React.Fragment>\n            ),\n        },\n        {\n            title: `${t('str_nationality')} ${isRequired ? `*` : ''}`,\n            field: 'nationdesc',\n            render: (state) => (\n                <React.Fragment>{state.nationdesc || \"-\"}</React.Fragment>\n            ),\n        },\n        {\n            title: `${t('str_idNumber')} ${isRequired ? `*` : ''}`,\n            field: 'idno',\n            render: (state) => (\n                <React.Fragment>{state.idno || state.tridno || \"-\"}</React.Fragment>\n            ),\n        },\n    ]\n\n    const handleOnClose = async () =>{\n        setUseSelectClientIndex(false)\n        onClose()\n        return true\n    }\n\n    const handleOnCallBackCheckInButton = async () =>{\n        const getOtherGuestRequiredFieldCheck = await otherGuestRequiredFieldCheck(numberOfOtherGuest)\n        if (!getOtherGuestRequiredFieldCheck) {\n            return false\n        }\n\n        onCallBackCheckInButton()\n        onClose()\n        return true\n    }\n\n    const showCreateMissingGuestsAlert = (useOtherGuestsClientList, numberOfOtherGuest) => {\n        return useOtherGuestsClientList && useOtherGuestsClientList.length !== numberOfOtherGuest && useOtherGuestsClientList.length <= numberOfOtherGuest\n    }\n\n    return (\n        <Dialog fullWidth maxWidth='md' open={open} onClose={() => onClose()}>\n            <DialogTitle>{t('str_otherGuests')}</DialogTitle>\n            <DialogContent dividers style={{ overflowX: 'hidden', overflowY: 'scroll' }}>\n                {isLoading ? (\n                    <LoadingSpinner size={40} />\n                ): (\n                    <React.Fragment>\n                        {useSelectClientIndex !== false && useSelectClientIndex >= 0 ? (\n                            <OtherGuestDetails\n                                usePrimaryClientReservation={useClientReservation}\n                                resNameInfo={useResNameInfo}\n                                clientInfo={useOtherGuestsClientList[useSelectClientIndex]}\n                                onClose={async () => {\n                                    setUseSelectClientIndex(false)\n                                    await getClientLoader(useClientReservation.reservno)\n                                }}\n                            />\n                        ) : (\n                            <React.Fragment>\n                                {showCreateMissingGuestsAlert(useOtherGuestsClientList, numberOfOtherGuest) ? (\n                                    <Alert severity=\"info\" action={<Button onClick={() => createMissingGuests(numberOfOtherGuest - useOtherGuestsClientList.length)} variant=\"outlined\" color=\"inherit\" size=\"small\">{t('str_yes')}</Button>}>\n                                        {t('str_theNumberOfGuestsInTheReservationIsNotEqualToTheNumberOfRegisteredGuestsWouldYouLikeToAddTheMissingRecordsToTheList')}\n                                    </Alert>\n                                ): null}\n                                <br />\n                                <MaterialTable\n                                    title={t('str_guestList')}\n                                    columns={otherGuestColumns}\n                                    data={useOtherGuestsClientList}\n                                    options={{ search: false }}\n                                    isLoading={isLoading}\n                                    actions={[\n                                        {\n                                            icon: 'edit',\n                                            onClick: (e, rowData) => {\n                                                const getResName = useResNameList.find(resname => resname.clientid === rowData.id)\n                                                setUseResNameInfo(getResName)\n                                                setUseSelectClientIndex(rowData.tableData.id)\n                                            },\n                                        },\n                                    ]}\n                                    localization={{\n                                        body: {\n                                            emptyDataSourceMessage: t('str_noRecords'),\n                                            addTooltip: t('str_add'),\n                                            deleteTooltip: t('str_delete'),\n                                            editTooltip: t('str_edit'),\n                                            filterRow: {\n                                                filterTooltip: t('str_filter'),\n                                            },\n                                            editRow: {\n                                                deleteText: t('str_confirmDeleteRecord'),\n                                                cancelTooltip: t('str_cancel'),\n                                                saveTooltip: t('str_save'),\n                                            },\n                                        },\n                                        toolbar: {\n                                            searchTooltip: t('str_search'),\n                                            searchPlaceholder: t('str_search'),\n                                        },\n                                        pagination: {\n                                            labelRowsSelect: t('str_line'),\n                                            labelDisplayedRows: t('str_labelDisplayedRows'),\n                                            firstTooltip: t('str_firstPage'),\n                                            previousTooltip: t('str_previousPage'),\n                                            nextTooltip: t('str_nextPage'),\n                                            lastTooltip: t('str_lastPage'),\n                                        },\n                                        header: {\n                                            actions: '',\n                                        },\n                                    }}\n                                />\n                            </React.Fragment>\n                          )}\n                    </React.Fragment>\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={isLoading}\n                    color='primary'\n                    onClick={() => handleOnClose()}\n                >\n                    {t('str_close')}\n                </Button>\n                {isCheckInPossible ?\n                    <Button\n                        disabled={isLoading}\n                        className={confirmClassName}\n                        onClick={() => handleOnCallBackCheckInButton()}\n                    >\n                        {t('str_proceedToCheckin')}\n                    </Button>: null\n                }\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OtherGuests)"]},"metadata":{},"sourceType":"module"}