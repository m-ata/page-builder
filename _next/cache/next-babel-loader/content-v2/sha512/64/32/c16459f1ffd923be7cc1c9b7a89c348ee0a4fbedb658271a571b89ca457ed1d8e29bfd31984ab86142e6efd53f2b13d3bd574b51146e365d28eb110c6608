{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/ReviewDialog/index.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Button, Dialog, DialogContent, Grid, TextField, Typography } from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { CustomToolTip } from \"../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport TrackedChangesDialog from \"../TrackedChangesDialog\";\nimport axios from \"axios\";\nimport { isErrorMsg, OREST_ENDPOINT, REQUEST_METHOD_CONST } from \"../../model/orest/constants\";\nimport { useSnackbar } from \"notistack\";\nimport WebCmsGlobal from \"../webcms-global\";\nimport { useSelector } from \"react-redux\";\nimport { UseOrest } from \"@webcms/orest\";\nconst useStyles = makeStyles(theme => ({\n  dialogContent: {\n    padding: 24\n  },\n  title: {\n    fontSize: 26,\n    fontWeight: 'bold',\n    paddingBottom: 16\n  }\n}));\nexport default function ReviewDialog(props) {\n  const classes = useStyles();\n  const {\n    open,\n    onClose,\n    handleAfterInsert,\n    params,\n    initialValue\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const token = useSelector(state => {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  const {\n    0: isSaving,\n    1: setIsSaving\n  } = useState(false);\n  const {\n    0: reviewScore,\n    1: setReviewScore\n  } = useState(initialValue || 0);\n  const {\n    0: reviewComment,\n    1: setReviewComment\n  } = useState('');\n  const {\n    0: openTrackedDialog,\n    1: setOpenTrackedDialog\n  } = useState(false);\n  const {\n    0: revPortal,\n    1: setRevPortal\n  } = useState(null);\n  const reviewDataBase = {\n    score: 0,\n    comment: ''\n  };\n  useEffect(() => {\n    if (token && open) {\n      if (!revPortal) {\n        UseOrest({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: 'revportal/app',\n          token\n        }).then(res => {\n          if (res.status === 200) {\n            setRevPortal(res.data.data);\n          }\n        });\n      }\n    }\n  }, [open]);\n  useEffect(() => {\n    if (initialValue > 0) setReviewScore(initialValue);\n  }, [initialValue]);\n\n  const handleAddComment = () => {\n    if (params) {\n      setIsSaving(true);\n      Object.assign(params, {\n        score: reviewScore\n      }, {\n        comment: reviewComment\n      });\n\n      if (revPortal) {\n        Object.assign(params, {\n          sourceid: revPortal.id\n        });\n      }\n\n      axios({\n        url: GENERAL_SETTINGS.OREST_URL + '/surevportrans/ins/review',\n        method: REQUEST_METHOD_CONST.POST,\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        params: params\n      }).then(res => {\n        setIsSaving(false);\n\n        if (res.status === 200) {\n          typeof onClose === 'function' && onClose();\n          typeof handleAfterInsert === 'function' && handleAfterInsert();\n          enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n            variant: 'success'\n          });\n        } else {\n          const retErr = isErrorMsg(res);\n          enqueueSnackbar(t(retErr.errorMsg), {\n            variant: 'success'\n          });\n        }\n      });\n    }\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, __jsx(Dialog, {\n    open: open,\n    fullWidth: true,\n    maxWidth: 'sm',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, __jsx(DialogContent, {\n    className: classes.dialogContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  }, __jsx(Typography, {\n    className: classes.title,\n    color: 'primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, t('str_addReview'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, __jsx(Rating, {\n    value: reviewScore,\n    onChange: (e, value) => setReviewScore(value),\n    name: \"review\",\n    precision: 0.5,\n    size: 'large',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 33\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, __jsx(TextField, {\n    onChange: e => setReviewComment(e.target.value),\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    rowsMax: 4,\n    variant: 'outlined',\n    label: t('str_comment'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    style: {\n      paddingTop: '8px',\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    disabled: isSaving,\n    color: 'primary',\n    variant: 'outlined',\n    startIcon: __jsx(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 48\n      }\n    }),\n    onClick: () => {\n      if (reviewComment !== reviewDataBase.comment || reviewScore !== reviewDataBase.score) {\n        setOpenTrackedDialog(true);\n      } else {\n        typeof onClose === 'function' && onClose();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 33\n    }\n  }, t('str_cancel')), reviewScore <= 0 ? __jsx(CustomToolTip, {\n    title: __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 49\n      }\n    }, __jsx(Typography, {\n      style: {\n        fontWeight: '600',\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 53\n      }\n    }, t('str_invalidFields')), reviewScore <= 0 ? __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 61\n      }\n    }, t('str_score')) : null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 41\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 49\n    }\n  }, __jsx(Button, {\n    disabled: true,\n    style: {\n      marginLeft: '8px'\n    },\n    variant: 'contained',\n    color: 'primary',\n    startIcon: __jsx(CheckIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 70\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 54\n    }\n  }, t('str_save')))) : __jsx(Button, {\n    disabled: isSaving || reviewScore <= 0,\n    style: {\n      marginLeft: '8px'\n    },\n    variant: 'contained',\n    color: 'primary',\n    startIcon: isSaving ? __jsx(LoadingSpinner, {\n      size: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 67\n      }\n    }) : __jsx(CheckIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 97\n      }\n    }),\n    onClick: handleAddComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 41\n    }\n  }, t('str_save'))))))), __jsx(TrackedChangesDialog, {\n    open: openTrackedDialog,\n    onPressNo: e => setOpenTrackedDialog(e),\n    onPressYes: e => {\n      setOpenTrackedDialog(e);\n      setReviewScore(0);\n      setReviewComment('');\n      typeof onClose === 'function' && onClose();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/ReviewDialog/index.js"],"names":["React","useContext","useEffect","useState","Button","Dialog","DialogContent","Grid","TextField","Typography","Rating","CloseIcon","CustomToolTip","CheckIcon","LoadingSpinner","makeStyles","useTranslation","TrackedChangesDialog","axios","isErrorMsg","OREST_ENDPOINT","REQUEST_METHOD_CONST","useSnackbar","WebCmsGlobal","useSelector","UseOrest","useStyles","theme","dialogContent","padding","title","fontSize","fontWeight","paddingBottom","ReviewDialog","props","classes","open","onClose","handleAfterInsert","params","initialValue","t","GENERAL_SETTINGS","enqueueSnackbar","token","state","orest","currentUser","auth","access_token","isSaving","setIsSaving","reviewScore","setReviewScore","reviewComment","setReviewComment","openTrackedDialog","setOpenTrackedDialog","revPortal","setRevPortal","reviewDataBase","score","comment","apiUrl","OREST_URL","endpoint","then","res","status","data","handleAddComment","Object","assign","sourceid","id","url","method","POST","headers","Authorization","variant","retErr","errorMsg","textAlign","e","value","target","paddingTop","marginLeft"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\nimport {Button, Dialog, DialogContent, Grid, TextField, Typography} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport {CustomToolTip} from \"../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport TrackedChangesDialog from \"../TrackedChangesDialog\";\nimport axios from \"axios\";\nimport {isErrorMsg, OREST_ENDPOINT, REQUEST_METHOD_CONST} from \"../../model/orest/constants\";\nimport {useSnackbar} from \"notistack\";\nimport WebCmsGlobal from \"../webcms-global\";\nimport {useSelector} from \"react-redux\";\nimport {UseOrest} from \"@webcms/orest\";\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContent: {\n        padding: 24\n    },\n    title:{\n        fontSize:26,\n        fontWeight:'bold',\n        paddingBottom:16,\n    },\n}))\n\nexport default function ReviewDialog(props) {\n    const classes = useStyles()\n\n    const {open, onClose, handleAfterInsert, params, initialValue } = props\n\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal);\n    const { enqueueSnackbar } = useSnackbar()\n\n    const token = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n\n    const [isSaving, setIsSaving] = useState(false)\n    const [reviewScore, setReviewScore] = useState(initialValue || 0)\n    const [reviewComment, setReviewComment] = useState('')\n    const [openTrackedDialog, setOpenTrackedDialog] = useState(false)\n    const [revPortal, setRevPortal] = useState(null)\n    const reviewDataBase = {\n        score: 0,\n        comment: ''\n    }\n\n    useEffect(() => {\n        if(token && open) {\n            if(!revPortal) {\n                UseOrest({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: 'revportal/app',\n                    token\n                }).then(res => {\n                    if(res.status === 200) {\n                        setRevPortal(res.data.data)\n                    }\n                })\n            }\n        }\n\n    }, [open])\n\n    useEffect(() => {\n        if(initialValue > 0) setReviewScore(initialValue)\n    }, [initialValue])\n\n\n    const handleAddComment = () => {\n        if(params) {\n            setIsSaving(true);\n            Object.assign(params, {score: reviewScore}, {comment: reviewComment})\n            if(revPortal) {\n                Object.assign(params, {sourceid: revPortal.id})\n            }\n            axios({\n                url: GENERAL_SETTINGS.OREST_URL + '/surevportrans/ins/review',\n                method: REQUEST_METHOD_CONST.POST,\n                headers: {\n                    Authorization: `Bearer ${token}`\n                },\n                params: params\n            }).then(res => {\n                setIsSaving(false)\n                if(res.status === 200) {\n                    typeof onClose === 'function' && onClose()\n                    typeof handleAfterInsert === 'function' && handleAfterInsert()\n                    enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'})\n                } else {\n                    const retErr = isErrorMsg(res)\n                    enqueueSnackbar(t(retErr.errorMsg), {variant: 'success'})\n                }\n            })\n        }\n    }\n\n    return(\n        <React.Fragment>\n            <Dialog\n                open={open}\n                fullWidth\n                maxWidth={'sm'}\n            >\n                <DialogContent className={classes.dialogContent}>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <Typography className={classes.title} color={'primary'}>{t('str_addReview')}</Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <div style={{textAlign: 'center'}}>\n                                <Rating\n                                    value={reviewScore}\n                                    onChange={(e,value) => setReviewScore(value)}\n                                    name=\"review\"\n                                    precision={0.5}\n                                    size={'large'}\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                onChange={e => setReviewComment(e.target.value)}\n                                fullWidth\n                                multiline\n                                rows={4}\n                                rowsMax={4}\n                                variant={'outlined'}\n                                label={t('str_comment')}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <div style={{paddingTop: '8px', textAlign: 'right'}}>\n                                <Button\n                                    disabled={isSaving}\n                                    color={'primary'}\n                                    variant={'outlined'}\n                                    startIcon={<CloseIcon />}\n                                    onClick={() => {\n                                        if(reviewComment !== reviewDataBase.comment || reviewScore !== reviewDataBase.score) {\n                                            setOpenTrackedDialog(true);\n                                        } else {\n                                            typeof onClose === 'function' && onClose()\n                                        }\n                                    }}\n                                >\n                                    {t('str_cancel')}\n                                </Button>\n                                {\n                                    reviewScore <= 0 ? (\n                                        <CustomToolTip\n                                            title={\n                                                <div>\n                                                    <Typography style={{fontWeight: '600', fontSize: 'inherit'}}>\n                                                        {t('str_invalidFields')}\n                                                    </Typography>\n                                                    {\n                                                        reviewScore <= 0 ? (\n                                                            <Typography style={{fontSize: 'inherit'}}>{t('str_score')}</Typography>\n                                                        ) : null\n                                                    }\n                                                </div>\n                                            }\n                                        >\n                                                <span>\n                                                     <Button\n                                                         disabled\n                                                         style={{marginLeft: '8px'}}\n                                                         variant={'contained'}\n                                                         color={'primary'}\n                                                         startIcon={ <CheckIcon />}\n                                                     >\n                                                           {t('str_save')}\n                                                     </Button>\n                                                </span>\n                                        </CustomToolTip>\n                                    ) : (\n                                        <Button\n                                            disabled={isSaving || reviewScore <= 0}\n                                            style={{marginLeft: '8px'}}\n                                            variant={'contained'}\n                                            color={'primary'}\n                                            startIcon={isSaving ? <LoadingSpinner size={24}/> : <CheckIcon />}\n                                            onClick={handleAddComment}\n                                        >\n                                            {t('str_save')}\n                                        </Button>\n                                    )\n                                }\n\n                            </div>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n            </Dialog>\n            <TrackedChangesDialog\n                open={openTrackedDialog}\n                onPressNo={(e) => setOpenTrackedDialog(e)}\n                onPressYes={(e) => {\n                    setOpenTrackedDialog(e);\n                    setReviewScore(0)\n                    setReviewComment('')\n                    typeof onClose === 'function' && onClose()\n                }}\n            />\n        </React.Fragment>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}