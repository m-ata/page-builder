{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/public/components/info/event-reservation/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport clsx from 'clsx';\nimport axios from 'axios';\nimport { connect, useSelector } from 'react-redux';\nimport { Insert, List, UseOrest, Patch, ViewList } from '@webcms/orest';\nimport { setToState, updateState } from 'state/actions';\nimport { Box, Container, Paper, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport WebCmsGlobal from 'components/webcms-global';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Button from '@material-ui/core/Button';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport PersonIcon from '@material-ui/icons/Person';\nimport TodayIcon from '@material-ui/icons/Today';\nimport RestaurantMenuIcon from '@material-ui/icons/RestaurantMenu';\nimport DoneIcon from '@material-ui/icons/Done';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport SpaIcon from '@material-ui/icons/Spa';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SpinEdit from '@webcms-ui/core/spin-edit';\nimport { TRANSTYPES, OREST_ENDPOINT, REQUEST_METHOD_CONST, checkResponse, isObjectEmpty, isZero, notZero, responseData } from 'model/orest/constants';\nimport EventMenuList from './event-menu-list';\nimport Confirmation from './confirmation';\nimport * as global from '@webcms-globals';\nimport { FALSE } from 'model/globals';\nimport LoadingSpinner from 'components/LoadingSpinner';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Slider from 'react-slick';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport CardImage from '@webcms-ui/core/card-image';\nimport { useRouter } from 'next/router';\nimport { useSnackbar } from 'notistack';\nimport { sendGuestChangeNotifyMail } from 'components/guest/account/Base/helper';\nimport ReservationInfo from \"./reservation-info\";\nimport RestaurantReservationSummary from \"./restaurant-reservation-summary\";\nimport ConfirmInfo from \"./confirm-info\";\nimport EventPayment from \"./event-payment\";\nimport moment from 'moment';\nimport HorizontalList from \"../../../../../HorizontalList\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    width: '100%'\n  },\n  eventLocCard: {\n    maxWidth: '95%',\n    marginBottom: 5,\n    border: '3px solid transparent'\n  },\n  eventLocActive: {\n    position: 'relative',\n    border: '3px solid #8BC34A',\n    '&:after': {\n      fontFamily: \"'Material Icons'\",\n      content: \"'done'\",\n      fontSize: 25,\n      position: 'absolute',\n      right: 5,\n      bottom: 0,\n      color: '#8BC34A'\n    }\n  },\n  eventLocTitle: {\n    fontSize: 13,\n    [theme.breakpoints.only('md')]: {\n      fontSize: 12\n    },\n    [theme.breakpoints.only('sm')]: {\n      fontSize: 11\n    },\n    [theme.breakpoints.only('xs')]: {\n      fontSize: 10\n    }\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    marginLeft: 0,\n    maxWidth: '300px',\n    minWidth: '300px',\n    width: '100%'\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  },\n  stepRoot: {\n    \"&.MuiStep-horizontal\": {\n      paddingLeft: \"0\",\n      paddingRight: \"0\"\n    }\n  },\n  stepLabel: {\n    \"& .MuiStepLabel-iconContainer\": {\n      paddingRight: \"0\"\n    }\n  },\n  muiListRoot: {\n    display: 'inline-flex'\n  }\n}));\nconst useColorlibStepIconStyles = makeStyles({\n  root: {\n    backgroundColor: '#ccc',\n    zIndex: 1,\n    padding: 10,\n    color: '#fff',\n    display: 'flex',\n    borderRadius: '50%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  active: props => ({\n    border: `1px solid ${props.isPortal ? '#44B3E4' : '#f1b80f'}`,\n    backgroundColor: '#fff'\n  }),\n  completed: {\n    backgroundColor: '#fff'\n  }\n});\nconst connectorStyle = makeStyles({\n  active: {\n    height: \"2px\",\n    backgroundColor: '#44B3E4'\n  },\n  completed: {\n    height: \"2px\",\n    backgroundColor: '#44B3E4'\n  }\n});\nconst useColorIconStyles = makeStyles({\n  root: {\n    color: '#fff'\n  },\n  active: {\n    backgroundColor: '#fff',\n    color: '#2196F3'\n  },\n  completed: props => ({\n    backgroundColor: '#fff',\n    color: props.isPortal ? '#064989' : '#2196F3'\n  })\n});\n\nconst RestaurantReservation = props => {\n  var _state$clientReservat;\n\n  const {\n    state,\n    isOpen,\n    onClose,\n    updateState,\n    setToState,\n    eventLocData,\n    isPortal,\n    sliderTitle,\n    sliderDesc,\n    sliderImg,\n    isFromDetailPage\n  } = props;\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation();\n  const {\n    GENERAL_SETTINGS,\n    WEBCMS_DATA,\n    locale\n  } = useContext(WebCmsGlobal);\n  const router = useRouter();\n  const objLogInfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo);\n  const MAX_CHILD_AGE = 6;\n  const {\n    0: isReservationConfirm,\n    1: setIsReservationConfirm\n  } = useState(global.base.isFalse);\n  const {\n    0: reservationNo,\n    1: setReservationNo\n  } = useState(global.base.intZero);\n  const isLogin = useSelector(state => state.orest.currentUser && state.orest.currentUser.auth) ? global.base.isTrue : global.base.isFalse;\n  const token = useSelector(state => state.orest.currentUser && state.orest.currentUser.auth.access_token || global.base.isFalse);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    0: saveResEvent,\n    1: setSaveResEvent\n  } = useState(global.base.isFalse);\n  const {\n    0: getEventLocData,\n    1: setEventLocData\n  } = useState(eventLocData);\n  const {\n    0: eventLocList,\n    1: setEventLocList\n  } = useState(global.base.isFalse);\n  const {\n    0: eventLocID,\n    1: setEventLocID\n  } = useState(getEventLocData.locid);\n  const {\n    0: eventlocDateListLoading,\n    1: setEventlocDateListLoading\n  } = useState(global.base.isFalse);\n  const {\n    0: eventlocDateSlotListLoading,\n    1: setEventlocDateSlotListLoading\n  } = useState(global.base.isFalse);\n  const {\n    0: eventLocCatLoading,\n    1: setEventLocCatLoading\n  } = useState(global.base.isFalse);\n  const {\n    0: isConfirmLoad,\n    1: setIsConfirmLoad\n  } = useState(global.base.isFalse);\n  const {\n    0: reseventGid,\n    1: setReseventGid\n  } = useState(global.base.isFalse);\n  const {\n    0: locPriceData,\n    1: setLocPriceData\n  } = useState(global.base.isFalse);\n  const {\n    0: isTimeAvailability,\n    1: setIsTimeAvailability\n  } = useState(global.base.isFalse);\n  const {\n    0: resPaxFix,\n    1: setResPaxFix\n  } = useState(global.base.isFalse);\n  const {\n    0: eventRulesIsLoading,\n    1: setEventRulesIsLoading\n  } = useState(global.base.isFalse);\n  const isKiosk = router.query.kiosk === 'true' ? global.base.isTrue : global.base.isFalse;\n  const reservBase = state.clientReservation || false;\n  const clientBase = useSelector(state => state.orest.state && state.orest.state.client);\n  const hotelRefNo = (state === null || state === void 0 ? void 0 : state.changeHotelRefno) || (state === null || state === void 0 ? void 0 : (_state$clientReservat = state.clientReservation) === null || _state$clientReservat === void 0 ? void 0 : _state$clientReservat.hotelrefno) || GENERAL_SETTINGS.HOTELREFNO;\n  const {\n    0: confirmData,\n    1: setConfirmData\n  } = useState(null);\n  const defaultValues = {\n    totalPax: 1,\n    totalChd: 0\n  };\n  let STEPPER = //TODO edit for payment step\n  isPortal ? isFromDetailPage ? getEventLocData.isspares ? {\n    RESERVATION_INFO: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 2\n  } : getEventLocData.locdepartid && getEventLocData.lochasmenu ? {\n    RESERVATION_INFO: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 2\n  } : {\n    RESERVATION_INFO: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 1\n  } : getEventLocData.isspares ? {\n    SELECT_NUMBER_OF_PEOPLE: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 2\n  } : getEventLocData.locdepartid && getEventLocData.lochasmenu ? {\n    SELECT_NUMBER_OF_PEOPLE: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 2\n  } : {\n    SELECT_NUMBER_OF_PEOPLE: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 2\n  } : getEventLocData.isspares ? {\n    SELECT_NUMBER_OF_PEOPLE: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 3\n  } : getEventLocData.locdepartid && getEventLocData.lochasmenu ? {\n    SELECT_NUMBER_OF_PEOPLE: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 3\n  } : {\n    SELECT_NUMBER_OF_PEOPLE: 0,\n    SELECT_MENU_LIST: 1,\n    FINISH: 2\n  };\n\n  const getSteps = () => {\n    if (isPortal) {\n      if (isFromDetailPage) {\n        return ['ReservationInfo', 'SelectMenu', 'Finish'];\n      } else {\n        return ['NumberOfPeople', 'SelectMenu', 'Finish'];\n      }\n    } else {\n      return ['NumberOfPeople', 'SelectMenu', 'Finish'];\n    }\n  };\n\n  const ColorlibConnector = props => {\n    const classes = connectorStyle();\n    const {\n      active,\n      completed\n    } = props;\n    return __jsx(StepConnector, {\n      className: clsx(classes.root, {\n        [classes.active]: active,\n        [classes.completed]: completed\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    });\n  };\n\n  const ColorlibStepIcon = props => {\n    const classes = useColorlibStepIconStyles({\n      isPortal: isPortal\n    });\n    const iconCls = useColorIconStyles({\n      isPortal: isPortal\n    });\n    const {\n      active,\n      completed\n    } = props;\n    let icons;\n\n    if (isPortal) {\n      if (isFromDetailPage) {\n        icons = {\n          1: __jsx(ListAltIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 25\n            }\n          }),\n          2: __jsx(RestaurantMenuIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 25\n            }\n          }),\n\n          /*\n           3: (\n              <PaymentIcon\n                  className={clsx(iconCls.root, {\n                      [iconCls.active]: active,\n                      [iconCls.completed]: completed,\n                  })}\n              />\n          ),\n           */\n          3: __jsx(DoneIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 25\n            }\n          })\n        };\n      } else {\n        if (getEventLocData.locdepartid && getEventLocData.lochasmenu) {\n          icons = {\n            1: __jsx(PersonIcon, {\n              className: clsx(iconCls.root, {\n                [iconCls.active]: active,\n                [iconCls.completed]: completed\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 29\n              }\n            }),\n            2: __jsx(RestaurantMenuIcon, {\n              className: clsx(iconCls.root, {\n                [iconCls.active]: active,\n                [iconCls.completed]: completed\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 29\n              }\n            }),\n\n            /*  5: (\n                  <PaymentIcon\n                      className={clsx(iconCls.root, {\n                          [iconCls.active]: active,\n                          [iconCls.completed]: completed,\n                      })}\n                  />\n              ),*/\n            3: __jsx(DoneIcon, {\n              className: clsx(iconCls.root, {\n                [iconCls.active]: active,\n                [iconCls.completed]: completed\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 29\n              }\n            })\n          };\n        } else {\n          icons = {\n            1: __jsx(PersonIcon, {\n              className: clsx(iconCls.root, {\n                [iconCls.active]: active,\n                [iconCls.completed]: completed\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 29\n              }\n            }),\n            2: __jsx(TodayIcon, {\n              className: clsx(iconCls.root, {\n                [iconCls.active]: active,\n                [iconCls.completed]: completed\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 29\n              }\n            }),\n            3: __jsx(ListAltIcon, {\n              className: clsx(iconCls.root, {\n                [iconCls.active]: active,\n                [iconCls.completed]: completed\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 29\n              }\n            }),\n            4: __jsx(DoneIcon, {\n              className: clsx(iconCls.root, {\n                [iconCls.active]: active,\n                [iconCls.completed]: completed\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 29\n              }\n            })\n          };\n        }\n      }\n    } else {\n      if (getEventLocData.locdepartid && getEventLocData.lochasmenu || getEventLocData.isspares) {\n        icons = {\n          1: __jsx(PersonIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 25\n            }\n          }),\n          2: getEventLocData.isspares ? __jsx(SpaIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 29\n            }\n          }) : __jsx(RestaurantMenuIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 29\n            }\n          }),\n          3: __jsx(DoneIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 25\n            }\n          })\n        };\n      } else {\n        icons = {\n          1: __jsx(PersonIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 25\n            }\n          }),\n          2: __jsx(RestaurantMenuIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 25\n            }\n          }),\n          3: __jsx(DoneIcon, {\n            className: clsx(iconCls.root, {\n              [iconCls.active]: active,\n              [iconCls.completed]: completed\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 25\n            }\n          })\n        };\n      }\n    }\n\n    return __jsx(\"div\", {\n      className: clsx(classes.root, {\n        [classes.active]: active,\n        [classes.completed]: completed\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 13\n      }\n    }, icons[String(props.icon)]);\n  };\n\n  const {\n    0: activeStep,\n    1: setActiveStep\n  } = useState(global.base.intZero);\n  const steps = getSteps();\n\n  const handleClose = () => {\n    setActiveStep(global.base.intZero);\n    setIsReservationConfirm(global.base.isFalse);\n    onClose(global.base.isFalse);\n    eventReservationReset();\n    setConfirmData(null);\n  };\n\n  const eventReservationReset = () => {\n    updateState('guest', 'totalPax', (reservBase === null || reservBase === void 0 ? void 0 : reservBase.totalpax) || defaultValues.totalPax);\n    updateState('guest', 'totalChd', (reservBase === null || reservBase === void 0 ? void 0 : reservBase.totalchd) || defaultValues.totalChd);\n    updateState('guest', 'strEventRules', false);\n    updateState('guest', 'eventLocTransDateList', []);\n    updateState('guest', 'eventLocTransDate', 0);\n    updateState('guest', 'eventLocTransTime', 0);\n    updateState('guest', 'eventLocTransDateSlotList', false);\n    updateState('guest', 'menuGroupAndProductList', false);\n    updateState('guest', 'selectGuestProductList', []);\n    updateState('guest', 'isRestaurantResTermsConfirm', false);\n  };\n\n  const getTimeAvailability = () => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'resevent/locres/client/canci',\n      token,\n      params: {\n        clientid: objLogInfo.refid,\n        locid: getEventLocData.locid,\n        transdate: state.eventLocTransDate,\n        transtime: state.eventLocTransTime,\n        totalpax: state.totalPax,\n        hotelrefno: state.changeHotelRefno || GENERAL_SETTINGS.useHotelRefno\n      }\n    }).then(response => {\n      if (response.status === 200 && response.data.count > 0) {\n        return response.data.data[0];\n      } else {\n        return false;\n      }\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const handleNext = async () => {\n    if (activeStep === STEPPER.SELECT_NUMBER_OF_PEOPLE && (isZero(state.eventLocTransDate) || isZero(state.eventLocTransTime))) {\n      enqueueSnackbar(t('str_pleaseSelectDateAndTime'), {\n        variant: 'warning'\n      });\n      return;\n    }\n\n    if (activeStep === STEPPER.SELECT_NUMBER_OF_PEOPLE && state.eventLocTransDate && state.eventLocTransTime && isTimeAvailability === false) {\n      const checkTimeAvailability = await getTimeAvailability();\n\n      if (!checkTimeAvailability.res) {\n        enqueueSnackbar(t(checkTimeAvailability.msg), {\n          variant: 'warning',\n          autoHideDuration: 5000\n        });\n        return;\n      } else {\n        setIsTimeAvailability(true);\n      }\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  let clientParams = {};\n  clientParams.hotelrefno = objLogInfo && objLogInfo.hotelrefno || GENERAL_SETTINGS.HOTELREFNO;\n\n  if (objLogInfo && objLogInfo.hotelgidstr) {\n    clientParams.hoteltoken = objLogInfo && objLogInfo.hotelgidstr;\n  }\n\n  useEffect(() => {\n    if (isLogin && getEventLocData && getEventLocData.locismulti && getEventLocData.catid) {\n      setEventLocCatLoading(true);\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'hotel/app/info/list',\n        token: token,\n        params: {\n          catid: getEventLocData.catid,\n          sort: 'id',\n          langcode: locale\n        }\n      }).then(response => {\n        if (response.data.success === global.base.isTrue && response.data.data.length > 0) {\n          setEventLocList(response.data.data);\n          setEventLocCatLoading(false);\n        } else {\n          setEventLocList(null);\n          setEventLocCatLoading(false);\n        }\n      });\n    } else {\n      setEventLocList(null);\n    }\n\n    if (isLogin && state.eventLocTransDateList && !Object.keys(state.eventLocTransDateList).length > global.base.intZero) {\n      if (!isPortal) {\n        let totalDay = false;\n\n        if (reservBase && reservBase.checkin && reservBase.checkout) {\n          let ciDate = moment(new Date()).format('DD.MM.YYYY');\n          ciDate = moment(ciDate, 'DD.MM.YYYY');\n          let coDate = moment(reservBase.checkout, 'YYYY-MM-DD').format('DD.MM.YYYY');\n          coDate = moment(coDate, 'DD.MM.YYYY');\n          totalDay = coDate.diff(ciDate, 'days');\n          totalDay = Number(totalDay) + 1;\n        }\n\n        const reqParams = {\n          locid: getEventLocData.locid,\n          hotelrefno: hotelRefNo,\n          allhotels: true\n        };\n        setEventlocDateListLoading(true);\n        List({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.EVENTLOC + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.DATE,\n          token: token,\n          params: Object.assign(reqParams, totalDay ? {\n            totalday: totalDay\n          } : {})\n        }).then(resEventLocDate => {\n          if (checkResponse(resEventLocDate)) {\n            let transDateList = [];\n            responseData(resEventLocDate).map(item => {\n              transDateList.push({\n                item: item.transdate\n              });\n            });\n            updateState('guest', 'eventLocTransDateList', transDateList);\n            setEventlocDateListLoading(false);\n          } else {\n            updateState('guest', 'eventLocTransDateList', global.base.isNull);\n            setEventlocDateListLoading(false);\n          }\n        });\n      }\n\n      if (isLogin && global.helper.isFalse(state.strEventRules)) {\n        setEventRulesIsLoading(true);\n        UseOrest({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: 'tools/file/find',\n          token: token,\n          params: {\n            code: global.guestWeb.strEventRules,\n            langcode: locale,\n            contentype: '0000505',\n            masterid: getEventLocData.locmid,\n            hotelrefno: clientParams.hotelrefno\n          }\n        }).then(toolsFileFindResponse => {\n          var _toolsFileFindRespons, _toolsFileFindRespons2;\n\n          if (toolsFileFindResponse !== null && toolsFileFindResponse !== void 0 && (_toolsFileFindRespons = toolsFileFindResponse.data) !== null && _toolsFileFindRespons !== void 0 && (_toolsFileFindRespons2 = _toolsFileFindRespons.data) !== null && _toolsFileFindRespons2 !== void 0 && _toolsFileFindRespons2.filedata) {\n            const resRafileData = toolsFileFindResponse.data.data;\n            const strFileData = new Buffer.from(resRafileData.filedata, 'base64').toString('utf-8');\n            updateState('guest', 'strEventRules', strFileData);\n            setEventRulesIsLoading(false);\n          } else {\n            UseOrest({\n              apiUrl: GENERAL_SETTINGS.OREST_URL,\n              endpoint: 'tools/file/find',\n              token: token,\n              params: {\n                code: global.guestWeb.strEventRules,\n                langcode: locale,\n                contentype: '0000505',\n                masterid: getEventLocData.locmid\n              }\n            }).then(toolsFileFindResponse => {\n              var _toolsFileFindRespons3, _toolsFileFindRespons4;\n\n              if (toolsFileFindResponse !== null && toolsFileFindResponse !== void 0 && (_toolsFileFindRespons3 = toolsFileFindResponse.data) !== null && _toolsFileFindRespons3 !== void 0 && (_toolsFileFindRespons4 = _toolsFileFindRespons3.data) !== null && _toolsFileFindRespons4 !== void 0 && _toolsFileFindRespons4.filedata) {\n                const resRafileData = toolsFileFindResponse.data.data;\n                const strFileData = new Buffer.from(resRafileData.filedata, 'base64').toString('utf-8');\n                updateState('guest', 'strEventRules', strFileData);\n                setEventRulesIsLoading(false);\n              } else {\n                updateState('guest', 'strEventRules', global.base.isNull);\n                setEventRulesIsLoading(false);\n              }\n            });\n          }\n        });\n      }\n\n      if (isOpen && isLogin) {\n        if (getEventLocData.lochasres) {\n          UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'sett/event/locres/respaxfix',\n            token\n          }).then(settEventLocResResPaxFixResponse => {\n            var _settEventLocResResPa, _settEventLocResResPa2;\n\n            if (settEventLocResResPaxFixResponse !== null && settEventLocResResPaxFixResponse !== void 0 && (_settEventLocResResPa = settEventLocResResPaxFixResponse.data) !== null && _settEventLocResResPa !== void 0 && (_settEventLocResResPa2 = _settEventLocResResPa.data) !== null && _settEventLocResResPa2 !== void 0 && _settEventLocResResPa2.res) {\n              setResPaxFix(global.base.isTrue);\n            } else {\n              setResPaxFix(global.base.isFalse);\n            }\n          }).catch(() => {\n            setResPaxFix(global.base.isFalse);\n          });\n        }\n      }\n    }\n  }, [isOpen]);\n  useEffect(() => {\n    if (getEventLocData.locid === eventLocID && isPortal) {\n      let totalDay = false;\n\n      if (reservBase && reservBase.checkin && reservBase.checkout) {\n        let ciDate = moment(new Date()).format('DD.MM.YYYY');\n        ciDate = moment(ciDate, 'DD.MM.YYYY');\n        let coDate = moment(reservBase.checkout, 'YYYY-MM-DD').format('DD.MM.YYYY');\n        coDate = moment(coDate, 'DD.MM.YYYY');\n        totalDay = coDate.diff(ciDate, 'days');\n        totalDay = Number(totalDay) + 1;\n      }\n\n      const reqParams = {\n        locid: getEventLocData.locid,\n        hotelrefno: hotelRefNo,\n        allhotels: true\n      };\n      setEventlocDateListLoading(true);\n      List({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.EVENTLOC + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.DATE,\n        token: token,\n        params: Object.assign(reqParams, totalDay ? {\n          totalday: totalDay\n        } : {})\n      }).then(resEventLocDate => {\n        if (checkResponse(resEventLocDate)) {\n          let transDateList = [];\n          responseData(resEventLocDate).map(item => {\n            transDateList.push({\n              item: item.transdate\n            });\n          });\n          updateState('guest', 'eventLocTransDateList', transDateList);\n          setEventlocDateListLoading(false);\n        } else {\n          updateState('guest', 'eventLocTransDateList', global.base.isNull);\n          setEventlocDateListLoading(false);\n        }\n      });\n    }\n  }, [eventLocID]);\n  useEffect(() => {\n    if (isLogin && notZero(state.eventLocTransDate) && notZero(getEventLocData.locid) && getEventLocData.locid === eventLocID && (!isPortal || isPortal && !isFromDetailPage)) {\n      setEventlocDateSlotListLoading(true);\n      List({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.EVENTLOC + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.SLOT,\n        token: token,\n        params: {\n          date: state.eventLocTransDate,\n          locid: getEventLocData.locid,\n          hotelrefno: hotelRefNo\n        }\n      }).then(resEventLocTimeSlot => {\n        if (checkResponse(resEventLocTimeSlot)) {\n          let transDateSlotList = [];\n          responseData(resEventLocTimeSlot).map(item => {\n            transDateSlotList.push({\n              item: item.transtime\n            });\n          });\n          updateState('guest', 'eventLocTransTime', global.base.intZero);\n          updateState('guest', 'eventLocTransDateSlotList', transDateSlotList);\n\n          if (transDateSlotList && transDateSlotList.length === 1) {\n            updateState('guest', 'eventLocTransTime', transDateSlotList[0].item);\n          }\n\n          setEventlocDateSlotListLoading(false);\n        } else {\n          updateState('guest', 'eventLocTransDateSlotList', global.base.isNull);\n          setEventlocDateSlotListLoading(false);\n        }\n      });\n    }\n  }, [state.eventLocTransDate]);\n\n  const getDefAgencyId = () => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'agency/defid',\n      token,\n      params: {\n        hotelgid: objLogInfo.hotelgid\n      }\n    }).then(response => {\n      if (response.status === 200 && response.data.count > 0) {\n        return response.data.data.res;\n      } else {\n        return false;\n      }\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const getEventData = resNo => {\n    if (resNo) {\n      return ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.RESEVENT,\n        token,\n        params: {\n          query: `clientid:${clientBase === null || clientBase === void 0 ? void 0 : clientBase.id},reservno:${resNo}`,\n          hotelrefno: hotelRefNo\n        }\n      }).then(res => {\n        if (res.status === 200) {\n          var _res$data, _res$data$data;\n\n          setConfirmData(((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.length) > 0 ? res.data.data[0] : null);\n        }\n      });\n    }\n  };\n\n  const handleConfirm = async () => {\n    if (global.helper.isFalse(state.eventLocTransDate) || global.helper.isFalse(state.eventLocTransTime)) {\n      enqueueSnackbar(t('str_selectDateAndTime'), {\n        variant: 'warning'\n      });\n    } else {\n      if (eventLocID !== FALSE) {\n        setSaveResEvent(true);\n        let defResEvent = {};\n        const defAgencyId = await getDefAgencyId();\n        defResEvent.startdate = state.eventLocTransDate;\n        defResEvent.enddate = state.eventLocTransDate;\n        defResEvent.starttime = state.eventLocTransTime;\n        defResEvent.endtime = state.eventLocTransTime;\n        defResEvent.locid = getEventLocData.locid;\n        defResEvent.description = getEventLocData.locdesc;\n        defResEvent.eventrestype = TRANSTYPES.GUEST_ALACARTE;\n        defResEvent.eventtypeid = getEventLocData.gapptypeid;\n        defResEvent.totalpax = state.totalPax;\n        defResEvent.totalchd = state.totalChd;\n        defResEvent.totalbaby = global.base.intZero;\n        defResEvent.clientid = objLogInfo.refid;\n        defResEvent.agencyid = defAgencyId;\n\n        if (locPriceData) {\n          defResEvent.locprice = locPriceData;\n        }\n\n        defResEvent.hotelrefno = hotelRefNo;\n        await Insert({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.RESEVENT,\n          token,\n          data: defResEvent\n        }).then(async insResEvent => {\n          if (insResEvent.status === 200) {\n            let eventReservNo = insResEvent.data.data.reservno;\n            let eventReservGid = insResEvent.data.data.gid;\n            let eventReservInfo = insResEvent.data.data;\n            let guestMenuList = [];\n            const list = [...state.selectGuestProductList];\n\n            if (list.length > global.base.intZero) {\n              list.map(obj => {\n                const data = Object.assign({}, obj);\n                delete data.showprice;\n                delete data.pricecurr;\n                if (getEventLocData !== null && getEventLocData !== void 0 && getEventLocData.isspares) delete data.groupname;\n                guestMenuList.push(_objectSpread(_objectSpread({}, data), {}, {\n                  reservno: eventReservNo,\n                  hotelrefno: hotelRefNo\n                }));\n              });\n            }\n\n            setReseventGid(insResEvent.data.data.gid);\n\n            if (guestMenuList) {\n              await UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.EVENTMENU + '/' + OREST_ENDPOINT.LISTINS,\n                method: REQUEST_METHOD_CONST.POST,\n                token,\n                params: {\n                  hotelrefno: hotelRefNo\n                },\n                data: guestMenuList\n              });\n              await UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'resevent/get/totalprice',\n                method: REQUEST_METHOD_CONST.GET,\n                token,\n                params: {\n                  reservno: eventReservNo,\n                  inceventmenu: true\n                }\n              }).then(async insResEvent => {\n                if (insResEvent.status === 200) {\n                  let subTotal = insResEvent.data.data.res;\n                  const discAmount = subTotal * (eventReservInfo.discrate / 100) + eventReservInfo.freeamount;\n                  const totalPrice = subTotal - discAmount;\n                  await Patch({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.RESEVENT,\n                    token,\n                    gid: eventReservGid,\n                    data: {\n                      subtotal: subTotal,\n                      totalprice: totalPrice\n                    },\n                    params: {\n                      hotelrefno: hotelRefNo\n                    }\n                  });\n                }\n              });\n            }\n\n            const notifyValues = {\n              roomno: (reservBase === null || reservBase === void 0 ? void 0 : reservBase.roomno) || \"-\",\n              clientname: (clientBase === null || clientBase === void 0 ? void 0 : clientBase.clientname) || \"-\",\n              details: JSON.stringify({\n                loc: getEventLocData.locdesc,\n                date: state.eventLocTransDate,\n                time: state.eventLocTransTime,\n                totalpax: state.totalPax,\n                totalchd: state.totalChd\n              })\n            };\n            await sendGuestChangeNotifyMail(reservBase !== null && reservBase !== void 0 && reservBase.gid ? false : true, 'resevent', 'upd', clientBase.id, reservBase !== null && reservBase !== void 0 && reservBase.gid ? reservBase.gid : clientBase.gid, notifyValues, (reservBase === null || reservBase === void 0 ? void 0 : reservBase.hotelrefno) || GENERAL_SETTINGS.HOTELREFNO);\n            await getEventData(eventReservNo);\n            setIsReservationConfirm(global.base.isTrue);\n            setReservationNo(eventReservNo);\n            setSaveResEvent(false);\n            setActiveStep(STEPPER.FINISH);\n          } else {\n            setSaveResEvent(false);\n          }\n        });\n      } else {\n        enqueueSnackbar(t('str_missingFields') + ' eventtypeid', {\n          variant: 'warning'\n        });\n      }\n    }\n  };\n\n  let eventReservation = {\n    localtitle: getEventLocData.localtitle,\n    description: getEventLocData.locdesc,\n    totalpax: state.totalPax,\n    totalchd: state.totalChd,\n    totalbaby: global.base.intZero,\n    startdate: state.eventLocTransDate,\n    starttime: state.eventLocTransTime\n  };\n  const {\n    0: slider,\n    1: setSlider\n  } = useState(false);\n  const {\n    0: swiped,\n    1: setSwiped\n  } = useState(false);\n  const handleSwiped = useCallback(() => {\n    setSwiped(true);\n  }, [setSwiped]);\n  const handleSwipedStatus = useCallback(e => {\n    if (swiped) {\n      e.stopPropagation();\n      e.preventDefault();\n      setSwiped(false);\n    }\n  }, [swiped]);\n  useEffect(() => {\n    if (slider && slider.slickGoTo && eventLocList && eventLocList.length > 0) {\n      let slideIndex = eventLocList.filter(res => res.lochasres === true).sort((a, b) => a.locid - b.locid).findIndex(item => Number(item.locid) === Number(getEventLocData.locid));\n      slider.slickGoTo(slideIndex);\n    }\n  }, [slider]);\n  const settings = {\n    dots: true,\n    speed: 500,\n    lazyLoad: true,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    centerMode: false,\n    swipeToSlide: true,\n    infinite: false,\n    responsive: [{\n      breakpoint: 768,\n      settings: {\n        slidesToShow: 1\n      }\n    }]\n  };\n\n  const handleSelectEventLoc = locid => {\n    setEventLocID(locid);\n    let newEventLocData = eventLocList.find(item => Number(item.locid) === Number(locid));\n    setEventLocData(newEventLocData);\n    updateState('guest', 'eventLocTransDateList', global.base.isFalse);\n    updateState('guest', 'eventLocTransDateSlotList', global.base.isFalse);\n    updateState('guest', 'eventLocTransDate', 0);\n    updateState('guest', 'eventLocTransTime', 0);\n    updateState('guest', 'menuGroupAndProductList', false);\n    updateState('guest', 'selectGuestProductList', []);\n  };\n\n  const {\n    0: printPdf,\n    1: setPrintPdf\n  } = useState(false);\n\n  const handlePrintReceipt = () => {\n    axios({\n      url: `${GENERAL_SETTINGS.OREST_URL}/resevent/print/form`,\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      method: REQUEST_METHOD_CONST.POST,\n      responseType: 'arraybuffer',\n      params: {\n        langcode: 'en',\n        hotelrefno: hotelRefNo,\n        gid: reseventGid\n      },\n      data: [{\n        'lineentity': 'eventmenu',\n        'linefield': 'reservno',\n        'masterfield': 'reservno'\n      }]\n    }).then(r => {\n      if (r.status === 200) {\n        let blob = new Blob([r.data], {\n          type: 'application/pdf'\n        });\n        let url = URL.createObjectURL(blob);\n        setPrintPdf(url);\n        const receiptPdfPrint = document.getElementById(\"receiptPdfPrint\").contentWindow;\n        receiptPdfPrint.print();\n      } else {\n        enqueueSnackbar(t('str_requestCannotBeProcessed'), {\n          variant: 'warning'\n        });\n      }\n    }).catch(() => {\n      enqueueSnackbar(t('str_requestCannotBeProcessed'), {\n        variant: 'warning'\n      });\n    });\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1055,\n      columnNumber: 9\n    }\n  }, (getEventLocData.lochasres || getEventLocData.isspares) && __jsx(Container, {\n    maxWidth: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 17\n    }\n  }, __jsx(Dialog, {\n    fullScreen: true,\n    open: isOpen,\n    onClose: () => handleClose(),\n    \"aria-labelledby\": \"form-dialog-title\",\n    fullWidth: true,\n    maxWidth: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1058,\n      columnNumber: 21\n    }\n  }, __jsx(AppBar, {\n    color: \"default\",\n    className: classes.appBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 25\n    }\n  }, __jsx(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1068,\n      columnNumber: 33\n    }\n  }, t(getEventLocData.localtitle)), __jsx(IconButton, {\n    edge: \"start\",\n    color: \"inherit\",\n    onClick: handleClose,\n    \"aria-label\": \"close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1071,\n      columnNumber: 33\n    }\n  }, __jsx(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1072,\n      columnNumber: 37\n    }\n  })))), __jsx(DialogContent, {\n    dividers: true,\n    style: {\n      backgroundColor: '#f1f1f1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1076,\n      columnNumber: 25\n    }\n  }, __jsx(Container, {\n    maxWidth: 'lg',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1077,\n      columnNumber: 29\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1078,\n      columnNumber: 33\n    }\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    style: {\n      backgroundColor: 'transparent'\n    },\n    connector: __jsx(ColorlibConnector, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 124\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1079,\n      columnNumber: 37\n    }\n  }, steps.map(label => __jsx(Step, {\n    className: isPortal ? classes.stepRoot : \"\",\n    key: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1081,\n      columnNumber: 45\n    }\n  }, __jsx(StepLabel, {\n    className: classes.stepLabel,\n    StepIconComponent: ColorlibStepIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 49\n    }\n  })))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1087,\n      columnNumber: 37\n    }\n  }, activeStep === STEPPER.RESERVATION_INFO && __jsx(ReservationInfo, {\n    date: state.eventLocTransDate,\n    time: state.eventLocTransTime,\n    adult: state.totalPax,\n    child: state.totalChd,\n    sliderTitle: sliderTitle,\n    sliderDesc: sliderDesc,\n    sliderImg: sliderImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1090,\n      columnNumber: 49\n    }\n  }), activeStep === STEPPER.SELECT_NUMBER_OF_PEOPLE && __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1102,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1104,\n      columnNumber: 53\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1105,\n      columnNumber: 57\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1106,\n      columnNumber: 61\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    style: {\n      fontWeight: 'bolder'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1107,\n      columnNumber: 65\n    }\n  }, t('str_numberOfGuests'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1113,\n      columnNumber: 61\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1114,\n      columnNumber: 65\n    }\n  }, getEventLocData !== null && getEventLocData !== void 0 && getEventLocData.isspares ? __jsx(\"div\", {\n    style: getEventLocData !== null && getEventLocData !== void 0 && getEventLocData.isspares ? {\n      display: 'flex',\n      justifyContent: 'center'\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1116,\n      columnNumber: 73\n    }\n  }, __jsx(SpinEdit, {\n    disabled: resPaxFix,\n    min: 1,\n    defaultValue: state.totalPax,\n    label: t('str_adult'),\n    onChange: e => updateState('guest', 'totalPax', e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1117,\n      columnNumber: 77\n    }\n  })) : __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1128,\n      columnNumber: 73\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: getEventLocData !== null && getEventLocData !== void 0 && getEventLocData.isspares ? 12 : 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1129,\n      columnNumber: 77\n    }\n  }, __jsx(SpinEdit, {\n    disabled: resPaxFix,\n    min: 1,\n    defaultValue: state.totalPax,\n    label: t('str_adult'),\n    onChange: e => updateState('guest', 'totalPax', e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1130,\n      columnNumber: 81\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1140,\n      columnNumber: 77\n    }\n  }, __jsx(SpinEdit, {\n    disabled: resPaxFix,\n    defaultValue: state.totalChd,\n    label: t('str_child'),\n    onChange: e => updateState('guest', 'totalChd', e),\n    helpText: __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 89\n      }\n    }, MAX_CHILD_AGE, \" \", t('str_age'), \" \", __jsx(ArrowDownwardIcon, {\n      style: {\n        fontSize: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1150,\n        columnNumber: 124\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1141,\n      columnNumber: 81\n    }\n  }))))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1162,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 53\n    }\n  }, getEventLocData.locismulti && getEventLocData.catid ? eventLocCatLoading ? __jsx(Box, {\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1166,\n      columnNumber: 65\n    }\n  }, __jsx(LoadingSpinner, {\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1167,\n      columnNumber: 69\n    }\n  })) : __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1169,\n      columnNumber: 65\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1170,\n      columnNumber: 69\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    style: {\n      fontWeight: 'bolder'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1171,\n      columnNumber: 73\n    }\n  }, t('str_places'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1177,\n      columnNumber: 69\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1178,\n      columnNumber: 73\n    }\n  }, __jsx(Box, {\n    p: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1179,\n      columnNumber: 77\n    }\n  }, __jsx(Slider, _extends({\n    ref: slider => slider && setSlider(slider),\n    onSwipe: handleSwiped\n  }, settings, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1180,\n      columnNumber: 81\n    }\n  }), eventLocList && eventLocList.filter(res => res.lochasres === true).sort((a, b) => a.locid - b.locid).map((item, i) => {\n    return __jsx(Box, {\n      key: i,\n      onClickCapture: handleSwipedStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1183,\n        columnNumber: 93\n      }\n    }, __jsx(Card, {\n      className: clsx(classes.eventLocCard, {\n        [classes.eventLocActive]: getEventLocData.locid === item.locid\n      }),\n      onClick: () => handleSelectEventLoc(item.locid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 97\n      }\n    }, __jsx(CardImage, {\n      src: GENERAL_SETTINGS.STATIC_URL + item.imageurl,\n      alt: item.localtitle,\n      cursor: 'pointer',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187,\n        columnNumber: 101\n      }\n    }), __jsx(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192,\n        columnNumber: 101\n      }\n    }, __jsx(Typography, {\n      noWrap: true,\n      className: classes.eventLocTitle,\n      variant: \"h6\",\n      style: {\n        cursor: 'pointer'\n      },\n      title: item.localtitle && item.localtitle.length >= 30 ? item.localtitle : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193,\n        columnNumber: 105\n      }\n    }, item.localtitle))));\n  })))))) : '', eventLocList !== false && __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1215,\n      columnNumber: 61\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1216,\n      columnNumber: 65\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    style: {\n      fontWeight: 'bolder'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1217,\n      columnNumber: 69\n    }\n  }, t('str_selectDateAndTime'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 65\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 69\n    }\n  }, __jsx(Box, {\n    style: {\n      paddingTop: 20,\n      paddingBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1225,\n      columnNumber: 73\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    align: \"center\",\n    style: {\n      fontWeight: 'bolder',\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1226,\n      columnNumber: 77\n    }\n  }, t('str_availableDates')), state.eventLocTransDateList ? __jsx(Container, {\n    maxWidth: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1233,\n      columnNumber: 81\n    }\n  }, __jsx(HorizontalList, {\n    showLeftButton: true,\n    showRightButton: true,\n    list: state.eventLocTransDateList,\n    value: state.eventLocTransDate,\n    fields: [{\n      useMoment: true,\n      name: 'item',\n      convertFormat: OREST_ENDPOINT.DATEFORMAT,\n      renderFormat: 'DD'\n    }, {\n      useMoment: true,\n      name: 'item',\n      convertFormat: OREST_ENDPOINT.DATEFORMAT,\n      renderFormat: 'ddd',\n      uppercase: true\n    }],\n    onClick: e => {\n      setIsTimeAvailability(false);\n      updateState('guest', 'eventLocTransDate', e);\n      updateState('guest', 'eventLocTransTime', 0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1234,\n      columnNumber: 85\n    }\n  })) : state.eventLocTransDateList === false && eventlocDateListLoading ? __jsx(Box, {\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1263,\n      columnNumber: 85\n    }\n  }, __jsx(LoadingSpinner, {\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1264,\n      columnNumber: 89\n    }\n  })) : __jsx(Typography, {\n    variant: \"subtitle2\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 85\n    }\n  }, t('str_noAvailableVenue')), state.eventLocTransDate !== 0 ? __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1272,\n      columnNumber: 81\n    }\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    align: \"center\",\n    style: {\n      fontWeight: 'bolder',\n      marginTop: 10,\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1273,\n      columnNumber: 85\n    }\n  }, t('str_hour')), state.eventLocTransDate !== 0 && eventlocDateSlotListLoading ? __jsx(Box, {\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1281,\n      columnNumber: 89\n    }\n  }, __jsx(LoadingSpinner, {\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1282,\n      columnNumber: 93\n    }\n  })) : state.eventLocTransDateSlotList === global.base.isFalse ? __jsx(Typography, {\n    variant: \"subtitle2\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1286,\n      columnNumber: 89\n    }\n  }, t('str_pickADate')) : state.eventLocTransDateSlotList === global.base.isNull ? __jsx(Typography, {\n    variant: \"subtitle2\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1295,\n      columnNumber: 89\n    }\n  }, t('str_sorryMessage')) : __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1300,\n      columnNumber: 89\n    }\n  }, __jsx(Container, {\n    maxWidth: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1301,\n      columnNumber: 93\n    }\n  }, __jsx(HorizontalList, {\n    showLeftButton: true,\n    showRightButton: true,\n    list: state.eventLocTransDateSlotList,\n    value: state.eventLocTransTime,\n    fields: [{\n      useMoment: true,\n      name: 'item',\n      convertFormat: 'HH:mm',\n      renderFormat: 'HH:mm'\n    }],\n    onClick: e => {\n      setIsTimeAvailability(false);\n      updateState('guest', 'eventLocTransTime', e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1302,\n      columnNumber: 97\n    }\n  })))) : null)))))), eventRulesIsLoading ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1333,\n      columnNumber: 53\n    }\n  }, __jsx(LoadingSpinner, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1334,\n      columnNumber: 57\n    }\n  })) : state.strEventRules ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1337,\n      columnNumber: 53\n    }\n  }, __jsx(Typography, {\n    variant: \"button\",\n    display: \"block\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1338,\n      columnNumber: 57\n    }\n  }, t('str_termsOfUseAndPrivacyPolicy')), __jsx(Typography, {\n    variant: \"caption\",\n    display: \"block\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1341,\n      columnNumber: 57\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: state.strEventRules\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1342,\n      columnNumber: 61\n    }\n  }))) : null), activeStep === STEPPER.SELECT_MENU_LIST && __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1353,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1354,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1355,\n      columnNumber: 53\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1356,\n      columnNumber: 57\n    }\n  }, getEventLocData !== null && getEventLocData !== void 0 && getEventLocData.lochasmenu ? __jsx(EventMenuList, {\n    departId: getEventLocData.locdepartid,\n    isAddActive: global.base.isTrue,\n    isSpaRes: getEventLocData === null || getEventLocData === void 0 ? void 0 : getEventLocData.isspares,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1359,\n      columnNumber: 69\n    }\n  }) : __jsx(Box, {\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1365,\n      columnNumber: 69\n    }\n  }, t('str_noMenusAvailable')))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1371,\n      columnNumber: 53\n    }\n  }, __jsx(RestaurantReservationSummary, {\n    companyTitle: sliderTitle || (getEventLocData === null || getEventLocData === void 0 ? void 0 : getEventLocData.localtitle) || (getEventLocData === null || getEventLocData === void 0 ? void 0 : getEventLocData.localtitle),\n    date: state.eventLocTransDate,\n    time: state.eventLocTransTime,\n    adult: state.totalPax,\n    child: state.totalChd,\n    isHaveProductList: true,\n    selectedProductList: state.selectGuestProductList,\n    setToState: setToState,\n    isSpaRes: getEventLocData === null || getEventLocData === void 0 ? void 0 : getEventLocData.isspares,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1372,\n      columnNumber: 57\n    }\n  }), __jsx(\"div\", {\n    style: {\n      paddingTop: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1383,\n      columnNumber: 57\n    }\n  }, __jsx(Confirmation, {\n    event: eventReservation,\n    eventLocData: getEventLocData,\n    objLogInfo: objLogInfo,\n    isConfirmLoad: e => setIsConfirmLoad(e),\n    setLocPrice: price => setLocPriceData(price),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1384,\n      columnNumber: 61\n    }\n  }))))), activeStep === STEPPER.CONFIRMATION && __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1398,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1399,\n      columnNumber: 49\n    }\n  }, isPortal ? __jsx(EventPayment, {\n    showSummary: true,\n    isPortal: GENERAL_SETTINGS.ISPORTAL,\n    activeTabColor: WEBCMS_DATA.assets.colors.primary.main || null,\n    companyTitle: sliderTitle,\n    date: state.eventLocTransDate,\n    time: state.eventLocTransTime,\n    adult: state.totalPax,\n    child: state.totalChd,\n    isHaveProductList: state.selectGuestProductList.length > 0,\n    selectedProductList: state.selectGuestProductList,\n    eventLocData: getEventLocData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1402,\n      columnNumber: 61\n    }\n  }) : __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1416,\n      columnNumber: 61\n    }\n  }, __jsx(Confirmation, {\n    showDetail: true,\n    event: eventReservation,\n    eventLocData: getEventLocData,\n    objLogInfo: objLogInfo,\n    isConfirmLoad: e => setIsConfirmLoad(e),\n    setLocPrice: price => setLocPriceData(price),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1417,\n      columnNumber: 65\n    }\n  })))), activeStep === STEPPER.FINISH && isReservationConfirm && __jsx(\"div\", {\n    style: {\n      paddingTop: \"48px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1432,\n      columnNumber: 45\n    }\n  }, __jsx(ConfirmInfo, {\n    date: confirmData === null || confirmData === void 0 ? void 0 : confirmData.startdate,\n    time: confirmData === null || confirmData === void 0 ? void 0 : confirmData.starttime,\n    adult: confirmData === null || confirmData === void 0 ? void 0 : confirmData.totalpax,\n    child: confirmData === null || confirmData === void 0 ? void 0 : confirmData.totalchd,\n    reservationNo: reservationNo,\n    subTotal: confirmData === null || confirmData === void 0 ? void 0 : confirmData.subtotal,\n    totalPrice: confirmData === null || confirmData === void 0 ? void 0 : confirmData.totalprice,\n    currencyCode: confirmData === null || confirmData === void 0 ? void 0 : confirmData.pricecurrcode,\n    isSpaRes: getEventLocData === null || getEventLocData === void 0 ? void 0 : getEventLocData.isspares,\n    sliderTitle: sliderTitle || (getEventLocData === null || getEventLocData === void 0 ? void 0 : getEventLocData.localtitle) || (getEventLocData === null || getEventLocData === void 0 ? void 0 : getEventLocData.title),\n    sliderImg: sliderImg || (getEventLocData === null || getEventLocData === void 0 ? void 0 : getEventLocData.imageurl),\n    productList: state.selectGuestProductList.length > 0 ? state.selectGuestProductList : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1433,\n      columnNumber: 49\n    }\n  })), activeStep !== STEPPER.FINISH ? __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    style: {\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1450,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1459,\n      columnNumber: 49\n    }\n  }, __jsx(Button, {\n    color: 'primary',\n    variant: 'outlined',\n    disabled: activeStep === 0 || saveResEvent,\n    onClick: handleBack,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1460,\n      columnNumber: 53\n    }\n  }, t('str_back')), activeStep === STEPPER.SELECT_MENU_LIST ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: !state.isRestaurantResTermsConfirm || saveResEvent || !isConfirmLoad,\n    onClick: handleConfirm,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1470,\n      columnNumber: 57\n    }\n  }, saveResEvent && __jsx(LoadingSpinner, {\n    size: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1477,\n      columnNumber: 78\n    }\n  }), t('str_confirm')) : activeStep === STEPPER.SELECT_MENU_LIST && isObjectEmpty(state.selectGuestProductList) ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1482,\n      columnNumber: 57\n    }\n  }, t('str_skip')) : __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1491,\n      columnNumber: 57\n    }\n  }, t('str_next')))) : null)))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n  setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RestaurantReservation);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/public/components/info/event-reservation/index.js"],"names":["React","useContext","useEffect","useState","useCallback","clsx","axios","connect","useSelector","Insert","List","UseOrest","Patch","ViewList","setToState","updateState","Box","Container","Paper","Typography","makeStyles","useTranslation","WebCmsGlobal","Dialog","DialogContent","Stepper","Step","StepConnector","Button","StepLabel","PersonIcon","TodayIcon","RestaurantMenuIcon","DoneIcon","ListAltIcon","SpaIcon","Grid","AppBar","Toolbar","IconButton","CloseIcon","SpinEdit","TRANSTYPES","OREST_ENDPOINT","REQUEST_METHOD_CONST","checkResponse","isObjectEmpty","isZero","notZero","responseData","EventMenuList","Confirmation","global","FALSE","LoadingSpinner","Card","CardContent","Slider","ArrowDownwardIcon","CardImage","useRouter","useSnackbar","sendGuestChangeNotifyMail","ReservationInfo","RestaurantReservationSummary","ConfirmInfo","EventPayment","moment","HorizontalList","useStyles","theme","root","flexGrow","width","eventLocCard","maxWidth","marginBottom","border","eventLocActive","position","fontFamily","content","fontSize","right","bottom","color","eventLocTitle","breakpoints","only","button","marginRight","spacing","completed","display","instructions","marginTop","appBar","title","marginLeft","flex","formControl","margin","minWidth","selectEmpty","stepRoot","paddingLeft","paddingRight","stepLabel","muiListRoot","useColorlibStepIconStyles","backgroundColor","zIndex","padding","borderRadius","justifyContent","alignItems","active","props","isPortal","connectorStyle","height","useColorIconStyles","RestaurantReservation","state","isOpen","onClose","eventLocData","sliderTitle","sliderDesc","sliderImg","isFromDetailPage","classes","t","GENERAL_SETTINGS","WEBCMS_DATA","locale","router","objLogInfo","orest","currentUser","loginfo","MAX_CHILD_AGE","isReservationConfirm","setIsReservationConfirm","base","isFalse","reservationNo","setReservationNo","intZero","isLogin","auth","isTrue","token","access_token","enqueueSnackbar","saveResEvent","setSaveResEvent","getEventLocData","setEventLocData","eventLocList","setEventLocList","eventLocID","setEventLocID","locid","eventlocDateListLoading","setEventlocDateListLoading","eventlocDateSlotListLoading","setEventlocDateSlotListLoading","eventLocCatLoading","setEventLocCatLoading","isConfirmLoad","setIsConfirmLoad","reseventGid","setReseventGid","locPriceData","setLocPriceData","isTimeAvailability","setIsTimeAvailability","resPaxFix","setResPaxFix","eventRulesIsLoading","setEventRulesIsLoading","isKiosk","query","kiosk","reservBase","clientReservation","clientBase","client","hotelRefNo","changeHotelRefno","hotelrefno","HOTELREFNO","confirmData","setConfirmData","defaultValues","totalPax","totalChd","STEPPER","isspares","RESERVATION_INFO","SELECT_MENU_LIST","FINISH","locdepartid","lochasmenu","SELECT_NUMBER_OF_PEOPLE","getSteps","ColorlibConnector","ColorlibStepIcon","iconCls","icons","String","icon","activeStep","setActiveStep","steps","handleClose","eventReservationReset","totalpax","totalchd","getTimeAvailability","apiUrl","OREST_URL","endpoint","params","clientid","refid","transdate","eventLocTransDate","transtime","eventLocTransTime","useHotelRefno","then","response","status","data","count","catch","handleNext","variant","checkTimeAvailability","res","msg","autoHideDuration","prevActiveStep","handleBack","clientParams","hotelgidstr","hoteltoken","locismulti","catid","sort","langcode","success","length","eventLocTransDateList","Object","keys","totalDay","checkin","checkout","ciDate","Date","format","coDate","diff","Number","reqParams","allhotels","EVENTLOC","SLASH","DATE","assign","totalday","resEventLocDate","transDateList","map","item","push","isNull","helper","strEventRules","code","guestWeb","contentype","masterid","locmid","toolsFileFindResponse","filedata","resRafileData","strFileData","Buffer","from","toString","lochasres","settEventLocResResPaxFixResponse","SLOT","date","resEventLocTimeSlot","transDateSlotList","getDefAgencyId","hotelgid","getEventData","resNo","RESEVENT","id","handleConfirm","defResEvent","defAgencyId","startdate","enddate","starttime","endtime","description","locdesc","eventrestype","GUEST_ALACARTE","eventtypeid","gapptypeid","totalbaby","agencyid","locprice","insResEvent","eventReservNo","reservno","eventReservGid","gid","eventReservInfo","guestMenuList","list","selectGuestProductList","obj","showprice","pricecurr","groupname","EVENTMENU","LISTINS","method","POST","GET","inceventmenu","subTotal","discAmount","discrate","freeamount","totalPrice","subtotal","totalprice","notifyValues","roomno","clientname","details","JSON","stringify","loc","time","eventReservation","localtitle","slider","setSlider","swiped","setSwiped","handleSwiped","handleSwipedStatus","e","stopPropagation","preventDefault","slickGoTo","slideIndex","filter","a","b","findIndex","settings","dots","speed","lazyLoad","slidesToShow","slidesToScroll","centerMode","swipeToSlide","infinite","responsive","breakpoint","handleSelectEventLoc","newEventLocData","find","printPdf","setPrintPdf","handlePrintReceipt","url","headers","responseType","r","blob","Blob","type","URL","createObjectURL","receiptPdfPrint","document","getElementById","contentWindow","print","label","fontWeight","paper","i","STATIC_URL","imageurl","cursor","paddingTop","paddingBottom","useMoment","name","convertFormat","DATEFORMAT","renderFormat","uppercase","eventLocTransDateSlotList","__html","price","CONFIRMATION","ISPORTAL","assets","colors","primary","main","pricecurrcode","textAlign","isRestaurantResTermsConfirm","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useCallback } from 'react'\nimport clsx from 'clsx'\nimport axios from 'axios'\nimport { connect, useSelector } from 'react-redux'\nimport {Insert, List, UseOrest, Patch, ViewList} from '@webcms/orest'\nimport { setToState, updateState } from 'state/actions'\nimport {Box, Container, Paper, Typography} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport WebCmsGlobal from 'components/webcms-global'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Button from '@material-ui/core/Button'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport PersonIcon from '@material-ui/icons/Person'\nimport TodayIcon from '@material-ui/icons/Today'\nimport RestaurantMenuIcon from '@material-ui/icons/RestaurantMenu'\nimport DoneIcon from '@material-ui/icons/Done'\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport SpaIcon from '@material-ui/icons/Spa';\nimport Grid from '@material-ui/core/Grid'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport SpinEdit from '@webcms-ui/core/spin-edit'\nimport {\n    TRANSTYPES,\n    OREST_ENDPOINT,\n    REQUEST_METHOD_CONST,\n    checkResponse,\n    isObjectEmpty,\n    isZero,\n    notZero,\n    responseData,\n} from 'model/orest/constants'\nimport EventMenuList from './event-menu-list'\nimport Confirmation from './confirmation'\nimport * as global from '@webcms-globals'\nimport { FALSE } from 'model/globals'\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Slider from 'react-slick'\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward'\nimport CardImage from '@webcms-ui/core/card-image'\nimport { useRouter } from 'next/router'\nimport { useSnackbar } from 'notistack'\nimport { sendGuestChangeNotifyMail } from 'components/guest/account/Base/helper'\nimport ReservationInfo from \"./reservation-info\"\nimport RestaurantReservationSummary from \"./restaurant-reservation-summary\"\nimport ConfirmInfo from \"./confirm-info\"\nimport EventPayment from \"./event-payment\"\nimport moment from 'moment'\nimport HorizontalList from \"../../../../../HorizontalList\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    eventLocCard: {\n        maxWidth: '95%',\n        marginBottom: 5,\n        border: '3px solid transparent'\n    },\n    eventLocActive: {\n        position: 'relative',\n        border: '3px solid #8BC34A',\n        '&:after': {\n            fontFamily: \"'Material Icons'\",\n            content: \"'done'\",\n            fontSize: 25,\n            position: 'absolute',\n            right: 5,\n            bottom: 0,\n            color: '#8BC34A'\n        },\n    },\n    eventLocTitle: {\n        fontSize: 13,\n        [theme.breakpoints.only('md')]: {\n            fontSize: 12,\n        },\n        [theme.breakpoints.only('sm')]: {\n            fontSize: 11,\n        },\n        [theme.breakpoints.only('xs')]: {\n            fontSize: 10,\n        },\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    completed: {\n        display: 'inline-block',\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        marginLeft: 0,\n        maxWidth: '300px',\n        minWidth: '300px',\n        width: '100%',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    stepRoot: {\n        \"&.MuiStep-horizontal\": {\n            paddingLeft: \"0\",\n            paddingRight: \"0\",\n        }\n    },\n    stepLabel: {\n        \"& .MuiStepLabel-iconContainer\": {\n            paddingRight: \"0\"\n        }\n    },\n    muiListRoot: {\n        display: 'inline-flex'\n    }\n}))\n\nconst useColorlibStepIconStyles = makeStyles({\n    root: {\n        backgroundColor: '#ccc',\n        zIndex: 1,\n        padding: 10,\n        color: '#fff',\n        display: 'flex',\n        borderRadius: '50%',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    active: (props) => ({\n        border: `1px solid ${props.isPortal ? '#44B3E4' : '#f1b80f'}`,\n        backgroundColor: '#fff',\n    }),\n    completed: {\n        backgroundColor: '#fff',\n    },\n})\n\n\nconst connectorStyle = makeStyles({\n    active: {\n        height: \"2px\",\n        backgroundColor: '#44B3E4',\n    },\n    completed: {\n        height: \"2px\",\n        backgroundColor: '#44B3E4',\n    },\n})\n\nconst useColorIconStyles = makeStyles({\n    root: {\n        color: '#fff',\n    },\n    active: {\n        backgroundColor: '#fff',\n        color: '#2196F3',\n    },\n    completed: (props) => ({\n        backgroundColor: '#fff',\n        color: props.isPortal ? '#064989' : '#2196F3',\n    }),\n})\n\nconst RestaurantReservation = (props) => {\n    const { state, isOpen, onClose, updateState, setToState, eventLocData, isPortal, sliderTitle, sliderDesc, sliderImg, isFromDetailPage } = props\n    const classes = useStyles()\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS, WEBCMS_DATA, locale } = useContext(WebCmsGlobal)\n    const router = useRouter()\n    const objLogInfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n    const MAX_CHILD_AGE = 6\n    const [isReservationConfirm, setIsReservationConfirm] = useState(global.base.isFalse)\n    const [reservationNo, setReservationNo] = useState(global.base.intZero)\n    const isLogin = useSelector((state) => state.orest.currentUser && state.orest.currentUser.auth) ? global.base.isTrue : global.base.isFalse\n    const token = useSelector((state) => state.orest.currentUser && state.orest.currentUser.auth.access_token || global.base.isFalse)\n    const { enqueueSnackbar } = useSnackbar()\n\n    const [saveResEvent, setSaveResEvent] = useState(global.base.isFalse)\n    const [getEventLocData, setEventLocData] = useState(eventLocData)\n    const [eventLocList, setEventLocList] = useState(global.base.isFalse)\n    const [eventLocID, setEventLocID] = useState(getEventLocData.locid)\n    const [eventlocDateListLoading, setEventlocDateListLoading] = useState(global.base.isFalse)\n    const [eventlocDateSlotListLoading, setEventlocDateSlotListLoading] = useState(global.base.isFalse)\n    const [eventLocCatLoading, setEventLocCatLoading] = useState(global.base.isFalse)\n    const [isConfirmLoad, setIsConfirmLoad] = useState(global.base.isFalse)\n    const [reseventGid, setReseventGid] = useState(global.base.isFalse)\n    const [locPriceData, setLocPriceData] = useState(global.base.isFalse)\n    const [isTimeAvailability, setIsTimeAvailability] = useState(global.base.isFalse)\n    const [resPaxFix, setResPaxFix] = useState(global.base.isFalse)\n    const [eventRulesIsLoading, setEventRulesIsLoading] = useState(global.base.isFalse)\n\n    const isKiosk = router.query.kiosk === 'true' ? global.base.isTrue : global.base.isFalse\n    const reservBase = state.clientReservation || false\n    const clientBase = useSelector((state) => state.orest.state && state.orest.state.client)\n    const hotelRefNo = state?.changeHotelRefno || state?.clientReservation?.hotelrefno || GENERAL_SETTINGS.HOTELREFNO\n\n    const [confirmData, setConfirmData] = useState(null);\n\n    const defaultValues = {\n        totalPax: 1,\n        totalChd: 0\n    }\n\n\n    let STEPPER =\n        //TODO edit for payment step\n        isPortal ? (\n            isFromDetailPage ? (\n                getEventLocData.isspares ? {\n                    RESERVATION_INFO: 0,\n                    SELECT_MENU_LIST: 1,\n                    FINISH: 2\n                } : getEventLocData.locdepartid && getEventLocData.lochasmenu ? {\n                    RESERVATION_INFO: 0,\n                    SELECT_MENU_LIST: 1,\n                    FINISH: 2\n                } : {\n                    RESERVATION_INFO: 0,\n                    SELECT_MENU_LIST: 1,\n                    FINISH: 1\n                }\n            ) : (\n                getEventLocData.isspares ? {\n                    SELECT_NUMBER_OF_PEOPLE: 0,\n                    SELECT_MENU_LIST: 1,\n                    FINISH: 2\n                } : getEventLocData.locdepartid && getEventLocData.lochasmenu ? {\n                    SELECT_NUMBER_OF_PEOPLE: 0,\n                    SELECT_MENU_LIST: 1,\n                    FINISH: 2\n                } : {\n                    SELECT_NUMBER_OF_PEOPLE: 0,\n                    SELECT_MENU_LIST: 1,\n                    FINISH: 2\n                }\n            )\n        ) : (\n            getEventLocData.isspares ? {\n                SELECT_NUMBER_OF_PEOPLE: 0,\n                SELECT_MENU_LIST: 1,\n                FINISH: 3\n            } : getEventLocData.locdepartid && getEventLocData.lochasmenu ? {\n                SELECT_NUMBER_OF_PEOPLE: 0,\n                SELECT_MENU_LIST: 1,\n                FINISH: 3\n                } : {\n                SELECT_NUMBER_OF_PEOPLE: 0,\n                SELECT_MENU_LIST: 1,\n                FINISH: 2\n            }\n        )\n\n\n    const getSteps = () => {\n        if(isPortal) {\n            if(isFromDetailPage) {\n                return ['ReservationInfo', 'SelectMenu', 'Finish']\n            } else {\n                return ['NumberOfPeople', 'SelectMenu', 'Finish']\n            }\n        } else {\n            return ['NumberOfPeople', 'SelectMenu', 'Finish']\n        }\n\n    }\n\n    const ColorlibConnector = (props) => {\n        const classes = connectorStyle()\n        const { active, completed } = props\n\n        return(\n            <StepConnector\n                className={clsx(classes.root, {\n                    [classes.active]: active,\n                    [classes.completed]: completed,\n                })}\n            />\n        )\n    }\n\n    const ColorlibStepIcon = (props) => {\n        const classes = useColorlibStepIconStyles({isPortal: isPortal})\n        const iconCls = useColorIconStyles({isPortal: isPortal})\n        const { active, completed } = props\n        let icons\n\n        if(isPortal) {\n            if(isFromDetailPage) {\n                icons = {\n                    1: (\n                        <ListAltIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n                    2: (\n                        <RestaurantMenuIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n                    /*\n                     3: (\n                        <PaymentIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n                     */\n                    3: (\n                        <DoneIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n\n                }\n            } else {\n                if (getEventLocData.locdepartid && getEventLocData.lochasmenu) {\n                    icons = {\n                        1: (\n                            <PersonIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ),\n                        2: (\n                            <RestaurantMenuIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ),\n                      /*  5: (\n                            <PaymentIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ),*/\n                        3: (\n                            <DoneIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ),\n                    }\n                } else {\n                    icons = {\n                        1: (\n                            <PersonIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ),\n                        2: (\n                            <TodayIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ),\n                        3: (\n                            <ListAltIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ),\n                        4: (\n                            <DoneIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ),\n                    }\n                }\n            }\n\n        } else {\n            if (getEventLocData.locdepartid && getEventLocData.lochasmenu || getEventLocData.isspares) {\n                icons = {\n                    1: (\n                        <PersonIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n                    2: (\n                        getEventLocData.isspares ? (\n                            <SpaIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        ) : (\n                            <RestaurantMenuIcon\n                                className={clsx(iconCls.root, {\n                                    [iconCls.active]: active,\n                                    [iconCls.completed]: completed,\n                                })}\n                            />\n                        )\n                    ),\n                    3: (\n                        <DoneIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n                }\n            } else {\n                icons = {\n                    1: (\n                        <PersonIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n                    2: (\n                        <RestaurantMenuIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n                    3: (\n                        <DoneIcon\n                            className={clsx(iconCls.root, {\n                                [iconCls.active]: active,\n                                [iconCls.completed]: completed,\n                            })}\n                        />\n                    ),\n                }\n            }\n        }\n\n        return (\n            <div\n                className={clsx(classes.root, {\n                    [classes.active]: active,\n                    [classes.completed]: completed,\n                })}\n            >\n                {icons[String(props.icon)]}\n            </div>\n        )\n    }\n\n    const [activeStep, setActiveStep] = useState(global.base.intZero)\n    const steps = getSteps()\n\n    const handleClose = () => {\n        setActiveStep(global.base.intZero)\n        setIsReservationConfirm(global.base.isFalse)\n        onClose(global.base.isFalse)\n        eventReservationReset()\n        setConfirmData(null)\n    }\n\n    const eventReservationReset = () => {\n        updateState('guest', 'totalPax', reservBase?.totalpax || defaultValues.totalPax)\n        updateState('guest', 'totalChd', reservBase?.totalchd || defaultValues.totalChd)\n        updateState('guest', 'strEventRules', false)\n        updateState('guest', 'eventLocTransDateList', [])\n        updateState('guest', 'eventLocTransDate', 0)\n        updateState('guest', 'eventLocTransTime', 0)\n        updateState('guest', 'eventLocTransDateSlotList', false)\n        updateState('guest', 'menuGroupAndProductList', false)\n        updateState('guest', 'selectGuestProductList', [])\n        updateState('guest', 'isRestaurantResTermsConfirm', false)\n    }\n\n    const getTimeAvailability = () => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'resevent/locres/client/canci',\n            token,\n            params: {\n                clientid: objLogInfo.refid,\n                locid: getEventLocData.locid,\n                transdate: state.eventLocTransDate,\n                transtime: state.eventLocTransTime,\n                totalpax: state.totalPax,\n                hotelrefno: state.changeHotelRefno || GENERAL_SETTINGS.useHotelRefno\n            },\n        }).then((response) => {\n            if (response.status === 200 && response.data.count > 0) {\n                return response.data.data[0]\n            } else {\n                return false\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const handleNext = async () => {\n\n        if (activeStep === STEPPER.SELECT_NUMBER_OF_PEOPLE && (isZero(state.eventLocTransDate) || isZero(state.eventLocTransTime))) {\n            enqueueSnackbar(t('str_pleaseSelectDateAndTime'), { variant: 'warning' })\n            return;\n        }\n\n        if (activeStep === STEPPER.SELECT_NUMBER_OF_PEOPLE && (state.eventLocTransDate && state.eventLocTransTime) && isTimeAvailability === false) {\n            const checkTimeAvailability = await getTimeAvailability()\n            if(!checkTimeAvailability.res){\n                enqueueSnackbar(t(checkTimeAvailability.msg), { variant: 'warning', autoHideDuration: 5000 })\n                return;\n            }else{\n                setIsTimeAvailability(true)\n            }\n        }\n\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    }\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1)\n    }\n\n    let clientParams = {}\n    clientParams.hotelrefno = objLogInfo && objLogInfo.hotelrefno || GENERAL_SETTINGS.HOTELREFNO\n\n    if (objLogInfo && objLogInfo.hotelgidstr) {\n        clientParams.hoteltoken = objLogInfo && objLogInfo.hotelgidstr\n    }\n\n    useEffect(() => {\n        if (isLogin && getEventLocData && getEventLocData.locismulti && getEventLocData.catid) {\n            setEventLocCatLoading(true)\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'hotel/app/info/list',\n                token: token,\n                params: {\n                    catid: getEventLocData.catid,\n                    sort: 'id',\n                    langcode: locale\n                },\n            }).then((response) => {\n                if (response.data.success === global.base.isTrue && response.data.data.length > 0) {\n                    setEventLocList(response.data.data)\n                    setEventLocCatLoading(false)\n                } else {\n                    setEventLocList(null)\n                    setEventLocCatLoading(false)\n                }\n            })\n        } else {\n            setEventLocList(null)\n        }\n\n        if (isLogin && state.eventLocTransDateList && !Object.keys(state.eventLocTransDateList).length > global.base.intZero) {\n            if(!isPortal) {\n                let totalDay = false\n                if(reservBase && reservBase.checkin && reservBase.checkout){\n                    let ciDate = moment(new Date()).format('DD.MM.YYYY')\n                    ciDate =  moment(ciDate, 'DD.MM.YYYY')\n\n                    let coDate = moment(reservBase.checkout, 'YYYY-MM-DD').format('DD.MM.YYYY')\n                    coDate =  moment(coDate, 'DD.MM.YYYY')\n\n                    totalDay = coDate.diff(ciDate, 'days')\n                    totalDay = Number(totalDay) + 1\n                }\n\n                const reqParams = {\n                    locid: getEventLocData.locid,\n                    hotelrefno: hotelRefNo,\n                    allhotels: true,\n                }\n\n                setEventlocDateListLoading(true)\n                List({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.EVENTLOC + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.DATE,\n                    token: token,\n                    params: Object.assign(reqParams, totalDay ? { totalday: totalDay } : {})\n                }).then((resEventLocDate) => {\n                    if (checkResponse(resEventLocDate)) {\n                        let transDateList = []\n                        responseData(resEventLocDate).map((item) => {\n                            transDateList.push({ item: item.transdate })\n                        })\n                        updateState('guest', 'eventLocTransDateList', transDateList)\n                        setEventlocDateListLoading(false)\n                    } else {\n                        updateState('guest', 'eventLocTransDateList', global.base.isNull)\n                        setEventlocDateListLoading(false)\n                    }\n                })\n            }\n\n\n            if (isLogin && global.helper.isFalse(state.strEventRules)) {\n                setEventRulesIsLoading(true)\n                UseOrest({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: 'tools/file/find',\n                    token: token,\n                    params: {\n                        code: global.guestWeb.strEventRules,\n                        langcode: locale,\n                        contentype: '0000505',\n                        masterid: getEventLocData.locmid,\n                        hotelrefno: clientParams.hotelrefno\n                    }\n                }).then((toolsFileFindResponse) => {\n                    if (toolsFileFindResponse?.data?.data?.filedata) {\n                        const resRafileData = toolsFileFindResponse.data.data\n                        const strFileData = new Buffer.from(resRafileData.filedata, 'base64').toString('utf-8')\n                        updateState('guest', 'strEventRules', strFileData)\n                        setEventRulesIsLoading(false)\n                    } else {\n                        UseOrest({\n                            apiUrl: GENERAL_SETTINGS.OREST_URL,\n                            endpoint: 'tools/file/find',\n                            token: token,\n                            params: {\n                                code: global.guestWeb.strEventRules,\n                                langcode: locale,\n                                contentype: '0000505',\n                                masterid: getEventLocData.locmid,\n                            }\n                        }).then((toolsFileFindResponse) => {\n                            if (toolsFileFindResponse?.data?.data?.filedata) {\n                                const resRafileData = toolsFileFindResponse.data.data\n                                const strFileData = new Buffer.from(resRafileData.filedata, 'base64').toString('utf-8')\n                                updateState('guest', 'strEventRules', strFileData)\n                                setEventRulesIsLoading(false)\n                            } else {\n                                updateState('guest', 'strEventRules', global.base.isNull)\n                                setEventRulesIsLoading(false)\n                            }\n                        })\n                    }\n                })\n            }\n\n            if(isOpen && isLogin){\n                if(getEventLocData.lochasres){\n                    UseOrest({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: 'sett/event/locres/respaxfix',\n                        token,\n                    }).then((settEventLocResResPaxFixResponse) => {\n                        if(settEventLocResResPaxFixResponse?.data?.data?.res){\n                            setResPaxFix(global.base.isTrue)\n                        }else{\n                            setResPaxFix(global.base.isFalse)\n                        }\n                    }).catch(()=> {\n                        setResPaxFix(global.base.isFalse)\n                    })\n                }\n            }\n\n        }\n    }, [isOpen])\n\n    useEffect(() => {\n        if (getEventLocData.locid === eventLocID && isPortal) {\n            let totalDay = false\n            if(reservBase && reservBase.checkin && reservBase.checkout){\n                let ciDate = moment(new Date()).format('DD.MM.YYYY')\n                ciDate =  moment(ciDate, 'DD.MM.YYYY')\n\n                let coDate = moment(reservBase.checkout, 'YYYY-MM-DD').format('DD.MM.YYYY')\n                coDate =  moment(coDate, 'DD.MM.YYYY')\n\n                totalDay = coDate.diff(ciDate, 'days')\n                totalDay = Number(totalDay) + 1\n            }\n\n            const reqParams = {\n                locid: getEventLocData.locid,\n                hotelrefno: hotelRefNo,\n                allhotels: true,\n            }\n\n            setEventlocDateListLoading(true)\n            List({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.EVENTLOC + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.DATE,\n                token: token,\n                params: Object.assign(reqParams, totalDay ? { totalday: totalDay } : {})\n            }).then((resEventLocDate) => {\n                if (checkResponse(resEventLocDate)) {\n                    let transDateList = []\n                    responseData(resEventLocDate).map((item) => {\n                        transDateList.push({ item: item.transdate })\n                    })\n                    updateState('guest', 'eventLocTransDateList', transDateList)\n                    setEventlocDateListLoading(false)\n                } else {\n                    updateState('guest', 'eventLocTransDateList', global.base.isNull)\n                    setEventlocDateListLoading(false)\n                }\n            })\n        }\n\n    }, [eventLocID])\n\n    useEffect(() => {\n        if (isLogin && notZero(state.eventLocTransDate) && notZero(getEventLocData.locid) && getEventLocData.locid === eventLocID && (!isPortal || (isPortal && !isFromDetailPage))) {\n            setEventlocDateSlotListLoading(true)\n            List({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.EVENTLOC + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.SLOT,\n                token: token,\n                params: {\n                    date: state.eventLocTransDate,\n                    locid: getEventLocData.locid,\n                    hotelrefno: hotelRefNo\n                },\n            }).then((resEventLocTimeSlot) => {\n                if (checkResponse(resEventLocTimeSlot)) {\n                    let transDateSlotList = []\n                    responseData(resEventLocTimeSlot).map((item) => {\n                        transDateSlotList.push({ item: item.transtime })\n                    })\n                    updateState('guest', 'eventLocTransTime', global.base.intZero)\n                    updateState('guest', 'eventLocTransDateSlotList', transDateSlotList)\n\n                    if(transDateSlotList && transDateSlotList.length === 1){\n                        updateState('guest', 'eventLocTransTime', transDateSlotList[0].item)\n                    }\n\n                    setEventlocDateSlotListLoading(false)\n                } else {\n                    updateState('guest', 'eventLocTransDateSlotList', global.base.isNull)\n                    setEventlocDateSlotListLoading(false)\n                }\n            })\n        }\n    }, [state.eventLocTransDate])\n\n    const getDefAgencyId = () => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'agency/defid',\n            token,\n            params: {\n                hotelgid: objLogInfo.hotelgid,\n            },\n        }).then((response) => {\n            if (response.status === 200 && response.data.count > 0) {\n                return response.data.data.res\n            } else {\n                return false\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const getEventData = (resNo) => {\n        if(resNo) {\n            return ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.RESEVENT,\n                token,\n                params: {\n                    query: `clientid:${clientBase?.id},reservno:${resNo}`,\n                    hotelrefno: hotelRefNo\n                }\n            }).then(res => {\n                if(res.status === 200) {\n                    setConfirmData(res.data?.data?.length > 0 ? res.data.data[0] : null)\n                }\n            })\n        }\n\n    }\n\n    const handleConfirm = async () => {\n        if (global.helper.isFalse(state.eventLocTransDate) || global.helper.isFalse(state.eventLocTransTime)) {\n            enqueueSnackbar(t('str_selectDateAndTime'), { variant: 'warning' })\n        } else {\n            if (eventLocID !== FALSE) {\n                setSaveResEvent(true)\n                let defResEvent = {}\n\n                const defAgencyId = await getDefAgencyId()\n                defResEvent.startdate = state.eventLocTransDate\n                defResEvent.enddate = state.eventLocTransDate\n                defResEvent.starttime = state.eventLocTransTime\n                defResEvent.endtime = state.eventLocTransTime\n                defResEvent.locid = getEventLocData.locid\n                defResEvent.description = getEventLocData.locdesc\n                defResEvent.eventrestype = TRANSTYPES.GUEST_ALACARTE\n                defResEvent.eventtypeid = getEventLocData.gapptypeid\n                defResEvent.totalpax = state.totalPax\n                defResEvent.totalchd = state.totalChd\n                defResEvent.totalbaby = global.base.intZero\n                defResEvent.clientid = objLogInfo.refid\n                defResEvent.agencyid = defAgencyId\n\n                if(locPriceData){\n                    defResEvent.locprice = locPriceData\n                }\n\n                defResEvent.hotelrefno = hotelRefNo\n\n                await Insert({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.RESEVENT,\n                    token,\n                    data: defResEvent,\n                }).then(async (insResEvent) => {\n                    if (insResEvent.status === 200) {\n                        let eventReservNo = insResEvent.data.data.reservno\n                        let eventReservGid = insResEvent.data.data.gid\n                        let eventReservInfo = insResEvent.data.data\n                        let guestMenuList = []\n                        const list = [...state.selectGuestProductList]\n\n                        if(list.length > global.base.intZero ){\n                            list.map((obj) => {\n                                const data = Object.assign({}, obj)\n                                delete data.showprice\n                                delete data.pricecurr\n                                if(getEventLocData?.isspares) delete data.groupname\n                                guestMenuList.push({...data,\n                                    reservno: eventReservNo,\n                                    hotelrefno: hotelRefNo\n                                })\n                            })\n                        }\n\n                        setReseventGid(insResEvent.data.data.gid)\n                        if (guestMenuList) {\n                           await UseOrest({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: OREST_ENDPOINT.EVENTMENU + '/' + OREST_ENDPOINT.LISTINS,\n                                method: REQUEST_METHOD_CONST.POST,\n                                token,\n                                params: {\n                                    hotelrefno: hotelRefNo,\n                                },\n                                data: guestMenuList,\n                            })\n\n                           await UseOrest({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: 'resevent/get/totalprice',\n                                method: REQUEST_METHOD_CONST.GET,\n                                token,\n                                params: {\n                                    reservno: eventReservNo,\n                                    inceventmenu: true\n                                }\n                            }).then(async (insResEvent) => {\n                               if (insResEvent.status === 200) {\n                                   let subTotal = insResEvent.data.data.res\n                                   const discAmount = subTotal * (eventReservInfo.discrate / 100) + eventReservInfo.freeamount\n                                   const totalPrice = (subTotal-discAmount)\n\n                                   await Patch({\n                                       apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                       endpoint: OREST_ENDPOINT.RESEVENT,\n                                       token,\n                                       gid: eventReservGid,\n                                       data: {\n                                           subtotal: subTotal,\n                                           totalprice: totalPrice,\n                                       },\n                                       params: {\n                                           hotelrefno: hotelRefNo\n                                       }\n                                   })\n\n                               }\n                            })\n                        }\n\n                        const notifyValues = {\n                            roomno: reservBase?.roomno || \"-\",\n                            clientname: clientBase?.clientname || \"-\",\n                            details: JSON.stringify({\n                                loc: getEventLocData.locdesc,\n                                date: state.eventLocTransDate,\n                                time: state.eventLocTransTime,\n                                totalpax: state.totalPax,\n                                totalchd: state.totalChd\n                            })\n                        }\n\n                        await sendGuestChangeNotifyMail(reservBase?.gid ? false : true,'resevent','upd',clientBase.id,reservBase?.gid ? reservBase.gid : clientBase.gid, notifyValues, reservBase?.hotelrefno || GENERAL_SETTINGS.HOTELREFNO)\n                        await getEventData(eventReservNo)\n                        setIsReservationConfirm(global.base.isTrue)\n                        setReservationNo(eventReservNo)\n                        setSaveResEvent(false)\n                        setActiveStep(STEPPER.FINISH);\n                    } else {\n                        setSaveResEvent(false)\n                    }\n                })\n\n            } else {\n                enqueueSnackbar(t('str_missingFields') + ' eventtypeid', { variant: 'warning' })\n            }\n        }\n    }\n\n\n    let eventReservation = {\n        localtitle: getEventLocData.localtitle,\n        description: getEventLocData.locdesc,\n        totalpax: state.totalPax,\n        totalchd: state.totalChd,\n        totalbaby: global.base.intZero,\n        startdate: state.eventLocTransDate,\n        starttime: state.eventLocTransTime,\n    }\n\n    const [slider, setSlider] = useState(false)\n    const [swiped, setSwiped] = useState(false)\n\n    const handleSwiped = useCallback(() => {\n        setSwiped(true)\n    }, [setSwiped])\n\n    const handleSwipedStatus = useCallback(\n        (e) => {\n            if (swiped) {\n                e.stopPropagation()\n                e.preventDefault()\n                setSwiped(false)\n            }\n        },\n        [swiped]\n    )\n\n    useEffect(() => {\n        if (slider && slider.slickGoTo &&  eventLocList && eventLocList.length > 0) {\n            let slideIndex = eventLocList.filter(res => res.lochasres === true).sort((a, b) => a.locid - b.locid).findIndex((item) => Number(item.locid) === Number(getEventLocData.locid))\n            slider.slickGoTo(slideIndex)\n        }\n    }, [slider])\n\n    const settings = {\n        dots: true,\n        speed: 500,\n        lazyLoad: true,\n        slidesToShow: 3,\n        slidesToScroll: 1,\n        centerMode: false,\n        swipeToSlide: true,\n        infinite: false,\n        responsive: [\n            {\n                breakpoint: 768,\n                settings: {\n                    slidesToShow: 1,\n                },\n            },\n        ],\n    }\n\n    const handleSelectEventLoc = (locid) => {\n        setEventLocID(locid)\n        let newEventLocData = eventLocList.find((item) => Number(item.locid) === Number(locid))\n        setEventLocData(newEventLocData)\n        updateState('guest', 'eventLocTransDateList', global.base.isFalse)\n        updateState('guest', 'eventLocTransDateSlotList', global.base.isFalse)\n        updateState('guest', 'eventLocTransDate', 0)\n        updateState('guest', 'eventLocTransTime', 0)\n        updateState('guest', 'menuGroupAndProductList', false)\n        updateState('guest', 'selectGuestProductList', [])\n    }\n\n    const [printPdf, setPrintPdf] = useState(false)\n\n    const handlePrintReceipt = () => {\n        axios({\n            url: `${GENERAL_SETTINGS.OREST_URL}/resevent/print/form`,\n            headers: {\n                'Authorization': `Bearer ${token}`,\n            },\n            method: REQUEST_METHOD_CONST.POST,\n            responseType: 'arraybuffer',\n            params: {\n                langcode: 'en',\n                hotelrefno: hotelRefNo,\n                gid: reseventGid,\n            },\n            data: [{ 'lineentity': 'eventmenu', 'linefield': 'reservno', 'masterfield': 'reservno' }],\n        }).then((r) => {\n            if (r.status === 200) {\n                let blob = new Blob([r.data], { type: 'application/pdf' })\n                let url = URL.createObjectURL(blob)\n                setPrintPdf(url)\n                 const receiptPdfPrint = document.getElementById(\"receiptPdfPrint\").contentWindow;\n                 receiptPdfPrint.print();\n            }else{\n                enqueueSnackbar(t('str_requestCannotBeProcessed'), { variant: 'warning' })\n            }\n        }).catch(() => {\n            enqueueSnackbar(t('str_requestCannotBeProcessed'), { variant: 'warning' })\n        })\n    }\n\n    return (\n        <React.Fragment>\n            {(getEventLocData.lochasres || getEventLocData.isspares) && (\n                <Container maxWidth=\"lg\">\n                    <Dialog\n                        fullScreen\n                        open={isOpen}\n                        onClose={() => handleClose()}\n                        aria-labelledby=\"form-dialog-title\"\n                        fullWidth\n                        maxWidth=\"sm\"\n                    >\n                        <AppBar color=\"default\" className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    {t(getEventLocData.localtitle)}\n                                </Typography>\n                                <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                                    <CloseIcon/>\n                                </IconButton>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent dividers style={{ backgroundColor: '#f1f1f1' }}>\n                            <Container maxWidth={'lg'}>\n                                <div>\n                                    <Stepper activeStep={activeStep} style={{ backgroundColor: 'transparent' }} connector={<ColorlibConnector />}>\n                                        {steps.map((label) => (\n                                            <Step className={isPortal ? classes.stepRoot : \"\"} key={label}>\n                                                <StepLabel className={classes.stepLabel} StepIconComponent={ColorlibStepIcon}>\n                                                </StepLabel>\n                                            </Step>\n                                        ))}\n                                    </Stepper>\n                                    <div>\n                                        {\n                                            activeStep === STEPPER.RESERVATION_INFO && (\n                                                <ReservationInfo\n                                                    date={state.eventLocTransDate}\n                                                    time={state.eventLocTransTime}\n                                                    adult={state.totalPax}\n                                                    child={state.totalChd}\n                                                    sliderTitle={sliderTitle}\n                                                    sliderDesc={sliderDesc}\n                                                    sliderImg={sliderImg}\n                                                />\n                                            )\n                                        }\n                                        {activeStep === STEPPER.SELECT_NUMBER_OF_PEOPLE && (\n                                            <Grid container spacing={3}>\n                                                {\n                                                    <Grid item xs={12}>\n                                                        <Grid container spacing={3}>\n                                                            <Grid item xs={12}>\n                                                                <Typography variant=\"subtitle2\" style={{\n                                                                    fontWeight: 'bolder'\n                                                                }}>\n                                                                    {t('str_numberOfGuests')}\n                                                                </Typography>\n                                                            </Grid>\n                                                            <Grid item xs={12}>\n                                                                <Paper className={classes.paper}>\n                                                                    {getEventLocData?.isspares ? (\n                                                                        <div style={getEventLocData?.isspares ? {display: 'flex', justifyContent: 'center'} : {}}>\n                                                                            <SpinEdit\n                                                                                disabled={resPaxFix}\n                                                                                min={1}\n                                                                                defaultValue={state.totalPax}\n                                                                                label={t('str_adult')}\n                                                                                onChange={(e) =>\n                                                                                    updateState('guest', 'totalPax', e)\n                                                                                }\n                                                                            />\n                                                                        </div>\n                                                                    ) : (\n                                                                        <Grid container spacing={3}>\n                                                                            <Grid item xs={12} sm={getEventLocData?.isspares ? 12 : 6}>\n                                                                                <SpinEdit\n                                                                                    disabled={resPaxFix}\n                                                                                    min={1}\n                                                                                    defaultValue={state.totalPax}\n                                                                                    label={t('str_adult')}\n                                                                                    onChange={(e) =>\n                                                                                        updateState('guest', 'totalPax', e)\n                                                                                    }\n                                                                                />\n                                                                            </Grid>\n                                                                            <Grid item xs={12} sm={6}>\n                                                                                <SpinEdit\n                                                                                    disabled={resPaxFix}\n                                                                                    defaultValue={state.totalChd}\n                                                                                    label={t('str_child')}\n                                                                                    onChange={(e) =>\n                                                                                        updateState('guest', 'totalChd', e)\n                                                                                    }\n                                                                                    helpText={\n                                                                                        <React.Fragment>\n                                                                                            {MAX_CHILD_AGE} {t('str_age')} <ArrowDownwardIcon style={{ fontSize: 12 }}/>\n                                                                                        </React.Fragment>\n                                                                                    }\n                                                                                />\n                                                                            </Grid>\n                                                                        </Grid>\n                                                                    )}\n                                                                </Paper>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </Grid>\n                                                }\n                                                <Grid item xs={12}>\n                                                    <Grid container spacing={3}>\n                                                        {getEventLocData.locismulti && getEventLocData.catid ?\n                                                            eventLocCatLoading ?\n                                                                <Box p={1}>\n                                                                    <LoadingSpinner size={30}/>\n                                                                </Box> :\n                                                                <React.Fragment>\n                                                                    <Grid item xs={12}>\n                                                                        <Typography variant=\"subtitle2\" style={{\n                                                                            fontWeight: 'bolder'\n                                                                        }}>\n                                                                            {t('str_places')}\n                                                                        </Typography>\n                                                                    </Grid>\n                                                                    <Grid item xs={12}>\n                                                                        <Paper className={classes.paper}>\n                                                                            <Box p={5}>\n                                                                                <Slider ref={(slider) => slider && setSlider(slider)} onSwipe={handleSwiped} {...settings}>\n                                                                                    {eventLocList && eventLocList.filter(res => res.lochasres === true).sort((a, b) => a.locid - b.locid).map((item, i) => {\n                                                                                        return (\n                                                                                            <Box key={i} onClickCapture={handleSwipedStatus}>\n                                                                                                <Card className={clsx(classes.eventLocCard, {\n                                                                                                    [classes.eventLocActive]: getEventLocData.locid === item.locid\n                                                                                                })} onClick={()=> handleSelectEventLoc(item.locid)}>\n                                                                                                    <CardImage\n                                                                                                        src={GENERAL_SETTINGS.STATIC_URL + item.imageurl}\n                                                                                                        alt={item.localtitle}\n                                                                                                        cursor={'pointer'}\n                                                                                                    />\n                                                                                                    <CardContent>\n                                                                                                        <Typography\n                                                                                                            noWrap={true}\n                                                                                                            className={classes.eventLocTitle}\n                                                                                                            variant=\"h6\"\n                                                                                                            style={{ cursor: 'pointer' }}\n                                                                                                            title={item.localtitle && item.localtitle.length >= 30 ? item.localtitle : \"\"}\n                                                                                                        >\n                                                                                                            {item.localtitle}\n                                                                                                        </Typography>\n                                                                                                    </CardContent>\n                                                                                                </Card>\n                                                                                            </Box>\n                                                                                        )\n                                                                                    })}\n                                                                                </Slider>\n                                                                            </Box>\n                                                                        </Paper>\n                                                                    </Grid>\n                                                                </React.Fragment>\n                                                            : ''\n                                                        }\n                                                        {eventLocList !== false && (\n                                                            <React.Fragment>\n                                                                <Grid item xs={12}>\n                                                                    <Typography variant=\"subtitle2\" style={{\n                                                                        fontWeight: 'bolder'\n                                                                    }}>\n                                                                        {t('str_selectDateAndTime')}\n                                                                    </Typography>\n                                                                </Grid>\n                                                                <Grid item xs={12}>\n                                                                    <Paper className={classes.paper}>\n                                                                        <Box style={{ paddingTop: 20, paddingBottom: 10 }}>\n                                                                            <Typography variant=\"subtitle2\" align=\"center\" style={{\n                                                                                fontWeight: 'bolder',\n                                                                                marginBottom: 10\n                                                                            }}>\n                                                                                {t('str_availableDates')}\n                                                                            </Typography>\n                                                                            {state.eventLocTransDateList ? (\n                                                                                <Container maxWidth={false}>\n                                                                                    <HorizontalList\n                                                                                        showLeftButton\n                                                                                        showRightButton\n                                                                                        list={state.eventLocTransDateList}\n                                                                                        value={state.eventLocTransDate}\n                                                                                        fields={[\n                                                                                            {\n                                                                                                useMoment: true,\n                                                                                                name: 'item',\n                                                                                                convertFormat: OREST_ENDPOINT.DATEFORMAT,\n                                                                                                renderFormat: 'DD'\n                                                                                            },\n                                                                                            {\n                                                                                                useMoment: true,\n                                                                                                name: 'item',\n                                                                                                convertFormat: OREST_ENDPOINT.DATEFORMAT,\n                                                                                                renderFormat: 'ddd',\n                                                                                                uppercase: true\n                                                                                            }\n                                                                                        ]}\n                                                                                        onClick={(e) => {\n                                                                                            setIsTimeAvailability(false)\n                                                                                            updateState('guest', 'eventLocTransDate', e)\n                                                                                            updateState('guest', 'eventLocTransTime', 0)\n                                                                                        }}\n                                                                                    />\n                                                                                </Container>\n                                                                            ) : state.eventLocTransDateList === false && eventlocDateListLoading ?\n                                                                                (\n                                                                                    <Box p={1}>\n                                                                                        <LoadingSpinner size={30}/>\n                                                                                    </Box>\n                                                                                ) : (\n                                                                                    <Typography variant=\"subtitle2\" align=\"center\">\n                                                                                        {t('str_noAvailableVenue')}\n                                                                                    </Typography>\n                                                                                )}\n                                                                            {state.eventLocTransDate !== 0 ? (\n                                                                                <React.Fragment>\n                                                                                    <Typography variant=\"subtitle2\" align=\"center\" style={{\n                                                                                        fontWeight: 'bolder',\n                                                                                        marginTop: 10,\n                                                                                        marginBottom: 10,\n                                                                                    }}>\n                                                                                        {t('str_hour')}\n                                                                                    </Typography>\n                                                                                    {(state.eventLocTransDate !== 0 && eventlocDateSlotListLoading) ? (\n                                                                                        <Box p={1}>\n                                                                                            <LoadingSpinner size={30}/>\n                                                                                        </Box>\n                                                                                    ) : state.eventLocTransDateSlotList ===\n                                                                                    global.base.isFalse ? (\n                                                                                        <Typography\n                                                                                            variant=\"subtitle2\"\n                                                                                            align=\"center\"\n                                                                                            gutterBottom\n                                                                                        >\n                                                                                            {t('str_pickADate')}\n                                                                                        </Typography>\n                                                                                    ) : state.eventLocTransDateSlotList ===\n                                                                                    global.base.isNull ? (\n                                                                                        <Typography variant=\"subtitle2\"\n                                                                                                    align=\"center\">\n                                                                                            {t('str_sorryMessage')}\n                                                                                        </Typography>\n                                                                                    ) : (\n                                                                                        <React.Fragment>\n                                                                                            <Container maxWidth={false}>\n                                                                                                <HorizontalList\n                                                                                                    showLeftButton\n                                                                                                    showRightButton\n                                                                                                    list={state.eventLocTransDateSlotList}\n                                                                                                    value={state.eventLocTransTime}\n                                                                                                    fields={[\n                                                                                                        {\n                                                                                                            useMoment: true,\n                                                                                                            name: 'item',\n                                                                                                            convertFormat: 'HH:mm',\n                                                                                                            renderFormat: 'HH:mm'\n                                                                                                        }\n                                                                                                    ]}\n                                                                                                    onClick={(e) => {\n                                                                                                        setIsTimeAvailability(false)\n                                                                                                        updateState('guest', 'eventLocTransTime', e)\n                                                                                                    }}\n                                                                                                />\n                                                                                            </Container>\n                                                                                        </React.Fragment>\n                                                                                    )}\n                                                                                </React.Fragment>\n                                                                            ): null}\n                                                                        </Box>\n                                                                    </Paper>\n                                                                </Grid>\n                                                            </React.Fragment>\n                                                        )}\n                                                    </Grid>\n                                                </Grid>\n                                                {eventRulesIsLoading ? (\n                                                    <Grid item xs={12}>\n                                                        <LoadingSpinner size={20}/>\n                                                    </Grid>\n                                                ): state.strEventRules ? (\n                                                    <Grid item xs={12}>\n                                                        <Typography variant=\"button\" display=\"block\" gutterBottom>\n                                                            {t('str_termsOfUseAndPrivacyPolicy')}\n                                                        </Typography>\n                                                        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n                                                            <div\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: state.strEventRules,\n                                                                }}\n                                                            />\n                                                        </Typography>\n                                                    </Grid>\n                                                ): null}\n                                            </Grid>\n                                        )}\n                                        {activeStep === STEPPER.SELECT_MENU_LIST && (\n                                            <React.Fragment>\n                                                <Grid container spacing={3}>\n                                                    <Grid item xs={12} sm={8}>\n                                                        <Paper className={classes.paper}>\n                                                            {\n                                                                getEventLocData?.lochasmenu ? (\n                                                                    <EventMenuList\n                                                                        departId={getEventLocData.locdepartid}\n                                                                        isAddActive={global.base.isTrue}\n                                                                        isSpaRes={getEventLocData?.isspares}\n                                                                    />\n                                                                ) : (\n                                                                    <Box p={2}>{t('str_noMenusAvailable')}</Box>\n                                                                )\n                                                            }\n\n                                                        </Paper>\n                                                    </Grid>\n                                                    <Grid item xs={12} sm={4}>\n                                                        <RestaurantReservationSummary\n                                                            companyTitle={sliderTitle || getEventLocData?.localtitle || getEventLocData?.localtitle}\n                                                            date={state.eventLocTransDate}\n                                                            time={state.eventLocTransTime}\n                                                            adult={state.totalPax}\n                                                            child={state.totalChd}\n                                                            isHaveProductList\n                                                            selectedProductList={state.selectGuestProductList}\n                                                            setToState={setToState}\n                                                            isSpaRes={getEventLocData?.isspares}\n                                                        />\n                                                        <div style={{paddingTop: 16}}>\n                                                            <Confirmation\n                                                                event={eventReservation}\n                                                                eventLocData={getEventLocData}\n                                                                objLogInfo={objLogInfo}\n                                                                isConfirmLoad={(e)=> setIsConfirmLoad(e)}\n                                                                setLocPrice={(price) => setLocPriceData(price)}\n                                                            />\n                                                        </div>\n                                                    </Grid>\n                                                </Grid>\n                                            </React.Fragment>\n\n                                        )}\n                                        {activeStep === STEPPER.CONFIRMATION && (\n                                            <Grid container spacing={3}>\n                                                <Grid item xs={12}>\n                                                    {\n                                                        isPortal ? (\n                                                            <EventPayment\n                                                                showSummary\n                                                                isPortal={GENERAL_SETTINGS.ISPORTAL}\n                                                                activeTabColor={WEBCMS_DATA.assets.colors.primary.main || null}\n                                                                companyTitle={sliderTitle}\n                                                                date={state.eventLocTransDate}\n                                                                time={state.eventLocTransTime}\n                                                                adult={state.totalPax}\n                                                                child={state.totalChd}\n                                                                isHaveProductList={state.selectGuestProductList.length > 0}\n                                                                selectedProductList={state.selectGuestProductList}\n                                                                eventLocData={getEventLocData}\n                                                            />\n                                                        ) : (\n                                                            <Paper className={classes.paper}>\n                                                                <Confirmation\n                                                                    showDetail\n                                                                    event={eventReservation}\n                                                                    eventLocData={getEventLocData}\n                                                                    objLogInfo={objLogInfo}\n                                                                    isConfirmLoad={(e)=> setIsConfirmLoad(e)}\n                                                                    setLocPrice={(price) => setLocPriceData(price)}\n                                                                />\n                                                            </Paper>\n                                                        )\n                                                    }\n                                                </Grid>\n                                            </Grid>\n                                        )}\n                                        {activeStep === STEPPER.FINISH && isReservationConfirm && (\n                                            <div style={{paddingTop: \"48px\"}}>\n                                                <ConfirmInfo\n                                                    date={confirmData?.startdate}\n                                                    time={confirmData?.starttime}\n                                                    adult={confirmData?.totalpax}\n                                                    child={confirmData?.totalchd}\n                                                    reservationNo={reservationNo}\n                                                    subTotal={confirmData?.subtotal}\n                                                    totalPrice={confirmData?.totalprice}\n                                                    currencyCode={confirmData?.pricecurrcode}\n                                                    isSpaRes={getEventLocData?.isspares}\n                                                    sliderTitle={sliderTitle || (getEventLocData?.localtitle || getEventLocData?.title)}\n                                                    sliderImg={sliderImg || getEventLocData?.imageurl}\n                                                    productList={state.selectGuestProductList.length > 0 ? state.selectGuestProductList : false}\n                                                />\n                                            </div>\n                                        )}\n                                        {activeStep !== STEPPER.FINISH ? (\n                                            <Grid\n                                                container\n                                                spacing={3}\n                                                direction=\"row\"\n                                                justify=\"flex-end\"\n                                                alignItems=\"flex-end\"\n\n                                                style={{ marginTop: 10 }}\n                                            >\n                                                <Grid item xs={6} style={{textAlign:'right'}}>\n                                                    <Button\n                                                        color={'primary'}\n                                                        variant={'outlined'}\n                                                        disabled={activeStep === 0 || saveResEvent}\n                                                        onClick={handleBack}\n                                                        className={classes.button}\n                                                    >\n                                                        {t('str_back')}\n                                                    </Button>\n                                                    {activeStep === STEPPER.SELECT_MENU_LIST ? (\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            disabled={!state.isRestaurantResTermsConfirm || saveResEvent || !isConfirmLoad}\n                                                            onClick={handleConfirm}\n                                                            className={classes.button}\n                                                        >\n                                                            {saveResEvent && <LoadingSpinner size={18}/>}\n                                                            {t('str_confirm')}\n                                                        </Button>\n                                                    ) : activeStep === STEPPER.SELECT_MENU_LIST &&\n                                                    isObjectEmpty(state.selectGuestProductList) ? (\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            onClick={handleNext}\n                                                            className={classes.button}\n                                                        >\n                                                            {t('str_skip')}\n                                                        </Button>\n                                                    ) : (\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            onClick={handleNext}\n                                                            className={classes.button}\n                                                        >\n                                                            {t('str_next')}\n                                                        </Button>\n                                                    )}\n                                                </Grid>\n                                            </Grid>\n                                        ) : null\n                                        }\n                                    </div>\n                                </div>\n                            </Container>\n                        </DialogContent>\n                    </Dialog>\n                </Container>\n            )}\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RestaurantReservation)\n"]},"metadata":{},"sourceType":"module"}