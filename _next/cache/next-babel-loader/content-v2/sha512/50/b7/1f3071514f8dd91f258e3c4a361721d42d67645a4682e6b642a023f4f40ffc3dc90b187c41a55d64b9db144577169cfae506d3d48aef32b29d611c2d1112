{"ast":null,"code":"import _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/SaleCalls/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { ViewList, Insert, UseOrest, Patch } from '@webcms/orest';\nimport moment from 'moment';\nimport { Button, IconButton, Dialog, Grid, TextField, Typography, FormControlLabel, ClickAwayListener, Checkbox, Accordion, AccordionSummary, AccordionDetails, InputAdornment, Menu, MenuItem } from '@material-ui/core';\nimport PopupState, { bindTrigger, bindMenu } from 'material-ui-popup-state';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport MomentAdapter from '@date-io/moment';\nimport { DatePicker, TimePicker, LocalizationProvider } from '@material-ui/pickers';\nimport { useSnackbar } from 'notistack';\nimport WebCmsGlobal from \"../../../webcms-global\";\nimport { isErrorMsg, OREST_ENDPOINT } from \"../../../../model/orest/constants\";\nimport useTranslation from \"../../../../lib/translations/hooks/useTranslation\";\nimport MaterialTable, { MTableHeader } from 'material-table';\nimport { CustomToolTip } from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CustomAutoComplete from \"../../../CustomAutoComplete/CustomAutoComplete\";\nimport SpinEdit from \"../../../../@webcms-ui/core/spin-edit\";\nimport { MAX_MINUTE_VALUE, SLASH } from \"../../../../model/globals\";\nimport MaterialTableLocalization from \"../../../MaterialTableLocalization\";\nimport TrackedChangesDialog from \"../../../TrackedChangesDialog\";\nimport LoadingSpinner from \"../../../LoadingSpinner\";\nimport RaTagSelect from \"../../../RaTagSelect\";\nimport { InsertRaTag, PatchRaTag } from \"../../../../model/orest/components/RaTag\";\nimport TableColumnText from \"../../../TableColumnText\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    overflowContainer: {\n      maxWidth: '255px',\n      minWidth: '255px',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis'\n    },\n    inputAdornmentStyle: {\n      position: \"absolute\",\n      right: \"2px\",\n      top: \"10px\",\n      \"&.MuiInputAdornment-positionStart\": {\n        marginRight: \"0\"\n      }\n    },\n    transDate: {\n      position: 'absolute',\n      visibility: 'visible'\n    },\n    ctxMenu: {\n      textAlign: 'right',\n      visibility: 'hidden'\n    },\n    table: {\n      \"& tbody>.MuiTableRow-root:hover\": {\n        backgroundColor: \"rgb(163, 166, 180,0.1)\"\n      },\n      \"& tbody>.MuiTableRow-root:hover $ctxMenu\": {\n        visibility: 'visible'\n      },\n      \"& tbody>.MuiTableRow-root:hover $transDate\": {\n        visibility: 'hidden'\n      }\n    },\n    popoverStyle: {\n      width: \"140px\"\n    }\n  };\n});\n\nfunction SaleCalls() {\n  _s();\n\n  var _this = this,\n      _selectedValues$noteT3,\n      _selectedValues$noteC3,\n      _selectedValues$scRea3,\n      _saleNote$value2,\n      _selectedValues$empWo3;\n\n  var classes = useStyles();\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar; //context\n\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; //redux\n\n\n  var loginfo = useSelector(function (state) {\n    return state.orest.currentUser && state.orest.currentUser.loginfo;\n  });\n  var token = useSelector(function (state) {\n    var _state$orest, _state$orest$currentU;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : _state$orest$currentU.auth.access_token) || false;\n  });\n  var clientBase = useSelector(function (state) {\n    var _state$orest2, _state$orest2$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest2 = state.orest) === null || _state$orest2 === void 0 ? void 0 : (_state$orest2$state = _state$orest2.state) === null || _state$orest2$state === void 0 ? void 0 : _state$orest2$state.client) || false;\n  });\n  var hotelRefNo = useSelector(function (state) {\n    var _state$hotelinfo;\n\n    return (state === null || state === void 0 ? void 0 : (_state$hotelinfo = state.hotelinfo) === null || _state$hotelinfo === void 0 ? void 0 : _state$hotelinfo.currentHotelRefNo) || null;\n  }); //state\n\n  var _useState = useState([]),\n      callList = _useState[0],\n      setCallList = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSaving = _useState3[0],\n      setIsSaving = _useState3[1];\n\n  var _useState4 = useState(false),\n      isSaleDataLoading = _useState4[0],\n      setIsSaleDataLoading = _useState4[1];\n\n  var _useState5 = useState(null),\n      saleCallData = _useState5[0],\n      setSaleCallData = _useState5[1];\n\n  var _useState6 = useState({\n    value: '',\n    isError: false\n  }),\n      saleNote = _useState6[0],\n      setSaleNote = _useState6[1];\n\n  var _useState7 = useState([]),\n      selectedTagList = _useState7[0],\n      setSelectedTagList = _useState7[1];\n\n  var _useState8 = useState([]),\n      selectedTagListBase = _useState8[0],\n      setSelectedTagListBase = _useState8[1];\n\n  var _useState9 = useState(null),\n      raTagInfo = _useState9[0],\n      setRaTagInfo = _useState9[1];\n\n  var _useState10 = useState(false),\n      isEdit = _useState10[0],\n      setIsEdit = _useState10[1];\n\n  var _useState11 = useState(),\n      refInfo = _useState11[0],\n      setRefInfo = _useState11[1];\n\n  var _useState12 = useState(null),\n      defaultEmployee = _useState12[0],\n      setDefaultEmployee = _useState12[1];\n\n  var _useState13 = useState(false),\n      isDone = _useState13[0],\n      setIsDone = _useState13[1];\n\n  var _useState14 = useState(false),\n      openAddDialog = _useState14[0],\n      setOpenAddDialog = _useState14[1];\n\n  var _useState15 = useState(false),\n      openCheckCancel = _useState15[0],\n      setOpenCheckCancel = _useState15[1];\n\n  var _useState16 = useState({\n    noteType: {\n      value: null\n    },\n    noteCat: {\n      value: null\n    },\n    empWork: {\n      value: null\n    },\n    scReason: {\n      value: null\n    }\n  }),\n      selectedValues = _useState16[0],\n      setSelectedValues = _useState16[1];\n\n  var _useState17 = useState(false),\n      openDatePicker = _useState17[0],\n      setOpenDatePicker = _useState17[1];\n\n  var _useState18 = useState({\n    value: moment(),\n    isError: false\n  }),\n      date = _useState18[0],\n      setDate = _useState18[1];\n\n  var _useState19 = useState({\n    value: null,\n    isError: false\n  }),\n      reminderDate = _useState19[0],\n      setReminderDate = _useState19[1];\n\n  var _useState20 = useState(false),\n      openReminderPicker = _useState20[0],\n      setOpenReminderPicker = _useState20[1];\n\n  var _useState21 = useState({\n    value: moment(),\n    isError: false\n  }),\n      time = _useState21[0],\n      setTime = _useState21[1];\n\n  var _useState22 = useState({\n    value: null,\n    isError: false\n  }),\n      reminderTime = _useState22[0],\n      setReminderTime = _useState22[1];\n\n  var _useState23 = useState(''),\n      hour = _useState23[0],\n      setHour = _useState23[1];\n\n  var _useState24 = useState(''),\n      minute = _useState24[0],\n      setMinute = _useState24[1]; //ref\n\n\n  var tableRef = useRef(null);\n  var columns = [{\n    title: t('str_date'),\n    field: 'transdate',\n    headerStyle: {\n      minWidth: '100px'\n    },\n    render: function render(state) {\n      return __jsx(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: classes.transDate,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }, __jsx(Typography, {\n        style: {\n          fontSize: 'inherit'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, moment(state.transdate).format('L'))), __jsx(\"div\", {\n        className: classes.ctxMenu,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }\n      }, __jsx(PopupState, {\n        variant: \"popover\",\n        popupId: \"status-menu\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }\n      }, function (popupState) {\n        return __jsx(React.Fragment, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 33\n          }\n        }, __jsx(IconButton, _extends({\n          style: {\n            padding: '0'\n          }\n        }, bindTrigger(popupState), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 37\n          }\n        }), __jsx(MoreVertIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 41\n          }\n        })), __jsx(Menu, _extends({\n          classes: {\n            paper: classes.popoverStyle\n          },\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"left\"\n          },\n          transformOrigin: {\n            vertical: \"top\",\n            horizontal: \"left\"\n          },\n          getContentAnchorEl: null\n        }, bindMenu(popupState), {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 37\n          }\n        }), __jsx(MenuItem, {\n          onClick: function onClick() {\n            handleGetSaleCall(state.gid);\n            setOpenAddDialog(true);\n            setIsEdit(true);\n            popupState.close();\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 41\n          }\n        }, __jsx(EditOutlinedIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 45\n          }\n        }), __jsx(Typography, {\n          style: {\n            paddingLeft: '8px'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 45\n          }\n        }, \" \", t('str_edit')))));\n      })));\n    }\n  }, {\n    title: t('str_time'),\n    field: 'transtime'\n  }, {\n    title: t('str_duration'),\n    field: 'duration'\n  }, {\n    title: t('str_empCode'),\n    field: 'empcode'\n  }, {\n    title: t('str_pipeStage'),\n    field: 'pipestage'\n  }, {\n    title: t('str_company'),\n    field: 'agency'\n  }, {\n    title: t('str_pipeDesc'),\n    field: 'pipedesc',\n    render: function render(state) {\n      return __jsx(TableColumnText, {\n        minWidth: 250,\n        maxWidth: 250,\n        showToolTip: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 32\n        }\n      }, state.pipedesc);\n    }\n  }, {\n    title: t('str_contact'),\n    field: 'contact'\n  }, {\n    title: t('str_salesNote'),\n    field: 'salesnote',\n    render: function render(state) {\n      return __jsx(TableColumnText, {\n        minWidth: 250,\n        maxWidth: 250,\n        showToolTip: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 32\n        }\n      }, state.salesnote);\n    }\n  }, {\n    title: t('str_internalNote'),\n    field: 'refinfo',\n    render: function render(state) {\n      return __jsx(TableColumnText, {\n        minWidth: 250,\n        maxWidth: 250,\n        showToolTip: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 32\n        }\n      }, state.refinfo);\n    }\n  }, {\n    title: t('str_type'),\n    field: 'notetype'\n  }, {\n    title: t('str_category'),\n    field: 'notecat'\n  }, {\n    title: t('str_town'),\n    field: 'town'\n  }, {\n    title: t('str_city'),\n    field: 'city'\n  }, {\n    title: t('str_country'),\n    field: 'country'\n  }, {\n    title: t('str_done'),\n    field: 'isdone',\n    render: function render(state) {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }\n      }, state.isdone ? __jsx(CheckCircleIcon, {\n        style: {\n          color: 'green'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 29\n        }\n      }) : __jsx(CancelIcon, {\n        style: {\n          color: 'red'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 28\n        }\n      }));\n    }\n  }, {\n    title: t('str_id'),\n    field: 'id',\n    headerStyle: {\n      textAlign: 'right'\n    },\n    render: function render(state) {\n      return __jsx(TableColumnText, {\n        textAlign: 'right',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 33\n        }\n      }, state.id);\n    }\n  }];\n  useEffect(function () {\n    getSaleCallList();\n  }, []);\n\n  var getSaleCallList = function getSaleCallList() {\n    setIsLoading(true);\n    var params = {};\n    params.field = 'agencyid';\n    params.text = clientBase === null || clientBase === void 0 ? void 0 : clientBase.id;\n    params.hotelrefno = hotelRefNo || GENERAL_SETTINGS.HOTELREFNO;\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.SALECALL,\n      token: token,\n      params: params\n    }).then(function (res) {\n      setIsLoading(false);\n\n      if (res.status === 200) {\n        setCallList(res.data.data);\n      }\n    });\n  };\n\n  var handleGetSaleCall = function handleGetSaleCall(gid) {\n    setIsSaleDataLoading(true);\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.SALECALL + SLASH + 'get' + SLASH + gid,\n      token: token,\n      params: {\n        allhotels: true\n      }\n    }).then(function (res) {\n      if (res.status === 200) {\n        setSaleCallData(res.data.data);\n        var data = res.data.data;\n        setSaleCallData(res.data.data);\n        setReminderDate(_objectSpread(_objectSpread({}, reminderDate), {}, {\n          value: data.duedate ? moment(data.duedate) : null,\n          isError: reminderDate.isError\n        }));\n        setReminderTime(_objectSpread(_objectSpread({}, reminderTime), {}, {\n          value: data.duetime ? moment(data.duetime, 'HH:mm:ss') : null,\n          isError: reminderTime.isError\n        }));\n        setHour(data.durhour);\n        setMinute(data.durmin);\n        setRefInfo(data.refinfo);\n        setSaleNote(_objectSpread(_objectSpread({}, saleNote), {}, {\n          value: data.salesnote,\n          isError: data.salesnote ? data.salesnote.length <= 0 ? true : saleNote.isError : true\n        }));\n        setDate(_objectSpread(_objectSpread({}, date), {}, {\n          value: moment(data.transdate),\n          isError: date.isError\n        }));\n        setTime(_objectSpread(_objectSpread({}, time), {}, {\n          value: moment(data.transtime, 'HH:mm:ss'),\n          isError: time.isError\n        }));\n        setIsDone(data.isdone);\n      } else {\n        setIsSaleDataLoading(false);\n      }\n    }).then(function () {\n      setIsSaleDataLoading(false);\n    });\n  };\n\n  var handleDefRecord = function handleDefRecord() {\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.SALECALL + SLASH + OREST_ENDPOINT.DEF,\n      token: token,\n      params: {\n        hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO\n      }\n    }).then(function (res) {\n      if (res.status === 200) {\n        setSaleCallData(res.data.data);\n      }\n    });\n  };\n\n  var handleOpenDialog = function handleOpenDialog() {\n    var _saleNote$value;\n\n    setIsEdit(false);\n    setOpenAddDialog(true);\n    setDate(_objectSpread(_objectSpread({}, date), {}, {\n      value: moment(),\n      isError: date.isError\n    }));\n    setTime(_objectSpread(_objectSpread({}, time), {}, {\n      value: moment(),\n      isError: time.isError\n    }));\n    setSelectedValues(_objectSpread(_objectSpread({}, selectedValues), {}, {\n      empWork: {\n        value: defaultEmployee\n      }\n    }));\n    handleDefRecord();\n\n    if (((_saleNote$value = saleNote.value) === null || _saleNote$value === void 0 ? void 0 : _saleNote$value.length) <= 0) {\n      setSaleNote(_objectSpread(_objectSpread({}, saleNote), {}, {\n        value: saleNote.value,\n        isError: true\n      }));\n    }\n  };\n\n  var handleChangeAutoComplete = function handleChangeAutoComplete(newValue, name) {\n    setSelectedValues(_objectSpread(_objectSpread({}, selectedValues), {}, _defineProperty({}, name, _objectSpread(_objectSpread({}, selectedValues[name]), {}, {\n      value: newValue\n    }))));\n  };\n\n  var handleOnLoadAutoComplete = function handleOnLoadAutoComplete(initialValue, isSearch, isFinish, name) {\n    if (isSearch) {\n      if (isFinish) {\n        var data = _objectSpread({}, selectedValues);\n\n        data[name].value = initialValue;\n        setSelectedValues(data);\n      }\n    } else {\n      var _data = _objectSpread({}, selectedValues);\n\n      _data[name].value = initialValue;\n      setSelectedValues(_data);\n    }\n  };\n\n  console.log(selectedValues);\n\n  var handleSave = function handleSave() {\n    var _selectedValues$empWo, _selectedValues$empWo2, _selectedValues$noteC, _selectedValues$noteC2, _selectedValues$noteT, _selectedValues$noteT2, _selectedValues$scRea, _selectedValues$scRea2;\n\n    setIsSaving(true);\n    var data = saleCallData;\n    data.agencyid = clientBase === null || clientBase === void 0 ? void 0 : clientBase.id;\n    data.duedate = reminderDate.value ? moment(reminderDate.value).format('YYYY-MM-DD') : null;\n    data.dueuserid = ((_selectedValues$empWo = selectedValues.empWork) === null || _selectedValues$empWo === void 0 ? void 0 : (_selectedValues$empWo2 = _selectedValues$empWo.value) === null || _selectedValues$empWo2 === void 0 ? void 0 : _selectedValues$empWo2.id) || (loginfo === null || loginfo === void 0 ? void 0 : loginfo.id);\n    data.duetime = reminderTime.value ? moment(reminderTime.value).format('HH:mm') : null;\n    data.durhour = hour;\n    data.durmin = minute;\n    data.empid = loginfo.id;\n    data.notecatid = (_selectedValues$noteC = selectedValues.noteCat) === null || _selectedValues$noteC === void 0 ? void 0 : (_selectedValues$noteC2 = _selectedValues$noteC.value) === null || _selectedValues$noteC2 === void 0 ? void 0 : _selectedValues$noteC2.id;\n    data.notetypeid = (_selectedValues$noteT = selectedValues.noteType) === null || _selectedValues$noteT === void 0 ? void 0 : (_selectedValues$noteT2 = _selectedValues$noteT.value) === null || _selectedValues$noteT2 === void 0 ? void 0 : _selectedValues$noteT2.id;\n    data.reasonid = (_selectedValues$scRea = selectedValues.scReason) === null || _selectedValues$scRea === void 0 ? void 0 : (_selectedValues$scRea2 = _selectedValues$scRea.value) === null || _selectedValues$scRea2 === void 0 ? void 0 : _selectedValues$scRea2.id;\n    data.refinfo = refInfo;\n    data.salesnote = saleNote.value;\n    data.transdate = moment(date.value).format('YYYY-MM-DD');\n    data.transtime = moment(time.value).format('HH:mm');\n    data.isdone = isDone;\n\n    if (isEdit) {\n      Patch({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.SALECALL,\n        token: token,\n        gid: saleCallData === null || saleCallData === void 0 ? void 0 : saleCallData.gid,\n        params: {\n          hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO\n        },\n        data: data\n      }).then(function (res) {\n        if (res.status === 200) {\n          if (raTagInfo !== null && raTagInfo !== void 0 && raTagInfo.gid) {\n            PatchRaTag(GENERAL_SETTINGS.OREST_URL, token, raTagInfo === null || raTagInfo === void 0 ? void 0 : raTagInfo.gid, selectedTagList, hotelRefNo).then(function (raTagPatchResponse) {\n              handleAfterResponse(raTagPatchResponse);\n            });\n          } else {\n            if (selectedTagList.length > 0) {\n              InsertRaTag(GENERAL_SETTINGS.OREST_URL, token, saleCallData === null || saleCallData === void 0 ? void 0 : saleCallData.mid, selectedTagList, hotelRefNo).then(function (r1) {\n                handleAfterResponse(r1);\n              });\n            } else {\n              getSaleCallList();\n              handleReset();\n              enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n                variant: 'success'\n              });\n              setOpenAddDialog(false);\n              setIsSaving(false);\n            }\n          }\n        } else {\n          setIsSaving(false);\n          var error = isErrorMsg(res);\n          enqueueSnackbar(t(error.errMsg), {\n            variant: 'error'\n          });\n        }\n      });\n    } else {\n      Insert({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.SALECALL,\n        token: token,\n        params: {\n          hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO\n        },\n        data: data\n      }).then(function (res) {\n        if (res.status === 200) {\n          if (selectedTagList.length > 0) {\n            var _res$data, _res$data$data;\n\n            InsertRaTag(GENERAL_SETTINGS.OREST_URL, token, res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.mid, selectedTagList, hotelRefNo).then(function (r1) {\n              handleAfterResponse(r1);\n            });\n          } else {\n            setIsSaving(false);\n            getSaleCallList();\n            handleReset();\n            enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n              variant: 'success'\n            });\n            setOpenAddDialog(false);\n          }\n        } else {\n          var error = isErrorMsg(res);\n          enqueueSnackbar(t(error.errMsg), {\n            variant: 'error'\n          });\n        }\n      });\n    }\n  };\n\n  var handleAfterResponse = function handleAfterResponse(response) {\n    setIsSaving(false);\n\n    if (response.status === 200) {\n      getSaleCallList();\n      handleReset();\n      enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n        variant: 'success'\n      });\n      setOpenAddDialog(false);\n    } else {\n      var error = isErrorMsg(response);\n      enqueueSnackbar(t(error.errMsg), {\n        variant: 'error'\n      });\n    }\n  };\n\n  var handleReset = function handleReset() {\n    setSaleNote({\n      value: '',\n      isError: false\n    });\n    setRefInfo('');\n    setReminderDate({\n      value: null,\n      isError: false\n    });\n    setReminderTime({\n      value: null,\n      isError: false\n    });\n    setSaleCallData(null);\n    setSelectedTagList([]);\n    setSelectedTagListBase([]);\n    setSelectedValues({\n      noteType: {\n        value: null\n      },\n      noteCat: {\n        value: null\n      },\n      empWork: {\n        value: null\n      },\n      scReason: {\n        value: null\n      }\n    });\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 9\n    }\n  }, __jsx(Dialog, {\n    fullWidth: true,\n    maxWidth: 'md',\n    open: openAddDialog,\n    disableEnforceFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: '24px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 17\n    }\n  }, isSaleDataLoading ? __jsx(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 29\n    }\n  }) : __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 33\n    }\n  }, __jsx(TextField, {\n    value: clientBase === null || clientBase === void 0 ? void 0 : clientBase.fullname,\n    fullWidth: true,\n    disabled: true,\n    variant: 'outlined',\n    label: t('str_account'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 33\n    }\n  }, __jsx(CustomAutoComplete, {\n    id: 'noteType',\n    name: 'noteType',\n    value: ((_selectedValues$noteT3 = selectedValues.noteType) === null || _selectedValues$noteT3 === void 0 ? void 0 : _selectedValues$noteT3.value) || null,\n    endpoint: 'notetype/list',\n    variant: 'outlined',\n    params: {\n      hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO,\n      limit: 25,\n      field: 'code',\n      text: ''\n    },\n    onChange: function onChange(event, newValue) {\n      handleChangeAutoComplete(newValue, 'noteType');\n    },\n    onLoad: function onLoad(initialValue, isSearch, isFinish) {\n      return handleOnLoadAutoComplete(initialValue, isSearch, isFinish, 'noteType');\n    },\n    showOptionLabel: 'code',\n    searchParam: 'code',\n    initialId: saleCallData === null || saleCallData === void 0 ? void 0 : saleCallData.notetypeid,\n    label: t('str_noteType'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 33\n    }\n  }, __jsx(CustomAutoComplete, {\n    id: 'noteCat',\n    name: 'noteCat',\n    value: ((_selectedValues$noteC3 = selectedValues.noteCat) === null || _selectedValues$noteC3 === void 0 ? void 0 : _selectedValues$noteC3.value) || null,\n    endpoint: 'notecat/list',\n    variant: 'outlined',\n    params: {\n      hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO,\n      limit: 25,\n      field: 'code',\n      text: ''\n    },\n    onChange: function onChange(event, newValue) {\n      handleChangeAutoComplete(newValue, 'noteCat');\n    },\n    onLoad: function onLoad(initialValue, isSearch, isFinish) {\n      return handleOnLoadAutoComplete(initialValue, isSearch, isFinish, 'noteCat');\n    },\n    showOptionLabel: 'code',\n    searchParam: 'code',\n    initialId: saleCallData === null || saleCallData === void 0 ? void 0 : saleCallData.notecatid,\n    label: t('str_category'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 37\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 41\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 45\n    }\n  }, __jsx(ClickAwayListener, {\n    onClickAway: function onClickAway() {\n      return setOpenDatePicker(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 49\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 53\n    }\n  }, __jsx(DatePicker, {\n    open: openDatePicker,\n    onClose: function onClose() {\n      setOpenDatePicker(false);\n    },\n    minDate: moment().startOf('year'),\n    value: date.value,\n    label: t(\"str_date\"),\n    onError: function onError(e) {\n      if (e) {\n        setDate(_objectSpread(_objectSpread({}, date), {}, {\n          value: date.value,\n          isError: true\n        }));\n      } else {\n        setDate(_objectSpread(_objectSpread({}, date), {}, {\n          value: date.value,\n          isError: false\n        }));\n      }\n    },\n    onChange: function onChange(newDate) {\n      setDate(_objectSpread(_objectSpread({}, date), {}, {\n        value: newDate,\n        isError: date.isError\n      }));\n    },\n    inputFormat: \"DD.MM.YYYY\",\n    mask: \"__.__.____\",\n    renderInput: function renderInput(props) {\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        variant: \"outlined\"\n      }, props, {\n        InputProps: _objectSpread(_objectSpread({}, props.InputProps), {}, {\n          endAdornment: __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 77\n            }\n          }, __jsx(\"span\", {\n            onClick: function onClick() {\n              setOpenDatePicker(true);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 74\n            }\n          }, props.InputProps.endAdornment))\n        }),\n        FormHelperTextProps: {\n          style: {\n            opacity: props.error ? '1' : '0'\n          }\n        },\n        helperText: \"(\".concat(props.inputProps.placeholder, \")\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 65\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 57\n    }\n  }))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 41\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 45\n    }\n  }, __jsx(TimePicker, {\n    ampm: false,\n    inputFormat: \"HH:mm\",\n    mask: \"__:__\",\n    value: time.value,\n    onChange: function onChange(newTime) {\n      setTime(_objectSpread(_objectSpread({}, time), {}, {\n        value: newTime,\n        isError: time.isError\n      }));\n    },\n    onError: function onError(e) {\n      if (e) {\n        setTime(_objectSpread(_objectSpread({}, time), {}, {\n          value: time.value,\n          isError: true\n        }));\n      } else {\n        setTime(_objectSpread(_objectSpread({}, time), {}, {\n          value: time.value,\n          isError: false\n        }));\n      }\n    },\n    label: t('str_time'),\n    renderInput: function renderInput(props) {\n      return __jsx(TextField, _extends({\n        id: 'time',\n        name: 'time',\n        variant: 'outlined'\n      }, props, {\n        InputProps: _objectSpread(_objectSpread({}, props.InputProps), {}, {\n          endAdornment: __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 69\n            }\n          }, __jsx(\"span\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 73\n            }\n          }))\n        }),\n        FormHelperTextProps: {\n          style: {\n            opacity: props.error ? '1' : '0'\n          }\n        },\n        helperText: \"(\".concat(props.inputProps.placeholder, \")\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 57\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 49\n    }\n  }))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 760,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 37\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 41\n    }\n  }, __jsx(SpinEdit, {\n    id: 'hour',\n    name: 'hour',\n    defaultValue: 0,\n    padding: 0,\n    label: t('str_hour'),\n    onChange: function onChange(value) {\n      return setHour(value);\n    },\n    isWritableText: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 45\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 41\n    }\n  }, __jsx(SpinEdit, {\n    max: MAX_MINUTE_VALUE,\n    error: Number(minute) > MAX_MINUTE_VALUE,\n    helpText: Number(minute) > MAX_MINUTE_VALUE ? t('str_invalidInput') : '',\n    id: 'minute',\n    name: 'minute',\n    defaultValue: 0,\n    padding: 0,\n    label: t('str_minute'),\n    onChange: function onChange(value) {\n      return setMinute(value);\n    },\n    isWritableText: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 774,\n      columnNumber: 45\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 41\n    }\n  }, __jsx(\"div\", {\n    style: {\n      marginTop: '4px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 45\n    }\n  }, __jsx(FormControlLabel, {\n    value: String(isDone),\n    onChange: function onChange(e) {\n      return setIsDone(e.target.checked);\n    },\n    checked: isDone,\n    control: __jsx(Checkbox, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 62\n      }\n    }),\n    label: t('str_done'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 49\n    }\n  }))))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 33\n    }\n  }, __jsx(RaTagSelect, {\n    id: 'tags-outlined',\n    name: 'tags-outlined',\n    value: selectedTagList,\n    onChange: function onChange(event, newValue) {\n      setSelectedTagList(newValue);\n    },\n    onLoad: function onLoad(raTagInfo, tagList) {\n      setSelectedTagList(tagList);\n      setSelectedTagListBase(tagList);\n      setRaTagInfo(raTagInfo);\n    },\n    tableName: OREST_ENDPOINT.SALECALL,\n    variant: 'outlined',\n    mid: (saleCallData === null || saleCallData === void 0 ? void 0 : saleCallData.mid) || 0,\n    label: t('tags'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 33\n    }\n  }, __jsx(CustomAutoComplete, {\n    id: 'scReason',\n    name: 'scReason',\n    value: ((_selectedValues$scRea3 = selectedValues.scReason) === null || _selectedValues$scRea3 === void 0 ? void 0 : _selectedValues$scRea3.value) || null,\n    endpoint: 'screason/view/list',\n    variant: 'outlined',\n    params: {\n      query: 'isactive:true',\n      hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO,\n      limit: 25,\n      field: 'code',\n      text: ''\n    },\n    onChange: function onChange(event, newValue) {\n      handleChangeAutoComplete(newValue, 'scReason');\n    },\n    onLoad: function onLoad(initialValue, isSearch, isFinish) {\n      return handleOnLoadAutoComplete(initialValue, isSearch, isFinish, 'scReason');\n    },\n    showOptionLabel: 'code',\n    searchParam: 'code',\n    initialId: saleCallData === null || saleCallData === void 0 ? void 0 : saleCallData.reasonid,\n    label: t('str_reason'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 820,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 33\n    }\n  }, __jsx(TextField, {\n    value: saleNote.value,\n    error: ((_saleNote$value2 = saleNote.value) === null || _saleNote$value2 === void 0 ? void 0 : _saleNote$value2.length) <= 0,\n    id: 'sale-note',\n    name: 'sale-note',\n    variant: 'outlined',\n    onChange: function onChange(e) {\n      setSaleNote({\n        value: e.target.value,\n        isError: e.target.value <= 0\n      });\n    },\n    required: true,\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    rowsMax: 4,\n    InputProps: {\n      endAdornment: __jsx(InputAdornment, {\n        className: classes.inputAdornmentStyle,\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 49\n        }\n      }, __jsx(Typography, {\n        style: {\n          fontSize: '12px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 53\n        }\n      }, saleNote.value ? \"\".concat(saleNote.value.length, \"/4096\") : null))\n    },\n    FormHelperTextProps: {\n      style: {\n        opacity: saleNote.isError ? '1' : '0'\n      }\n    },\n    helperText: t('str_requiredField'),\n    label: t('str_note'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 33\n    }\n  }, __jsx(TextField, {\n    value: refInfo,\n    id: 'ref-info',\n    name: 'ref-info',\n    variant: 'outlined',\n    onChange: function onChange(e) {\n      return setRefInfo(e.target.value);\n    },\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    rowsMax: 4,\n    label: t('str_internalNote'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 884,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 897,\n      columnNumber: 33\n    }\n  }, __jsx(Accordion, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 37\n    }\n  }, __jsx(AccordionSummary, {\n    expandIcon: __jsx(ExpandMoreIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 71\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 41\n    }\n  }, __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 900,\n      columnNumber: 45\n    }\n  }, t('str_reminder'))), __jsx(AccordionDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 902,\n      columnNumber: 41\n    }\n  }, __jsx(\"div\", {\n    style: {\n      paddingTop: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 903,\n      columnNumber: 45\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 904,\n      columnNumber: 49\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 905,\n      columnNumber: 53\n    }\n  }, __jsx(CustomAutoComplete, {\n    id: 'empWork',\n    name: 'empWork',\n    value: ((_selectedValues$empWo3 = selectedValues.empWork) === null || _selectedValues$empWo3 === void 0 ? void 0 : _selectedValues$empWo3.value) || null,\n    endpoint: 'employee/worklist',\n    variant: 'outlined',\n    params: {\n      hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO,\n      limit: 25,\n      field: 'code',\n      text: ''\n    },\n    onChange: function onChange(event, newValue) {\n      handleChangeAutoComplete(newValue, 'empWork');\n    },\n    onLoad: function onLoad(initialValue, isSearch, isFinish) {\n      return handleOnLoadAutoComplete(initialValue, isSearch, isFinish, 'empWork');\n    },\n    showOptionLabel: 'code,fullname',\n    searchParam: 'code,firstname,lastname,fullname',\n    initialId: (saleCallData === null || saleCallData === void 0 ? void 0 : saleCallData.empid) || loginfo.id,\n    label: t('str_assignTo'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 906,\n      columnNumber: 57\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 926,\n      columnNumber: 53\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 57\n    }\n  }, __jsx(ClickAwayListener, {\n    onClickAway: function onClickAway() {\n      return setOpenReminderPicker(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 928,\n      columnNumber: 61\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 65\n    }\n  }, __jsx(DatePicker, {\n    open: openReminderPicker,\n    onClose: function onClose() {\n      setOpenReminderPicker(false);\n    },\n    minDate: moment().startOf('year'),\n    value: reminderDate.value,\n    label: t(\"str_dueDate\"),\n    onChange: function onChange(newDate) {\n      setReminderDate(_objectSpread(_objectSpread({}, reminderDate), {}, {\n        value: newDate,\n        isError: reminderDate.isError\n      }));\n    },\n    onError: function onError(e) {\n      setReminderDate(_objectSpread(_objectSpread({}, reminderDate), {}, {\n        value: reminderDate.value,\n        isError: !!e\n      }));\n    },\n    inputFormat: \"DD.MM.YYYY\",\n    mask: \"__.__.____\",\n    renderInput: function renderInput(props) {\n      return __jsx(TextField, _extends({\n        id: 'due-date',\n        name: 'due-date',\n        fullWidth: true,\n        variant: \"outlined\"\n      }, props, {\n        InputProps: _objectSpread(_objectSpread({}, props.InputProps), {}, {\n          endAdornment: __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 962,\n              columnNumber: 89\n            }\n          }, __jsx(\"span\", {\n            onClick: function onClick() {\n              setOpenReminderPicker(true);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 963,\n              columnNumber: 74\n            }\n          }, props.InputProps.endAdornment))\n        }),\n        FormHelperTextProps: {\n          style: {\n            opacity: props.error ? '1' : '0'\n          }\n        },\n        helperText: \"(\".concat(props.inputProps.placeholder, \")\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 953,\n          columnNumber: 77\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 69\n    }\n  }))))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 53\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 57\n    }\n  }, __jsx(TimePicker, {\n    ampm: false,\n    inputFormat: \"HH:mm\",\n    mask: \"__:__\",\n    value: reminderTime.value,\n    onChange: function onChange(newTime) {\n      setReminderTime(_objectSpread(_objectSpread({}, reminderTime), {}, {\n        value: newTime,\n        isError: reminderTime.isError\n      }));\n    },\n    onError: function onError(e) {\n      setReminderTime(_objectSpread(_objectSpread({}, reminderTime), {}, {\n        value: reminderTime.value,\n        isError: !!e\n      }));\n    },\n    label: t('str_dueTime'),\n    renderInput: function renderInput(props) {\n      return __jsx(TextField, _extends({\n        id: 'due-time',\n        name: 'due-time',\n        variant: 'outlined'\n      }, props, {\n        InputProps: _objectSpread(_objectSpread({}, props.InputProps), {}, {\n          endAdornment: __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1011,\n              columnNumber: 81\n            }\n          }, __jsx(\"span\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1012,\n              columnNumber: 85\n            }\n          }))\n        }),\n        FormHelperTextProps: {\n          style: {\n            opacity: props.error ? '1' : '0'\n          }\n        },\n        helperText: \"(\".concat(props.inputProps.placeholder, \")\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1003,\n          columnNumber: 69\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 982,\n      columnNumber: 61\n    }\n  })))))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1031,\n      columnNumber: 33\n    }\n  }, __jsx(Button, {\n    disabled: isSaving,\n    variant: 'outlined',\n    color: 'primary',\n    startIcon: __jsx(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 52\n      }\n    }),\n    onClick: function onClick() {\n      if (saleCallData) {\n        setOpenCheckCancel(true);\n      } else {\n        setOpenAddDialog(false);\n        handleReset();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1032,\n      columnNumber: 37\n    }\n  }, t('str_cancel')), date.isError || time.isError || Number(minute) > MAX_MINUTE_VALUE || reminderDate.isError || reminderTime.isError || saleNote.isError ? __jsx(CustomToolTip, {\n    title: __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 53\n      }\n    }, __jsx(Typography, {\n      style: {\n        fontWeight: '600',\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 57\n      }\n    }, t('str_invalidFields')), date.isError && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 65\n      }\n    }, t('str_date')), time.isError && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063,\n        columnNumber: 65\n      }\n    }, t('str_time')), Number(minute) > MAX_MINUTE_VALUE && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 65\n      }\n    }, t('str_minute')), reminderDate.isError && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 65\n      }\n    }, t('str_dueDate')), reminderTime.isError && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078,\n        columnNumber: 65\n      }\n    }, t('str_dueTime')), saleNote.isError && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 65\n      }\n    }, t('str_note'))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1050,\n      columnNumber: 45\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1089,\n      columnNumber: 41\n    }\n  }, __jsx(Button, {\n    color: 'primary',\n    style: {\n      marginLeft: '8px'\n    },\n    variant: 'contained',\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1090,\n      columnNumber: 45\n    }\n  }, t('str_save')))) : __jsx(Button, {\n    disabled: isSaving,\n    style: {\n      marginLeft: '8px'\n    },\n    startIcon: isSaving ? __jsx(LoadingSpinner, {\n      size: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 71\n      }\n    }) : __jsx(CheckIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 101\n      }\n    }),\n    color: 'primary',\n    variant: 'contained',\n    onClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1101,\n      columnNumber: 45\n    }\n  }, t('str_save')))))), __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1119,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    md: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1120,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1121,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1122,\n      columnNumber: 25\n    }\n  }, __jsx(CustomToolTip, {\n    title: t('str_refresh'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1123,\n      columnNumber: 29\n    }\n  }, __jsx(IconButton, {\n    onClick: function onClick() {\n      getSaleCallList();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1124,\n      columnNumber: 33\n    }\n  }, __jsx(CachedIcon, {\n    style: {\n      color: \"#F16A4B\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1129,\n      columnNumber: 37\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1133,\n      columnNumber: 25\n    }\n  }, __jsx(CustomToolTip, {\n    title: t('str_add'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1134,\n      columnNumber: 29\n    }\n  }, __jsx(IconButton, {\n    onClick: function onClick() {\n      return handleOpenDialog();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1135,\n      columnNumber: 33\n    }\n  }, __jsx(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1138,\n      columnNumber: 37\n    }\n  })))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1144,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: classes.table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1145,\n      columnNumber: 21\n    }\n  }, __jsx(MaterialTable, {\n    tableRef: tableRef,\n    columns: columns,\n    data: callList,\n    isLoading: isLoading,\n    options: {\n      headerStyle: {\n        cursor: 'default',\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        color: \"#A3A6B4\",\n        textTransform: \"uppercase\",\n        backgroundColor: \"#F5F6FA\",\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid #FFF'\n      },\n      cellStyle: {\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid rgba(224, 224, 224, 1)',\n        minWidth: '100px'\n      },\n      toolbar: false,\n      selection: true,\n      sorting: false\n    },\n    localization: MaterialTableLocalization,\n    components: {\n      Header: function Header(props) {\n        var overrideProps = _objectSpread({}, props);\n\n        overrideProps.draggable = false;\n        return __jsx(MTableHeader, _extends({}, overrideProps, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1177,\n            columnNumber: 41\n          }\n        }));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1146,\n      columnNumber: 25\n    }\n  })))), __jsx(TrackedChangesDialog, {\n    open: openCheckCancel,\n    onPressNo: function onPressNo(e) {\n      return setOpenCheckCancel(e);\n    },\n    onPressYes: function onPressYes(e) {\n      setOpenAddDialog(false);\n      setOpenCheckCancel(e);\n      setTimeout(function () {\n        handleReset();\n      }, 100);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1185,\n      columnNumber: 13\n    }\n  }));\n}\n\n_s(SaleCalls, \"ao38Uiwf51ZvefLlHIwLXYYKgnA=\", false, function () {\n  return [useStyles, useSnackbar, useTranslation, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = SaleCalls;\nexport default SaleCalls;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaleCalls\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/SaleCalls/index.js"],"names":["React","useEffect","useState","useContext","useRef","makeStyles","useSelector","ViewList","Insert","UseOrest","Patch","moment","Button","IconButton","Dialog","Grid","TextField","Typography","FormControlLabel","ClickAwayListener","Checkbox","Accordion","AccordionSummary","AccordionDetails","InputAdornment","Menu","MenuItem","PopupState","bindTrigger","bindMenu","CancelIcon","CheckCircleIcon","ExpandMoreIcon","AddIcon","CachedIcon","MoreVertIcon","EditOutlinedIcon","CheckIcon","CloseIcon","MomentAdapter","DatePicker","TimePicker","LocalizationProvider","useSnackbar","WebCmsGlobal","isErrorMsg","OREST_ENDPOINT","useTranslation","MaterialTable","MTableHeader","CustomToolTip","CustomAutoComplete","SpinEdit","MAX_MINUTE_VALUE","SLASH","MaterialTableLocalization","TrackedChangesDialog","LoadingSpinner","RaTagSelect","InsertRaTag","PatchRaTag","TableColumnText","useStyles","theme","overflowContainer","maxWidth","minWidth","overflow","whiteSpace","textOverflow","inputAdornmentStyle","position","right","top","marginRight","transDate","visibility","ctxMenu","textAlign","table","backgroundColor","popoverStyle","width","SaleCalls","classes","enqueueSnackbar","GENERAL_SETTINGS","t","loginfo","state","orest","currentUser","token","auth","access_token","clientBase","client","hotelRefNo","hotelinfo","currentHotelRefNo","callList","setCallList","isLoading","setIsLoading","isSaving","setIsSaving","isSaleDataLoading","setIsSaleDataLoading","saleCallData","setSaleCallData","value","isError","saleNote","setSaleNote","selectedTagList","setSelectedTagList","selectedTagListBase","setSelectedTagListBase","raTagInfo","setRaTagInfo","isEdit","setIsEdit","refInfo","setRefInfo","defaultEmployee","setDefaultEmployee","isDone","setIsDone","openAddDialog","setOpenAddDialog","openCheckCancel","setOpenCheckCancel","noteType","noteCat","empWork","scReason","selectedValues","setSelectedValues","openDatePicker","setOpenDatePicker","date","setDate","reminderDate","setReminderDate","openReminderPicker","setOpenReminderPicker","time","setTime","reminderTime","setReminderTime","hour","setHour","minute","setMinute","tableRef","columns","title","field","headerStyle","render","fontSize","transdate","format","popupState","padding","paper","vertical","horizontal","handleGetSaleCall","gid","close","paddingLeft","pipedesc","salesnote","refinfo","isdone","color","id","getSaleCallList","params","text","hotelrefno","HOTELREFNO","apiUrl","OREST_URL","endpoint","SALECALL","then","res","status","data","allhotels","duedate","duetime","durhour","durmin","length","transtime","handleDefRecord","DEF","handleOpenDialog","handleChangeAutoComplete","newValue","name","handleOnLoadAutoComplete","initialValue","isSearch","isFinish","console","log","handleSave","agencyid","dueuserid","empid","notecatid","notetypeid","reasonid","raTagPatchResponse","handleAfterResponse","mid","r1","handleReset","variant","error","errMsg","response","fullname","limit","event","startOf","e","newDate","props","InputProps","endAdornment","style","opacity","inputProps","placeholder","newTime","Number","marginTop","String","target","checked","tagList","query","paddingTop","fontWeight","marginLeft","cursor","textTransform","borderLeft","cellStyle","toolbar","selection","sorting","Header","overrideProps","draggable","setTimeout"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext, useRef} from \"react\";\nimport {makeStyles} from '@material-ui/core/styles'\nimport { useSelector } from 'react-redux'\nimport {ViewList, Insert, UseOrest, Patch} from '@webcms/orest'\nimport moment from 'moment'\nimport {\n    Button,\n    IconButton,\n    Dialog,\n    Grid,\n    TextField,\n    Typography,\n    FormControlLabel,\n    ClickAwayListener,\n    Checkbox,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    InputAdornment,\n    Menu,\n    MenuItem\n} from '@material-ui/core'\nimport PopupState, { bindTrigger, bindMenu } from 'material-ui-popup-state';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport AddIcon from '@material-ui/icons/Add'\nimport CachedIcon from '@material-ui/icons/Cached';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport MomentAdapter from '@date-io/moment'\nimport {\n    DatePicker,\n    TimePicker,\n    LocalizationProvider,\n} from '@material-ui/pickers'\nimport {useSnackbar} from 'notistack'\nimport WebCmsGlobal from \"../../../webcms-global\";\nimport {isErrorMsg, OREST_ENDPOINT} from \"../../../../model/orest/constants\";\nimport useTranslation from \"../../../../lib/translations/hooks/useTranslation\";\nimport MaterialTable, { MTableHeader } from 'material-table'\nimport {CustomToolTip} from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CustomAutoComplete from \"../../../CustomAutoComplete/CustomAutoComplete\";\nimport SpinEdit from \"../../../../@webcms-ui/core/spin-edit\";\nimport {MAX_MINUTE_VALUE, SLASH} from \"../../../../model/globals\";\nimport MaterialTableLocalization from \"../../../MaterialTableLocalization\";\nimport TrackedChangesDialog from \"../../../TrackedChangesDialog\";\nimport LoadingSpinner from \"../../../LoadingSpinner\";\nimport RaTagSelect from \"../../../RaTagSelect\";\nimport {InsertRaTag, PatchRaTag} from \"../../../../model/orest/components/RaTag\";\nimport TableColumnText from \"../../../TableColumnText\";\n\n\nconst useStyles = makeStyles( theme => ({\n    overflowContainer: {\n        maxWidth: '255px',\n        minWidth: '255px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis'\n    },\n    inputAdornmentStyle: {\n        position:\"absolute\",\n        right:\"2px\",\n        top:\"10px\",\n        \"&.MuiInputAdornment-positionStart\": {\n            marginRight:\"0\"\n        }\n    },\n    transDate: {\n        position: 'absolute',\n        visibility: 'visible'\n    },\n    ctxMenu: {\n        textAlign: 'right',\n        visibility: 'hidden'\n    },\n    table: {\n        \"& tbody>.MuiTableRow-root:hover\": {\n            backgroundColor: \"rgb(163, 166, 180,0.1)\"\n        },\n        \"& tbody>.MuiTableRow-root:hover $ctxMenu\": {\n            visibility: 'visible'\n        },\n        \"& tbody>.MuiTableRow-root:hover $transDate\": {\n            visibility: 'hidden'\n        },\n    },\n    popoverStyle: {\n        width:\"140px\",\n    },\n\n\n}));\n\nfunction SaleCalls() {\n    const classes = useStyles();\n\n    const { enqueueSnackbar } = useSnackbar()\n\n    //context\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal);\n    const { t } = useTranslation();\n\n    //redux\n    const loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n    const token = useSelector((state) => state?.orest?.currentUser?.auth.access_token || false);\n    const clientBase = useSelector((state) => state?.orest?.state?.client || false)\n    const hotelRefNo = useSelector(state => state?.hotelinfo?.currentHotelRefNo || null);\n\n\n    //state\n    const [callList, setCallList] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSaving, setIsSaving] = useState(false);\n    const [isSaleDataLoading, setIsSaleDataLoading] = useState(false);\n    const [saleCallData, setSaleCallData] = useState(null);\n    const [saleNote, setSaleNote] = useState({\n        value: '',\n        isError: false\n    });\n\n    const [selectedTagList, setSelectedTagList] = useState([]);\n    const [selectedTagListBase, setSelectedTagListBase] = useState([]);\n    const [raTagInfo, setRaTagInfo] = useState(null);\n    const [isEdit, setIsEdit] = useState(false);\n    const [refInfo, setRefInfo] = useState();\n    const [defaultEmployee, setDefaultEmployee] = useState(null);\n    const [isDone, setIsDone] = useState(false);\n    const [openAddDialog, setOpenAddDialog] = useState(false);\n    const [openCheckCancel, setOpenCheckCancel] = useState(false);\n\n    const [selectedValues, setSelectedValues] = useState({\n        noteType: {value: null},\n        noteCat: {value: null},\n        empWork: {value: null},\n        scReason: {value: null}\n    })\n\n\n    const [openDatePicker, setOpenDatePicker] = useState(false);\n    const [date, setDate] = useState({\n        value: moment(),\n        isError: false\n    });\n    const [reminderDate, setReminderDate] = useState({\n        value: null,\n        isError: false\n    });\n    const [openReminderPicker, setOpenReminderPicker] = useState(false);\n    const [time, setTime] = useState({\n        value: moment(),\n        isError: false\n    });\n    const [reminderTime, setReminderTime] = useState({\n        value: null,\n        isError: false\n    });\n    const [hour, setHour] = useState('');\n    const [minute, setMinute] = useState('');\n\n\n    //ref\n    const tableRef = useRef(null);\n\n    const columns = [\n        {\n            title: t('str_date'),\n            field: 'transdate',\n            headerStyle: {\n                minWidth: '100px',\n            },\n            render: (state) => (\n                <div style={{position: 'relative'}}>\n                    <div className={classes.transDate}>\n                        <Typography style={{fontSize: 'inherit'}}>\n                            {moment(state.transdate).format('L')}\n                        </Typography>\n                    </div>\n                    <div className={classes.ctxMenu}>\n                        <PopupState variant=\"popover\" popupId=\"status-menu\">\n                            {(popupState) => (\n                                <React.Fragment>\n                                    <IconButton\n                                        style={{padding: '0'}}\n                                        {...bindTrigger(popupState)}\n                                    >\n                                        <MoreVertIcon />\n                                    </IconButton>\n                                    <Menu\n                                        classes={{\n                                            paper: classes.popoverStyle,\n                                        }}\n                                        anchorOrigin={{\n                                            vertical: \"bottom\",\n                                            horizontal: \"left\"\n                                        }}\n                                        transformOrigin={{\n                                            vertical: \"top\",\n                                            horizontal: \"left\"\n                                        }}\n                                        getContentAnchorEl={null}\n                                        {...bindMenu(popupState)}\n                                    >\n                                        <MenuItem onClick={() => {\n                                            handleGetSaleCall(state.gid);\n                                            setOpenAddDialog(true);\n                                            setIsEdit(true);\n                                            popupState.close();\n                                        }}\n                                        >\n                                            <EditOutlinedIcon />\n                                            <Typography style={{paddingLeft: '8px'}}> {t('str_edit')}</Typography>\n                                        </MenuItem>\n                                    </Menu>\n                                </React.Fragment>\n                            )}\n                        </PopupState>\n                    </div>\n                </div>\n            )\n        },\n        {\n            title: t('str_time'),\n            field: 'transtime',\n        },\n        {\n            title: t('str_duration'),\n            field: 'duration',\n        },\n        {\n            title: t('str_empCode'),\n            field: 'empcode',\n        },\n        {\n            title: t('str_pipeStage'),\n            field: 'pipestage',\n        },\n        {\n            title: t('str_company'),\n            field: 'agency',\n\n        },\n        {\n            title: t('str_pipeDesc'),\n            field: 'pipedesc',\n            render: (state) => <TableColumnText minWidth={250} maxWidth={250} showToolTip>{state.pipedesc}</TableColumnText>\n\n        },\n        {\n            title: t('str_contact'),\n            field: 'contact',\n        },\n        {\n            title: t('str_salesNote'),\n            field: 'salesnote',\n            render: (state) => <TableColumnText minWidth={250} maxWidth={250} showToolTip>{state.salesnote}</TableColumnText>\n        },\n        {\n            title: t('str_internalNote'),\n            field: 'refinfo',\n            render: (state) => <TableColumnText minWidth={250} maxWidth={250} showToolTip>{state.refinfo}</TableColumnText>\n        },\n        {\n            title: t('str_type'),\n            field: 'notetype',\n        },\n        {\n            title: t('str_category'),\n            field: 'notecat',\n        },\n        {\n            title: t('str_town'),\n            field: 'town',\n        },\n        {\n            title: t('str_city'),\n            field: 'city',\n        },\n        {\n            title: t('str_country'),\n            field: 'country',\n        },\n        {\n            title: t('str_done'),\n            field: 'isdone',\n            render: (state) => (\n                <div style={{textAlign: 'center'}}>\n                    {\n                        state.isdone ? (\n                            <CheckCircleIcon style={{color: 'green'}}/>\n                        ) : (\n                           <CancelIcon style={{color: 'red'}}/>\n                        )\n                    }\n                </div>\n            )\n        },\n        {\n            title: t('str_id'),\n            field: 'id',\n            headerStyle: {\n                textAlign: 'right'\n            },\n            render: (state) =>  <TableColumnText textAlign={'right'}>{state.id}</TableColumnText>\n        },\n    ]\n\n\n    useEffect(() => {\n        getSaleCallList();\n    }, [])\n\n    const getSaleCallList = () => {\n        setIsLoading(true)\n        let params = {};\n        params.field = 'agencyid';\n        params.text = clientBase?.id;\n        params.hotelrefno = hotelRefNo || GENERAL_SETTINGS.HOTELREFNO;\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.SALECALL,\n            token,\n            params: params\n        }).then(res => {\n            setIsLoading(false);\n            if(res.status === 200) {\n                setCallList(res.data.data)\n            }\n        })\n    }\n\n    const handleGetSaleCall = (gid) => {\n        setIsSaleDataLoading(true);\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.SALECALL + SLASH + 'get' + SLASH + gid,\n            token,\n            params: {\n                allhotels: true\n            }\n        }).then(res => {\n            if(res.status === 200) {\n                setSaleCallData(res.data.data);\n                const data = res.data.data;\n                setSaleCallData(res.data.data);\n                setReminderDate({\n                    ...reminderDate,\n                    value: data.duedate ? moment(data.duedate) : null,\n                    isError: reminderDate.isError\n                })\n                setReminderTime({\n                    ...reminderTime,\n                    value: data.duetime ? moment(data.duetime, 'HH:mm:ss') : null,\n                    isError: reminderTime.isError\n                })\n                setHour(data.durhour);\n                setMinute(data.durmin);\n                setRefInfo(data.refinfo);\n                setSaleNote({\n                    ...saleNote,\n                    value: data.salesnote,\n                    isError: data.salesnote ? data.salesnote.length <= 0 ? true : saleNote.isError : true,\n                })\n                setDate({\n                    ...date,\n                    value: moment(data.transdate),\n                    isError: date.isError\n                })\n                setTime({\n                    ...time,\n                    value: moment(data.transtime, 'HH:mm:ss'),\n                    isError: time.isError\n                })\n                setIsDone(data.isdone);\n            } else {\n                setIsSaleDataLoading(false);\n            }\n        }).then(() => {\n            setIsSaleDataLoading(false);\n        })\n    }\n\n    const handleDefRecord = () => {\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.SALECALL + SLASH + OREST_ENDPOINT.DEF,\n            token,\n            params: {\n                hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO\n            }\n        }).then(res => {\n            if(res.status === 200) {\n                setSaleCallData(res.data.data);\n            }\n        })\n    }\n\n    const handleOpenDialog = () => {\n        setIsEdit(false);\n        setOpenAddDialog(true);\n        setDate({\n            ...date,\n            value: moment(),\n            isError: date.isError\n        });\n        setTime({\n            ...time,\n            value: moment(),\n            isError: time.isError\n        });\n        setSelectedValues({\n            ...selectedValues,\n            empWork: {value: defaultEmployee}\n        });\n        handleDefRecord();\n        if(saleNote.value?.length <= 0){\n            setSaleNote({\n                ...saleNote,\n                value: saleNote.value,\n                isError: true\n            })\n        }\n    }\n\n    const handleChangeAutoComplete = (newValue, name) => {\n        setSelectedValues({\n            ...selectedValues,\n            [name]: {\n                ...selectedValues[name],\n                value: newValue\n            }\n        })\n    }\n\n    const handleOnLoadAutoComplete = (initialValue, isSearch, isFinish, name) => {\n        if(isSearch) {\n            if(isFinish) {\n                const data = {...selectedValues}\n                data[name].value = initialValue\n                setSelectedValues(data)\n            }\n        } else {\n            const data = {...selectedValues}\n            data[name].value = initialValue\n            setSelectedValues(data)\n        }\n    }\n\n    console.log(selectedValues)\n\n    const handleSave = () => {\n        setIsSaving(true);\n        const data = saleCallData;\n        data.agencyid = clientBase?.id\n        data.duedate = reminderDate.value ? moment(reminderDate.value).format('YYYY-MM-DD') : null;\n        data.dueuserid = selectedValues.empWork?.value?.id || loginfo?.id;\n        data.duetime = reminderTime.value ? moment(reminderTime.value).format('HH:mm') : null;\n        data.durhour = hour;\n        data.durmin = minute;\n        data.empid = loginfo.id;\n        data.notecatid = selectedValues.noteCat?.value?.id;\n        data.notetypeid = selectedValues.noteType?.value?.id;\n        data.reasonid = selectedValues.scReason?.value?.id\n        data.refinfo = refInfo;\n        data.salesnote = saleNote.value;\n        data.transdate = moment(date.value).format('YYYY-MM-DD');\n        data.transtime = moment(time.value).format('HH:mm');\n        data.isdone = isDone;\n\n        if(isEdit) {\n            Patch({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.SALECALL,\n                token,\n                gid: saleCallData?.gid,\n                params: {\n                    hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO\n                },\n                data: data\n            }).then(res => {\n                if(res.status === 200) {\n                    if(raTagInfo?.gid) {\n                        PatchRaTag(GENERAL_SETTINGS.OREST_URL, token, raTagInfo?.gid, selectedTagList, hotelRefNo).then(raTagPatchResponse => {\n                            handleAfterResponse(raTagPatchResponse)\n                        })\n                    } else {\n                        if(selectedTagList.length > 0) {\n                            InsertRaTag(GENERAL_SETTINGS.OREST_URL, token, saleCallData?.mid, selectedTagList, hotelRefNo).then(r1 => {\n                                handleAfterResponse(r1)\n                            })\n                        } else {\n                            getSaleCallList();\n                            handleReset();\n                            enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'});\n                            setOpenAddDialog(false);\n                            setIsSaving(false);\n                        }\n                    }\n                } else {\n                    setIsSaving(false);\n                    const error = isErrorMsg(res);\n                    enqueueSnackbar(t(error.errMsg), {variant: 'error'});\n                }\n            })\n        } else {\n            Insert({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.SALECALL,\n                token,\n                params: {\n                    hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO\n                },\n                data: data\n            }).then(res => {\n                if(res.status === 200) {\n                    if(selectedTagList.length > 0) {\n                        InsertRaTag(GENERAL_SETTINGS.OREST_URL, token, res?.data?.data?.mid, selectedTagList, hotelRefNo).then(r1 => {\n                            handleAfterResponse(r1)\n                        })\n                    } else {\n                        setIsSaving(false);\n                        getSaleCallList();\n                        handleReset();\n                        enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'});\n                        setOpenAddDialog(false);\n                    }\n                } else {\n                    const error = isErrorMsg(res);\n                    enqueueSnackbar(t(error.errMsg), {variant: 'error'});\n                }\n            })\n        }\n    }\n\n    const handleAfterResponse = (response) => {\n        setIsSaving(false);\n        if(response.status === 200) {\n            getSaleCallList();\n            handleReset();\n            enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'});\n            setOpenAddDialog(false);\n        } else {\n            const error = isErrorMsg(response);\n            enqueueSnackbar(t(error.errMsg), {variant: 'error'});\n        }\n    }\n\n    const handleReset = () => {\n        setSaleNote({\n            value: '',\n            isError: false\n        });\n        setRefInfo('')\n        setReminderDate({\n            value: null,\n            isError: false\n        });\n        setReminderTime({\n            value: null,\n            isError: false\n        });\n        setSaleCallData(null);\n        setSelectedTagList([]);\n        setSelectedTagListBase([]);\n        setSelectedValues({\n            noteType: {value: null},\n            noteCat: {value: null},\n            empWork: {value: null},\n            scReason: {value: null}\n        })\n    }\n\n\n    return(\n        <div>\n            <Dialog\n                fullWidth\n                maxWidth={'md'}\n                open={openAddDialog}\n                disableEnforceFocus\n            >\n                <div style={{padding: '24px'}}>\n                    {\n                        isSaleDataLoading ? (\n                            <LoadingSpinner />\n                        ) :(\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        value={clientBase?.fullname}\n                                        fullWidth\n                                        disabled\n                                        variant={'outlined'}\n                                        label={t('str_account')}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <CustomAutoComplete\n                                        id={'noteType'}\n                                        name={'noteType'}\n                                        value={selectedValues.noteType?.value || null}\n                                        endpoint={'notetype/list'}\n                                        variant={'outlined'}\n                                        params={{\n                                            hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO,\n                                            limit: 25,\n                                            field: 'code',\n                                            text: ''\n                                        }}\n                                        onChange={(event, newValue) => {handleChangeAutoComplete(newValue, 'noteType')}}\n                                        onLoad={(initialValue, isSearch, isFinish) => handleOnLoadAutoComplete(initialValue, isSearch, isFinish, 'noteType')}\n                                        showOptionLabel={'code'}\n                                        searchParam={'code'}\n                                        initialId={saleCallData?.notetypeid}\n                                        label={t('str_noteType')}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <CustomAutoComplete\n                                        id={'noteCat'}\n                                        name={'noteCat'}\n                                        value={selectedValues.noteCat?.value || null}\n                                        endpoint={'notecat/list'}\n                                        variant={'outlined'}\n                                        params={{\n                                            hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO,\n                                            limit: 25,\n                                            field: 'code',\n                                            text: ''\n                                        }}\n                                        onChange={(event, newValue) => {handleChangeAutoComplete(newValue, 'noteCat')}}\n                                        onLoad={(initialValue, isSearch, isFinish) => handleOnLoadAutoComplete(initialValue, isSearch, isFinish, 'noteCat')}\n                                        showOptionLabel={'code'}\n                                        searchParam={'code'}\n                                        initialId={saleCallData?.notecatid}\n                                        label={t('str_category')}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={12} sm={6}>\n                                            <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                                <ClickAwayListener onClickAway={() => setOpenDatePicker(false)}>\n                                                    <div>\n                                                        <DatePicker\n                                                            open={openDatePicker}\n                                                            onClose={() => {setOpenDatePicker(false)}}\n                                                            minDate={moment().startOf('year')}\n                                                            value={date.value}\n                                                            label={t(\"str_date\")}\n                                                            onError={(e) => {\n                                                                if(e) {\n                                                                    setDate({\n                                                                        ...date,\n                                                                        value: date.value,\n                                                                        isError: true,\n                                                                    })\n                                                                } else {\n                                                                    setDate({\n                                                                        ...date,\n                                                                        value: date.value,\n                                                                        isError: false,\n                                                                    })\n                                                                }\n                                                            }}\n                                                            onChange={(newDate) => {\n                                                                setDate({\n                                                                    ...date,\n                                                                    value: newDate,\n                                                                    isError: date.isError,\n                                                                })\n                                                            }}\n                                                            inputFormat={\"DD.MM.YYYY\"}\n                                                            mask={\"__.__.____\"}\n                                                            renderInput={(props) => (\n                                                                <TextField\n                                                                    fullWidth\n                                                                    variant={\"outlined\"}\n                                                                    {...props}\n                                                                    InputProps={{\n                                                                        ...props.InputProps,\n                                                                        endAdornment: (\n                                                                            <React.Fragment>\n                                                                         <span onClick={() => {setOpenDatePicker(true)}}>\n                                                                             {props.InputProps.endAdornment}\n                                                                         </span>\n                                                                            </React.Fragment>\n                                                                        ),\n                                                                    }}\n                                                                    FormHelperTextProps={{\n                                                                        style:  {opacity: props.error ? '1' : '0'}\n                                                                    }}\n                                                                    helperText={ `(${props.inputProps.placeholder})`}\n                                                                />\n                                                            )}\n                                                        />\n                                                    </div>\n                                                </ClickAwayListener>\n                                            </LocalizationProvider>\n                                        </Grid>\n                                        <Grid item xs={12} sm={6}>\n                                            <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                                <TimePicker\n                                                    ampm={false}\n                                                    inputFormat=\"HH:mm\"\n                                                    mask=\"__:__\"\n                                                    value={time.value}\n                                                    onChange={(newTime) => {\n                                                        setTime({\n                                                            ...time,\n                                                            value: newTime,\n                                                            isError: time.isError\n                                                        })\n                                                    }}\n                                                    onError={(e) => {\n                                                        if(e) {\n                                                            setTime({\n                                                                ...time,\n                                                                value: time.value,\n                                                                isError: true,\n                                                            })\n                                                        } else {\n                                                            setTime({\n                                                                ...time,\n                                                                value: time.value,\n                                                                isError: false,\n                                                            })\n                                                        }\n                                                    }}\n                                                    label={t('str_time')}\n                                                    renderInput={(props) => (\n                                                        <TextField\n                                                            id={'time'}\n                                                            name={'time'}\n                                                            variant={'outlined'}\n                                                            {...props}\n                                                            InputProps={{\n                                                                ...props.InputProps,\n                                                                endAdornment: (\n                                                                    <React.Fragment>\n                                                                        <span/>\n                                                                    </React.Fragment>\n                                                                ),\n                                                            }}\n                                                            FormHelperTextProps={{\n                                                                style:  {opacity: props.error ? '1' : '0'}\n                                                            }}\n                                                            helperText={`(${props.inputProps.placeholder})`}\n                                                        />\n                                                    )\n                                                    }\n                                                />\n                                            </LocalizationProvider>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={12} sm={4}>\n                                            <SpinEdit\n                                                id={'hour'}\n                                                name={'hour'}\n                                                defaultValue={0}\n                                                padding={0}\n                                                label={t('str_hour')}\n                                                onChange={(value) => setHour(value)}\n                                                isWritableText\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={4}>\n                                            <SpinEdit\n                                                max={MAX_MINUTE_VALUE}\n                                                error={Number(minute) > MAX_MINUTE_VALUE}\n                                                helpText={Number(minute) > MAX_MINUTE_VALUE ? t('str_invalidInput') : ''}\n                                                id={'minute'}\n                                                name={'minute'}\n                                                defaultValue={0}\n                                                padding={0}\n                                                label={t('str_minute')}\n                                                onChange={(value) => setMinute(value)}\n                                                isWritableText\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={4}>\n                                            <div style={{marginTop: '4px'}}>\n                                                <FormControlLabel\n                                                    value={String(isDone)}\n                                                    onChange={(e) => setIsDone(e.target.checked)}\n                                                    checked={isDone}\n                                                    control={<Checkbox color=\"primary\"/>}\n                                                    label={t('str_done')}\n                                                />\n                                            </div>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <RaTagSelect\n                                        id={'tags-outlined'}\n                                        name={'tags-outlined'}\n                                        value={selectedTagList}\n                                        onChange={(event, newValue) => {\n                                            setSelectedTagList(newValue)\n                                        }}\n                                        onLoad={(raTagInfo, tagList) => {\n                                            setSelectedTagList(tagList);\n                                            setSelectedTagListBase(tagList);\n                                            setRaTagInfo(raTagInfo);\n                                        }}\n                                        tableName={OREST_ENDPOINT.SALECALL}\n                                        variant={'outlined'}\n                                        mid={saleCallData?.mid || 0}\n                                        label={t('tags')}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <CustomAutoComplete\n                                        id={'scReason'}\n                                        name={'scReason'}\n                                        value={selectedValues.scReason?.value || null}\n                                        endpoint={'screason/view/list'}\n                                        variant={'outlined'}\n                                        params={{\n                                            query: 'isactive:true',\n                                            hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO,\n                                            limit: 25,\n                                            field: 'code',\n                                            text: ''\n                                        }}\n                                        onChange={(event, newValue) => {handleChangeAutoComplete(newValue, 'scReason')}}\n                                        onLoad={(initialValue, isSearch, isFinish) => handleOnLoadAutoComplete(initialValue, isSearch, isFinish, 'scReason')}\n                                        showOptionLabel={'code'}\n                                        searchParam={'code'}\n                                        initialId={saleCallData?.reasonid}\n                                        label={t('str_reason')}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        value={saleNote.value}\n                                        error={saleNote.value?.length <= 0}\n                                        id={'sale-note'}\n                                        name={'sale-note'}\n                                        variant={'outlined'}\n                                        onChange={(e) => {\n                                            setSaleNote({\n                                                value: e.target.value,\n                                                isError: e.target.value <= 0\n                                            })\n                                        }}\n                                        required\n                                        fullWidth\n                                        multiline\n                                        rows={4}\n                                        rowsMax={4}\n                                        InputProps={{\n                                            endAdornment: (\n                                                <InputAdornment\n                                                    className={classes.inputAdornmentStyle}\n                                                    position=\"start\"\n                                                >\n                                                    <Typography style={{fontSize: '12px'}}>\n                                                        {\n                                                            saleNote.value ?\n                                                                `${saleNote.value.length}/4096`\n                                                                :\n                                                                null\n                                                        }\n                                                    </Typography>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                        FormHelperTextProps={{\n                                            style:  {opacity: saleNote.isError ? '1' : '0'}\n                                        }}\n                                        helperText={t('str_requiredField')}\n                                        label={t('str_note')}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        value={refInfo}\n                                        id={'ref-info'}\n                                        name={'ref-info'}\n                                        variant={'outlined'}\n                                        onChange={(e) => setRefInfo(e.target.value)}\n                                        fullWidth\n                                        multiline\n                                        rows={4}\n                                        rowsMax={4}\n                                        label={t('str_internalNote')}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Accordion>\n                                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                                            <Typography>{t('str_reminder')}</Typography>\n                                        </AccordionSummary>\n                                        <AccordionDetails>\n                                            <div style={{paddingTop: '16px'}}>\n                                                <Grid container spacing={2}>\n                                                    <Grid item xs={4}>\n                                                        <CustomAutoComplete\n                                                            id={'empWork'}\n                                                            name={'empWork'}\n                                                            value={selectedValues.empWork?.value || null}\n                                                            endpoint={'employee/worklist'}\n                                                            variant={'outlined'}\n                                                            params={{\n                                                                hotelrefno: hotelRefNo || GENERAL_SETTINGS.HOTELREFNO,\n                                                                limit: 25,\n                                                                field: 'code',\n                                                                text: ''\n                                                            }}\n                                                            onChange={(event, newValue) => {handleChangeAutoComplete(newValue, 'empWork')}}\n                                                            onLoad={(initialValue, isSearch, isFinish) => handleOnLoadAutoComplete(initialValue, isSearch, isFinish, 'empWork')}\n                                                            showOptionLabel={'code,fullname'}\n                                                            searchParam={'code,firstname,lastname,fullname'}\n                                                            initialId={saleCallData?.empid || loginfo.id}\n                                                            label={t('str_assignTo')}\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={4}>\n                                                        <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                                            <ClickAwayListener onClickAway={() => setOpenReminderPicker(false)}>\n                                                                <div>\n                                                                    <DatePicker\n                                                                        open={openReminderPicker}\n                                                                        onClose={() => {setOpenReminderPicker(false)}}\n                                                                        minDate={moment().startOf('year')}\n                                                                        value={reminderDate.value}\n                                                                        label={t(\"str_dueDate\")}\n                                                                        onChange={(newDate) => {\n                                                                            setReminderDate({\n                                                                                ...reminderDate,\n                                                                                value: newDate,\n                                                                                isError: reminderDate.isError\n                                                                            })\n                                                                        }}\n                                                                        onError={(e) => {\n                                                                            setReminderDate({\n                                                                                ...reminderDate,\n                                                                                value: reminderDate.value,\n                                                                                isError: !!e,\n                                                                            })\n                                                                        }}\n                                                                        inputFormat={\"DD.MM.YYYY\"}\n                                                                        mask={\"__.__.____\"}\n                                                                        renderInput={(props) => (\n                                                                            <TextField\n                                                                                id={'due-date'}\n                                                                                name={'due-date'}\n                                                                                fullWidth\n                                                                                variant={\"outlined\"}\n                                                                                {...props}\n                                                                                InputProps={{\n                                                                                    ...props.InputProps,\n                                                                                    endAdornment: (\n                                                                                        <React.Fragment>\n                                                                         <span onClick={() => {setOpenReminderPicker(true)}}>\n                                                                             {props.InputProps.endAdornment}\n                                                                         </span>\n                                                                                        </React.Fragment>\n                                                                                    ),\n                                                                                }}\n                                                                                FormHelperTextProps={{\n                                                                                    style:  {opacity: props.error ? '1' : '0'}\n                                                                                }}\n                                                                                helperText={`(${props.inputProps.placeholder})`}\n                                                                            />\n                                                                        )}\n                                                                    />\n                                                                </div>\n                                                            </ClickAwayListener>\n                                                        </LocalizationProvider>\n                                                    </Grid>\n                                                    <Grid item xs={4}>\n                                                        <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                                            <TimePicker\n                                                                ampm={false}\n                                                                inputFormat=\"HH:mm\"\n                                                                mask=\"__:__\"\n                                                                value={reminderTime.value}\n                                                                onChange={(newTime) => {\n                                                                    setReminderTime({\n                                                                        ...reminderTime,\n                                                                        value: newTime,\n                                                                        isError: reminderTime.isError\n                                                                    })\n                                                                }}\n                                                                onError={(e) => {\n                                                                    setReminderTime({\n                                                                        ...reminderTime,\n                                                                        value: reminderTime.value,\n                                                                        isError: !!e,\n                                                                    })\n                                                                }}\n                                                                label={t('str_dueTime')}\n                                                                renderInput={(props) => (\n                                                                    <TextField\n                                                                        id={'due-time'}\n                                                                        name={'due-time'}\n                                                                        variant={'outlined'}\n                                                                        {...props}\n                                                                        InputProps={{\n                                                                            ...props.InputProps,\n                                                                            endAdornment: (\n                                                                                <React.Fragment>\n                                                                                    <span/>\n                                                                                </React.Fragment>\n                                                                            ),\n                                                                        }}\n                                                                        FormHelperTextProps={{\n                                                                            style:  {opacity: props.error ? '1' : '0'}\n                                                                        }}\n                                                                        helperText={`(${props.inputProps.placeholder})`}\n                                                                    />\n                                                                )\n                                                                }\n                                                            />\n                                                        </LocalizationProvider>\n                                                    </Grid>\n                                                </Grid>\n                                            </div>\n                                        </AccordionDetails>\n                                    </Accordion>\n                                </Grid>\n                                <Grid item xs={12} style={{textAlign: 'right'}}>\n                                    <Button\n                                        disabled={isSaving}\n                                        variant={'outlined'}\n                                        color={'primary'}\n                                        startIcon={<CloseIcon />}\n                                        onClick={() => {\n                                            if(saleCallData) {\n                                                setOpenCheckCancel(true);\n                                            } else {\n                                                setOpenAddDialog(false)\n                                                handleReset();\n                                            }\n                                        }}\n                                    >\n                                        {t('str_cancel')}\n                                    </Button>\n                                    {\n                                        date.isError || time.isError  || Number(minute) > MAX_MINUTE_VALUE || reminderDate.isError || reminderTime.isError || saleNote.isError ?  (\n                                            <CustomToolTip\n                                                title={\n                                                    <div>\n                                                        <Typography style={{fontWeight: '600', fontSize: 'inherit'}}>\n                                                            {t('str_invalidFields')}\n                                                        </Typography>\n                                                        {\n                                                            date.isError && (\n                                                                <Typography style={{fontSize: 'inherit'}}>{t('str_date')}</Typography>\n                                                            )\n                                                        }\n                                                        {\n                                                            time.isError && (\n                                                                <Typography style={{fontSize: 'inherit'}}>{t('str_time')}</Typography>\n                                                            )\n                                                        }\n                                                        {\n                                                            Number(minute) > MAX_MINUTE_VALUE && (\n                                                                <Typography style={{fontSize: 'inherit'}}>{t('str_minute')}</Typography>\n                                                            )\n                                                        }\n                                                        {\n                                                            reminderDate.isError && (\n                                                                <Typography style={{fontSize: 'inherit'}}>{t('str_dueDate')}</Typography>\n                                                            )\n                                                        }\n                                                        {\n                                                            reminderTime.isError && (\n                                                                <Typography style={{fontSize: 'inherit'}}>{t('str_dueTime')}</Typography>\n                                                            )\n                                                        }\n                                                        {\n                                                            saleNote.isError && (\n                                                                <Typography style={{fontSize: 'inherit'}}>{t('str_note')}</Typography>\n                                                            )\n                                                        }\n                                                    </div>\n                                                }\n                                            >\n                                        <span>\n                                            <Button\n                                                color={'primary'}\n                                                style={{marginLeft: '8px'}}\n                                                variant={'contained'}\n                                                disabled\n                                            >\n                                                {t('str_save')}\n                                            </Button>\n                                        </span>\n                                            </CustomToolTip>\n                                        ) : (\n                                            <Button\n                                                disabled={isSaving}\n                                                style={{marginLeft: '8px'}}\n                                                startIcon={isSaving ? <LoadingSpinner size={24}/> : <CheckIcon />}\n                                                color={'primary'}\n                                                variant={'contained'}\n                                                onClick={handleSave}\n                                            >\n                                                {t('str_save')}\n                                            </Button>\n                                        )\n                                    }\n                                </Grid>\n                            </Grid>\n                        )\n                    }\n                </div>\n            </Dialog>\n            <Grid container>\n                <Grid item xs={12} sm={12} md={1}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={12} sm={6}>\n                            <CustomToolTip title={t('str_refresh')}>\n                                <IconButton\n                                    onClick={() => {\n                                        getSaleCallList();\n                                    }}\n                                >\n                                    <CachedIcon style={{color:\"#F16A4B\"}}/>\n                                </IconButton>\n                            </CustomToolTip>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <CustomToolTip title={t('str_add')}>\n                                <IconButton\n                                    onClick={() => handleOpenDialog()}\n                                >\n                                    <AddIcon/>\n                                </IconButton>\n                            </CustomToolTip>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <div className={classes.table}>\n                        <MaterialTable\n                            tableRef={tableRef}\n                            columns={columns}\n                            data={callList}\n                            isLoading={isLoading}\n                            options={{\n                                headerStyle:{\n                                    cursor: 'default',\n                                    fontWeight:\"bold\",\n                                    fontSize:\"12px\",\n                                    color:\"#A3A6B4\",\n                                    textTransform:\"uppercase\",\n                                    backgroundColor:\"#F5F6FA\",\n                                    whiteSpace: 'nowrap',\n                                    borderLeft: '1px solid #FFF',\n                                },\n                                cellStyle: {\n                                    whiteSpace: 'nowrap',\n                                    borderLeft: '1px solid rgba(224, 224, 224, 1)',\n                                    minWidth: '100px'\n                                },\n                                toolbar:false,\n                                selection:true,\n                                sorting: false\n                            }}\n                            localization={MaterialTableLocalization}\n                            components={{\n                                Header: (props) => {\n                                    const overrideProps = {...props}\n                                    overrideProps.draggable = false\n                                    return(\n                                        <MTableHeader  {...overrideProps}/>\n                                    )\n                                },\n                            }}\n                        />\n                    </div>\n                </Grid>\n            </Grid>\n            <TrackedChangesDialog\n                open={openCheckCancel}\n                onPressNo={(e) => setOpenCheckCancel(e)}\n                onPressYes={(e) => {\n                    setOpenAddDialog(false);\n                    setOpenCheckCancel(e);\n                    setTimeout(() => {\n                        handleReset();\n                    }, 100)\n\n                }}\n            />\n        </div>\n    );\n}\n\nexport default SaleCalls;"]},"metadata":{},"sourceType":"module"}