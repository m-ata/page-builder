{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/emp-portal/tabs/Contacts/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Insert, UseOrest, ViewList, Patch, Delete } from \"@webcms/orest\";\nimport WebCmsGlobal from \"../../../webcms-global\";\nimport { useSelector } from \"react-redux\";\nimport { isErrorMsg, mobileTelNoFormat, OREST_ENDPOINT } from \"../../../../model/orest/constants\";\nimport { Grid, Typography, Dialog, Checkbox, FormControlLabel, Button, Menu, MenuItem, IconButton } from \"@material-ui/core\";\nimport { useSnackbar } from \"notistack\";\nimport MaterialTableGeneric from \"../../../MaterialTableGeneric\";\nimport { SLASH } from \"../../../../model/globals\";\nimport useTranslation from \"../../../../lib/translations/hooks/useTranslation\";\nimport renderFormElements, { ELEMENT_TYPES } from \"../../../render-form-elements\";\nimport { required } from \"../../../../state/utils/form\";\nimport AddDialogActions from \"../../../AddDialogActions\";\nimport { LocaleContext } from \"../../../../lib/translations/context/LocaleContext\";\nimport LoadingSpinner from \"../../../LoadingSpinner\";\nimport { helper } from \"../../../../@webcms-globals\";\nimport TrackedChangesDialog from \"../../../TrackedChangesDialog\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport MaterialTable, { MTableHeader } from \"material-table\";\nimport MaterialTableLocalization from \"../../../MaterialTableLocalization\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport TableColumnText from \"../../../TableColumnText\";\nimport PopupState, { bindMenu, bindTrigger } from \"material-ui-popup-state\";\nimport { CustomToolTip } from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nconst VARIANT = 'outlined';\n\nfunction Contacts(props) {\n  var _contactData$contactt, _contactData$contactt2, _contactData$contactt3, _contactData$contactt4, _contactData$title, _contactData$title2, _contactData$title3, _contactData$title4, _contactData$contactt5, _contactData$contactt6, _contactData$contactt7, _contactData$contactt8, _contactData$contactt9, _contactData$contactt10, _contactData$note, _contactData$note2, _contactData$note3, _contactData$note4, _contactData$contactt11;\n\n  //props\n  const {\n    mid\n  } = props; //snackbar\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); //context\n\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    locale\n  } = useContext(LocaleContext);\n  const {\n    t\n  } = useTranslation();\n  const tableLocalization = MaterialTableLocalization(); //redux state\n\n  const token = useSelector(state => {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  const hotelRefNo = useSelector(state => {\n    var _state$hotelinfo;\n\n    return (state === null || state === void 0 ? void 0 : (_state$hotelinfo = state.hotelinfo) === null || _state$hotelinfo === void 0 ? void 0 : _state$hotelinfo.currentHotelRefNo) || GENERAL_SETTINGS.HOTELREFNO || false;\n  }); //locale state\n\n  const initialState = {\n    contacttypeid: {\n      value: null,\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    tel: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    email: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    mobiletel: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    note: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    isblack: {\n      value: false,\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    title: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    address1: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    country: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    city: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    town: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    zip: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    },\n    district: {\n      value: '',\n      isError: false,\n      isRequired: false,\n      helperText: false\n    }\n  };\n  const {\n    0: isLoadingList,\n    1: setIsLoadingList\n  } = useState(false);\n  const {\n    0: allHotels,\n    1: setAllHotels\n  } = useState(false);\n  const {\n    0: contactList,\n    1: setContactList\n  } = useState([]);\n  const {\n    0: openAddDialog,\n    1: setOpenAddDialog\n  } = useState(false);\n  const {\n    0: selectedContactData,\n    1: setSelectedContactData\n  } = useState(null);\n  const {\n    0: selectedGid,\n    1: setSelectedGid\n  } = useState(false);\n  const {\n    0: getData,\n    1: setGetData\n  } = useState(null);\n  const {\n    0: openTrackedDialog,\n    1: setOpenTrackedDialog\n  } = useState(false);\n  const {\n    0: isDef,\n    1: setIsDef\n  } = useState(false);\n  const {\n    0: isSaving,\n    1: setIsSaving\n  } = useState(false);\n  const {\n    0: contactData,\n    1: setContactData\n  } = useState(initialState);\n  const {\n    0: contactDataBase,\n    1: setContactDataBase\n  } = useState(initialState);\n  const {\n    0: isInitialStateLoad,\n    1: setIsInitialStateLoad\n  } = useState(false);\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false);\n  const formElements = [{\n    type: ELEMENT_TYPES.autoComplete,\n    id: 'contacttypeid',\n    name: 'contacttypeid',\n    value: ((_contactData$contactt = contactData.contacttypeid) === null || _contactData$contactt === void 0 ? void 0 : _contactData$contactt.value) || null,\n    disabled: isSaving,\n    label: t('str_contactType'),\n    variant: VARIANT,\n    required: (_contactData$contactt2 = contactData.contacttypeid) === null || _contactData$contactt2 === void 0 ? void 0 : _contactData$contactt2.isRequired,\n    error: (_contactData$contactt3 = contactData.contacttypeid) === null || _contactData$contactt3 === void 0 ? void 0 : _contactData$contactt3.isError,\n    helperText: (_contactData$contactt4 = contactData.contacttypeid) === null || _contactData$contactt4 === void 0 ? void 0 : _contactData$contactt4.helperText,\n    onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n    onBlur: (e, name) => handleOnBlurFormElements(e, name),\n    onLoad: (initialValue, name) => {\n      const data = _objectSpread({}, contactData);\n\n      data[name].value = initialValue ? initialValue : null;\n      setContactData(data);\n    },\n    endpoint: 'contactype/view/list',\n    params: {\n      text: '',\n      limit: 25,\n      field: 'code'\n    },\n    initialId: isInitialStateLoad && (selectedContactData === null || selectedContactData === void 0 ? void 0 : selectedContactData.contacttypeid) || false,\n    showOptionLabel: 'code',\n    showOption: 'code',\n    searchParam: 'code,description',\n    fullWidth: true,\n    gridProps: {\n      xs: 12,\n      sm: 12\n    }\n  }, {\n    type: ELEMENT_TYPES.textField,\n    id: 'title',\n    name: 'title',\n    value: (_contactData$title = contactData.title) === null || _contactData$title === void 0 ? void 0 : _contactData$title.value,\n    error: (_contactData$title2 = contactData.title) === null || _contactData$title2 === void 0 ? void 0 : _contactData$title2.isError,\n    required: (_contactData$title3 = contactData.title) === null || _contactData$title3 === void 0 ? void 0 : _contactData$title3.isRequired,\n    disabled: isSaving,\n    label: t('str_description'),\n    helperText: (_contactData$title4 = contactData.title) === null || _contactData$title4 === void 0 ? void 0 : _contactData$title4.helperText,\n    onChange: e => handleOnChangeFormElements(e),\n    onBlur: e => handleOnBlurFormElements(e),\n    variant: VARIANT,\n    fullWidth: true,\n    gridProps: {\n      xs: 12\n    }\n  }];\n\n  if ((_contactData$contactt5 = contactData.contacttypeid) !== null && _contactData$contactt5 !== void 0 && (_contactData$contactt6 = _contactData$contactt5.value) !== null && _contactData$contactt6 !== void 0 && _contactData$contactt6.isemail) {\n    var _contactData$email, _contactData$email2, _contactData$email3, _contactData$email4;\n\n    formElements.push({\n      type: ELEMENT_TYPES.textField,\n      id: 'email',\n      name: 'email',\n      value: (_contactData$email = contactData.email) === null || _contactData$email === void 0 ? void 0 : _contactData$email.value,\n      error: (_contactData$email2 = contactData.email) === null || _contactData$email2 === void 0 ? void 0 : _contactData$email2.isError,\n      required: (_contactData$email3 = contactData.email) === null || _contactData$email3 === void 0 ? void 0 : _contactData$email3.isRequired,\n      disabled: isSaving,\n      label: t('str_email'),\n      helperText: (_contactData$email4 = contactData.email) === null || _contactData$email4 === void 0 ? void 0 : _contactData$email4.helperText,\n      onChange: e => handleOnChangeFormElements(e),\n      onBlur: e => handleOnBlurFormElements(e),\n      variant: VARIANT,\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 12\n      }\n    });\n  }\n\n  if ((_contactData$contactt7 = contactData.contacttypeid) !== null && _contactData$contactt7 !== void 0 && (_contactData$contactt8 = _contactData$contactt7.value) !== null && _contactData$contactt8 !== void 0 && _contactData$contactt8.isaddress) {\n    var _contactData$country, _contactData$country2, _contactData$country3, _contactData$country4, _contactData$city, _contactData$city2, _contactData$city3, _contactData$city4, _contactData$town, _contactData$town2, _contactData$town3, _contactData$town4, _contactData$district, _contactData$district2, _contactData$district3, _contactData$district4, _contactData$zip, _contactData$zip2, _contactData$zip3, _contactData$zip4, _contactData$address, _contactData$address2, _contactData$address3, _contactData$address4;\n\n    formElements.push({\n      type: ELEMENT_TYPES.autoComplete,\n      id: 'country',\n      name: 'country',\n      value: ((_contactData$country = contactData.country) === null || _contactData$country === void 0 ? void 0 : _contactData$country.value) || null,\n      disabled: isSaving,\n      label: t('str_country'),\n      variant: VARIANT,\n      required: (_contactData$country2 = contactData.country) === null || _contactData$country2 === void 0 ? void 0 : _contactData$country2.isRequired,\n      error: (_contactData$country3 = contactData.country) === null || _contactData$country3 === void 0 ? void 0 : _contactData$country3.isError,\n      helperText: (_contactData$country4 = contactData.country) === null || _contactData$country4 === void 0 ? void 0 : _contactData$country4.helperText,\n      onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n      onBlur: (e, name) => handleOnBlurFormElements(e, name),\n      onLoad: (initialValue, name) => {\n        const data = _objectSpread({}, contactData);\n\n        data[name].value = initialValue ? initialValue : null;\n        setContactData(data);\n      },\n      endpoint: 'country/view/list',\n      params: {\n        text: '',\n        limit: 25,\n        field: 'code'\n      },\n      initialId: isInitialStateLoad && (selectedContactData === null || selectedContactData === void 0 ? void 0 : selectedContactData.country) || false,\n      showOptionLabel: 'descineng',\n      showOption: 'descineng',\n      searchParam: 'descineng',\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 6\n      }\n    }, {\n      type: ELEMENT_TYPES.autoComplete,\n      id: 'city',\n      name: 'city',\n      value: ((_contactData$city = contactData.city) === null || _contactData$city === void 0 ? void 0 : _contactData$city.value) || null,\n      disabled: isSaving,\n      label: t('str_city'),\n      variant: VARIANT,\n      required: (_contactData$city2 = contactData.city) === null || _contactData$city2 === void 0 ? void 0 : _contactData$city2.isRequired,\n      error: (_contactData$city3 = contactData.city) === null || _contactData$city3 === void 0 ? void 0 : _contactData$city3.isError,\n      helperText: (_contactData$city4 = contactData.city) === null || _contactData$city4 === void 0 ? void 0 : _contactData$city4.helperText,\n      onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n      onBlur: (e, name) => handleOnBlurFormElements(e, name),\n      onLoad: (initialValue, name) => {\n        const data = _objectSpread({}, contactData);\n\n        data[name].value = initialValue ? initialValue : null;\n        setContactData(data);\n      },\n      endpoint: 'city/view/list',\n      params: {\n        text: '',\n        limit: 25,\n        field: 'code'\n      },\n      initialId: isInitialStateLoad && (selectedContactData === null || selectedContactData === void 0 ? void 0 : selectedContactData.city) || false,\n      showOptionLabel: 'description',\n      showOption: 'description',\n      searchParam: 'description',\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 6\n      }\n    }, {\n      type: ELEMENT_TYPES.autoComplete,\n      id: 'town',\n      name: 'town',\n      value: ((_contactData$town = contactData.town) === null || _contactData$town === void 0 ? void 0 : _contactData$town.value) || null,\n      disabled: isSaving,\n      label: t('str_town'),\n      variant: VARIANT,\n      required: (_contactData$town2 = contactData.town) === null || _contactData$town2 === void 0 ? void 0 : _contactData$town2.isRequired,\n      error: (_contactData$town3 = contactData.town) === null || _contactData$town3 === void 0 ? void 0 : _contactData$town3.isError,\n      helperText: (_contactData$town4 = contactData.town) === null || _contactData$town4 === void 0 ? void 0 : _contactData$town4.helperText,\n      onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n      onBlur: (e, name) => handleOnBlurFormElements(e, name),\n      onLoad: (initialValue, name) => {\n        const data = _objectSpread({}, contactData);\n\n        data[name].value = initialValue ? initialValue : null;\n        setContactData(data);\n      },\n      endpoint: 'town/view/list',\n      params: {\n        text: '',\n        limit: 25,\n        field: 'code'\n      },\n      initialId: isInitialStateLoad && (selectedContactData === null || selectedContactData === void 0 ? void 0 : selectedContactData.town) || false,\n      showOptionLabel: 'description',\n      showOption: 'description',\n      searchParam: 'description',\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 6\n      }\n    }, {\n      type: ELEMENT_TYPES.autoComplete,\n      id: 'district',\n      name: 'district',\n      value: ((_contactData$district = contactData.district) === null || _contactData$district === void 0 ? void 0 : _contactData$district.value) || null,\n      disabled: isSaving,\n      label: t('str_district'),\n      variant: VARIANT,\n      required: (_contactData$district2 = contactData.district) === null || _contactData$district2 === void 0 ? void 0 : _contactData$district2.isRequired,\n      error: (_contactData$district3 = contactData.district) === null || _contactData$district3 === void 0 ? void 0 : _contactData$district3.isError,\n      helperText: (_contactData$district4 = contactData.district) === null || _contactData$district4 === void 0 ? void 0 : _contactData$district4.helperText,\n      onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n      onBlur: (e, name) => handleOnBlurFormElements(e, name),\n      onLoad: (initialValue, name) => {\n        const data = _objectSpread({}, contactData);\n\n        data[name].value = initialValue ? initialValue : null;\n        setContactData(data);\n      },\n      endpoint: 'district/view/list',\n      params: {\n        text: '',\n        limit: 25,\n        field: 'code'\n      },\n      initialId: isInitialStateLoad && (selectedContactData === null || selectedContactData === void 0 ? void 0 : selectedContactData.district) || false,\n      showOptionLabel: 'description',\n      showOption: 'description',\n      searchParam: 'description',\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 6\n      }\n    }, {\n      type: ELEMENT_TYPES.textField,\n      id: 'zip',\n      name: 'zip',\n      value: (_contactData$zip = contactData.zip) === null || _contactData$zip === void 0 ? void 0 : _contactData$zip.value,\n      error: (_contactData$zip2 = contactData.zip) === null || _contactData$zip2 === void 0 ? void 0 : _contactData$zip2.isError,\n      required: (_contactData$zip3 = contactData.zip) === null || _contactData$zip3 === void 0 ? void 0 : _contactData$zip3.isRequired,\n      disabled: isSaving,\n      label: t('str_zip'),\n      helperText: (_contactData$zip4 = contactData.zip) === null || _contactData$zip4 === void 0 ? void 0 : _contactData$zip4.helperText,\n      onChange: e => handleOnChangeFormElements(e),\n      onBlur: e => handleOnBlurFormElements(e),\n      variant: VARIANT,\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 6\n      }\n    }, {\n      type: ELEMENT_TYPES.textField,\n      id: 'address1',\n      name: 'address1',\n      value: (_contactData$address = contactData.address1) === null || _contactData$address === void 0 ? void 0 : _contactData$address.value,\n      error: (_contactData$address2 = contactData.address1) === null || _contactData$address2 === void 0 ? void 0 : _contactData$address2.isError,\n      required: (_contactData$address3 = contactData.address1) === null || _contactData$address3 === void 0 ? void 0 : _contactData$address3.isRequired,\n      disabled: isSaving,\n      label: t('str_address'),\n      helperText: (_contactData$address4 = contactData.address1) === null || _contactData$address4 === void 0 ? void 0 : _contactData$address4.helperText,\n      onChange: e => handleOnChangeFormElements(e),\n      onBlur: e => handleOnBlurFormElements(e),\n      variant: VARIANT,\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 12\n      }\n    });\n  }\n\n  if ((_contactData$contactt9 = contactData.contacttypeid) !== null && _contactData$contactt9 !== void 0 && (_contactData$contactt10 = _contactData$contactt9.value) !== null && _contactData$contactt10 !== void 0 && _contactData$contactt10.istel) {\n    var _contactData$mobilete, _contactData$tel;\n\n    formElements.push({\n      type: ELEMENT_TYPES.phoneInput,\n      id: 'mobiletel',\n      name: 'mobiletel',\n      value: (_contactData$mobilete = contactData.mobiletel) === null || _contactData$mobilete === void 0 ? void 0 : _contactData$mobilete.value,\n      required: contactData.mobiletel.isRequired,\n      disabled: isSaving,\n      error: contactData.mobiletel.isError,\n      label: t('str_mobile'),\n      helperText: contactData.mobiletel.helperText,\n      onChange: (e, name) => handleOnChangeFormElements(e, name),\n      onBlur: (e, name) => handleOnBlurFormElements(e, name),\n      defaultCountry: locale === 'en' ? 'us' : locale,\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 6\n      }\n    }, {\n      type: ELEMENT_TYPES.phoneInput,\n      id: 'tel',\n      name: 'tel',\n      value: (_contactData$tel = contactData.tel) === null || _contactData$tel === void 0 ? void 0 : _contactData$tel.value,\n      required: contactData.tel.isRequired,\n      disabled: isSaving,\n      error: contactData.tel.isError,\n      label: t('str_tel'),\n      helperText: contactData.tel.helperText,\n      onChange: (e, name) => handleOnChangeFormElements(e, name),\n      onBlur: (e, name) => handleOnBlurFormElements(e, name),\n      defaultCountry: locale === 'en' ? 'us' : locale,\n      fullWidth: true,\n      gridProps: {\n        xs: 12,\n        sm: 6\n      }\n    });\n  }\n\n  const formElementsNote = [{\n    type: ELEMENT_TYPES.textField,\n    id: 'note',\n    name: 'note',\n    value: (_contactData$note = contactData.note) === null || _contactData$note === void 0 ? void 0 : _contactData$note.value,\n    error: (_contactData$note2 = contactData.note) === null || _contactData$note2 === void 0 ? void 0 : _contactData$note2.isError,\n    required: (_contactData$note3 = contactData.note) === null || _contactData$note3 === void 0 ? void 0 : _contactData$note3.isRequired,\n    disabled: isSaving,\n    label: t('str_note'),\n    helperText: (_contactData$note4 = contactData.note) === null || _contactData$note4 === void 0 ? void 0 : _contactData$note4.helperText,\n    onChange: e => handleOnChangeFormElements(e),\n    onBlur: e => handleOnBlurFormElements(e),\n    variant: VARIANT,\n    multiLine: true,\n    rows: 4,\n    rowsMax: 4,\n    fullWidth: true,\n    gridProps: {\n      xs: 12\n    }\n  }];\n  const contactColumns = [{\n    title: __jsx(Button, {\n      style: {\n        padding: 0,\n        maxWidth: 25,\n        minWidth: 25\n      },\n      disabled: true,\n      color: 'primary',\n      variant: 'text',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }\n    }, __jsx(MoreVertIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 21\n      }\n    })),\n    render: props => __jsx(TableColumnText, {\n      minWidth: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 17\n      }\n    }, __jsx(PopupState, {\n      variant: \"popover\",\n      popupId: \"material-table-action-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 21\n      }\n    }, popupState => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 29\n      }\n    }, __jsx(Button, _extends({\n      style: {\n        padding: 0,\n        maxWidth: 25,\n        minWidth: 25\n      },\n      color: 'primary',\n      variant: 'contained'\n    }, bindTrigger(popupState), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 33\n      }\n    }), __jsx(MoreVertIcon, {\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 37\n      }\n    })), __jsx(Menu, _extends({\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"left\"\n      },\n      transformOrigin: {\n        vertical: \"top\",\n        horizontal: \"left\"\n      },\n      getContentAnchorEl: null\n    }, bindMenu(popupState), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 33\n      }\n    }), __jsx(MenuItem, {\n      onClick: () => {\n        setSelectedContactData(props);\n        setSelectedGid((props === null || props === void 0 ? void 0 : props.gid) || false);\n        handleOpenAddDialog(props);\n        popupState.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 37\n      }\n    }, __jsx(EditOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 42\n      }\n    }), __jsx(Typography, {\n      style: {\n        paddingLeft: '8px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 41\n      }\n    }, t('str_edit'))), __jsx(MenuItem, {\n      onClick: () => handleDeleteItem(props.gid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 37\n      }\n    }, __jsx(DeleteIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 41\n      }\n    }), __jsx(Typography, {\n      style: {\n        paddingLeft: '8px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 41\n      }\n    }, t('str_delete')))))))\n  }, {\n    title: t('str_fullName'),\n    field: 'fullname',\n    render: props => __jsx(TableColumnText, {\n      minWidth: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.fullname)\n  }, {\n    title: t('str_tel'),\n    field: 'tel',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.tel)\n  }, {\n    title: t('str_mobile'),\n    field: 'mobiletel',\n    render: props => __jsx(TableColumnText, {\n      minWidth: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.mobiletel)\n  }, {\n    title: t('str_email'),\n    field: 'email',\n    render: props => __jsx(TableColumnText, {\n      minWidth: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.email)\n  }, {\n    title: t('str_address'),\n    field: 'address1',\n    render: props => __jsx(TableColumnText, {\n      minWidth: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.address1)\n  }, {\n    title: t('str_description'),\n    field: 'description',\n    render: props => __jsx(TableColumnText, {\n      minWidth: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.title)\n  }, {\n    title: t('str_note'),\n    field: 'note',\n    render: props => __jsx(TableColumnText, {\n      minWidth: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.note)\n  }, {\n    title: t('str_country'),\n    field: 'country',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.country)\n  }, {\n    title: t('str_city'),\n    field: 'city',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.city)\n  }, {\n    title: t('str_town'),\n    field: 'town',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.town)\n  }, {\n    title: t('str_district'),\n    field: 'district',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.district)\n  }, {\n    title: t('str_zip'),\n    field: 'zip',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.zip)\n  }, {\n    title: t('str_contactType'),\n    field: 'contacttypecode',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.contacttypecode)\n  }, {\n    title: t('str_masterCode'),\n    field: 'mastercode',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.mastercode)\n  }, {\n    title: t('str_accId'),\n    field: 'accid',\n    headerStyle: {\n      textAlign: 'right'\n    },\n    render: props => __jsx(TableColumnText, {\n      textAlign: 'right',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.accid)\n  }, {\n    title: t('str_empId'),\n    field: 'empid',\n    headerStyle: {\n      textAlign: 'right'\n    },\n    render: props => __jsx(TableColumnText, {\n      textAlign: 'right',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.empid)\n  }, {\n    title: t('str_id'),\n    field: 'id',\n    headerStyle: {\n      textAlign: 'right'\n    },\n    render: props => __jsx(TableColumnText, {\n      textAlign: 'right',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.id)\n  }];\n  useEffect(() => {\n    if (token && mid) {\n      getContactList();\n    }\n  }, []);\n  useEffect(() => {\n    let isEffect = true;\n\n    if (isEffect && contactData && getData) {\n      const newClientInitialState = helper.objectMapper(contactData, getData, ['contacttypeid']);\n      setContactData(newClientInitialState);\n      setContactDataBase(newClientInitialState);\n      setIsInitialStateLoad(true);\n    }\n\n    return () => {\n      isEffect = false;\n    };\n  }, [getData]);\n\n  const handleDeleteItem = gid => {\n    setIsDeleting(true);\n    Delete({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.CONTACT,\n      token,\n      gid: gid,\n      params: {\n        hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        getContactList();\n      } else {\n        var _error$errorMsg, _error$errorMsg2;\n\n        const error = isErrorMsg(res);\n        enqueueSnackbar(((_error$errorMsg = error.errorMsg) === null || _error$errorMsg === void 0 ? void 0 : _error$errorMsg.length) > 50 ? (_error$errorMsg2 = error.errorMsg) === null || _error$errorMsg2 === void 0 ? void 0 : _error$errorMsg2.substring(0, 50) : error.errorMsg, {\n          variant: 'error'\n        });\n        setIsDeleting(false);\n      }\n    });\n  };\n\n  const getContactList = () => {\n    setIsLoadingList(true);\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.CONTACT,\n      token,\n      params: {\n        query: `masterid:${mid}`,\n        allhotels: allHotels,\n        hotelrefno: hotelRefNo\n      }\n    }).then(res => {\n      setIsLoadingList(false);\n\n      if (res.status === 200) {\n        if (res.data.count > 0) {\n          setContactList(res.data.data);\n        }\n      } else {\n        var _error$errorMsg3, _error$errorMsg4;\n\n        const error = isErrorMsg(res);\n        enqueueSnackbar(((_error$errorMsg3 = error.errorMsg) === null || _error$errorMsg3 === void 0 ? void 0 : _error$errorMsg3.length) > 50 ? (_error$errorMsg4 = error.errorMsg) === null || _error$errorMsg4 === void 0 ? void 0 : _error$errorMsg4.substring(0, 50) : error.errorMsg, {\n          variant: 'error'\n        });\n      }\n    });\n  };\n\n  const handleGetSelectedContact = selectedContact => {\n    if (selectedContact) {\n      setIsDef(true);\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.CONTACT + SLASH + OREST_ENDPOINT.VIEW + SLASH + 'get' + SLASH + selectedContact.gid,\n        token\n      }).then(res => {\n        setIsDef(false);\n\n        if (res.status === 200 && res.data.data) {\n          const data = res.data.data;\n          setGetData(data);\n        }\n      });\n    }\n  };\n\n  const handleDefRecord = () => {\n    setIsDef(true);\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.CONTACT + SLASH + OREST_ENDPOINT.DEF,\n      token,\n      params: {\n        hotelrefno: hotelRefNo\n      }\n    }).then(res => {\n      if (res.status === 200 && res.data.count > 0) {\n        const data = Object.assign({}, res.data.data, contactData);\n        setContactData(data);\n        setContactDataBase(data);\n      }\n\n      setIsDef(false);\n    });\n  };\n\n  const handleSave = () => {\n    const data = _objectSpread({}, contactData);\n\n    Object.keys(initialState).map(key => {\n      if (key === 'mobiletel' || key === 'tel') {\n        data[key] = mobileTelNoFormat(data[key].value);\n      } else {\n        data[key] = typeof data[key].value === 'object' ? data[key].value ? data[key].value.id : null : data[key].value;\n      }\n    });\n\n    if (mid) {\n      setIsSaving(true);\n\n      if (selectedGid) {\n        Patch({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.CONTACT,\n          gid: selectedGid,\n          data: data,\n          token\n        }).then(res => {\n          if (res.status === 200) {\n            enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n              variant: 'success'\n            });\n            setOpenAddDialog(false);\n            getContactList();\n            handleReset();\n          } else {\n            const error = isErrorMsg(res);\n            enqueueSnackbar(error.errorMsg, {\n              variant: 'error'\n            });\n          }\n\n          setIsSaving(false);\n        });\n      } else {\n        data.masterid = mid;\n        data.hotelrefno = hotelRefNo;\n        Insert({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.CONTACT,\n          token,\n          data: data\n        }).then(res => {\n          if (res.status === 200) {\n            enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n              variant: 'success'\n            });\n            setOpenAddDialog(false);\n            getContactList();\n            handleReset();\n          } else {\n            const error = isErrorMsg(res);\n            enqueueSnackbar(error.errorMsg, {\n              variant: 'error'\n            });\n          }\n\n          setIsSaving(false);\n        });\n      }\n    }\n  };\n\n  const handleOnChangeFormElements = (event, key, isOnBlur) => {\n    const name = key ? key : event.target.name;\n    const value = event !== null && event !== void 0 && event.target ? event.target.value : event;\n\n    if (isOnBlur) {\n      var _contactData$name, _contactData$name2;\n\n      setContactData(_objectSpread(_objectSpread({}, contactData), {}, {\n        [name]: _objectSpread(_objectSpread({}, contactData[name]), {}, {\n          isError: ((_contactData$name = contactData[name]) === null || _contactData$name === void 0 ? void 0 : _contactData$name.isRequired) && !!required(value),\n          helperText: ((_contactData$name2 = contactData[name]) === null || _contactData$name2 === void 0 ? void 0 : _contactData$name2.isRequired) && !!required(value) && t('str_mandatory')\n        })\n      }));\n    } else {\n      var _contactData$name3, _contactData$name4;\n\n      setContactData(_objectSpread(_objectSpread({}, contactData), {}, {\n        [name]: _objectSpread(_objectSpread({}, contactData[name]), {}, {\n          value: value,\n          isError: ((_contactData$name3 = contactData[name]) === null || _contactData$name3 === void 0 ? void 0 : _contactData$name3.isRequired) && !!required(value),\n          helperText: ((_contactData$name4 = contactData[name]) === null || _contactData$name4 === void 0 ? void 0 : _contactData$name4.isRequired) && !!required(value) && t('str_mandatory')\n        })\n      }));\n    }\n  };\n\n  const handleOnBlurFormElements = (event, key) => {\n    handleOnChangeFormElements(event, key, true);\n  };\n\n  const handleOpenAddDialog = (selectedContact = false) => {\n    if (selectedContact) {\n      handleGetSelectedContact(selectedContact);\n    } else {\n      handleDefRecord();\n    }\n\n    setOpenAddDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    if (JSON.stringify(contactData) !== JSON.stringify(contactDataBase)) {\n      setOpenTrackedDialog(true);\n    } else {\n      setOpenAddDialog(false);\n      handleReset();\n    }\n  };\n\n  const handleReset = () => {\n    setTimeout(() => {\n      setIsInitialStateLoad(false);\n      setGetData(null);\n      setContactData(initialState);\n      setContactDataBase(initialState);\n      setSelectedContactData(null);\n    }, 100);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 730,\n      columnNumber: 9\n    }\n  }, __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 732,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 29\n    }\n  }, __jsx(CustomToolTip, {\n    title: t('str_refresh'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 33\n    }\n  }, __jsx(IconButton, {\n    onClick: () => getContactList(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 37\n    }\n  }, __jsx(CachedIcon, {\n    style: {\n      color: \"#F16A4B\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 41\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 29\n    }\n  }, __jsx(CustomToolTip, {\n    title: t('str_add'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 33\n    }\n  }, __jsx(IconButton, {\n    onClick: () => handleOpenAddDialog(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 746,\n      columnNumber: 37\n    }\n  }, __jsx(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 41\n    }\n  })))))), __jsx(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 21\n    }\n  }), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 21\n    }\n  }, __jsx(MaterialTable, {\n    isLoading: isLoadingList,\n    columns: contactColumns,\n    data: contactList,\n    localization: tableLocalization,\n    options: {\n      headerStyle: {\n        cursor: 'default',\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        color: \"#A3A6B4\",\n        textTransform: \"uppercase\",\n        backgroundColor: \"#F5F6FA\",\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid #FFF'\n      },\n      cellStyle: {\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid rgba(224, 224, 224, 1)',\n        fontSize: '13px'\n      },\n      toolbar: false,\n      selection: false,\n      sorting: false,\n      search: false,\n      actionsColumnIndex: 1,\n      selectionColumnIndex: 1\n    },\n    components: {\n      Header: props => {\n        const overrideProps = _objectSpread({}, props);\n\n        overrideProps.draggable = false;\n        return __jsx(MTableHeader, _extends({}, overrideProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 41\n          }\n        }));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 758,\n      columnNumber: 25\n    }\n  }))), __jsx(Dialog, {\n    open: openAddDialog,\n    maxWidth: 'sm',\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    style: {\n      fontWeight: '600',\n      fontSize: '18px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 802,\n      columnNumber: 33\n    }\n  }, selectedContactData ? t('str_editContact') : t('str_addContact'))), isDef ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 37\n    }\n  }, __jsx(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 41\n    }\n  })) : __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 813,\n      columnNumber: 37\n    }\n  }, formElements.map((item, index) => __jsx(Grid, _extends({\n    key: index,\n    item: true\n  }, item.gridProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 816,\n      columnNumber: 49\n    }\n  }), renderFormElements(item))), formElementsNote.map((item, index) => __jsx(Grid, _extends({\n    key: index,\n    item: true\n  }, item.gridProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 49\n    }\n  }), renderFormElements(item))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 828,\n      columnNumber: 41\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: contactData.isblack.value,\n      onChange: e => {\n        setContactData(_objectSpread(_objectSpread({}, contactData), {}, {\n          ['isblack']: _objectSpread(_objectSpread({}, contactData['isblack']), {}, {\n            value: e.target.checked\n          })\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 53\n      }\n    }),\n    label: t('str_blacklist'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 829,\n      columnNumber: 45\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 41\n    }\n  }, __jsx(AddDialogActions, {\n    disabled: isSaving,\n    loading: isSaving,\n    disabledSave: !contactData.contacttypeid.value || ((_contactData$contactt11 = contactData.contacttypeid.value) === null || _contactData$contactt11 === void 0 ? void 0 : _contactData$contactt11.length) <= 0,\n    toolTipTitle: __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 53\n      }\n    }, __jsx(Typography, {\n      style: {\n        fontWeight: '600',\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 57\n      }\n    }, t('str_invalidFields')), contactData.contacttypeid.isError || required(contactData.contacttypeid.value) && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 65\n      }\n    }, t('str_contactType'))),\n    onCancelClick: handleCloseDialog,\n    onSaveClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 848,\n      columnNumber: 45\n    }\n  })))))), __jsx(TrackedChangesDialog, {\n    open: openTrackedDialog,\n    onPressNo: e => {\n      setOpenTrackedDialog(e);\n    },\n    onPressYes: e => {\n      setOpenTrackedDialog(e);\n      setOpenAddDialog(false);\n      handleReset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default Contacts;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/emp-portal/tabs/Contacts/index.js"],"names":["React","useState","useEffect","useContext","Insert","UseOrest","ViewList","Patch","Delete","WebCmsGlobal","useSelector","isErrorMsg","mobileTelNoFormat","OREST_ENDPOINT","Grid","Typography","Dialog","Checkbox","FormControlLabel","Button","Menu","MenuItem","IconButton","useSnackbar","MaterialTableGeneric","SLASH","useTranslation","renderFormElements","ELEMENT_TYPES","required","AddDialogActions","LocaleContext","LoadingSpinner","helper","TrackedChangesDialog","EditOutlinedIcon","MaterialTable","MTableHeader","MaterialTableLocalization","MoreVertIcon","TableColumnText","PopupState","bindMenu","bindTrigger","CustomToolTip","CachedIcon","AddIcon","DeleteIcon","VARIANT","Contacts","props","mid","enqueueSnackbar","GENERAL_SETTINGS","locale","t","tableLocalization","token","state","orest","currentUser","auth","access_token","hotelRefNo","hotelinfo","currentHotelRefNo","HOTELREFNO","initialState","contacttypeid","value","isError","isRequired","helperText","tel","email","mobiletel","note","isblack","title","address1","country","city","town","zip","district","isLoadingList","setIsLoadingList","allHotels","setAllHotels","contactList","setContactList","openAddDialog","setOpenAddDialog","selectedContactData","setSelectedContactData","selectedGid","setSelectedGid","getData","setGetData","openTrackedDialog","setOpenTrackedDialog","isDef","setIsDef","isSaving","setIsSaving","contactData","setContactData","contactDataBase","setContactDataBase","isInitialStateLoad","setIsInitialStateLoad","isDeleting","setIsDeleting","formElements","type","autoComplete","id","name","disabled","label","variant","error","onChange","newValue","handleOnChangeFormElements","onBlur","e","handleOnBlurFormElements","onLoad","initialValue","data","endpoint","params","text","limit","field","initialId","showOptionLabel","showOption","searchParam","fullWidth","gridProps","xs","sm","textField","isemail","push","isaddress","istel","phoneInput","defaultCountry","formElementsNote","multiLine","rows","rowsMax","contactColumns","padding","maxWidth","minWidth","render","popupState","vertical","horizontal","gid","handleOpenAddDialog","close","paddingLeft","handleDeleteItem","fullname","contacttypecode","mastercode","headerStyle","textAlign","accid","empid","getContactList","isEffect","newClientInitialState","objectMapper","apiUrl","OREST_URL","CONTACT","hotelrefno","then","res","status","errorMsg","length","substring","query","allhotels","count","handleGetSelectedContact","selectedContact","VIEW","handleDefRecord","DEF","Object","assign","handleSave","keys","map","key","handleReset","masterid","event","isOnBlur","target","handleCloseDialog","JSON","stringify","setTimeout","color","cursor","fontWeight","fontSize","textTransform","backgroundColor","whiteSpace","borderLeft","cellStyle","toolbar","selection","sorting","search","actionsColumnIndex","selectionColumnIndex","Header","overrideProps","draggable","item","index","checked"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\nimport {Insert, UseOrest, ViewList, Patch, Delete} from \"@webcms/orest\";\nimport WebCmsGlobal from \"../../../webcms-global\";\nimport {useSelector} from \"react-redux\";\nimport {isErrorMsg, mobileTelNoFormat, OREST_ENDPOINT} from \"../../../../model/orest/constants\";\nimport {\n    Grid,\n    Typography,\n    Dialog,\n    Checkbox, FormControlLabel, Button, Menu, MenuItem, IconButton\n} from \"@material-ui/core\";\nimport {useSnackbar} from \"notistack\";\nimport MaterialTableGeneric from \"../../../MaterialTableGeneric\";\nimport {SLASH} from \"../../../../model/globals\";\nimport useTranslation from \"../../../../lib/translations/hooks/useTranslation\";\nimport renderFormElements, {ELEMENT_TYPES} from \"../../../render-form-elements\";\nimport {required} from \"../../../../state/utils/form\";\nimport AddDialogActions from \"../../../AddDialogActions\";\nimport {LocaleContext} from \"../../../../lib/translations/context/LocaleContext\";\nimport LoadingSpinner from \"../../../LoadingSpinner\";\nimport {helper} from \"../../../../@webcms-globals\";\nimport TrackedChangesDialog from \"../../../TrackedChangesDialog\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport MaterialTable, {MTableHeader} from \"material-table\";\nimport MaterialTableLocalization from \"../../../MaterialTableLocalization\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport TableColumnText from \"../../../TableColumnText\";\nimport PopupState, {bindMenu, bindTrigger} from \"material-ui-popup-state\";\nimport {CustomToolTip} from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\n\nconst VARIANT = 'outlined'\n\nfunction Contacts(props) {\n\n    //props\n    const {mid} = props\n\n    //snackbar\n    const {enqueueSnackbar} = useSnackbar();\n\n    //context\n    const {GENERAL_SETTINGS} = useContext(WebCmsGlobal)\n    const {locale} = useContext(LocaleContext)\n    const {t} = useTranslation()\n\n    const tableLocalization = MaterialTableLocalization();\n\n    //redux state\n    const token = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n    const hotelRefNo = useSelector((state) => state?.hotelinfo?.currentHotelRefNo || GENERAL_SETTINGS.HOTELREFNO || false)\n\n    //locale state\n    const initialState = {\n        contacttypeid: {value: null, isError: false, isRequired: false, helperText: false},\n        tel: {value: '', isError: false, isRequired: false, helperText: false},\n        email: {value: '', isError: false, isRequired: false, helperText: false},\n        mobiletel: {value: '', isError: false, isRequired: false, helperText: false},\n        note: {value: '', isError: false, isRequired: false, helperText: false},\n        isblack: {value: false, isError: false, isRequired: false, helperText: false},\n        title: {value: '', isError: false, isRequired: false, helperText: false},\n        address1: {value: '', isError: false, isRequired: false, helperText: false},\n        country: {value: '', isError: false, isRequired: false, helperText: false},\n        city: {value: '', isError: false, isRequired: false, helperText: false},\n        town: {value: '', isError: false, isRequired: false, helperText: false},\n        zip: {value: '', isError: false, isRequired: false, helperText: false},\n        district: {value: '', isError: false, isRequired: false, helperText: false},\n    }\n\n    const [isLoadingList, setIsLoadingList] = useState(false)\n    const [allHotels, setAllHotels] = useState(false)\n    const [contactList, setContactList] = useState([])\n    const [openAddDialog, setOpenAddDialog] = useState(false);\n    const [selectedContactData, setSelectedContactData] = useState(null)\n    const [selectedGid, setSelectedGid] = useState(false)\n    const [getData, setGetData] = useState(null)\n    const [openTrackedDialog, setOpenTrackedDialog] = useState(false);\n    const [isDef, setIsDef] = useState(false)\n    const [isSaving, setIsSaving] = useState(false)\n    const [contactData, setContactData] = useState(initialState)\n    const [contactDataBase, setContactDataBase] = useState(initialState)\n    const [isInitialStateLoad, setIsInitialStateLoad] = useState(false)\n    const [isDeleting, setIsDeleting] = useState(false)\n\n    const formElements = [\n        {\n            type: ELEMENT_TYPES.autoComplete,\n            id: 'contacttypeid',\n            name: 'contacttypeid',\n            value: contactData.contacttypeid?.value || null,\n            disabled: isSaving,\n            label: t('str_contactType'),\n            variant: VARIANT,\n            required: contactData.contacttypeid?.isRequired,\n            error: contactData.contacttypeid?.isError,\n            helperText: contactData.contacttypeid?.helperText,\n            onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n            onBlur: (e, name) => handleOnBlurFormElements(e, name),\n            onLoad: (initialValue, name) => {\n                const data = {...contactData}\n                data[name].value = initialValue ? initialValue : null\n                setContactData(data)\n            },\n            endpoint: 'contactype/view/list',\n            params: {text: '', limit: 25, field: 'code'},\n            initialId: isInitialStateLoad && selectedContactData?.contacttypeid || false,\n            showOptionLabel: 'code',\n            showOption: 'code',\n            searchParam: 'code,description',\n            fullWidth: true,\n            gridProps: {xs: 12, sm: 12}\n        },\n        {\n            type: ELEMENT_TYPES.textField,\n            id: 'title',\n            name: 'title',\n            value: contactData.title?.value,\n            error: contactData.title?.isError,\n            required: contactData.title?.isRequired,\n            disabled: isSaving,\n            label: t('str_description'),\n            helperText: contactData.title?.helperText,\n            onChange: (e) => handleOnChangeFormElements(e),\n            onBlur: (e) => handleOnBlurFormElements(e),\n            variant: VARIANT,\n            fullWidth: true,\n            gridProps: {xs: 12}\n        }\n    ]\n\n    if (contactData.contacttypeid?.value?.isemail) {\n        formElements.push({\n            type: ELEMENT_TYPES.textField,\n            id: 'email',\n            name: 'email',\n            value: contactData.email?.value,\n            error: contactData.email?.isError,\n            required: contactData.email?.isRequired,\n            disabled: isSaving,\n            label: t('str_email'),\n            helperText: contactData.email?.helperText,\n            onChange: (e) => handleOnChangeFormElements(e),\n            onBlur: (e) => handleOnBlurFormElements(e),\n            variant: VARIANT,\n            fullWidth: true,\n            gridProps: {xs: 12, sm: 12}\n        })\n    }\n\n    if (contactData.contacttypeid?.value?.isaddress) {\n        formElements.push(\n            {\n                type: ELEMENT_TYPES.autoComplete,\n                id: 'country',\n                name: 'country',\n                value: contactData.country?.value || null,\n                disabled: isSaving,\n                label: t('str_country'),\n                variant: VARIANT,\n                required: contactData.country?.isRequired,\n                error: contactData.country?.isError,\n                helperText: contactData.country?.helperText,\n                onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n                onBlur: (e, name) => handleOnBlurFormElements(e, name),\n                onLoad: (initialValue, name) => {\n                    const data = {...contactData}\n                    data[name].value = initialValue ? initialValue : null\n                    setContactData(data)\n                },\n                endpoint: 'country/view/list',\n                params: {text: '', limit: 25, field: 'code'},\n                initialId: isInitialStateLoad && selectedContactData?.country || false,\n                showOptionLabel: 'descineng',\n                showOption: 'descineng',\n                searchParam: 'descineng',\n                fullWidth: true,\n                gridProps: {xs: 12, sm: 6}\n            },\n            {\n                type: ELEMENT_TYPES.autoComplete,\n                id: 'city',\n                name: 'city',\n                value: contactData.city?.value || null,\n                disabled: isSaving,\n                label: t('str_city'),\n                variant: VARIANT,\n                required: contactData.city?.isRequired,\n                error: contactData.city?.isError,\n                helperText: contactData.city?.helperText,\n                onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n                onBlur: (e, name) => handleOnBlurFormElements(e, name),\n                onLoad: (initialValue, name) => {\n                    const data = {...contactData}\n                    data[name].value = initialValue ? initialValue : null\n                    setContactData(data)\n                },\n                endpoint: 'city/view/list',\n                params: {text: '', limit: 25, field: 'code'},\n                initialId: isInitialStateLoad && selectedContactData?.city || false,\n                showOptionLabel: 'description',\n                showOption: 'description',\n                searchParam: 'description',\n                fullWidth: true,\n                gridProps: {xs: 12, sm: 6}\n            },\n            {\n                type: ELEMENT_TYPES.autoComplete,\n                id: 'town',\n                name: 'town',\n                value: contactData.town?.value || null,\n                disabled: isSaving,\n                label: t('str_town'),\n                variant: VARIANT,\n                required: contactData.town?.isRequired,\n                error: contactData.town?.isError,\n                helperText: contactData.town?.helperText,\n                onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n                onBlur: (e, name) => handleOnBlurFormElements(e, name),\n                onLoad: (initialValue, name) => {\n                    const data = {...contactData}\n                    data[name].value = initialValue ? initialValue : null\n                    setContactData(data)\n                },\n                endpoint: 'town/view/list',\n                params: {text: '', limit: 25, field: 'code'},\n                initialId: isInitialStateLoad && selectedContactData?.town || false,\n                showOptionLabel: 'description',\n                showOption: 'description',\n                searchParam: 'description',\n                fullWidth: true,\n                gridProps: {xs: 12, sm: 6}\n            },\n            {\n                type: ELEMENT_TYPES.autoComplete,\n                id: 'district',\n                name: 'district',\n                value: contactData.district?.value || null,\n                disabled: isSaving,\n                label: t('str_district'),\n                variant: VARIANT,\n                required: contactData.district?.isRequired,\n                error: contactData.district?.isError,\n                helperText: contactData.district?.helperText,\n                onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n                onBlur: (e, name) => handleOnBlurFormElements(e, name),\n                onLoad: (initialValue, name) => {\n                    const data = {...contactData}\n                    data[name].value = initialValue ? initialValue : null\n                    setContactData(data)\n                },\n                endpoint: 'district/view/list',\n                params: {text: '', limit: 25, field: 'code'},\n                initialId: isInitialStateLoad && selectedContactData?.district || false,\n                showOptionLabel: 'description',\n                showOption: 'description',\n                searchParam: 'description',\n                fullWidth: true,\n                gridProps: {xs: 12, sm: 6}\n            },\n            {\n                type: ELEMENT_TYPES.textField,\n                id: 'zip',\n                name: 'zip',\n                value: contactData.zip?.value,\n                error: contactData.zip?.isError,\n                required: contactData.zip?.isRequired,\n                disabled: isSaving,\n                label: t('str_zip'),\n                helperText: contactData.zip?.helperText,\n                onChange: (e) => handleOnChangeFormElements(e),\n                onBlur: (e) => handleOnBlurFormElements(e),\n                variant: VARIANT,\n                fullWidth: true,\n                gridProps: {xs: 12, sm: 6}\n            },\n            {\n                type: ELEMENT_TYPES.textField,\n                id: 'address1',\n                name: 'address1',\n                value: contactData.address1?.value,\n                error: contactData.address1?.isError,\n                required: contactData.address1?.isRequired,\n                disabled: isSaving,\n                label: t('str_address'),\n                helperText: contactData.address1?.helperText,\n                onChange: (e) => handleOnChangeFormElements(e),\n                onBlur: (e) => handleOnBlurFormElements(e),\n                variant: VARIANT,\n                fullWidth: true,\n                gridProps: {xs: 12, sm: 12}\n            }\n        )\n    }\n\n    if (contactData.contacttypeid?.value?.istel) {\n        formElements.push(\n            {\n                type: ELEMENT_TYPES.phoneInput,\n                id: 'mobiletel',\n                name: 'mobiletel',\n                value: contactData.mobiletel?.value,\n                required: contactData.mobiletel.isRequired,\n                disabled: isSaving,\n                error: contactData.mobiletel.isError,\n                label: t('str_mobile'),\n                helperText: contactData.mobiletel.helperText,\n                onChange: (e, name) => handleOnChangeFormElements(e, name),\n                onBlur: (e, name) => handleOnBlurFormElements(e, name),\n                defaultCountry: locale === 'en' ? 'us' : locale,\n                fullWidth: true,\n                gridProps: {xs: 12, sm: 6}\n            },\n            {\n                type: ELEMENT_TYPES.phoneInput,\n                id: 'tel',\n                name: 'tel',\n                value: contactData.tel?.value,\n                required: contactData.tel.isRequired,\n                disabled: isSaving,\n                error: contactData.tel.isError,\n                label: t('str_tel'),\n                helperText: contactData.tel.helperText,\n                onChange: (e, name) => handleOnChangeFormElements(e, name),\n                onBlur: (e, name) => handleOnBlurFormElements(e, name),\n                defaultCountry: locale === 'en' ? 'us' : locale,\n                fullWidth: true,\n                gridProps: {xs: 12, sm: 6}\n            }\n        )\n    }\n\n    const formElementsNote = [\n        {\n            type: ELEMENT_TYPES.textField,\n            id: 'note',\n            name: 'note',\n            value: contactData.note?.value,\n            error: contactData.note?.isError,\n            required: contactData.note?.isRequired,\n            disabled: isSaving,\n            label: t('str_note'),\n            helperText: contactData.note?.helperText,\n            onChange: (e) => handleOnChangeFormElements(e),\n            onBlur: (e) => handleOnBlurFormElements(e),\n            variant: VARIANT,\n            multiLine: true,\n            rows: 4,\n            rowsMax: 4,\n            fullWidth: true,\n            gridProps: {xs: 12}\n        }\n    ]\n\n    const contactColumns = [\n        {\n            title: (\n                <Button\n                    style={{padding: 0, maxWidth: 25, minWidth: 25}}\n                    disabled\n                    color={'primary'}\n                    variant={'text'}\n                >\n                    <MoreVertIcon/>\n                </Button>\n            ),\n            render: props => (\n                <TableColumnText minWidth={30}>\n                    <PopupState variant=\"popover\" popupId=\"material-table-action-column\">\n                        {(popupState) => (\n                            <React.Fragment>\n                                <Button\n                                    style={{padding: 0, maxWidth: 25, minWidth: 25}}\n                                    color={'primary'}\n                                    variant={'contained'}\n                                    {...bindTrigger(popupState)}\n                                >\n                                    <MoreVertIcon size={'small'}/>\n                                </Button>\n                                <Menu\n                                    anchorOrigin={{\n                                        vertical: \"bottom\",\n                                        horizontal: \"left\"\n                                    }}\n                                    transformOrigin={{\n                                        vertical: \"top\",\n                                        horizontal: \"left\"\n                                    }}\n                                    getContentAnchorEl={null}\n                                    {...bindMenu(popupState)}\n                                >\n                                    <MenuItem\n                                        onClick={() => {\n                                            setSelectedContactData(props)\n                                            setSelectedGid(props?.gid || false)\n                                            handleOpenAddDialog(props)\n                                            popupState.close();\n                                        }}\n                                    >\n                                        {<EditOutlinedIcon/>}\n                                        <Typography style={{paddingLeft: '8px'}}>{t('str_edit')}</Typography>\n                                    </MenuItem>\n                                    <MenuItem\n                                        onClick={() => handleDeleteItem(props.gid)}\n                                    >\n                                        <DeleteIcon/>\n                                        <Typography style={{paddingLeft: '8px'}}>{t('str_delete')}</Typography>\n                                    </MenuItem>\n                                </Menu>\n                            </React.Fragment>\n                        )}\n                    </PopupState>\n                </TableColumnText>\n            )\n        },\n        {\n            title: t('str_fullName'),\n            field: 'fullname',\n            render: (props) => <TableColumnText minWidth={150}>{props?.fullname}</TableColumnText>\n        },\n        {\n            title: t('str_tel'),\n            field: 'tel',\n            render: (props) => <TableColumnText>{props?.tel}</TableColumnText>\n        },\n        {\n            title: t('str_mobile'),\n            field: 'mobiletel',\n            render: (props) => <TableColumnText minWidth={150}>{props?.mobiletel}</TableColumnText>\n        },\n        {\n            title: t('str_email'),\n            field: 'email',\n            render: (props) => <TableColumnText minWidth={150}>{props?.email}</TableColumnText>\n        },\n        {\n            title: t('str_address'),\n            field: 'address1',\n            render: (props) => <TableColumnText minWidth={150}>{props?.address1}</TableColumnText>\n        },\n        {\n            title: t('str_description'),\n            field: 'description',\n            render: (props) => <TableColumnText minWidth={150}>{props?.title}</TableColumnText>\n        },\n        {\n            title: t('str_note'),\n            field: 'note',\n            render: (props) => <TableColumnText minWidth={150}>{props?.note}</TableColumnText>\n        },\n        {\n            title: t('str_country'),\n            field: 'country',\n            render: (props) => <TableColumnText>{props?.country}</TableColumnText>\n        },\n        {\n            title: t('str_city'),\n            field: 'city',\n            render: (props) => <TableColumnText>{props?.city}</TableColumnText>\n        },\n        {\n            title: t('str_town'),\n            field: 'town',\n            render: (props) => <TableColumnText>{props?.town}</TableColumnText>\n        },\n        {\n            title: t('str_district'),\n            field: 'district',\n            render: (props) => <TableColumnText>{props?.district}</TableColumnText>\n        },\n        {\n            title: t('str_zip'),\n            field: 'zip',\n            render: (props) => <TableColumnText>{props?.zip}</TableColumnText>\n        },\n        {\n            title: t('str_contactType'),\n            field: 'contacttypecode',\n            render: (props) => <TableColumnText>{props?.contacttypecode}</TableColumnText>\n        },\n        {\n            title: t('str_masterCode'),\n            field: 'mastercode',\n            render: (props) => <TableColumnText>{props?.mastercode}</TableColumnText>\n        },\n        {\n            title: t('str_accId'),\n            field: 'accid',\n            headerStyle: {\n                textAlign: 'right'\n            },\n            render: (props) => <TableColumnText textAlign={'right'}>{props?.accid}</TableColumnText>\n        },\n        {\n            title: t('str_empId'),\n            field: 'empid',\n            headerStyle: {\n                textAlign: 'right'\n            },\n            render: (props) => <TableColumnText textAlign={'right'}>{props?.empid}</TableColumnText>\n        },\n        {\n            title: t('str_id'),\n            field: 'id',\n            headerStyle: {\n                textAlign: 'right'\n            },\n            render: (props) => <TableColumnText textAlign={'right'}>{props?.id}</TableColumnText>\n        },\n    ]\n\n    useEffect(() => {\n        if (token && mid) {\n            getContactList()\n        }\n    }, [])\n\n    useEffect(() => {\n        let isEffect = true\n        if (isEffect && contactData && getData) {\n            const newClientInitialState = helper.objectMapper(contactData, getData, ['contacttypeid'])\n            setContactData(newClientInitialState)\n            setContactDataBase(newClientInitialState)\n            setIsInitialStateLoad(true)\n        }\n        return () => {\n            isEffect = false\n        }\n    }, [getData])\n\n    const handleDeleteItem = (gid) => {\n        setIsDeleting(true)\n        Delete({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.CONTACT,\n            token,\n            gid: gid,\n            params: {\n                hotelrefno: GENERAL_SETTINGS.HOTELREFNO,\n            }\n        }).then((res) => {\n            if (res.status === 200) {\n                getContactList()\n            } else {\n                const error = isErrorMsg(res)\n                enqueueSnackbar(error.errorMsg?.length > 50 ? error.errorMsg?.substring(0, 50) : error.errorMsg, {variant: 'error'})\n                setIsDeleting(false)\n            }\n        })\n    }\n\n    const getContactList = () => {\n        setIsLoadingList(true)\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.CONTACT,\n            token,\n            params: {\n                query: `masterid:${mid}`,\n                allhotels: allHotels,\n                hotelrefno: hotelRefNo\n            }\n        }).then(res => {\n            setIsLoadingList(false)\n            if (res.status === 200) {\n                if (res.data.count > 0) {\n                    setContactList(res.data.data)\n                }\n            } else {\n                const error = isErrorMsg(res)\n                enqueueSnackbar(error.errorMsg?.length > 50 ? error.errorMsg?.substring(0, 50) : error.errorMsg, {variant: 'error'})\n            }\n        })\n    }\n\n    const handleGetSelectedContact = (selectedContact) => {\n        if (selectedContact) {\n            setIsDef(true)\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.CONTACT + SLASH + OREST_ENDPOINT.VIEW + SLASH + 'get' + SLASH + selectedContact.gid,\n                token\n            }).then(res => {\n                setIsDef(false)\n                if (res.status === 200 && res.data.data) {\n                    const data = res.data.data\n                    setGetData(data)\n\n                }\n            })\n        }\n    }\n\n    const handleDefRecord = () => {\n        setIsDef(true)\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.CONTACT + SLASH + OREST_ENDPOINT.DEF,\n            token,\n            params: {\n                hotelrefno: hotelRefNo\n            }\n        }).then(res => {\n            if (res.status === 200 && res.data.count > 0) {\n                const data = Object.assign({}, res.data.data, contactData)\n                setContactData(data)\n                setContactDataBase(data)\n            }\n            setIsDef(false)\n        })\n    }\n\n    const handleSave = () => {\n        const data = {...contactData}\n        Object.keys(initialState).map((key) => {\n            if (key === 'mobiletel' || key === 'tel') {\n                data[key] = mobileTelNoFormat(data[key].value)\n            } else {\n                data[key] = typeof data[key].value === 'object' ? data[key].value ? data[key].value.id : null : data[key].value\n            }\n\n        })\n\n        if (mid) {\n            setIsSaving(true)\n            if (selectedGid) {\n                Patch({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.CONTACT,\n                    gid: selectedGid,\n                    data: data,\n                    token\n                }).then(res => {\n                    if (res.status === 200) {\n                        enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'})\n                        setOpenAddDialog(false)\n                        getContactList()\n                        handleReset()\n                    } else {\n                        const error = isErrorMsg(res)\n                        enqueueSnackbar(error.errorMsg, {variant: 'error'})\n                    }\n                    setIsSaving(false)\n                })\n            } else {\n                data.masterid = mid\n                data.hotelrefno = hotelRefNo\n                Insert({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.CONTACT,\n                    token,\n                    data: data\n                }).then(res => {\n                    if (res.status === 200) {\n                        enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'})\n                        setOpenAddDialog(false)\n                        getContactList()\n                        handleReset()\n                    } else {\n                        const error = isErrorMsg(res)\n                        enqueueSnackbar(error.errorMsg, {variant: 'error'})\n                    }\n                    setIsSaving(false)\n                })\n            }\n        }\n    }\n\n    const handleOnChangeFormElements = (event, key, isOnBlur) => {\n        const name = key ? key : event.target.name\n        const value = event?.target ? event.target.value : event\n\n        if (isOnBlur) {\n            setContactData({\n                ...contactData,\n                [name]: {\n                    ...contactData[name],\n                    isError: contactData[name]?.isRequired && !!required(value),\n                    helperText: contactData[name]?.isRequired && !!required(value) && t('str_mandatory'),\n                }\n            })\n        } else {\n            setContactData({\n                ...contactData,\n                [name]: {\n                    ...contactData[name],\n                    value: value,\n                    isError: contactData[name]?.isRequired && !!required(value),\n                    helperText: contactData[name]?.isRequired && !!required(value) && t('str_mandatory'),\n                }\n            })\n        }\n    }\n\n    const handleOnBlurFormElements = (event, key) => {\n        handleOnChangeFormElements(event, key, true)\n    }\n\n    const handleOpenAddDialog = (selectedContact = false) => {\n        if (selectedContact) {\n            handleGetSelectedContact(selectedContact)\n        } else {\n            handleDefRecord()\n        }\n        setOpenAddDialog(true)\n    }\n\n    const handleCloseDialog = () => {\n        if (JSON.stringify(contactData) !== JSON.stringify(contactDataBase)) {\n            setOpenTrackedDialog(true)\n        } else {\n            setOpenAddDialog(false)\n            handleReset()\n        }\n    }\n\n    const handleReset = () => {\n        setTimeout(() => {\n            setIsInitialStateLoad(false)\n            setGetData(null)\n            setContactData(initialState)\n            setContactDataBase(initialState)\n            setSelectedContactData(null)\n        }, 100)\n    }\n\n    return (\n        <div>\n            <React.Fragment>\n                <Grid container>\n                    <Grid item xs={4} sm={3}>\n                        <Grid container>\n                            <Grid item xs={6} sm={3}>\n                                <CustomToolTip title={t('str_refresh')}>\n                                    <IconButton\n                                        onClick={() => getContactList()}\n                                    >\n                                        <CachedIcon style={{color: \"#F16A4B\"}}/>\n                                    </IconButton>\n                                </CustomToolTip>\n                            </Grid>\n                            <Grid item xs={6} sm={3}>\n                                <CustomToolTip title={t('str_add')}>\n                                    <IconButton\n                                        onClick={() => handleOpenAddDialog(false)}\n                                    >\n                                        <AddIcon/>\n                                    </IconButton>\n                                </CustomToolTip>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={8}>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            isLoading={isLoadingList}\n                            columns={contactColumns}\n                            data={contactList}\n                            localization={tableLocalization}\n                            options={{\n                                headerStyle: {\n                                    cursor: 'default',\n                                    fontWeight: \"bold\",\n                                    fontSize: \"12px\",\n                                    color: \"#A3A6B4\",\n                                    textTransform: \"uppercase\",\n                                    backgroundColor: \"#F5F6FA\",\n                                    whiteSpace: 'nowrap',\n                                    borderLeft: '1px solid #FFF',\n                                },\n                                cellStyle: {\n                                    whiteSpace: 'nowrap',\n                                    borderLeft: '1px solid rgba(224, 224, 224, 1)',\n                                    fontSize: '13px',\n                                },\n                                toolbar: false,\n                                selection: false,\n                                sorting: false,\n                                search: false,\n                                actionsColumnIndex: 1,\n                                selectionColumnIndex: 1\n                            }}\n                            components={{\n                                Header: (props) => {\n                                    const overrideProps = {...props}\n                                    overrideProps.draggable = false\n                                    return (\n                                        <MTableHeader  {...overrideProps}/>\n                                    )\n                                },\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n                <Dialog open={openAddDialog} maxWidth={'sm'} fullWidth>\n                    <div style={{padding: 24}}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <Typography style={{\n                                    fontWeight: '600',\n                                    fontSize: '18px'\n                                }}>{selectedContactData ? t('str_editContact') : t('str_addContact')}</Typography>\n                            </Grid>\n                            {\n                                isDef ? (\n                                    <Grid item xs={12}>\n                                        <LoadingSpinner/>\n                                    </Grid>\n                                ) : (\n                                    <React.Fragment>\n                                        {\n                                            formElements.map((item, index) => (\n                                                <Grid key={index} item {...item.gridProps}>\n                                                    {renderFormElements(item)}\n                                                </Grid>\n                                            ))\n                                        }\n                                        {\n                                            formElementsNote.map((item, index) => (\n                                                <Grid key={index} item {...item.gridProps}>\n                                                    {renderFormElements(item)}\n                                                </Grid>\n                                            ))\n                                        }\n                                        <Grid item xs={12}>\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox\n                                                        checked={contactData.isblack.value}\n                                                        onChange={e => {\n                                                            setContactData({\n                                                                ...contactData,\n                                                                ['isblack']: {\n                                                                    ...contactData['isblack'],\n                                                                    value: e.target.checked\n                                                                }\n                                                            })\n                                                        }}\n                                                    />\n                                                }\n                                                label={t('str_blacklist')}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12}>\n                                            <AddDialogActions\n                                                disabled={isSaving}\n                                                loading={isSaving}\n                                                disabledSave={!contactData.contacttypeid.value || contactData.contacttypeid.value?.length <= 0}\n                                                toolTipTitle={\n                                                    <div>\n                                                        <Typography style={{\n                                                            fontWeight: '600',\n                                                            fontSize: 'inherit'\n                                                        }}>{t('str_invalidFields')}</Typography>\n                                                        {\n                                                            contactData.contacttypeid.isError || required(contactData.contacttypeid.value) && (\n                                                                <Typography\n                                                                    style={{fontSize: 'inherit'}}>{t('str_contactType')}</Typography>\n                                                            )\n                                                        }\n                                                    </div>\n                                                }\n                                                onCancelClick={handleCloseDialog}\n                                                onSaveClick={handleSave}\n                                            />\n                                        </Grid>\n                                    </React.Fragment>\n                                )\n                            }\n                        </Grid>\n                    </div>\n                </Dialog>\n                <TrackedChangesDialog\n                    open={openTrackedDialog}\n                    onPressNo={(e) => {\n                        setOpenTrackedDialog(e);\n                    }}\n                    onPressYes={(e) => {\n                        setOpenTrackedDialog(e);\n                        setOpenAddDialog(false)\n                        handleReset()\n                    }}\n                />\n            </React.Fragment>\n        </div>\n    )\n}\n\nexport default Contacts"]},"metadata":{},"sourceType":"module"}