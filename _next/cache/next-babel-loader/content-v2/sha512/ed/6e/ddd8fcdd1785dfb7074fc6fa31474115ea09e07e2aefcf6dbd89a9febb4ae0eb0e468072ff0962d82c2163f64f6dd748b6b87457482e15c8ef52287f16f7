{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/website/pages/WebsiteImage.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport WebCmsGlobal from 'components/webcms-global';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ThumbnailSliderModal from './SliderModal';\nimport clsx from 'clsx';\nconst useStyles = makeStyles(() => ({\n  box: {\n    position: 'relative',\n    textAlign: 'center',\n    color: 'white'\n  },\n  text: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    zIndex: 999,\n    height: '100%',\n    width: '100%'\n  },\n  textColor: {\n    color: props => {\n      var _props$imageData;\n\n      return props !== null && props !== void 0 && (_props$imageData = props.imageData) !== null && _props$imageData !== void 0 && _props$imageData.textColor ? props.imageData.textColor : '#000000';\n    }\n  },\n  image: {\n    width: '100%',\n    backgroundSize: 'cover',\n    borderRadius: 10,\n    height: props => {\n      if (props.sectionType === 'threecol') return 200;\n      if (props.sectionType === 'twocol') return 250;\n      if (props.sectionType === 'fullcol') return 'auto';\n    }\n  },\n  cursorPointer: {\n    cursor: 'pointer'\n  }\n}));\n\nconst WebsiteImage = props => {\n  const {\n    imageData,\n    otherLangImage,\n    selectedLang,\n    defaultLang,\n    sectionImages,\n    itemID\n  } = props;\n  const {\n    0: image,\n    1: setImage\n  } = useState('');\n  const {\n    0: isOpenSlider,\n    1: setIsOpenSlider\n  } = useState(false);\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const classes = useStyles(props);\n  const {\n    0: sliderImages,\n    1: setSliderImages\n  } = useState(sectionImages);\n  useEffect(() => {\n    console.log(imageData);\n\n    if (imageData && imageData.gid) {\n      setImage({\n        fileurl: imageData.gid.fileurl,\n        title: selectedLang === defaultLang ? imageData.gid.title : otherLangImage.title,\n        description: selectedLang === defaultLang ? imageData.gid.description : otherLangImage.description\n      });\n    }\n\n    handleResetSliderImages();\n  }, [imageData, otherLangImage, sectionImages]);\n\n  const handleResetSliderImages = () => {\n    if (sectionImages !== null && sectionImages !== void 0 && sectionImages.length) setSliderImages(sectionImages.map(s => s.gid));\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, image && Object.keys(image).length > 0 && __jsx(\"div\", {\n    className: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, __jsx(\"img\", {\n    alt: 'image',\n    onClick: () => {\n      if (sliderImages !== null && sliderImages !== void 0 && sliderImages.length) {\n        let updatedSliderImages = [...sliderImages];\n        const img = sectionImages === null || sectionImages === void 0 ? void 0 : sectionImages.find(image => image.id === itemID);\n        const index = sectionImages === null || sectionImages === void 0 ? void 0 : sectionImages.indexOf(img);\n        const tmp = updatedSliderImages[0];\n        updatedSliderImages[0] = sliderImages[index];\n        updatedSliderImages[index] = tmp;\n        setSliderImages(updatedSliderImages);\n        setIsOpenSlider(true);\n      }\n    },\n    className: clsx({\n      [classes.image]: true,\n      [classes.cursorPointer]: sliderImages === null || sliderImages === void 0 ? void 0 : sliderImages.length\n    }),\n    src: GENERAL_SETTINGS.STATIC_URL + image.fileurl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: classes.textColor,\n    dangerouslySetInnerHTML: {\n      __html: image.title\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    className: classes.textColor,\n    dangerouslySetInnerHTML: {\n      __html: image.description\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }))), __jsx(ThumbnailSliderModal, {\n    open: isOpenSlider,\n    sliderTitle: (image === null || image === void 0 ? void 0 : image.title) || 'Image',\n    sliderDesc: image === null || image === void 0 ? void 0 : image.description,\n    onClose: e => {\n      setIsOpenSlider(e);\n      handleResetSliderImages();\n    },\n    sliderImages: sliderImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default WebsiteImage;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/website/pages/WebsiteImage.js"],"names":["React","useContext","useEffect","useState","WebCmsGlobal","makeStyles","ThumbnailSliderModal","clsx","useStyles","box","position","textAlign","color","text","top","left","transform","zIndex","height","width","textColor","props","imageData","image","backgroundSize","borderRadius","sectionType","cursorPointer","cursor","WebsiteImage","otherLangImage","selectedLang","defaultLang","sectionImages","itemID","setImage","isOpenSlider","setIsOpenSlider","GENERAL_SETTINGS","classes","sliderImages","setSliderImages","console","log","gid","fileurl","title","description","handleResetSliderImages","length","map","s","Object","keys","updatedSliderImages","img","find","id","index","indexOf","tmp","STATIC_URL","__html","e"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport WebCmsGlobal from 'components/webcms-global'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ThumbnailSliderModal from './SliderModal'\nimport clsx from 'clsx'\n\nconst useStyles = makeStyles(() => ({\n    box: {\n        position: 'relative',\n        textAlign: 'center',\n        color: 'white',\n    },\n    text: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        zIndex: 999,\n        height: '100%',\n        width: '100%',\n    },\n    textColor: {\n        color: (props) => (props?.imageData?.textColor ? props.imageData.textColor : '#000000'),\n    },\n    image: {\n        width: '100%',\n        backgroundSize: 'cover',\n        borderRadius: 10,\n        height: (props) => {\n            if (props.sectionType === 'threecol') return 200\n            if (props.sectionType === 'twocol') return 250\n            if (props.sectionType === 'fullcol') return 'auto'\n        },\n    },\n    cursorPointer: {\n        cursor: 'pointer',\n    },\n}))\n\nconst WebsiteImage = (props) => {\n    const { imageData, otherLangImage, selectedLang, defaultLang, sectionImages, itemID } = props\n\n    const [image, setImage] = useState('')\n    const [isOpenSlider, setIsOpenSlider] = useState(false)\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const classes = useStyles(props)\n    const [sliderImages, setSliderImages] = useState(sectionImages)\n\n    useEffect(() => {\n        console.log(imageData);\n        if (imageData && imageData.gid) {\n            setImage({\n                fileurl: imageData.gid.fileurl,\n                title: selectedLang === defaultLang ? imageData.gid.title : otherLangImage.title,\n                description: selectedLang === defaultLang ? imageData.gid.description : otherLangImage.description,\n            })\n        }\n        handleResetSliderImages()\n    }, [imageData, otherLangImage, sectionImages])\n\n    const handleResetSliderImages = () => {\n        if (sectionImages?.length) setSliderImages(sectionImages.map((s) => s.gid))\n    }\n\n    return (\n        <React.Fragment>\n            {image && Object.keys(image).length > 0 && (\n                <div className={classes.box}>\n                    <img\n                        alt={'image'}\n                        onClick={() => {\n                            if (sliderImages?.length) {\n                                let updatedSliderImages = [...sliderImages]\n                                const img = sectionImages?.find((image) => image.id === itemID)\n                                const index = sectionImages?.indexOf(img)\n                                const tmp = updatedSliderImages[0]\n                                updatedSliderImages[0] = sliderImages[index]\n                                updatedSliderImages[index] = tmp\n                                setSliderImages(updatedSliderImages)\n                                setIsOpenSlider(true)\n                            }\n                        }}\n                        className={clsx({\n                            [classes.image]: true,\n                            [classes.cursorPointer]: sliderImages?.length,\n                        })}\n                        src={GENERAL_SETTINGS.STATIC_URL + image.fileurl}\n                    />\n                    <div className={classes.text}>\n                        <div className={classes.textColor} dangerouslySetInnerHTML={{ __html: image.title }}></div>\n                        <div\n                            className={classes.textColor}\n                            dangerouslySetInnerHTML={{ __html: image.description }}\n                        ></div>\n                    </div>\n                </div>\n            )}\n            <ThumbnailSliderModal\n                open={isOpenSlider}\n                sliderTitle={image?.title || 'Image'}\n                sliderDesc={image?.description}\n                onClose={(e) => {\n                    setIsOpenSlider(e)\n                    handleResetSliderImages()\n                }}\n                sliderImages={sliderImages}\n            />\n        </React.Fragment>\n    )\n}\n\nexport default WebsiteImage\n"]},"metadata":{},"sourceType":"module"}