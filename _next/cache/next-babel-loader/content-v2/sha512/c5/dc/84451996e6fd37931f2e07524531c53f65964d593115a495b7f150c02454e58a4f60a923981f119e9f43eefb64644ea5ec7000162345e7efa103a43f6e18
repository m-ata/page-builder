{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/slider/SliderModal.js\";\nvar __jsx = React.createElement;\n//import from react\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'; //imports from material ui\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from '@material-ui/core/styles'; //custom imports\n\nimport AddSlider from \"./../page/sections/slider/AddSlider\";\nimport EditSlider from \"./../page/sections/slider/EditSlider\";\nimport { setToState, updateState } from \"../../../../../state/actions\";\nconst useStyles = makeStyles(theme => ({\n  actionButton: {\n    marginLeft: theme.spacing(1),\n    borderRadius: 20\n  }\n}));\n\nconst SliderModal = props => {\n  const {\n    state,\n    title,\n    type,\n    resetRenderDialog,\n    updateState\n  } = props; //local states\n\n  const {\n    0: openModal,\n    1: setOpenModal\n  } = useState(true);\n  const {\n    0: dialogType,\n    1: setDialogType\n  } = useState('');\n  const {\n    0: isDisable,\n    1: setDisable\n  } = useState(true);\n  const {\n    0: sliderGID,\n    1: setSliderGID\n  } = useState(state.slider.gid);\n  const {\n    0: sliderTitle,\n    1: setSliderTitle\n  } = useState(state.slider.title);\n  const {\n    0: sliderDesc,\n    1: setSliderDesc\n  } = useState(state.slider.description);\n  const {\n    0: sliderCta,\n    1: setSliderCta\n  } = useState(state.slider.cta);\n  const {\n    0: sliderTextColor,\n    1: setSliderTextColor\n  } = useState(state.slider.textColor || '#FFFFFF');\n  const {\n    0: sliderButtonColor,\n    1: setSliderButtonColor\n  } = useState(state.slider.buttonColor || '#FFFFFF');\n  const classes = useStyles();\n  useEffect(() => {\n    handleDialogType();\n  }, [type]);\n\n  const handleCancel = () => {\n    setOpenModal(false);\n    resetRenderDialog();\n  };\n\n  const handleDialogType = () => {\n    switch (type) {\n      case 'add-slider':\n        setDialogType(__jsx(AddSlider, {\n          handleApplyDisable: handleApplyDisable,\n          handleSliderValues: handleSliderValues,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 31\n          }\n        }));\n        break;\n\n      case 'edit-slider':\n        setDialogType(__jsx(EditSlider, {\n          sliderComponent: state.slider,\n          handleApplyDisable: handleApplyDisable,\n          handleSliderValues: handleSliderValues,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 31\n          }\n        }));\n        break;\n    }\n  };\n\n  const handleApplyDisable = isDisabled => {\n    setDisable(isDisabled);\n  };\n\n  const handleSliderValues = (title, description, cta, gid, textColor, buttonColor) => {\n    setSliderTitle(title);\n    setSliderDesc(description);\n    setSliderGID(gid);\n    setSliderCta(cta);\n    setSliderTextColor(textColor);\n    setSliderButtonColor(buttonColor);\n  };\n\n  const handleApply = () => {\n    const updatedSlider = {\n      title: sliderTitle,\n      description: sliderDesc,\n      cta: sliderCta,\n      gid: sliderGID,\n      textColor: sliderTextColor,\n      buttonColor: sliderButtonColor\n    };\n    updateState('pageBuilder', 'slider', updatedSlider);\n    handleCancel();\n  };\n\n  return __jsx(Dialog, {\n    disableBackdropClick: true,\n    disableEnforceFocus: true,\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: openModal,\n    onClose: handleCancel,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, __jsx(DialogTitle, {\n    id: \"form-dialog-title\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \" \", title, __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  })), __jsx(DialogContent, {\n    style: {\n      marginTop: -24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, __jsx(Typography, {\n    component: 'div',\n    style: {\n      marginTop: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, dialogType ? dialogType : null), __jsx(Divider, {\n    style: {\n      marginTop: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  })), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    className: classes.actionButton,\n    variant: \"contained\",\n    size: \"small\",\n    \"aria-label\": \"add\",\n    onClick: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    className: classes.actionButton,\n    variant: \"contained\",\n    size: \"small\",\n    \"aria-label\": \"add\",\n    color: \"primary\",\n    onClick: handleApply,\n    disabled: isDisable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, \"Apply\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.pageBuilder\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SliderModal);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/slider/SliderModal.js"],"names":["React","useState","useEffect","connect","Dialog","DialogActions","DialogContent","DialogTitle","Button","Divider","Typography","makeStyles","AddSlider","EditSlider","setToState","updateState","useStyles","theme","actionButton","marginLeft","spacing","borderRadius","SliderModal","props","state","title","type","resetRenderDialog","openModal","setOpenModal","dialogType","setDialogType","isDisable","setDisable","sliderGID","setSliderGID","slider","gid","sliderTitle","setSliderTitle","sliderDesc","setSliderDesc","description","sliderCta","setSliderCta","cta","sliderTextColor","setSliderTextColor","textColor","sliderButtonColor","setSliderButtonColor","buttonColor","classes","handleDialogType","handleCancel","handleApplyDisable","handleSliderValues","isDisabled","handleApply","updatedSlider","marginTop","mapStateToProps","formReducer","pageBuilder","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["//import from react\nimport React, { useState, useEffect} from 'react';\nimport { connect } from 'react-redux';\n//imports from material ui\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {makeStyles} from '@material-ui/core/styles';\n//custom imports\nimport AddSlider from \"./../page/sections/slider/AddSlider\";\nimport EditSlider from \"./../page/sections/slider/EditSlider\";\nimport {setToState, updateState} from \"../../../../../state/actions\";\n\nconst useStyles = makeStyles(theme => ({\n    actionButton: {\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n    }\n}));\n\nconst SliderModal = (props) => {\n\n    const {\n        state,\n        title,\n        type,\n        resetRenderDialog,\n        updateState\n    } = props\n\n    //local states\n    const [openModal, setOpenModal] = useState(true);\n    const [dialogType, setDialogType ] = useState('');\n    const [isDisable, setDisable] = useState(true);\n    const [sliderGID, setSliderGID] = useState(state.slider.gid);\n    const [sliderTitle, setSliderTitle] = useState(state.slider.title);\n    const [sliderDesc, setSliderDesc] = useState(state.slider.description);\n    const [sliderCta, setSliderCta] = useState(state.slider.cta);\n    const [sliderTextColor, setSliderTextColor] = useState(state.slider.textColor || '#FFFFFF');\n    const [sliderButtonColor, setSliderButtonColor] = useState(state.slider.buttonColor || '#FFFFFF');\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        handleDialogType();\n    }, [type]);\n\n    const handleCancel = () => {\n        setOpenModal(false);\n        resetRenderDialog();\n    }\n\n    const handleDialogType = () => {\n        switch (type) {\n            case 'add-slider':\n                setDialogType(<AddSlider\n                    handleApplyDisable={handleApplyDisable}\n                    handleSliderValues={handleSliderValues}\n                />);\n                break;\n            case 'edit-slider':\n                setDialogType(<EditSlider\n                    sliderComponent={state.slider}\n                    handleApplyDisable={handleApplyDisable}\n                    handleSliderValues={handleSliderValues}\n                />);\n                break;\n        }\n    }\n\n    const handleApplyDisable = (isDisabled) => {\n        setDisable(isDisabled);\n    }\n\n    const handleSliderValues = (title, description, cta, gid, textColor, buttonColor) => {\n        setSliderTitle(title);\n        setSliderDesc(description);\n        setSliderGID(gid);\n        setSliderCta(cta);\n        setSliderTextColor(textColor);\n        setSliderButtonColor(buttonColor);\n    }\n\n    const handleApply = () => {\n        const updatedSlider = {\n            title: sliderTitle,\n            description: sliderDesc,\n            cta: sliderCta,\n            gid: sliderGID,\n            textColor: sliderTextColor,\n            buttonColor: sliderButtonColor\n        }\n        updateState('pageBuilder', 'slider', updatedSlider);\n        handleCancel();\n    }\n\n    return(\n        <Dialog\n            disableBackdropClick\n            disableEnforceFocus\n            fullWidth={true}\n            maxWidth=\"md\"\n            open={openModal}\n            onClose={handleCancel}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"form-dialog-title\" color=\"secondary\"> {title}\n                <Divider />\n            </DialogTitle>\n            <DialogContent style={{marginTop: -24}}>\n                <Typography component={'div'} style={{marginTop: 16}}>\n                    {\n                        dialogType ? dialogType : null\n                    }\n                </Typography>\n                <Divider style={{marginTop: 16}}/>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    className={classes.actionButton}\n                    variant=\"contained\"\n                    size=\"small\"\n                    aria-label=\"add\"\n                    onClick={handleCancel}\n                >\n                    Cancel\n                </Button>\n                <Button\n                    className={classes.actionButton}\n                    variant=\"contained\"\n                    size=\"small\"\n                    aria-label=\"add\"\n                    color=\"primary\"\n                    onClick={handleApply}\n                    disabled={isDisable}\n                >\n                    Apply\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        state: state.formReducer.pageBuilder\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SliderModal);"]},"metadata":{},"sourceType":"module"}