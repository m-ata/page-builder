{"ast":null,"code":"import { NOTIFICATION_CLEAR, NOTIFICATION_DISMISS, NOTIFICATION_SHOW } from './actionTypes';\nconst defaultDismissTime = 5000; // 5 seconds\n\n/**\n * Publish a notification. if `dismissAfter` is set, the notification will be\n * auto dismissed after the given period.\n * @param {Object} notif - Object containing\n * @param {Object} notif.kind - Kinda of notification (success, warning, failure)\n * @param {Object} notif.message - Notification message\n * @param {Object} notif.dismissAfter - Time after which to dismiss notification (default time set in constants)\n */\n\nexport function showNotification(notif) {\n  const payload = Object.assign({}, notif); // Set default id to now if none provided\n\n  if (!payload.id) {\n    payload.id = Date.now();\n  }\n\n  return dispatch => {\n    dispatch({\n      type: NOTIFICATION_SHOW,\n      payload\n    });\n    setTimeout(() => {\n      dispatch({\n        type: NOTIFICATION_DISMISS,\n        payload: payload.id\n      });\n    }, payload.dismissAfter || defaultDismissTime);\n  };\n}\n/**\n * Show message for a success\n * @param {String} message - Message to show\n */\n\nexport function showSuccess(message) {\n  return showNotification({\n    type: 'success',\n    message\n  });\n}\n/**\n * Show message for a error\n * @param {String} message - Message to show\n */\n\nexport function showError(message) {\n  return showNotification({\n    type: 'error',\n    message: `Error: ${message || ''}`\n  });\n}\n/**\n * Show message for a error\n * @param {String} message - Message to show\n */\n\nexport function showMessage(message) {\n  return showNotification({\n    type: 'success',\n    message\n  });\n}\n/**\n * Dismiss a notification by the given id.\n * @param {Number} id - notification id\n */\n\nexport function dismissNotification(payload) {\n  return {\n    type: NOTIFICATION_DISMISS,\n    payload\n  };\n}\n/**\n * Clear all notifications\n */\n\nexport function clearNotifications() {\n  return {\n    type: NOTIFICATION_CLEAR\n  };\n}","map":{"version":3,"sources":["/Users/mata/app-cloudweb/model/notification/actions.js"],"names":["NOTIFICATION_CLEAR","NOTIFICATION_DISMISS","NOTIFICATION_SHOW","defaultDismissTime","showNotification","notif","payload","Object","assign","id","Date","now","dispatch","type","setTimeout","dismissAfter","showSuccess","message","showError","showMessage","dismissNotification","clearNotifications"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,oBAA7B,EAAmDC,iBAAnD,QAA4E,eAA5E;AAEA,MAAMC,kBAAkB,GAAG,IAA3B,C,CAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AACpC,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,CAAhB,CADoC,CAEpC;;AACA,MAAI,CAACC,OAAO,CAACG,EAAb,EAAiB;AACbH,IAAAA,OAAO,CAACG,EAAR,GAAaC,IAAI,CAACC,GAAL,EAAb;AACH;;AACD,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX,iBAAR;AAA2BI,MAAAA;AAA3B,KAAD,CAAR;AAEAQ,IAAAA,UAAU,CAAC,MAAM;AACbF,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEZ,oBADD;AAELK,QAAAA,OAAO,EAAEA,OAAO,CAACG;AAFZ,OAAD,CAAR;AAIH,KALS,EAKPH,OAAO,CAACS,YAAR,IAAwBZ,kBALjB,CAAV;AAMH,GATD;AAUH;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASa,WAAT,CAAqBC,OAArB,EAA8B;AACjC,SAAOb,gBAAgB,CAAC;AAAES,IAAAA,IAAI,EAAE,SAAR;AAAmBI,IAAAA;AAAnB,GAAD,CAAvB;AACH;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBD,OAAnB,EAA4B;AAC/B,SAAOb,gBAAgB,CAAC;AAAES,IAAAA,IAAI,EAAE,OAAR;AAAiBI,IAAAA,OAAO,EAAG,UAASA,OAAO,IAAI,EAAG;AAAlD,GAAD,CAAvB;AACH;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASE,WAAT,CAAqBF,OAArB,EAA8B;AACjC,SAAOb,gBAAgB,CAAC;AAAES,IAAAA,IAAI,EAAE,SAAR;AAAmBI,IAAAA;AAAnB,GAAD,CAAvB;AACH;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASG,mBAAT,CAA6Bd,OAA7B,EAAsC;AACzC,SAAO;AACHO,IAAAA,IAAI,EAAEZ,oBADH;AAEHK,IAAAA;AAFG,GAAP;AAIH;AAED;AACA;AACA;;AACA,OAAO,SAASe,kBAAT,GAA8B;AACjC,SAAO;AAAER,IAAAA,IAAI,EAAEb;AAAR,GAAP;AACH","sourcesContent":["import { NOTIFICATION_CLEAR, NOTIFICATION_DISMISS, NOTIFICATION_SHOW } from './actionTypes'\n\nconst defaultDismissTime = 5000 // 5 seconds\n\n/**\n * Publish a notification. if `dismissAfter` is set, the notification will be\n * auto dismissed after the given period.\n * @param {Object} notif - Object containing\n * @param {Object} notif.kind - Kinda of notification (success, warning, failure)\n * @param {Object} notif.message - Notification message\n * @param {Object} notif.dismissAfter - Time after which to dismiss notification (default time set in constants)\n */\nexport function showNotification(notif) {\n    const payload = Object.assign({}, notif)\n    // Set default id to now if none provided\n    if (!payload.id) {\n        payload.id = Date.now()\n    }\n    return (dispatch) => {\n        dispatch({ type: NOTIFICATION_SHOW, payload })\n\n        setTimeout(() => {\n            dispatch({\n                type: NOTIFICATION_DISMISS,\n                payload: payload.id,\n            })\n        }, payload.dismissAfter || defaultDismissTime)\n    }\n}\n\n/**\n * Show message for a success\n * @param {String} message - Message to show\n */\nexport function showSuccess(message) {\n    return showNotification({ type: 'success', message })\n}\n\n/**\n * Show message for a error\n * @param {String} message - Message to show\n */\nexport function showError(message) {\n    return showNotification({ type: 'error', message: `Error: ${message || ''}` })\n}\n\n/**\n * Show message for a error\n * @param {String} message - Message to show\n */\nexport function showMessage(message) {\n    return showNotification({ type: 'success', message })\n}\n\n/**\n * Dismiss a notification by the given id.\n * @param {Number} id - notification id\n */\nexport function dismissNotification(payload) {\n    return {\n        type: NOTIFICATION_DISMISS,\n        payload,\n    }\n}\n\n/**\n * Clear all notifications\n */\nexport function clearNotifications() {\n    return { type: NOTIFICATION_CLEAR }\n}\n"]},"metadata":{},"sourceType":"module"}