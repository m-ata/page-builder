{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/CustomDatePicker/CustomDatePicker.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef, useState } from \"react\";\nimport { ClickAwayListener, TextField } from '@material-ui/core';\nimport { DatePicker, LocalizationProvider } from '@material-ui/pickers';\nimport moment from 'moment';\nimport MomentAdapter from '@date-io/moment';\nimport CustomAutoComplete from \"../CustomAutoComplete/CustomAutoComplete\";\nimport PropTypes from 'prop-types';\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\n\nfunction CustomDatePicker(props) {\n  const {\n    minDate,\n    value,\n    onChange,\n    onError,\n    label,\n    id,\n    name,\n    disablePast,\n    disableFuture,\n    helperText,\n    fullWidth,\n    required,\n    error\n  } = props; //context\n\n  const {\n    t\n  } = useTranslation(); //state\n\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const ref = useRef();\n\n  const handleOnChange = (newDate, name) => {\n    if (typeof onChange === \"function\") onChange(newDate, name);\n  };\n\n  const handleOnError = error => {\n    if (typeof onError === \"function\") onError(error);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, __jsx(ClickAwayListener, {\n    onClickAway: () => setOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, __jsx(DatePicker, {\n    id: id,\n    name: name,\n    open: open,\n    ref: ref,\n    onClose: () => {\n      setOpen(false);\n    },\n    minDate: minDate,\n    value: value,\n    error: error,\n    onError: e => {\n      handleOnError(e);\n    },\n    onChange: newDate => {\n      var _ref$current;\n\n      handleOnChange(newDate, ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getAttribute(\"name\"));\n    },\n    disableFuture: disableFuture,\n    disablePast: disablePast,\n    inputFormat: \"DD.MM.YYYY\",\n    mask: \"__.__.____\",\n    label: label || t('str_date'),\n    renderInput: props => __jsx(TextField, _extends({\n      id: id,\n      name: name,\n      fullWidth: fullWidth,\n      required: required,\n      variant: \"outlined\"\n    }, props, {\n      InputProps: _objectSpread(_objectSpread({}, props.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 45\n          }\n        }, __jsx(\"span\", {\n          onClick: () => {\n            setOpen(true);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 41\n          }\n        }, props.InputProps.endAdornment))\n      }),\n      FormHelperTextProps: {\n        style: {\n          opacity: props.error ? '1' : '0'\n        }\n      },\n      helperText: `(${helperText ? helperText : props.inputProps.placeholder})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 33\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  })))));\n}\n\nexport default CustomDatePicker;\nCustomAutoComplete.propTypes = {\n  value: PropTypes.object,\n  minDate: PropTypes.object,\n  label: PropTypes.String,\n  onError: PropTypes.func,\n  onChange: PropTypes.func\n};","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/CustomDatePicker/CustomDatePicker.js"],"names":["React","useRef","useState","ClickAwayListener","TextField","DatePicker","LocalizationProvider","moment","MomentAdapter","CustomAutoComplete","PropTypes","useTranslation","CustomDatePicker","props","minDate","value","onChange","onError","label","id","name","disablePast","disableFuture","helperText","fullWidth","required","error","t","open","setOpen","ref","handleOnChange","newDate","handleOnError","e","current","getAttribute","InputProps","endAdornment","style","opacity","inputProps","placeholder","propTypes","object","String","func"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from \"react\";\nimport { ClickAwayListener, TextField} from '@material-ui/core'\nimport { DatePicker, LocalizationProvider} from '@material-ui/pickers'\nimport moment from 'moment'\nimport MomentAdapter from '@date-io/moment'\nimport CustomAutoComplete from \"../CustomAutoComplete/CustomAutoComplete\";\nimport PropTypes from 'prop-types'\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\n\n\nfunction CustomDatePicker(props) {\n    const { minDate, value, onChange, onError, label, id, name, disablePast, disableFuture, helperText, fullWidth, required, error } = props\n\n    //context\n    const { t } = useTranslation();\n\n    //state\n    const [open, setOpen] = useState(false);\n\n    const ref = useRef();\n\n    const handleOnChange = (newDate, name) => {\n        if(typeof onChange === \"function\") onChange(newDate, name)\n    }\n\n    const handleOnError = (error) => {\n        if(typeof onError === \"function\") onError(error)\n    }\n\n\n    return(\n        <div>\n            <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                <ClickAwayListener onClickAway={() => setOpen(false)}>\n                    <div>\n                        <DatePicker\n                            id={id}\n                            name={name}\n                            open={open}\n                            ref={ref}\n                            onClose={() => {setOpen(false)}}\n                            minDate={minDate}\n                            value={value}\n                            error={error}\n                            onError={(e) => {\n                                handleOnError(e)\n                            }}\n                            onChange={(newDate) => {\n                                handleOnChange(newDate, ref?.current?.getAttribute(\"name\"))\n                            }}\n                            disableFuture={disableFuture}\n                            disablePast={disablePast}\n                            inputFormat={\"DD.MM.YYYY\"}\n                            mask={\"__.__.____\"}\n                            label={label || t('str_date')}\n                            renderInput={(props) => (\n                                <TextField\n                                    id={id}\n                                    name={name}\n                                    fullWidth={fullWidth}\n                                    required={required}\n                                    variant={\"outlined\"}\n                                    {...props}\n                                    InputProps={{\n                                        ...props.InputProps,\n                                        endAdornment: (\n                                            <React.Fragment>\n                                        <span onClick={() => {setOpen(true)}}>\n                                            {props.InputProps.endAdornment}\n                                        </span>\n                                            </React.Fragment>\n                                        ),\n                                    }}\n                                    FormHelperTextProps={{\n                                        style:  {opacity: props.error ? '1' : '0'}\n                                    }}\n                                    helperText={ `(${helperText ? helperText : props.inputProps.placeholder})`}\n                                />\n                            )}\n                        />\n                    </div>\n                </ClickAwayListener>\n            </LocalizationProvider>\n        </div>\n    )\n\n}\n\nexport default CustomDatePicker;\n\nCustomAutoComplete.propTypes = {\n    value: PropTypes.object,\n    minDate: PropTypes.object,\n    label: PropTypes.String,\n    onError: PropTypes.func,\n    onChange: PropTypes.func\n}"]},"metadata":{},"sourceType":"module"}