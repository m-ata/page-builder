{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/Details/RoomSelection/index.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport { UseOrest } from '@webcms/orest';\nimport { connect, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport Alert from '@material-ui/lab/Alert';\nimport WebCmsGlobal from 'components/webcms-global';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport RoomCard from './RoomCard';\nimport { useSnackbar } from 'notistack';\nimport { updateState } from 'state/actions';\nimport LoadingSpinner from 'components/LoadingSpinner';\nconst CleanAndCheckInRoomStatus = 'VC';\n\nconst RoomSelection = ({\n  updateState,\n  open,\n  onClose,\n  useClientOrestState,\n  useClientReservation,\n  confirmClassName\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    0: chooseRoomNo,\n    1: setChooseRoomNo\n  } = useState(null);\n  const {\n    0: roomBookListData,\n    1: setRoomBookListData\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isPatchLoading,\n    1: setIsPatchLoading\n  } = useState(false);\n  const useToken = useSelector(state => {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  useEffect(() => {\n    let active = true;\n\n    if (active && open) {\n      setIsLoading(true);\n      const roomBookListQuery = {\n        startdate: useClientReservation.checkin,\n        enddate: useClientReservation.checkout,\n        reservno: useClientReservation.reservno,\n        roomtypeid: (useClientReservation === null || useClientReservation === void 0 ? void 0 : useClientReservation.roomtypeid) || null,\n        hotelrefno: useClientReservation.hotelrefno,\n        limit: 0\n      };\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'room/book/list',\n        token: useToken,\n        params: roomBookListQuery\n      }).then(roomBookListResponse => {\n        if (active) {\n          if (roomBookListResponse.status === 200 && roomBookListResponse.data.count > 0) {\n            setRoomBookListData(roomBookListResponse.data.data);\n            setIsLoading(false);\n          } else {\n            setRoomBookListData(null);\n            setIsLoading(false);\n          }\n        }\n      }).catch(() => {\n        setRoomBookListData(null);\n        setIsLoading(false);\n      });\n    }\n\n    return () => {\n      active = false;\n    };\n  }, [open]);\n\n  const setRoomNoForReservation = (roomNo, hotelrefno) => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: `reservat/patch/${useClientReservation.gid}`,\n      method: 'patch',\n      token: useToken,\n      params: {\n        hotelrefno: hotelrefno\n      },\n      data: {\n        roomno: roomNo\n      }\n    }).then(reservatPatchResponse => {\n      if (reservatPatchResponse.status === 200 && reservatPatchResponse.data.count > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }).catch(() => {\n      return false;\n    });\n  };\n\n  const getClientReservNo = async clientId => {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'client/reservno',\n      token: useToken,\n      params: {\n        clientid: clientId,\n        isgapp: true\n      }\n    }).then(clientReservnoResponse => {\n      if (clientReservnoResponse.status === 200 && clientReservnoResponse.data.count > 0) {\n        updateState('guest', 'changeHotelRefno', clientReservnoResponse.data.data.hotelrefno);\n        updateState('guest', 'changeHotelName', clientReservnoResponse.data.data.hotelname);\n        updateState('guest', 'clientReservation', clientReservnoResponse.data.data);\n      } else {\n        updateState('guest', 'clientReservation', null);\n      }\n    });\n  };\n\n  const handleSetRoomNo = async () => {\n    setIsPatchLoading(true);\n    const isRoomSelected = await setRoomNoForReservation(chooseRoomNo, useClientReservation.hotelrefno);\n\n    if (isRoomSelected) {\n      updateState('guest', 'clientReservIsLoading', true);\n      await getClientReservNo(useClientOrestState.id);\n      enqueueSnackbar(t('str_theRoomHasBeenSelectedYouCanCheckIn'), {\n        variant: 'success'\n      });\n      updateState('guest', 'clientReservIsLoading', false);\n      setIsPatchLoading(false);\n      onClose();\n    } else {\n      enqueueSnackbar(t('str_theRoomWasNotSelectedYouCanTryAgainWithADifferentRoom'), {\n        variant: 'warning'\n      });\n      setIsPatchLoading(false);\n    }\n  };\n\n  return __jsx(Dialog, {\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: open,\n    onClose: () => onClose(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, __jsx(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, t('str_selectYourRoom')), __jsx(DialogContent, {\n    dividers: true,\n    style: {\n      overflowX: 'hidden',\n      overflowY: 'scroll'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, isLoading ? __jsx(LoadingSpinner, {\n    size: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 30\n    }\n  }) : __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 23\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, __jsx(Alert, {\n    severity: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }, t('str_clickOnTheRoomYouWantToSelectAndThenPressTheConfirmButton'))), roomBookListData && roomBookListData.filter(room => room.roomstate === CleanAndCheckInRoomStatus).length > 0 ? roomBookListData.filter(room => room.roomstate === CleanAndCheckInRoomStatus).map((item, i) => {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 37\n      }\n    }, __jsx(RoomCard, {\n      roomNo: item.roomno,\n      roomType: item.roomtypedesc,\n      roomTypeThumbnail: item.imgfileurl ? GENERAL_SETTINGS.STATIC_URL + item.imgfileurl : '/imgs/not-found.png',\n      bedType: item.bedtypedesc,\n      isSelect: String(item.roomno) === String(chooseRoomNo),\n      onSelect: roomNo => setChooseRoomNo(roomNo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 41\n      }\n    }));\n  }) : __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 31\n    }\n  }, __jsx(Alert, {\n    variant: \"outlined\",\n    severity: \"warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 33\n    }\n  }, t('str_thereAreNoSelectableRoomsAvailableForThisRoomType'))))), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: () => onClose(),\n    color: \"primary\",\n    disabled: isPatchLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, t('str_close')), __jsx(Button, {\n    startIcon: isPatchLoading ? __jsx(LoadingSpinner, {\n      size: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 49\n      }\n    }) : null,\n    className: confirmClassName,\n    onClick: () => handleSetRoomNo(),\n    disabled: isPatchLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, t('str_confirm'))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomSelection);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/Details/RoomSelection/index.js"],"names":["React","useContext","useEffect","useState","UseOrest","connect","useSelector","Button","Dialog","DialogActions","DialogContent","DialogTitle","Grid","Alert","WebCmsGlobal","useTranslation","RoomCard","useSnackbar","updateState","LoadingSpinner","CleanAndCheckInRoomStatus","RoomSelection","open","onClose","useClientOrestState","useClientReservation","confirmClassName","t","GENERAL_SETTINGS","enqueueSnackbar","chooseRoomNo","setChooseRoomNo","roomBookListData","setRoomBookListData","isLoading","setIsLoading","isPatchLoading","setIsPatchLoading","useToken","state","orest","currentUser","auth","access_token","active","roomBookListQuery","startdate","checkin","enddate","checkout","reservno","roomtypeid","hotelrefno","limit","apiUrl","OREST_URL","endpoint","token","params","then","roomBookListResponse","status","data","count","catch","setRoomNoForReservation","roomNo","gid","method","roomno","reservatPatchResponse","getClientReservNo","clientId","clientid","isgapp","clientReservnoResponse","hotelname","handleSetRoomNo","isRoomSelected","id","variant","overflowX","overflowY","filter","room","roomstate","length","map","item","i","roomtypedesc","imgfileurl","STATIC_URL","bedtypedesc","String","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { UseOrest } from '@webcms/orest'\nimport { connect, useSelector } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Grid from '@material-ui/core/Grid'\nimport Alert from '@material-ui/lab/Alert'\nimport WebCmsGlobal from 'components/webcms-global'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport RoomCard from './RoomCard'\nimport { useSnackbar } from 'notistack'\nimport { updateState } from 'state/actions'\nimport LoadingSpinner from 'components/LoadingSpinner'\nconst CleanAndCheckInRoomStatus = 'VC'\n\nconst RoomSelection = ({ updateState, open, onClose, useClientOrestState, useClientReservation, confirmClassName }) => {\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const { enqueueSnackbar } = useSnackbar()\n    const [chooseRoomNo, setChooseRoomNo] = useState(null)\n    const [roomBookListData, setRoomBookListData] = useState(false)\n    const [isLoading, setIsLoading] = useState(false)\n    const [isPatchLoading, setIsPatchLoading] = useState(false)\n    const useToken = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n\n    useEffect(() => {\n        let active = true\n        if (active && open) {\n            setIsLoading(true)\n            const roomBookListQuery = {\n                startdate: useClientReservation.checkin,\n                enddate: useClientReservation.checkout,\n                reservno: useClientReservation.reservno,\n                roomtypeid: useClientReservation?.roomtypeid || null,\n                hotelrefno: useClientReservation.hotelrefno,\n                limit: 0,\n            }\n\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'room/book/list',\n                token: useToken,\n                params: roomBookListQuery,\n            }).then((roomBookListResponse) => {\n                if (active) {\n                    if (roomBookListResponse.status === 200 && roomBookListResponse.data.count > 0) {\n                        setRoomBookListData(roomBookListResponse.data.data)\n                        setIsLoading(false)\n                    } else {\n                        setRoomBookListData(null)\n                        setIsLoading(false)\n                    }\n                }\n            }).catch(() => {\n                setRoomBookListData(null)\n                setIsLoading(false)\n            })\n        }\n\n        return () => {\n            active = false\n        }\n\n    }, [open])\n\n    const setRoomNoForReservation = (roomNo, hotelrefno) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: `reservat/patch/${useClientReservation.gid}`,\n            method: 'patch',\n            token: useToken,\n            params: {\n                hotelrefno: hotelrefno\n            },\n            data: {\n                roomno: roomNo,\n            },\n        }).then((reservatPatchResponse) => {\n            if (reservatPatchResponse.status === 200 && reservatPatchResponse.data.count > 0) {\n                return true\n            } else {\n                return false\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const getClientReservNo = async (clientId) =>{\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'client/reservno',\n            token: useToken,\n            params: {\n                clientid: clientId,\n                isgapp: true,\n            },\n        }).then((clientReservnoResponse) => {\n            if (clientReservnoResponse.status === 200 && clientReservnoResponse.data.count > 0) {\n                updateState('guest', 'changeHotelRefno', clientReservnoResponse.data.data.hotelrefno)\n                updateState('guest', 'changeHotelName', clientReservnoResponse.data.data.hotelname)\n                updateState('guest', 'clientReservation', clientReservnoResponse.data.data)\n            } else {\n                updateState('guest', 'clientReservation', null)\n            }\n        })\n    }\n\n    const handleSetRoomNo = async () => {\n        setIsPatchLoading(true)\n        const isRoomSelected = await setRoomNoForReservation(chooseRoomNo, useClientReservation.hotelrefno)\n        if(isRoomSelected){\n            updateState('guest', 'clientReservIsLoading', true)\n            await getClientReservNo(useClientOrestState.id)\n            enqueueSnackbar(t('str_theRoomHasBeenSelectedYouCanCheckIn'), { variant: 'success' })\n            updateState('guest', 'clientReservIsLoading', false)\n            setIsPatchLoading(false)\n            onClose()\n        }else {\n            enqueueSnackbar(t('str_theRoomWasNotSelectedYouCanTryAgainWithADifferentRoom'), { variant: 'warning' })\n            setIsPatchLoading(false)\n        }\n    }\n\n    return (\n        <Dialog fullWidth maxWidth='md' open={open} onClose={() => onClose()}>\n            <DialogTitle>{t('str_selectYourRoom')}</DialogTitle>\n            <DialogContent dividers style={{ overflowX: 'hidden', overflowY: 'scroll' }}>\n                {isLoading ? <LoadingSpinner size={40} />\n                    : <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <Alert severity=\"info\">\n                                {t('str_clickOnTheRoomYouWantToSelectAndThenPressTheConfirmButton')}\n                            </Alert>\n                        </Grid>\n                        {roomBookListData\n                        && roomBookListData.filter(room => room.roomstate === CleanAndCheckInRoomStatus).length > 0\n                            ? roomBookListData.filter(room => room.roomstate === CleanAndCheckInRoomStatus).map((item, i) => {\n                                return (\n                                    <Grid item xs={12} sm={6} key={i}>\n                                        <RoomCard\n                                            roomNo={item.roomno}\n                                            roomType={item.roomtypedesc}\n                                            roomTypeThumbnail={item.imgfileurl ? GENERAL_SETTINGS.STATIC_URL + item.imgfileurl : '/imgs/not-found.png'}\n                                            bedType={item.bedtypedesc}\n                                            isSelect={String(item.roomno) === String(chooseRoomNo)}\n                                            onSelect={(roomNo) => setChooseRoomNo(roomNo)}\n                                        />\n                                    </Grid>\n                                )\n                            })\n                            : <Grid item xs={12}>\n                                <Alert variant='outlined' severity='warning'>\n                                    {t('str_thereAreNoSelectableRoomsAvailableForThisRoomType')}\n                                </Alert>\n                            </Grid>\n                        }\n                    </Grid>\n                }\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick={() => onClose()}\n                    color='primary'\n                    disabled={isPatchLoading}\n                >\n                    {t('str_close')}\n                </Button>\n                <Button\n                    startIcon={isPatchLoading ? <LoadingSpinner size={16}/> : null}\n                    className={confirmClassName}\n                    onClick={() => handleSetRoomNo()}\n                    disabled={isPatchLoading}\n                >\n                    {t('str_confirm')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomSelection)\n"]},"metadata":{},"sourceType":"module"}