{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/website/pages/WebsiteImage.js\";\nvar __jsx = React.createElement;\nimport React, { memo, useContext, useEffect, useState } from 'react';\nimport WebCmsGlobal from 'components/webcms-global';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ThumbnailSliderModal from './SliderModal';\nimport clsx from 'clsx';\nconst useStyles = makeStyles(() => ({\n  box: {\n    position: 'relative',\n    textAlign: 'center',\n    color: 'white'\n  },\n  text: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    zIndex: 999,\n    height: '100%',\n    width: '100%'\n  },\n  textColor: {\n    color: props => {\n      var _props$imageData;\n\n      return props !== null && props !== void 0 && (_props$imageData = props.imageData) !== null && _props$imageData !== void 0 && _props$imageData.textColor ? props.imageData.textColor : '#000000';\n    }\n  },\n  image: {\n    width: '100%',\n    backgroundSize: 'cover',\n    borderRadius: 10,\n    height: props => {\n      if (props.sectionType === 'threecol') return 200;\n      if (props.sectionType === 'twocol') return 300;\n      if (props.sectionType === 'fullcol') return 'auto';\n    },\n    marginBottom: 8\n  },\n  cursorPointer: {\n    cursor: 'pointer'\n  }\n}));\n\nconst WebsiteImage = props => {\n  const {\n    imageData,\n    otherLangImage,\n    selectedLang,\n    defaultLang,\n    sectionImages,\n    itemID\n  } = props,\n        {\n    0: image,\n    1: setImage\n  } = useState(''),\n        {\n    0: isOpenSlider,\n    1: setIsOpenSlider\n  } = useState(false),\n        {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal),\n        classes = useStyles(props),\n        {\n    0: sliderImages,\n    1: setSliderImages\n  } = useState(sectionImages);\n  useEffect(() => {\n    if (imageData && imageData.gid) {\n      setImage({\n        fileurl: imageData.gid.fileurl,\n        title: selectedLang === defaultLang ? imageData.gid.title : otherLangImage.title,\n        description: selectedLang === defaultLang ? imageData.gid.description : otherLangImage.description\n      });\n    }\n\n    handleResetSliderImages();\n  }, [imageData, otherLangImage, sectionImages]);\n\n  const handleResetSliderImages = () => {\n    if (sectionImages !== null && sectionImages !== void 0 && sectionImages.length) setSliderImages(sectionImages.map(s => s.gid));\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, image && Object.keys(image).length > 0 && __jsx(\"div\", {\n    className: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, __jsx(\"img\", {\n    alt: 'image',\n    onClick: () => {\n      if (sliderImages !== null && sliderImages !== void 0 && sliderImages.length) {\n        let updatedSliderImages = [...sliderImages];\n        const img = sectionImages === null || sectionImages === void 0 ? void 0 : sectionImages.find(image => image.id === itemID);\n        const index = sectionImages === null || sectionImages === void 0 ? void 0 : sectionImages.indexOf(img);\n        const tmp = updatedSliderImages[0];\n        updatedSliderImages[0] = sliderImages[index];\n        updatedSliderImages[index] = tmp;\n        setSliderImages(updatedSliderImages);\n        setIsOpenSlider(true);\n      }\n    },\n    className: clsx({\n      [classes.image]: true,\n      [classes.cursorPointer]: sliderImages === null || sliderImages === void 0 ? void 0 : sliderImages.length\n    }),\n    src: GENERAL_SETTINGS.STATIC_URL + image.fileurl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: classes.textColor,\n    dangerouslySetInnerHTML: {\n      __html: image.title\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    className: classes.textColor,\n    dangerouslySetInnerHTML: {\n      __html: image.description\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }))), __jsx(ThumbnailSliderModal, {\n    open: isOpenSlider,\n    sliderTitle: (image === null || image === void 0 ? void 0 : image.title) || 'Image',\n    sliderDesc: image === null || image === void 0 ? void 0 : image.description,\n    onClose: e => {\n      setIsOpenSlider(e);\n      handleResetSliderImages();\n    },\n    sliderImages: sliderImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst memorizedWebsiteImage = /*#__PURE__*/memo(WebsiteImage);\nexport default memorizedWebsiteImage;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/website/pages/WebsiteImage.js"],"names":["React","memo","useContext","useEffect","useState","WebCmsGlobal","makeStyles","ThumbnailSliderModal","clsx","useStyles","box","position","textAlign","color","text","top","left","transform","zIndex","height","width","textColor","props","imageData","image","backgroundSize","borderRadius","sectionType","marginBottom","cursorPointer","cursor","WebsiteImage","otherLangImage","selectedLang","defaultLang","sectionImages","itemID","setImage","isOpenSlider","setIsOpenSlider","GENERAL_SETTINGS","classes","sliderImages","setSliderImages","gid","fileurl","title","description","handleResetSliderImages","length","map","s","Object","keys","updatedSliderImages","img","find","id","index","indexOf","tmp","STATIC_URL","__html","e","memorizedWebsiteImage"],"mappings":"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","sourcesContent":["import React, { memo, useContext, useEffect, useState } from 'react'\nimport WebCmsGlobal from 'components/webcms-global'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ThumbnailSliderModal from './SliderModal'\nimport clsx from 'clsx'\n\nconst useStyles = makeStyles(() => ({\n    box: {\n        position: 'relative',\n        textAlign: 'center',\n        color: 'white',\n    },\n    text: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        zIndex: 999,\n        height: '100%',\n        width: '100%',\n    },\n    textColor: {\n        color: (props) => (props?.imageData?.textColor ? props.imageData.textColor : '#000000'),\n    },\n    image: {\n        width: '100%',\n        backgroundSize: 'cover',\n        borderRadius: 10,\n        height: (props) => {\n            if (props.sectionType === 'threecol') return 200\n            if (props.sectionType === 'twocol') return 300\n            if (props.sectionType === 'fullcol') return 'auto'\n        },\n        marginBottom: 8\n    },\n    cursorPointer: {\n        cursor: 'pointer',\n    },\n}))\n\nconst WebsiteImage = (props) => {\n    const { imageData, otherLangImage, selectedLang, defaultLang, sectionImages, itemID } = props\n        , [image, setImage] = useState('')\n        , [isOpenSlider, setIsOpenSlider] = useState(false)\n        , { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n        , classes = useStyles(props)\n        , [sliderImages, setSliderImages] = useState(sectionImages)\n\n    useEffect(() => {\n        if (imageData && imageData.gid) {\n            setImage({\n                fileurl: imageData.gid.fileurl,\n                title: selectedLang === defaultLang ? imageData.gid.title : otherLangImage.title,\n                description: selectedLang === defaultLang ? imageData.gid.description : otherLangImage.description,\n            })\n        }\n        handleResetSliderImages()\n    }, [imageData, otherLangImage, sectionImages])\n\n    const handleResetSliderImages = () => {\n        if (sectionImages?.length) setSliderImages(sectionImages.map((s) => s.gid))\n    }\n\n    return (\n        <React.Fragment>\n            {image && Object.keys(image).length > 0 && (\n                <div className={classes.box}>\n                    {/*<div style={{backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL}${image.fileurl})`}}*/}\n                    {/*     className={clsx({*/}\n                    {/*         [classes.image]: true,*/}\n                    {/*         [classes.cursorPointer]: sliderImages?.length,*/}\n                    {/*     })}*/}\n                    {/*     onClick={() => {*/}\n                    {/*         if (sliderImages?.length) {*/}\n                    {/*             let updatedSliderImages = [...sliderImages]*/}\n                    {/*             const img = sectionImages?.find((image) => image.id === itemID)*/}\n                    {/*             const index = sectionImages?.indexOf(img)*/}\n                    {/*             const tmp = updatedSliderImages[0]*/}\n                    {/*             updatedSliderImages[0] = sliderImages[index]*/}\n                    {/*             updatedSliderImages[index] = tmp*/}\n                    {/*             setSliderImages(updatedSliderImages)*/}\n                    {/*             setIsOpenSlider(true)*/}\n                    {/*         }*/}\n                    {/*     }}*/}\n                    {/*/>*/}\n                    <img\n                        alt={'image'}\n                        onClick={() => {\n                            if (sliderImages?.length) {\n                                let updatedSliderImages = [...sliderImages]\n                                const img = sectionImages?.find((image) => image.id === itemID)\n                                const index = sectionImages?.indexOf(img)\n                                const tmp = updatedSliderImages[0]\n                                updatedSliderImages[0] = sliderImages[index]\n                                updatedSliderImages[index] = tmp\n                                setSliderImages(updatedSliderImages)\n                                setIsOpenSlider(true)\n                            }\n                        }}\n                        className={clsx({\n                            [classes.image]: true,\n                            [classes.cursorPointer]: sliderImages?.length,\n                        })}\n                        src={GENERAL_SETTINGS.STATIC_URL + image.fileurl}\n                    />\n                    <div className={classes.text}>\n                        <div className={classes.textColor} dangerouslySetInnerHTML={{ __html: image.title }}/>\n                        <div className={classes.textColor} dangerouslySetInnerHTML={{ __html: image.description }} />\n                    </div>\n                </div>\n            )}\n            <ThumbnailSliderModal\n                open={isOpenSlider}\n                sliderTitle={image?.title || 'Image'}\n                sliderDesc={image?.description}\n                onClose={(e) => {\n                    setIsOpenSlider(e)\n                    handleResetSliderImages()\n                }}\n                sliderImages={sliderImages}\n            />\n        </React.Fragment>\n    )\n}\n\nconst memorizedWebsiteImage = memo(WebsiteImage)\n\nexport default memorizedWebsiteImage\n"]},"metadata":{},"sourceType":"module"}