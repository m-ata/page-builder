{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider-only/Slider.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\nimport { ViewList } from \"@webcms/orest\";\nimport { isErrorMsg, OREST_ENDPOINT } from \"../../../../../../../model/orest/constants\";\nimport WebCmsGlobal from \"components/webcms-global\";\nimport { useRouter } from \"next/router\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PrevIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport NextIcon from '@material-ui/icons/KeyboardArrowRight';\nimport { Typography, Button } from \"@material-ui/core\";\nimport Image from 'next/image';\nimport LoadingSpinner from \"../../../../../../LoadingSpinner\";\nimport { toast } from \"react-toastify\";\nimport { COLORS } from \"../../../../constants\";\nimport { useSelector } from \"react-redux\";\nimport ThumbnailSliderModal from \"../../../../../../website/pages/SliderModal\";\nconst useStyles = makeStyles(theme => ({\n  box: {\n    position: \"relative\",\n    textAlign: \"center\",\n    color: \"white\"\n  },\n  title: {\n    fontSize: 30,\n    fontFamily: 'sans-serif',\n    fontWeight: 'bolder',\n    \"-webkit-text-fill-color\": \"#ffffff\",\n    \"-webkit-text-stroke-width\": \"0.8px\",\n    \"-webkit-text-stroke-color\": \"#000000\"\n  },\n  description: {\n    fontSize: 22,\n    fontFamily: 'sans-serif',\n    fontWeight: 'bolder',\n    \"-webkit-text-fill-color\": \"#ffffff\",\n    \"-webkit-text-stroke-width\": \"0.8px\",\n    \"-webkit-text-stroke-color\": \"#000000\"\n  },\n  ctaButton: {\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(1),\n    borderRadius: 20,\n    backgroundColor: \"white\"\n  },\n  sliderBg: {\n    border: '1px solid white',\n    backgroundColor: '#FFFFFF',\n    borderRadius: '50%'\n  },\n  sliderArrow: {\n    color: \"#000000\",\n    fontSize: 40\n  },\n  cursorPointer: {\n    cursor: \"pointer\"\n  }\n}));\n\nconst SliderOnlyPreview = props => {\n  const {\n    masterid,\n    handleDisable\n  } = props;\n  const {\n    GENERAL_SETTINGS,\n    token\n  } = useContext(WebCmsGlobal); //local variable\n\n  const {\n    0: sliderImages,\n    1: setSliderImages\n  } = useState([]);\n  const {\n    0: sliderObj,\n    1: setSliderObj\n  } = useState({});\n  const {\n    0: isImageCta,\n    1: setImageCta\n  } = useState(false);\n  const {\n    0: isImageTitleDesc,\n    1: setImageTitleDesc\n  } = useState(false);\n  const {\n    0: isLoaded,\n    1: setIsLoaded\n  } = useState(false);\n  const {\n    0: isOpenSlider,\n    1: setIsOpenSlider\n  } = useState(false);\n  const classes = useStyles();\n  const router = useRouter();\n  const clientToken = useSelector(state => state.orest.currentUser !== null ? state.orest.currentUser.auth.access_token : router.query.authToken);\n  const companyId = router.query.companyID || GENERAL_SETTINGS.HOTELREFNO;\n  const authToken = token || clientToken || router.query.authToken;\n  useEffect(() => {\n    if (masterid) {\n      resetSlider();\n      setIsLoaded(false);\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        params: {\n          query: `masterid:${masterid}`,\n          hotelrefno: Number(companyId)\n        }\n      }).then(res1 => {\n        setIsLoaded(true);\n\n        if (res1.status === 200) {\n          var _res1$data, _res1$data$data;\n\n          if ((res1 === null || res1 === void 0 ? void 0 : (_res1$data = res1.data) === null || _res1$data === void 0 ? void 0 : (_res1$data$data = _res1$data.data) === null || _res1$data$data === void 0 ? void 0 : _res1$data$data.length) > 0) {\n            setIsLoaded(false);\n            setSliderObj(res1.data.data[0]);\n            ViewList({\n              apiUrl: GENERAL_SETTINGS.OREST_URL,\n              endpoint: OREST_ENDPOINT.HCMITEMIMG,\n              token: authToken,\n              params: {\n                query: `sliderid:${res1.data.data[0].id}`,\n                sort: 'orderno',\n                hotelrefno: Number(companyId)\n              }\n            }).then(res2 => {\n              setIsLoaded(true);\n\n              if (res2.status === 200) {\n                if (res2.data.data.length > 0) {\n                  let updatedImages = [];\n                  res2.data.data.map(data => {\n                    updatedImages.push(data);\n                  });\n\n                  for (const img of updatedImages) {\n                    if (img.cta) setImageCta(true);\n\n                    if (img.title || img.description) {\n                      setImageTitleDesc(true);\n                    }\n                  }\n\n                  setSliderImages(updatedImages);\n                } else {\n                  toast.error('Image not found against the slider. Please add images first!', {\n                    position: toast.POSITION.TOP_RIGHT\n                  });\n                }\n              } else {\n                const retErr = isErrorMsg(res2);\n                toast.error(retErr.errorMsg, {\n                  position: toast.POSITION.TOP_RIGHT\n                });\n              }\n            });\n          } else {\n            toast.error('Slider not found against the selection. Please add slider first!', {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        } else {\n          const retErr = isErrorMsg(res1);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    }\n  }, [masterid]);\n  useEffect(() => {\n    if (handleDisable) {\n      sliderImages.length > 0 ? handleDisable(false) : handleDisable(true);\n    }\n  }, [sliderImages]);\n\n  const resetSlider = () => {\n    setSliderImages([]);\n    setSliderObj({});\n    setImageCta(false);\n    setImageTitleDesc(false);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, !isLoaded ? __jsx(LoadingSpinner, {\n    size: 40,\n    style: {\n      color: COLORS.secondary\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 29\n    }\n  }) : __jsx(Typography, {\n    component: 'div',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, sliderImages.length > 0 && __jsx(Carousel, {\n    slide: true,\n    nextIcon: __jsx(Typography, {\n      component: 'div',\n      className: classes.sliderBg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 49\n      }\n    }, __jsx(NextIcon, {\n      className: classes.sliderArrow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 108\n      }\n    })),\n    prevIcon: __jsx(Typography, {\n      component: 'div',\n      className: classes.sliderBg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 49\n      }\n    }, __jsx(PrevIcon, {\n      className: classes.sliderArrow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 108\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 29\n    }\n  }, sliderImages.map((image, index) => {\n    return __jsx(Carousel.Item, {\n      key: `crousel-item-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 45\n      }\n    }, __jsx(\"div\", {\n      style: {\n        backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL + (image === null || image === void 0 ? void 0 : image.fileurl)})`,\n        minHeight: 'calc(100vh - 50vh)',\n        width: '100%',\n        backgroundSize: 'cover',\n        height: '100%',\n        cursor: 'pointer'\n      },\n      onClick: () => setIsOpenSlider(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 49\n      }\n    }), __jsx(Carousel.Caption, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 49\n      }\n    }, isImageTitleDesc ? __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: classes.title,\n      dangerouslySetInnerHTML: {\n        __html: image === null || image === void 0 ? void 0 : image.title\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 61\n      }\n    }), __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: image === null || image === void 0 ? void 0 : image.description\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 61\n      }\n    })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: classes.title,\n      dangerouslySetInnerHTML: {\n        __html: sliderObj === null || sliderObj === void 0 ? void 0 : sliderObj.title\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 61\n      }\n    }), __jsx(\"div\", {\n      className: classes.description,\n      dangerouslySetInnerHTML: {\n        __html: sliderObj === null || sliderObj === void 0 ? void 0 : sliderObj.description\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 61\n      }\n    })), isImageCta ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 70\n      }\n    }, image.cta && __jsx(Button, {\n      variant: \"contained\",\n      size: \"small\",\n      color: \"primary\",\n      \"aria-label\": \"add\",\n      className: classes.ctaButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 78\n      }\n    }, __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: image.cta\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 69\n      }\n    }))) : __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 66\n      }\n    }, sliderObj.cta && __jsx(Button, {\n      variant: \"contained\",\n      size: \"small\",\n      color: \"primary\",\n      \"aria-label\": \"add\",\n      className: classes.ctaButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 82\n      }\n    }, __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: sliderObj.cta\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 69\n      }\n    })))));\n  })), __jsx(ThumbnailSliderModal, {\n    open: isOpenSlider,\n    sliderTitle: sliderObj === null || sliderObj === void 0 ? void 0 : sliderObj.title,\n    sliderDesc: sliderObj === null || sliderObj === void 0 ? void 0 : sliderObj.description,\n    onClose: e => setIsOpenSlider(e),\n    sliderImages: sliderImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 25\n    }\n  })));\n};\n\nexport default SliderOnlyPreview;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider-only/Slider.js"],"names":["React","useContext","useEffect","useState","Carousel","ViewList","isErrorMsg","OREST_ENDPOINT","WebCmsGlobal","useRouter","makeStyles","PrevIcon","NextIcon","Typography","Button","Image","LoadingSpinner","toast","COLORS","useSelector","ThumbnailSliderModal","useStyles","theme","box","position","textAlign","color","title","fontSize","fontFamily","fontWeight","description","ctaButton","marginRight","spacing","marginTop","borderRadius","backgroundColor","sliderBg","border","sliderArrow","cursorPointer","cursor","SliderOnlyPreview","props","masterid","handleDisable","GENERAL_SETTINGS","token","sliderImages","setSliderImages","sliderObj","setSliderObj","isImageCta","setImageCta","isImageTitleDesc","setImageTitleDesc","isLoaded","setIsLoaded","isOpenSlider","setIsOpenSlider","classes","router","clientToken","state","orest","currentUser","auth","access_token","query","authToken","companyId","companyID","HOTELREFNO","resetSlider","apiUrl","OREST_URL","endpoint","HCMITEMSLD","params","hotelrefno","Number","then","res1","status","data","length","HCMITEMIMG","id","sort","res2","updatedImages","map","push","img","cta","error","POSITION","TOP_RIGHT","retErr","errorMsg","secondary","image","index","backgroundImage","STATIC_URL","fileurl","minHeight","width","backgroundSize","height","__html","e"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { ViewList } from \"@webcms/orest\";\nimport {isErrorMsg, OREST_ENDPOINT} from \"../../../../../../../model/orest/constants\";\nimport WebCmsGlobal from \"components/webcms-global\";\nimport { useRouter } from \"next/router\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PrevIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport NextIcon from '@material-ui/icons/KeyboardArrowRight';\nimport {Typography, Button} from \"@material-ui/core\";\nimport Image from 'next/image'\nimport LoadingSpinner from \"../../../../../../LoadingSpinner\";\nimport {toast} from \"react-toastify\";\nimport {COLORS} from \"../../../../constants\";\nimport {useSelector} from \"react-redux\";\nimport ThumbnailSliderModal from \"../../../../../../website/pages/SliderModal\";\n\nconst useStyles = makeStyles(theme => ({\n    box: {\n        position: \"relative\",\n        textAlign: \"center\",\n        color: \"white\"\n    },\n    title: {\n        fontSize: 30,\n        fontFamily: 'sans-serif',\n        fontWeight: 'bolder',\n        \"-webkit-text-fill-color\": \"#ffffff\",\n        \"-webkit-text-stroke-width\": \"0.8px\",\n        \"-webkit-text-stroke-color\": \"#000000\"\n    },\n    description: {\n        fontSize: 22,\n        fontFamily: 'sans-serif',\n        fontWeight: 'bolder',\n        \"-webkit-text-fill-color\": \"#ffffff\",\n        \"-webkit-text-stroke-width\": \"0.8px\",\n        \"-webkit-text-stroke-color\": \"#000000\"\n    },\n    ctaButton: {\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        borderRadius: 20,\n        backgroundColor: \"white\"\n    },\n    sliderBg: {\n        border: '1px solid white',\n        backgroundColor: '#FFFFFF',\n        borderRadius: '50%'\n    },\n    sliderArrow: {\n        color: \"#000000\",\n        fontSize: 40,\n    },\n    cursorPointer: {\n        cursor: \"pointer\"\n    }\n}))\n\nconst SliderOnlyPreview = (props) => {\n\n    const { masterid, handleDisable } = props;\n    const { GENERAL_SETTINGS, token } = useContext(WebCmsGlobal);\n    //local variable\n    const [sliderImages, setSliderImages] = useState([]);\n    const [sliderObj, setSliderObj] = useState({});\n    const [isImageCta, setImageCta] = useState(false);\n    const [isImageTitleDesc, setImageTitleDesc] = useState(false);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [ isOpenSlider, setIsOpenSlider ] = useState(false)\n\n    const classes = useStyles();\n\n    const router = useRouter();\n    const clientToken = useSelector((state) => state.orest.currentUser !== null ? state.orest.currentUser.auth.access_token : router.query.authToken)\n    const companyId = router.query.companyID || GENERAL_SETTINGS.HOTELREFNO;\n    const authToken = token || clientToken || router.query.authToken;\n\n    useEffect(() => {\n        if (masterid) {\n            resetSlider();\n            setIsLoaded(false);\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                params: {\n                    query: `masterid:${masterid}`,\n                    hotelrefno: Number(companyId)\n                }\n            }).then(res1 => {\n                setIsLoaded(true);\n                if (res1.status === 200) {\n                    if (res1?.data?.data?.length > 0) {\n                        setIsLoaded(false);\n                        setSliderObj(res1.data.data[0]);\n                        ViewList({\n                            apiUrl: GENERAL_SETTINGS.OREST_URL,\n                            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                            token: authToken,\n                            params: {\n                                query: `sliderid:${res1.data.data[0].id}`,\n                                sort: 'orderno',\n                                hotelrefno: Number(companyId)\n                            }\n                        }).then(res2 => {\n                            setIsLoaded(true);\n                            if (res2.status === 200) {\n                                if (res2.data.data.length > 0) {\n                                    let updatedImages = [];\n                                    res2.data.data.map((data) => {\n                                        updatedImages.push(data);\n                                    });\n                                    for (const img of updatedImages) {\n                                        if (img.cta) setImageCta(true);\n                                        if (img.title || img.description) {\n                                            setImageTitleDesc(true);\n                                        }\n                                    }\n                                    setSliderImages(updatedImages);\n                                } else {\n                                    toast.error('Image not found against the slider. Please add images first!', {\n                                        position: toast.POSITION.TOP_RIGHT\n                                    });\n                                }\n                            } else {\n                                const retErr = isErrorMsg(res2);\n                                toast.error(retErr.errorMsg, {\n                                    position: toast.POSITION.TOP_RIGHT\n                                });\n                            }\n                        })\n                    } else {\n                        toast.error('Slider not found against the selection. Please add slider first!', {\n                            position: toast.POSITION.TOP_RIGHT\n                        });\n                    }\n                } else {\n                    const retErr = isErrorMsg(res1);\n                    toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT\n                    });\n                }\n            })\n        }\n    }, [masterid]);\n\n    useEffect(() => {\n        if (handleDisable)\n        {\n            sliderImages.length > 0 ? handleDisable(false) : handleDisable(true);\n        }\n    }, [sliderImages]);\n\n    const resetSlider = () => {\n        setSliderImages([]);\n        setSliderObj({});\n        setImageCta(false);\n        setImageTitleDesc(false);\n    }\n\n    return (\n        <React.Fragment>\n            {\n                !isLoaded ? <LoadingSpinner size={40} style={{color: COLORS.secondary}} /> :\n                    <Typography component={'div'}>\n                    {\n                        sliderImages.length > 0 &&\n                            <Carousel slide={true}\n                                      nextIcon={<Typography component={'div'} className={classes.sliderBg}><NextIcon\n                                          className={classes.sliderArrow}/></Typography>}\n                                      prevIcon={<Typography component={'div'} className={classes.sliderBg}><PrevIcon\n                                          className={classes.sliderArrow}/></Typography>}\n                            >\n                                {\n                                    sliderImages.map((image, index) => {\n                                        return (\n                                            <Carousel.Item key={`crousel-item-${index}`}>\n                                                <div style={{\n                                                    backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL + image?.fileurl})`,\n                                                    minHeight: 'calc(100vh - 50vh)',\n                                                    width: '100%',\n                                                    backgroundSize: 'cover',\n                                                    height: '100%',\n                                                    cursor: 'pointer'\n                                                }} onClick={()=> setIsOpenSlider(true)}></div>\n                                                {/*<Image*/}\n                                                {/*    src={GENERAL_SETTINGS.STATIC_URL + image.fileurl}*/}\n                                                {/*    alt={'Slider Image'}*/}\n                                                {/*    width={window.screen.width}*/}\n                                                {/*    height={'100%'}*/}\n                                                {/*    layout={'responsive'}*/}\n                                                {/*    onClick={()=> setIsOpenSlider(true)}*/}\n                                                {/*    className={classes.cursorPointer}*/}\n                                                {/*/>*/}\n                                                <Carousel.Caption>\n                                                    {\n                                                        isImageTitleDesc ? <>\n                                                            <div className={classes.title} dangerouslySetInnerHTML={{__html: image?.title}}></div>\n                                                            <div dangerouslySetInnerHTML={{__html: image?.description}}></div>\n                                                        </> : <>\n                                                            <div className={classes.title} dangerouslySetInnerHTML={{__html: sliderObj?.title}}></div>\n                                                            <div className={classes.description} dangerouslySetInnerHTML={{__html: sliderObj?.description}}></div>\n                                                        </>\n                                                    }\n                                                    {\n                                                        isImageCta ? <div>\n                                                            {\n                                                                image.cta && <Button\n                                                                    variant=\"contained\"\n                                                                    size=\"small\"\n                                                                    color=\"primary\"\n                                                                    aria-label=\"add\"\n                                                                    className={classes.ctaButton}\n                                                                >\n                                                                    <div dangerouslySetInnerHTML={{ __html: image.cta }}></div>\n                                                                </Button>\n                                                            }\n                                                        </div> : <div>\n                                                            {\n                                                                sliderObj.cta && <Button\n                                                                    variant=\"contained\"\n                                                                    size=\"small\"\n                                                                    color=\"primary\"\n                                                                    aria-label=\"add\"\n                                                                    className={classes.ctaButton}\n                                                                >\n                                                                    <div dangerouslySetInnerHTML={{ __html: sliderObj.cta }}></div>\n                                                                </Button>\n                                                            }\n                                                        </div>\n                                                    }\n                                                </Carousel.Caption>\n                                            </Carousel.Item>\n                                        )\n                                    })\n                                }\n                            </Carousel>\n                    }\n                        <ThumbnailSliderModal open={isOpenSlider} sliderTitle={sliderObj?.title} sliderDesc={sliderObj?.description} onClose={(e)=> setIsOpenSlider(e)} sliderImages={sliderImages} />\n                </Typography>\n            }\n        </React.Fragment>\n    )\n\n}\n\nexport default SliderOnlyPreview;"]},"metadata":{},"sourceType":"module"}