{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/MyProfile/SurveyCard.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport styles from './style/SurveyCard.style';\nimport LoadingSpinner from 'components/LoadingSpinner';\nimport axios from \"axios\";\nimport { DEFAULT_OREST_TOKEN } from 'model/orest/constants';\nimport { connect, useSelector } from 'react-redux';\nimport WebCmsGlobal from 'components/webcms-global';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Image from 'next/image';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport DefaultSurveyImage from '../../../../assets/img/loyalty/default/survey.jpg';\nimport { makeStyles } from '@material-ui/core/styles';\nimport stylesTabPanel from '../style/TabPanel.style';\nimport moment from 'moment';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport SurveyTreeDialog from '../../../survey/surveytree/dialog';\nimport { useSnackbar } from 'notistack';\nconst useStyles = makeStyles(styles);\nconst useStylesTabPanel = makeStyles(stylesTabPanel);\n\nconst SurveyCard = props => {\n  const {\n    survey,\n    clientId,\n    state\n  } = props;\n  const classes = useStyles();\n  const classesTabPanel = useStylesTabPanel();\n  const {\n    t\n  } = useTranslation();\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    0: openSurveyData,\n    1: setOpenSurveyData\n  } = useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); //redux\n\n  const loginfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo);\n  let hotelRefno = loginfo && loginfo.hotelrefno || GENERAL_SETTINGS.HOTELREFNO;\n  const reservBase = state.clientReservation || false;\n  const token = useSelector(state => state.orest.currentUser !== null ? state.orest.currentUser.auth.access_token : DEFAULT_OREST_TOKEN);\n  const isClient = loginfo.roletype === '6500310';\n  const isPortal = GENERAL_SETTINGS.ISPORTAL; //state\n\n  const {\n    0: image,\n    1: setImage\n  } = useState(null);\n  useEffect(() => {\n    let active = true;\n\n    if (active) {\n      if (survey.mid) {\n        axios({\n          url: `${GENERAL_SETTINGS.OREST_URL}/tools/file/download`,\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          },\n          method: 'get',\n          responseType: 'arraybuffer',\n          params: {\n            mid: survey.mid,\n            code: 'PHOTO',\n            hotelrefno: hotelRefno\n          }\n        }).then(r => {\n          if (active) {\n            if (r.status === 200) {\n              let blob = new Blob([r.data], {\n                type: r.data.type\n              });\n              let url = URL.createObjectURL(blob);\n              setImage(url);\n            }\n          }\n        });\n      }\n    }\n\n    return () => {\n      active = false;\n    };\n  }, []);\n\n  if (!survey) {\n    return __jsx(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 16\n      }\n    });\n  }\n\n  const isCanUseSurvey = () => {\n    var _loginfo$emphotelids;\n\n    const useHotelRefNo = GENERAL_SETTINGS.ISCHAIN ? state.changeHotelRefno : GENERAL_SETTINGS.HOTELREFNO,\n          isReservation = (reservBase === null || reservBase === void 0 ? void 0 : reservBase.reservno) || false,\n          isGroupSurvey = GENERAL_SETTINGS.ISCHAIN && GENERAL_SETTINGS.HOTELREFNO === survey.hotelrefno;\n\n    if (isClient && !isGroupSurvey && isReservation && Number(reservBase.hotelrefno) !== Number(useHotelRefNo)) {\n      enqueueSnackbar(t('str_youCanOnlyFillOutASurveyAtTheHotelYouAreStayingAt 12'), {\n        variant: 'info'\n      });\n      return false;\n    }\n\n    if (isClient && !isGroupSurvey && !(loginfo !== null && loginfo !== void 0 && (_loginfo$emphotelids = loginfo.emphotelids) !== null && _loginfo$emphotelids !== void 0 && _loginfo$emphotelids.includes(Number(useHotelRefNo)))) {\n      enqueueSnackbar(t('str_youCanOnlyUseItAtTheHotelYouAreConnectedTo 32'), {\n        variant: 'info'\n      });\n      return false;\n    }\n\n    if (isClient && survey !== null && survey !== void 0 && survey.onlyih && isReservation && (reservBase === null || reservBase === void 0 ? void 0 : reservBase.status) !== \"I\") {\n      enqueueSnackbar(t('str_youMustBeInhouseInToTheHotelToFillAThisSurvey'), {\n        variant: 'info'\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  return __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classesTabPanel.gridItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    className: classesTabPanel.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, __jsx(Image, {\n    alt: \"Mountains\",\n    src: image || DefaultSurveyImage,\n    layout: \"responsive\",\n    width: 700,\n    height: 475,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    justify: 'space-between',\n    alignItems: 'center',\n    className: classesTabPanel.gridContainer,\n    style: {\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-end',\n    alignItems: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    className: classes.surveyDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 41\n    }\n  }, moment(survey.startdate).format('DD/MM/YYYY'), ' - ', moment(survey.enddate).format('DD/MM/YYYY'))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    noWrap: true,\n    className: classes.surveyTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 33\n    }\n  }, survey.description)), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    noWrap: true,\n    className: classes.fillSurvey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 33\n    }\n  }, survey.note)), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    noWrap: true,\n    className: classes.fillSurvey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 33\n    }\n  }, survey.hotelname)), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-end',\n    alignItems: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 37\n    }\n  }, __jsx(Button, {\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.fill,\n    onClick: () => {\n      if (isCanUseSurvey()) {\n        setOpenSurveyData({\n          surveygid: survey.gid,\n          surveyrefno: survey.hotelrefno,\n          clientid: clientId || loginfo.refid\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 41\n    }\n  }, __jsx(Typography, {\n    className: classes.fillButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 45\n    }\n  }, t('str_fillSurvey'))), __jsx(SurveyTreeDialog, {\n    open: Boolean(openSurveyData),\n    clientId: clientId,\n    data: openSurveyData,\n    onClose: status => setOpenSurveyData(status),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 41\n    }\n  })))))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nexport default connect(mapStateToProps, null)(SurveyCard);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/MyProfile/SurveyCard.js"],"names":["React","useContext","useEffect","useState","styles","LoadingSpinner","axios","DEFAULT_OREST_TOKEN","connect","useSelector","WebCmsGlobal","Grid","Paper","Image","Typography","Button","DefaultSurveyImage","makeStyles","stylesTabPanel","moment","useTranslation","SurveyTreeDialog","useSnackbar","useStyles","useStylesTabPanel","SurveyCard","props","survey","clientId","state","classes","classesTabPanel","t","GENERAL_SETTINGS","openSurveyData","setOpenSurveyData","enqueueSnackbar","loginfo","orest","currentUser","hotelRefno","hotelrefno","HOTELREFNO","reservBase","clientReservation","token","auth","access_token","isClient","roletype","isPortal","ISPORTAL","image","setImage","active","mid","url","OREST_URL","headers","method","responseType","params","code","then","r","status","blob","Blob","data","type","URL","createObjectURL","isCanUseSurvey","useHotelRefNo","ISCHAIN","changeHotelRefno","isReservation","reservno","isGroupSurvey","Number","variant","emphotelids","includes","onlyih","gridItem","paper","gridContainer","height","surveyDate","startdate","format","enddate","surveyTitle","description","fillSurvey","note","hotelname","fill","surveygid","gid","surveyrefno","clientid","refid","fillButton","Boolean","mapStateToProps","formReducer","guest"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport styles from './style/SurveyCard.style'\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport axios from \"axios\"\nimport { DEFAULT_OREST_TOKEN } from 'model/orest/constants'\nimport { connect, useSelector } from 'react-redux'\nimport WebCmsGlobal from 'components/webcms-global'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Image from 'next/image'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport DefaultSurveyImage from '../../../../assets/img/loyalty/default/survey.jpg'\nimport { makeStyles } from '@material-ui/core/styles'\nimport stylesTabPanel from '../style/TabPanel.style'\nimport moment from 'moment'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport SurveyTreeDialog from '../../../survey/surveytree/dialog'\nimport { useSnackbar } from 'notistack'\n\nconst useStyles = makeStyles(styles)\nconst useStylesTabPanel = makeStyles(stylesTabPanel)\n\nconst SurveyCard = (props) => {\n    const { survey, clientId, state } = props\n    const classes = useStyles()\n    const classesTabPanel = useStylesTabPanel()\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const [openSurveyData, setOpenSurveyData] = useState(false)\n    const { enqueueSnackbar } = useSnackbar()\n\n    //redux\n    const loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n    let hotelRefno = loginfo && loginfo.hotelrefno || GENERAL_SETTINGS.HOTELREFNO\n    const reservBase = state.clientReservation || false\n    const token = useSelector((state) => state.orest.currentUser !== null ? state.orest.currentUser.auth.access_token : DEFAULT_OREST_TOKEN)\n    const isClient = loginfo.roletype === '6500310'\n    const isPortal = GENERAL_SETTINGS.ISPORTAL\n\n    //state\n    const [image, setImage] = useState(null)\n\n    useEffect(() => {\n        let active = true\n        if (active) {\n            if (survey.mid) {\n                axios({\n                    url: `${GENERAL_SETTINGS.OREST_URL}/tools/file/download`,\n                    headers: {\n                        \"Authorization\": `Bearer ${token}`\n                    },\n                    method: 'get',\n                    responseType: 'arraybuffer',\n                    params: {\n                        mid: survey.mid,\n                        code: 'PHOTO',\n                        hotelrefno: hotelRefno\n                    },\n                }).then((r) => {\n                    if (active) {\n                        if (r.status === 200) {\n                            let blob = new Blob([r.data], {\n                                type: r.data.type,\n                            })\n                            let url = URL.createObjectURL(blob)\n                            setImage(url)\n                        }\n                    }\n                })\n            }\n        }\n\n        return () => {\n            active = false\n        }\n    }, [])\n\n    if (!survey) {\n        return <LoadingSpinner />\n    }\n\n    const isCanUseSurvey = () => {\n        const useHotelRefNo = GENERAL_SETTINGS.ISCHAIN ? state.changeHotelRefno : GENERAL_SETTINGS.HOTELREFNO\n            , isReservation = reservBase?.reservno || false\n            , isGroupSurvey = GENERAL_SETTINGS.ISCHAIN && GENERAL_SETTINGS.HOTELREFNO === survey.hotelrefno\n\n        if(isClient && !isGroupSurvey && isReservation && Number(reservBase.hotelrefno) !== Number(useHotelRefNo)){\n            enqueueSnackbar(t('str_youCanOnlyFillOutASurveyAtTheHotelYouAreStayingAt 12'), { variant: 'info' })\n            return false\n        }\n\n        if(isClient && !isGroupSurvey && !loginfo?.emphotelids?.includes(Number(useHotelRefNo))){\n            enqueueSnackbar(t('str_youCanOnlyUseItAtTheHotelYouAreConnectedTo 32'), { variant: 'info' })\n            return false\n        }\n\n        if(isClient && survey?.onlyih && isReservation && reservBase?.status !== \"I\"){\n            enqueueSnackbar(t('str_youMustBeInhouseInToTheHotelToFillAThisSurvey'), { variant: 'info' })\n            return false\n        }\n\n        return true\n    }\n\n    return (\n        <Grid item xs={12} className={classesTabPanel.gridItem}>\n            <Paper className={classes.paper}>\n                <Grid container className={classesTabPanel.gridContainer}>\n                    <Grid item xs={12} md={5}>\n                        <Image\n                            alt=\"Mountains\"\n                            src={image || DefaultSurveyImage}\n                            layout=\"responsive\"\n                            width={700}\n                            height={475}\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={7}>\n                        <Grid\n                            container\n                            spacing={3}\n                            justify={'space-between'}\n                            alignItems={'center'}\n                            className={classesTabPanel.gridContainer}\n                            style={{\n                                height: '100%',\n                            }}\n                        >\n                            <Grid item xs={12}>\n                                <Grid container justify={'flex-end'} alignItems={'center'}>\n                                    <Grid item>\n                                        <Typography className={classes.surveyDate}>\n                                            {moment(survey.startdate).format('DD/MM/YYYY')}\n                                            {' - '}\n                                            {moment(survey.enddate).format('DD/MM/YYYY')}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography noWrap className={classes.surveyTitle}>\n                                    {survey.description}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography noWrap className={classes.fillSurvey}>\n                                    {survey.note}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography noWrap className={classes.fillSurvey}>\n                                    {survey.hotelname}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Grid container justify={'flex-end'} alignItems={'center'}>\n                                    <Grid item>\n                                        <Button\n                                            fullWidth\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.fill}\n                                            onClick={() => {\n                                                if(isCanUseSurvey()){\n                                                    setOpenSurveyData({\n                                                        surveygid: survey.gid,\n                                                        surveyrefno: survey.hotelrefno,\n                                                        clientid: clientId || loginfo.refid,\n                                                    })\n                                                }\n                                            }}\n                                        >\n                                            <Typography className={classes.fillButton}>\n                                                {t('str_fillSurvey')}\n                                            </Typography>\n                                        </Button>\n                                        <SurveyTreeDialog open={Boolean(openSurveyData)} clientId={clientId} data={openSurveyData} onClose={(status) => setOpenSurveyData(status)}/>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nexport default connect(mapStateToProps, null)(SurveyCard)\n"]},"metadata":{},"sourceType":"module"}