{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/index.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport styles from '../style/SurveyPage.style';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRouter } from 'next/router';\nimport WebCmsGlobal from 'components/webcms-global';\nimport SurveyLayout from '../../layout/containers/SurveyLayout';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\nimport { NextSeo } from 'next-seo';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { isErrorMsg, OREST_ENDPOINT, REQUEST_METHOD_CONST } from '../../../model/orest/constants';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport RenderSurvey from './RenderSurvey';\nimport LoadingSpinner from '../../LoadingSpinner';\nimport { useOrestAction } from '../../../model/orest';\nimport { UseOrest } from '@webcms/orest';\nimport useSurveyAction from 'model/survey/useSurveyAction';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport SurveyBanner from '../banner';\nimport Button from '@material-ui/core/Button';\nconst useStyles = makeStyles(styles);\nimport { defaultLocale } from 'lib/translations/config';\nimport { useSnackbar } from 'notistack';\nexport default function SurveyTree(props) {\n  var _router$query, _router$query2;\n\n  const {\n    t\n  } = useTranslation();\n  const classes = useStyles();\n  const {\n    surveygid,\n    surveyrefno,\n    clientid,\n    isWidget,\n    isAlreadyLoadTree\n  } = props;\n  const {\n    GENERAL_SETTINGS,\n    WEBCMS_DATA,\n    locale\n  } = useContext(WebCmsGlobal);\n  const router = useRouter();\n  const surveyGid = router.query.surveyGid || surveygid;\n  const surveyHotelRefno = router.query.hotelrefno || surveyrefno;\n  const cache = router.query.cache;\n  const refid = (router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.refid) || clientid || false;\n  const refgid = (router === null || router === void 0 ? void 0 : (_router$query2 = router.query) === null || _router$query2 === void 0 ? void 0 : _router$query2.refgid) || false;\n  const reftoken = router.query.reftoken;\n  const langcode = router.query.lang || locale || defaultLocale;\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    deleteOrestCurrentUserInfo\n  } = useOrestAction();\n  const isPortal = GENERAL_SETTINGS.ISPORTAL; //redux\n\n  const {\n    setSurveyTrans,\n    setSurveyIsValid,\n    setSurveyAnswerMulti,\n    setSurveyDisplayType,\n    setSurveyBgColor\n  } = useSurveyAction();\n  const token = reftoken || useSelector(state => state.orest.currentUser !== null && state.orest.currentUser.auth.access_token);\n  let loginfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo);\n  const reservationInfo = useSelector(state => {\n    var _state$formReducer, _state$formReducer$gu;\n\n    return (state === null || state === void 0 ? void 0 : (_state$formReducer = state.formReducer) === null || _state$formReducer === void 0 ? void 0 : (_state$formReducer$gu = _state$formReducer.guest) === null || _state$formReducer$gu === void 0 ? void 0 : _state$formReducer$gu.clientReservation) || null;\n  });\n  const changeHotelRefNo = useSelector(state => {\n    var _state$formReducer2, _state$formReducer2$g;\n\n    return (state === null || state === void 0 ? void 0 : (_state$formReducer2 = state.formReducer) === null || _state$formReducer2 === void 0 ? void 0 : (_state$formReducer2$g = _state$formReducer2.guest) === null || _state$formReducer2$g === void 0 ? void 0 : _state$formReducer2$g.changeHotelRefno) || null;\n  });\n  const {\n    0: clientBase,\n    1: setClientBase\n  } = useState(false);\n\n  if (!loginfo && refid && surveyHotelRefno) {\n    loginfo = {\n      refid: refid,\n      hotelrefno: surveyHotelRefno\n    };\n  }\n\n  let clientParams = {};\n  clientParams.hotelrefno = loginfo && loginfo.hotelrefno;\n  clientParams.isportal = isPortal;\n  clientParams.surveyrefno = surveyrefno;\n\n  if (isPortal) {\n    clientParams.portalrefno = changeHotelRefNo;\n  }\n\n  if (GENERAL_SETTINGS.ISCHAIN && String(clientParams.hotelrefno) !== String(GENERAL_SETTINGS.HOTELREFNO)) {\n    clientParams.chainid = loginfo && loginfo.hotelrefno;\n    clientParams.ischain = true;\n  } //state\n\n\n  const {\n    0: surveyTree,\n    1: setSurveyTree\n  } = useState([]);\n  const {\n    0: isRequest,\n    1: setIsRequest\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n  const {\n    0: isSurveyExpreid,\n    1: setIsSurveyExpreid\n  } = useState(false);\n  const {\n    0: title,\n    1: setTitle\n  } = useState(null);\n  const {\n    0: isClient,\n    1: setIsClient\n  } = useState(true);\n  useEffect(() => {\n    let active = true;\n    let client = null;\n\n    if (isRequest === false) {\n      if (isAlreadyLoadTree) {\n        setIsRequest(false);\n        setIsLoading(false);\n        setSurveyTree(isAlreadyLoadTree);\n      } else {\n        setIsRequest(true);\n        getSurveyLoad(active, client);\n      }\n    }\n\n    return () => {\n      active = false;\n    };\n  }, [langcode]);\n\n  const tryLoadingAgainAction = () => {\n    setIsError(false);\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      onClick: () => getSurveyLoad(true, null),\n      color: \"inherit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, t('str_tryAgain')));\n  };\n\n  const getSurveyLoad = (active, client) => {\n    async function getClient() {\n      var _loginfo;\n\n      return UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'client/getbyid',\n        timeout: 1000 * 30,\n        // Wait for 30 sec.\n        token,\n        params: {\n          key: refid || ((_loginfo = loginfo) === null || _loginfo === void 0 ? void 0 : _loginfo.refid) || false,\n          allhotels: true\n        }\n      }).then(clientResponse => {\n        if (clientResponse.status === 200 && clientResponse.data.count > 0) {\n          let clientResponseData = clientResponse.data.data;\n          setClientBase(clientResponseData);\n          return clientResponseData;\n        } else if (clientResponse.status === 401) {\n          deleteOrestCurrentUserInfo();\n        } else {\n          const retErr = isErrorMsg(clientResponse);\n          enqueueSnackbar(t(retErr.errorMsg), {\n            variant: 'warning'\n          });\n          return null;\n        }\n      }).catch(() => deleteOrestCurrentUserInfo());\n    }\n\n    async function getReservno() {\n      var _loginfo2;\n\n      return UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'client/reservno',\n        token,\n        params: {\n          clientid: refid || ((_loginfo2 = loginfo) === null || _loginfo2 === void 0 ? void 0 : _loginfo2.refid) || false,\n          isgapp: true\n        }\n      }).then(clientReservnoResponse => {\n        var _clientReservnoRespon;\n\n        if (clientReservnoResponse.status === 200 && clientReservnoResponse !== null && clientReservnoResponse !== void 0 && (_clientReservnoRespon = clientReservnoResponse.data) !== null && _clientReservnoRespon !== void 0 && _clientReservnoRespon.data) {\n          return clientReservnoResponse.data.data;\n        } else if (clientReservnoResponse.status === 401) {\n          deleteOrestCurrentUserInfo();\n        } else {\n          const retErr = isErrorMsg(clientReservnoResponse);\n          enqueueSnackbar(t(retErr.errorMsg), {\n            variant: 'warning'\n          });\n          return null;\n        }\n      }).catch(() => {\n        return null;\n      });\n    }\n\n    async function getSurvey() {\n      let reservation = null;\n\n      if (refgid || clientBase || loginfo && loginfo.refid) {\n        if (!refid && clientBase && clientBase.gid) {\n          client = clientBase;\n        } else {\n          client = await getClient();\n        }\n\n        if (!reservationInfo) {\n          reservation = await getReservno();\n        } else {\n          reservation = reservationInfo;\n        }\n\n        if (refgid) {\n          var _reservation;\n\n          await axios({\n            url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n            method: REQUEST_METHOD_CONST.POST,\n            params: clientParams,\n            timeout: 1000 * 30,\n            // Wait for 30 sec.\n            data: {\n              reservno: ((_reservation = reservation) === null || _reservation === void 0 ? void 0 : _reservation.reservno) || false,\n              clientid: refid || client.id,\n              survey: surveyGid,\n              trans: refgid,\n              cache: cache,\n              langcode: langcode\n            }\n          }).then(async r => {\n            if (active) {\n              if (r.status === 200 && r.data.survey && r.data.trans) {\n                const surveyData = r.data.survey;\n                const surveyTransData = r.data.trans;\n                const surveyIsValidData = r.data.isvalid;\n                const surveyDisplayType = r.data.disptype || 0;\n                const oldAnswersData = r.data.answers;\n                const bgColor = r.data.bgcolor;\n                setSurveyTree(surveyData);\n                setSurveyTrans(surveyTransData);\n                setSurveyIsValid(surveyIsValidData);\n                setSurveyDisplayType(surveyDisplayType);\n                setSurveyBgColor(bgColor);\n                setOldAnswers(surveyTransData, oldAnswersData);\n\n                if (surveyData[0] && surveyData[0].description) {\n                  setTitle(surveyData[0].description);\n                }\n              } else {\n                enqueueSnackbar(t('str_unexpectedProblem'), {\n                  variant: 'error',\n                  autoHideDuration: 10000,\n                  action: tryLoadingAgainAction()\n                });\n                setIsError(true);\n              }\n            }\n          }).catch(() => {\n            enqueueSnackbar(t('str_unexpectedProblem'), {\n              variant: 'error',\n              autoHideDuration: 10000,\n              action: tryLoadingAgainAction()\n            });\n            setIsError(true);\n          });\n        } else if (client) {\n          var _reservation2;\n\n          await axios({\n            url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n            method: REQUEST_METHOD_CONST.POST,\n            timeout: 1000 * 30,\n            // Wait for 30 sec.\n            params: clientParams,\n            data: {\n              reservno: ((_reservation2 = reservation) === null || _reservation2 === void 0 ? void 0 : _reservation2.reservno) || false,\n              clientid: client.id || false,\n              survey: surveyGid,\n              client: client.gid,\n              cache: cache,\n              langcode: langcode\n            }\n          }).then(r => {\n            if (active) {\n              if (r.status === 200 && r.data.survey && r.data.trans) {\n                const surveyData = r.data.survey;\n                const surveyTransData = r.data.trans;\n                const surveyIsValidData = r.data.isvalid;\n                const surveyDisplayType = r.data.disptype || 0;\n                const oldAnswersData = r.data.answers;\n                const bgColor = r.data.bgcolor;\n                setSurveyTree(surveyData);\n                setSurveyTrans(surveyTransData);\n                setSurveyIsValid(surveyIsValidData);\n                setSurveyDisplayType(surveyDisplayType);\n                setSurveyBgColor(bgColor);\n                setOldAnswers(surveyTransData, oldAnswersData);\n\n                if (surveyData[0] && surveyData[0].description) {\n                  setTitle(surveyData[0].description);\n                }\n              } else {\n                if (r.data.error === \"survey_has_been_expired\") {\n                  setIsSurveyExpreid(true);\n                } else {\n                  enqueueSnackbar(t('str_unexpectedProblem'), {\n                    variant: 'error',\n                    autoHideDuration: 10000,\n                    action: tryLoadingAgainAction()\n                  });\n                }\n\n                setIsError(true);\n              }\n            }\n          }).catch(() => {\n            enqueueSnackbar(t('str_unexpectedProblem'), {\n              variant: 'error',\n              autoHideDuration: 10000,\n              action: tryLoadingAgainAction()\n            });\n            setIsError(true);\n          });\n        } else {\n          enqueueSnackbar(t('str_unexpectedProblem'), {\n            variant: 'error',\n            autoHideDuration: 10000,\n            action: tryLoadingAgainAction()\n          });\n          setIsError(true);\n        }\n      } else {\n        setIsClient(false);\n      }\n    }\n\n    if (active) {\n      if (surveyGid && refgid || token && loginfo) {\n        setIsLoading(true);\n        getSurvey().then(() => {\n          setIsRequest(false);\n          setIsLoading(false);\n        });\n      }\n    }\n  };\n\n  const setOldAnswers = (surveyTrans, oldAnswers) => {\n    if (oldAnswers.length > 0) {\n      oldAnswers.map(answer => {\n        if (surveyTrans && answer.questionid && answer.answerid && answer.typ) {\n          setSurveyAnswerMulti(surveyTrans, answer.questionid, answer.answerid, {\n            typ: answer.typ,\n            parentid: answer.questionid,\n            answernote: answer.answernote,\n            valuetext: answer.valuetext,\n            valuelongtext: answer.valuelongtext,\n            valueint: answer.valueint,\n            valuefloat: answer.valuefloat,\n            valuedate: answer.valuedate,\n            valuetime: answer.valuetime\n          });\n        }\n      });\n    }\n  };\n\n  const UseSurveyPage = () => {\n    return __jsx(Container, {\n      maxWidth: 'lg',\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 13\n      }\n    }, isLoading || isRequest ? __jsx(Box, {\n      p: 3,\n      m: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 25\n      }\n    }, __jsx(LoadingSpinner, {\n      size: 50,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 29\n      }\n    }))) : !isClient ? __jsx(Box, {\n      p: 3,\n      m: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }\n    }, t('str_youAreNotAClient'))) : isSurveyExpreid && isError ? __jsx(Box, {\n      p: 3,\n      m: 1,\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 21\n      }\n    }, __jsx(CheckCircleOutlinedIcon, {\n      style: {\n        fontSize: 100,\n        color: '#4caf50',\n        marginBottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 25\n      }\n    }), __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 25\n      }\n    }, t('str_thankYouForYourParticipationTheThisSurveyHasBeenExpired'))) : isError ? __jsx(Box, {\n      p: 3,\n      m: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 25\n      }\n    }, t('str_somethingWentWrong'))) : surveyTree && surveyTree.length > 0 ? __jsx(RenderSurvey, {\n      survey: surveyTree,\n      surveygid: surveyGid,\n      surveyrefno: surveyHotelRefno,\n      clientid: refid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 21\n      }\n    }) : __jsx(Box, {\n      p: 3,\n      m: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 25\n      }\n    }, t('str_noSurveyQuestion'))));\n  };\n\n  if (isWidget) {\n    return __jsx(UseSurveyPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }\n    });\n  }\n\n  return __jsx(SurveyLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }\n  }, title ? __jsx(NextSeo, {\n    title: title + ' - ' + WEBCMS_DATA.assets.meta.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 23\n    }\n  }) : __jsx(NextSeo, {\n    title: WEBCMS_DATA.assets.meta.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 93\n    }\n  }), __jsx(SurveyBanner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }\n  }), __jsx(UseSurveyPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/index.js"],"names":["React","useContext","useEffect","useState","styles","makeStyles","useRouter","WebCmsGlobal","SurveyLayout","CheckCircleOutlinedIcon","NextSeo","Container","Box","Typography","isErrorMsg","OREST_ENDPOINT","REQUEST_METHOD_CONST","useSelector","axios","RenderSurvey","LoadingSpinner","useOrestAction","UseOrest","useSurveyAction","useTranslation","SurveyBanner","Button","useStyles","defaultLocale","useSnackbar","SurveyTree","props","t","classes","surveygid","surveyrefno","clientid","isWidget","isAlreadyLoadTree","GENERAL_SETTINGS","WEBCMS_DATA","locale","router","surveyGid","query","surveyHotelRefno","hotelrefno","cache","refid","refgid","reftoken","langcode","lang","enqueueSnackbar","deleteOrestCurrentUserInfo","isPortal","ISPORTAL","setSurveyTrans","setSurveyIsValid","setSurveyAnswerMulti","setSurveyDisplayType","setSurveyBgColor","token","state","orest","currentUser","auth","access_token","loginfo","reservationInfo","formReducer","guest","clientReservation","changeHotelRefNo","changeHotelRefno","clientBase","setClientBase","clientParams","isportal","portalrefno","ISCHAIN","String","HOTELREFNO","chainid","ischain","surveyTree","setSurveyTree","isRequest","setIsRequest","isLoading","setIsLoading","isError","setIsError","isSurveyExpreid","setIsSurveyExpreid","title","setTitle","isClient","setIsClient","active","client","getSurveyLoad","tryLoadingAgainAction","getClient","apiUrl","OREST_URL","endpoint","timeout","params","key","allhotels","then","clientResponse","status","data","count","clientResponseData","retErr","errorMsg","variant","catch","getReservno","isgapp","clientReservnoResponse","getSurvey","reservation","gid","url","BASE_URL","method","POST","reservno","id","survey","trans","r","surveyData","surveyTransData","surveyIsValidData","isvalid","surveyDisplayType","disptype","oldAnswersData","answers","bgColor","bgcolor","setOldAnswers","description","autoHideDuration","action","error","surveyTrans","oldAnswers","length","map","answer","questionid","answerid","typ","parentid","answernote","valuetext","valuelongtext","valueint","valuefloat","valuedate","valuetime","UseSurveyPage","container","textAlign","fontSize","color","marginBottom","assets","meta"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport styles from '../style/SurveyPage.style'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useRouter } from 'next/router'\nimport WebCmsGlobal from 'components/webcms-global'\nimport SurveyLayout from '../../layout/containers/SurveyLayout'\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined'\nimport { NextSeo } from 'next-seo'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport { isErrorMsg, OREST_ENDPOINT, REQUEST_METHOD_CONST } from '../../../model/orest/constants'\nimport { useSelector } from 'react-redux'\nimport axios from 'axios'\nimport RenderSurvey from './RenderSurvey'\nimport LoadingSpinner from '../../LoadingSpinner'\nimport { useOrestAction } from '../../../model/orest'\nimport { UseOrest } from '@webcms/orest'\nimport useSurveyAction from 'model/survey/useSurveyAction'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport SurveyBanner from '../banner'\nimport Button from '@material-ui/core/Button'\nconst useStyles = makeStyles(styles)\nimport { defaultLocale } from 'lib/translations/config'\nimport { useSnackbar } from 'notistack'\n\nexport default function SurveyTree(props) {\n    const { t } = useTranslation()\n    const classes = useStyles()\n    const { surveygid, surveyrefno, clientid, isWidget, isAlreadyLoadTree } = props\n    const { GENERAL_SETTINGS, WEBCMS_DATA, locale } = useContext(WebCmsGlobal)\n    const router = useRouter()\n    const surveyGid = router.query.surveyGid || surveygid\n    const surveyHotelRefno = router.query.hotelrefno || surveyrefno\n    const cache = router.query.cache\n    const refid = router?.query?.refid || clientid || false\n    const refgid = router?.query?.refgid || false\n    const reftoken = router.query.reftoken\n    const langcode = router.query.lang || locale || defaultLocale\n    const { enqueueSnackbar } = useSnackbar()\n    const { deleteOrestCurrentUserInfo } = useOrestAction()\n    const isPortal = GENERAL_SETTINGS.ISPORTAL\n\n    //redux\n    const { setSurveyTrans, setSurveyIsValid, setSurveyAnswerMulti, setSurveyDisplayType, setSurveyBgColor } = useSurveyAction()\n    const token = reftoken || useSelector((state) => state.orest.currentUser !== null && state.orest.currentUser.auth.access_token)\n    let loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n    const reservationInfo = useSelector((state) => state?.formReducer?.guest?.clientReservation || null)\n    const changeHotelRefNo = useSelector((state) => state?.formReducer?.guest?.changeHotelRefno || null)\n    const [clientBase, setClientBase] = useState(false)\n\n    if(!loginfo && refid && surveyHotelRefno){\n        loginfo = {\n            refid: refid,\n            hotelrefno: surveyHotelRefno,\n        }\n    }\n\n    let clientParams = {}\n    clientParams.hotelrefno = loginfo && loginfo.hotelrefno\n    clientParams.isportal = isPortal\n    clientParams.surveyrefno = surveyrefno;\n\n    if(isPortal) {\n        clientParams.portalrefno = changeHotelRefNo\n    }\n\n    if(GENERAL_SETTINGS.ISCHAIN &&  String(clientParams.hotelrefno) !== String(GENERAL_SETTINGS.HOTELREFNO)){\n        clientParams.chainid = loginfo && loginfo.hotelrefno\n        clientParams.ischain = true\n    }\n\n    //state\n    const [surveyTree, setSurveyTree] = useState([])\n    const [isRequest, setIsRequest] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [isError, setIsError] = useState(false)\n    const [isSurveyExpreid, setIsSurveyExpreid] = useState(false)\n    const [title, setTitle] = useState(null)\n    const [isClient, setIsClient] = useState(true)\n\n    useEffect(() => {\n        let active = true\n        let client = null\n\n        if(isRequest === false){\n            if(isAlreadyLoadTree) {\n                setIsRequest(false)\n                setIsLoading(false)\n                setSurveyTree(isAlreadyLoadTree)\n            } else {\n                setIsRequest(true)\n                getSurveyLoad(active, client)\n            }\n\n        }\n\n        return () => {\n            active = false\n        }\n    }, [langcode])\n\n    const tryLoadingAgainAction = () =>  {\n        setIsError(false)\n        return (\n            <React.Fragment>\n                <Button onClick={() => getSurveyLoad(true, null)} color=\"inherit\">\n                    {t('str_tryAgain')}\n                </Button>\n            </React.Fragment>\n        )\n    }\n\n    const getSurveyLoad = (active, client) => {\n        async function getClient() {\n            return UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'client/getbyid',\n                timeout: 1000 * 30, // Wait for 30 sec.\n                token,\n                params: {\n                    key: refid || loginfo?.refid || false,\n                    allhotels: true,\n                },\n            }).then((clientResponse) => {\n                if (clientResponse.status === 200 && clientResponse.data.count > 0) {\n                    let clientResponseData = clientResponse.data.data\n                    setClientBase(clientResponseData)\n                    return clientResponseData\n                } else if (clientResponse.status === 401) {\n                    deleteOrestCurrentUserInfo()\n                } else {\n                    const retErr = isErrorMsg(clientResponse)\n                    enqueueSnackbar(t(retErr.errorMsg), { variant: 'warning' })\n                    return null\n                }\n            }).catch(() => deleteOrestCurrentUserInfo())\n        }\n\n        async function getReservno() {\n            return UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'client/reservno',\n                token,\n                params: {\n                    clientid: refid || loginfo?.refid || false,\n                    isgapp: true,\n                },\n            }).then((clientReservnoResponse) => {\n                if (clientReservnoResponse.status === 200 && clientReservnoResponse?.data?.data) {\n                    return clientReservnoResponse.data.data\n                } else if (clientReservnoResponse.status === 401) {\n                    deleteOrestCurrentUserInfo()\n                } else {\n                    const retErr = isErrorMsg(clientReservnoResponse)\n                    enqueueSnackbar(t(retErr.errorMsg), { variant: 'warning' })\n                    return null\n                }\n            }).catch(() =>{\n                return null\n            })\n        }\n\n        async function getSurvey() {\n            let reservation = null\n            if (refgid || clientBase || (loginfo && loginfo.refid)) {\n                if (!refid && (clientBase && clientBase.gid)) {\n                    client = clientBase\n                } else {\n                    client = await getClient()\n                }\n\n                if(!reservationInfo){\n                    reservation = await getReservno()\n                }else{\n                    reservation = reservationInfo\n                }\n\n                if (refgid) {\n                    await axios({\n                        url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n                        method: REQUEST_METHOD_CONST.POST,\n                        params: clientParams,\n                        timeout: 1000 * 30, // Wait for 30 sec.\n                        data: {\n                            reservno: reservation?.reservno || false,\n                            clientid: refid || client.id,\n                            survey: surveyGid,\n                            trans: refgid,\n                            cache: cache,\n                            langcode: langcode\n                        },\n                    }).then(async (r) => {\n                        if (active) {\n                            if (r.status === 200 && r.data.survey && r.data.trans) {\n                                const surveyData = r.data.survey\n                                const surveyTransData = r.data.trans\n                                const surveyIsValidData = r.data.isvalid\n                                const surveyDisplayType = r.data.disptype || 0\n                                const oldAnswersData = r.data.answers\n                                const bgColor = r.data.bgcolor\n\n                                setSurveyTree(surveyData)\n                                setSurveyTrans(surveyTransData)\n                                setSurveyIsValid(surveyIsValidData)\n                                setSurveyDisplayType(surveyDisplayType)\n\n                                setSurveyBgColor(bgColor)\n                                setOldAnswers(surveyTransData, oldAnswersData)\n\n                                if (surveyData[0] && surveyData[0].description) {\n                                    setTitle(surveyData[0].description)\n                                }\n                            } else {\n\n                                enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                                setIsError(true)\n                            }\n                        }\n                    }).catch(() => {\n                        enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                        setIsError(true)\n                    })\n                } else if (client) {\n                    await axios({\n                        url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/survey',\n                        method: REQUEST_METHOD_CONST.POST,\n                        timeout: 1000 * 30, // Wait for 30 sec.\n                        params: clientParams,\n                        data: {\n                            reservno: reservation?.reservno || false,\n                            clientid: client.id || false,\n                            survey: surveyGid,\n                            client: client.gid,\n                            cache: cache,\n                            langcode: langcode\n                        },\n                    }).then((r) => {\n                        if (active) {\n                            if (r.status === 200 && r.data.survey && r.data.trans) {\n                                const surveyData = r.data.survey\n                                const surveyTransData = r.data.trans\n                                const surveyIsValidData = r.data.isvalid\n                                const surveyDisplayType = r.data.disptype || 0\n                                const oldAnswersData = r.data.answers\n                                const bgColor = r.data.bgcolor\n\n                                setSurveyTree(surveyData)\n                                setSurveyTrans(surveyTransData)\n                                setSurveyIsValid(surveyIsValidData)\n                                setSurveyDisplayType(surveyDisplayType)\n\n                                setSurveyBgColor(bgColor)\n                                setOldAnswers(surveyTransData, oldAnswersData)\n\n                                if (surveyData[0] && surveyData[0].description) {\n                                    setTitle(surveyData[0].description)\n                                }\n                            } else {\n                                if(r.data.error===\"survey_has_been_expired\"){\n                                    setIsSurveyExpreid(true)\n                                }else{\n                                    enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                                }\n                                setIsError(true)\n                            }\n                        }\n                    }).catch(() => {\n                        enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                        setIsError(true)\n                    })\n                } else {\n                    enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error', autoHideDuration: 10000, action: tryLoadingAgainAction() })\n                    setIsError(true)\n                }\n            } else {\n                setIsClient(false)\n            }\n        }\n\n        if (active) {\n            if ((surveyGid && refgid) || (token && loginfo)) {\n                setIsLoading(true)\n                getSurvey().then(() => {\n                    setIsRequest(false)\n                    setIsLoading(false)\n                })\n            }\n        }\n    }\n\n    const setOldAnswers = (surveyTrans, oldAnswers) => {\n        if (oldAnswers.length > 0) {\n            oldAnswers.map((answer) => {\n                if (surveyTrans && answer.questionid && answer.answerid && answer.typ) {\n                    setSurveyAnswerMulti(surveyTrans, answer.questionid, answer.answerid, {\n                        typ: answer.typ,\n                        parentid: answer.questionid,\n                        answernote: answer.answernote,\n                        valuetext: answer.valuetext,\n                        valuelongtext: answer.valuelongtext,\n                        valueint: answer.valueint,\n                        valuefloat: answer.valuefloat,\n                        valuedate: answer.valuedate,\n                        valuetime: answer.valuetime,\n                    })\n                }\n            })\n        }\n    }\n\n    const UseSurveyPage = () => {\n        return (\n            <Container maxWidth={'lg'} className={classes.container}>\n                {(isLoading || isRequest) ? (\n                    <Box p={3} m={1}>\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            <LoadingSpinner size={50}/>\n                        </Typography>\n                    </Box>\n                ) : !isClient ? (\n                    <Box p={3} m={1}>\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            {t('str_youAreNotAClient')}\n                        </Typography>\n                    </Box>\n                ) : (isSurveyExpreid && isError) ? (\n                    <Box p={3} m={1} style={{ textAlign: 'center' }}>\n                        <CheckCircleOutlinedIcon style={{ fontSize: 100, color: '#4caf50', marginBottom: 20 }} />\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            {t('str_thankYouForYourParticipationTheThisSurveyHasBeenExpired')}\n                        </Typography>\n                    </Box>\n                ) : isError ? (\n                    <Box p={3} m={1}>\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            {t('str_somethingWentWrong')}\n                        </Typography>\n                    </Box>\n                ) : surveyTree && surveyTree.length > 0 ? (\n                    <RenderSurvey survey={surveyTree} surveygid={surveyGid} surveyrefno={surveyHotelRefno} clientid={refid} />\n                ) : (\n                    <Box p={3} m={1}>\n                        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                            {t('str_noSurveyQuestion')}\n                        </Typography>\n                    </Box>\n                )}\n            </Container>\n        )\n    }\n\n    if(isWidget){\n        return (<UseSurveyPage />)\n    }\n\n    return (\n        <SurveyLayout>\n            {title ? (<NextSeo title={title + ' - ' + WEBCMS_DATA.assets.meta.title} />) : (<NextSeo title={WEBCMS_DATA.assets.meta.title} />)}\n            <SurveyBanner />\n            <UseSurveyPage />\n        </SurveyLayout>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}