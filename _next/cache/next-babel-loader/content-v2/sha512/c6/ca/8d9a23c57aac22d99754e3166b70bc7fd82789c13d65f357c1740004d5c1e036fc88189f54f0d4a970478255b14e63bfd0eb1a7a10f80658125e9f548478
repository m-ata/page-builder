{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext } from 'react';\nimport { LocaleContext } from 'lib/translations/context/LocaleContext';\nimport localLangFiles from 'lib/translations/strings';\nimport { defaultLocale } from 'lib/translations/config';\n\nconst flatMap = (array, fn) => {\n  let result = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let mapping = fn(array[i]);\n    result = result.concat(mapping);\n  }\n\n  return result;\n};\n\nconst keyLowercase = str => {\n  const regex = /{(.*?)}/gm;\n  return str.replace(regex, function (match) {\n    return match.toLowerCase();\n  });\n};\n\nconst getFileDataLang = (langFilesData, key, locale) => {\n  var _langFilesData$find;\n\n  const useValue = langFilesData && (langFilesData === null || langFilesData === void 0 ? void 0 : (_langFilesData$find = langFilesData.find(item => item.src === key && item.lng === locale)) === null || _langFilesData$find === void 0 ? void 0 : _langFilesData$find.trg) || false;\n\n  if (useValue) {\n    return useValue.replace('<p>', '').replace('</p>', '');\n  } else {\n    return useValue;\n  }\n};\n\nexport default function useTranslation() {\n  const {\n    locale,\n    hotelLanguageFile,\n    langFilesData,\n    showLangCode\n  } = useContext(LocaleContext);\n\n  const t = (key, replace = false, useLocale = false) => {\n    let ret;\n\n    if (!useLocale) {\n      ret = getFileDataLang(langFilesData, key, locale) || localLangFiles && localLangFiles[locale] && localLangFiles[locale][key] || localLangFiles && localLangFiles[defaultLocale] && localLangFiles[defaultLocale][key] || key;\n    } else {\n      ret = getFileDataLang(hotelLanguageFile, key, useLocale) || localLangFiles && localLangFiles[useLocale] && localLangFiles[useLocale][key] || localLangFiles && localLangFiles[defaultLocale] && localLangFiles[defaultLocale][key] || key;\n    }\n\n    if (replace) {\n      let replaceRet = keyLowercase(ret);\n      Object.entries(replace).filter(([key, value]) => `${key.toLowerCase()}`[value] !== 'undefined').map(([key, value]) => {\n        let replaceKey = '{' + key.toLowerCase() + '}';\n        replaceRet = flatMap(replaceRet.split(replaceKey.toLowerCase()), function (part) {\n          if (value && value.type) {\n            value = _objectSpread(_objectSpread({}, value), {}, {\n              key: Math.random()\n            });\n          }\n\n          return [part, value];\n        });\n        replaceRet.pop();\n\n        if (typeof value !== 'object') {\n          replaceRet = replaceRet.join('');\n        }\n      });\n      return showLangCode ? replaceRet + ` (${key}) ` : replaceRet;\n    }\n\n    return showLangCode ? ret + ` (${key}) ` : ret;\n  };\n\n  return {\n    t,\n    locale\n  };\n}","map":{"version":3,"sources":["/Users/mata/app-cloudweb/lib/translations/hooks/useTranslation.js"],"names":["React","useContext","LocaleContext","localLangFiles","defaultLocale","flatMap","array","fn","result","i","length","mapping","concat","keyLowercase","str","regex","replace","match","toLowerCase","getFileDataLang","langFilesData","key","locale","useValue","find","item","src","lng","trg","useTranslation","hotelLanguageFile","showLangCode","t","useLocale","ret","replaceRet","Object","entries","filter","value","map","replaceKey","split","part","type","Math","random","pop","join"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { LocaleContext } from 'lib/translations/context/LocaleContext'\nimport localLangFiles from 'lib/translations/strings'\nimport { defaultLocale } from 'lib/translations/config'\n\nconst flatMap = (array, fn) => {\n    let result = []\n    for (let i = 0; i < array.length; i++) {\n        let mapping = fn(array[i])\n        result = result.concat(mapping)\n    }\n    return result\n}\n\nconst keyLowercase = (str) => {\n   const regex = /{(.*?)}/gm;\n   return str.replace(regex, function(match) {\n        return match.toLowerCase()\n   })\n}\n\nconst getFileDataLang = (langFilesData, key, locale) => {\n    const useValue = langFilesData && langFilesData?.find(item => item.src === key && item.lng === locale)?.trg || false\n    if(useValue) {\n        return useValue.replace('<p>', '').replace('</p>', '')\n    }else{\n        return useValue\n    }\n}\n\nexport default function useTranslation() {\n    const { locale, hotelLanguageFile, langFilesData, showLangCode } = useContext(LocaleContext)\n    const t = (key, replace = false, useLocale = false) => {\n        let ret;\n        if(!useLocale){\n            ret = getFileDataLang(langFilesData, key, locale) || localLangFiles && localLangFiles[locale] && localLangFiles[locale][key] || localLangFiles && localLangFiles[defaultLocale] && localLangFiles[defaultLocale][key] || key\n        }else{\n            ret = getFileDataLang(hotelLanguageFile, key, useLocale) || localLangFiles && localLangFiles[useLocale] && localLangFiles[useLocale][key] || localLangFiles && localLangFiles[defaultLocale] && localLangFiles[defaultLocale][key] || key\n        }\n\n        if (replace) {\n            let replaceRet = keyLowercase(ret)\n            Object.entries(replace)\n                .filter(([key, value]) => `${key.toLowerCase()}`[value] !== 'undefined')\n                .map(([key, value]) => {\n                    let replaceKey = '{' + key.toLowerCase() + '}'\n                    replaceRet = flatMap(replaceRet.split(replaceKey.toLowerCase()), function (part) {\n                        if (value && value.type) {\n                            value = { ...value, key: Math.random() }\n                        }\n                        return [part, value]\n                    })\n                    replaceRet.pop()\n                    if(typeof value !== 'object'){\n                        replaceRet = replaceRet.join('')\n                    }\n                })\n            return showLangCode ? replaceRet + ` (${key}) ` : replaceRet\n        }\n        return showLangCode ? ret + ` (${key}) ` : ret\n    }\n    return { t, locale }\n}\n"]},"metadata":{},"sourceType":"module"}