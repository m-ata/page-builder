{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/lib/translations/context/LocaleContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { isLocale } from 'lib/translations/types';\n\nconst getLanguageFile = async langcode => {\n  return await axios({\n    url: 'api/hotel/app/language',\n    method: 'post',\n    params: {\n      langcode: langcode\n    }\n  }).then(hotelAppLanguageResponse => {\n    const hotelAppLanguageResponseData = hotelAppLanguageResponse.data;\n\n    if (hotelAppLanguageResponseData.success) {\n      return hotelAppLanguageResponseData.data;\n    } else {\n      return false;\n    }\n  });\n};\n\nexport const LocaleContext = /*#__PURE__*/createContext({\n  locale: 'en',\n  setLocale: () => null,\n  langFilesData: false,\n  hotelLanguageFile: false,\n  showLangCode: false\n});\nexport const LocaleProvider = ({\n  lang,\n  defaultHotelLanguageFile,\n  defaultLanguageFile,\n  children\n}) => {\n  const {\n    0: locale,\n    1: setLocale\n  } = useState(lang);\n  const {\n    0: langFilesDataLoading,\n    1: setLangFilesDataLoading\n  } = useState(false);\n  const {\n    0: langFilesData,\n    1: setLangFileData\n  } = useState(defaultLanguageFile || false);\n  const {\n    0: hotelLanguageFile,\n    1: setHotelLanguageFile\n  } = useState(defaultHotelLanguageFile || false);\n  const {\n    0: showLangCode,\n    1: setShowLangCode\n  } = useState(false);\n  const {\n    query\n  } = useRouter();\n  useEffect(() => {\n    if (locale !== localStorage.getItem('locale') && !langFilesDataLoading) {\n      localStorage.setItem('locale', locale);\n    }\n  }, [locale]); // sync locale value on client-side route changes\n\n  useEffect(() => {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang && !langFilesDataLoading) {\n      setLangFilesDataLoading(true);\n      getLanguageFile(query.lang).then(fileData => {\n        setLangFileData(fileData);\n        setLocale(query.lang);\n        setLangFilesDataLoading(false);\n      });\n    }\n\n    if (typeof query.lang === 'string' && query.lang === 'show') {\n      setShowLangCode(true);\n    } else {\n      setShowLangCode(false);\n    }\n  }, [query.lang, locale]);\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      langFilesData,\n      hotelLanguageFile,\n      locale,\n      setLocale,\n      showLangCode\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/mata/app-cloudweb/lib/translations/context/LocaleContext.js"],"names":["React","createContext","useEffect","useState","axios","useRouter","isLocale","getLanguageFile","langcode","url","method","params","then","hotelAppLanguageResponse","hotelAppLanguageResponseData","data","success","LocaleContext","locale","setLocale","langFilesData","hotelLanguageFile","showLangCode","LocaleProvider","lang","defaultHotelLanguageFile","defaultLanguageFile","children","langFilesDataLoading","setLangFilesDataLoading","setLangFileData","setHotelLanguageFile","setShowLangCode","query","localStorage","getItem","setItem","fileData"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { useRouter } from 'next/router'\nimport { isLocale } from 'lib/translations/types'\n\nconst getLanguageFile = async (langcode) => {\n    return await axios({\n        url: 'api/hotel/app/language',\n        method: 'post',\n        params: {\n            langcode: langcode\n        }\n    }).then((hotelAppLanguageResponse) => {\n        const hotelAppLanguageResponseData = hotelAppLanguageResponse.data\n        if (hotelAppLanguageResponseData.success) {\n            return hotelAppLanguageResponseData.data\n        }else {\n            return false\n        }\n    })\n}\n\nexport const LocaleContext = createContext({\n    locale: 'en',\n    setLocale: () => null,\n    langFilesData: false,\n    hotelLanguageFile: false,\n    showLangCode: false\n})\n\nexport const LocaleProvider = ({ lang, defaultHotelLanguageFile, defaultLanguageFile, children }) => {\n    const [locale, setLocale] = useState(lang)\n    const [langFilesDataLoading, setLangFilesDataLoading] = useState(false)\n    const [langFilesData, setLangFileData] = useState(defaultLanguageFile || false)\n    const [hotelLanguageFile, setHotelLanguageFile] = useState(defaultHotelLanguageFile || false)\n    const [showLangCode, setShowLangCode] = useState(false)\n    const { query } = useRouter()\n\n    useEffect(() => {\n        if (locale !== localStorage.getItem('locale') && !langFilesDataLoading) {\n            localStorage.setItem('locale', locale)\n        }\n    }, [locale])\n\n    // sync locale value on client-side route changes\n    useEffect(() => {\n        if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang && !langFilesDataLoading) {\n            setLangFilesDataLoading(true)\n            getLanguageFile(query.lang)\n                .then((fileData) => {\n                    setLangFileData(fileData)\n                    setLocale(query.lang)\n                    setLangFilesDataLoading(false)\n            })\n        }\n\n        if (typeof query.lang === 'string' && query.lang === 'show') {\n            setShowLangCode(true)\n        }else{\n            setShowLangCode(false)\n        }\n\n    }, [query.lang, locale])\n\n    return <LocaleContext.Provider value={{ langFilesData, hotelLanguageFile, locale, setLocale, showLangCode }}>{children}</LocaleContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}