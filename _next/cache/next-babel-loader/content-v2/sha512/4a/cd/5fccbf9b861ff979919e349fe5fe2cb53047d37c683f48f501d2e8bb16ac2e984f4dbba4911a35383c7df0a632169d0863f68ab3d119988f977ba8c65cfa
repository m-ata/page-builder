{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/website/pages/WebsiteContactForm.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext, memo } from 'react';\nimport WebCmsGlobal from \"components/webcms-global\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport validator from \"validator\";\nimport ReCaptcha from \"react-google-recaptcha\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport Button from \"@material-ui/core/Button\";\nimport { toast, ToastContainer } from \"react-toastify\";\nconst useStyles = makeStyles(theme => ({\n  actionButton: {\n    marginLeft: theme.spacing(1),\n    borderRadius: 20,\n    float: \"right\"\n  },\n  textArea: {\n    width: '100%',\n    borderColor: 'silver',\n    borderRadius: 5\n  }\n}));\n\nconst WebsiteContactForm = props => {\n  const {\n    formData,\n    otherLangFormData,\n    selectedLang,\n    defaultLang\n  } = props;\n  const {\n    0: accTypes,\n    1: setAccTypes\n  } = useState([]);\n  const {\n    0: accType,\n    1: setAccType\n  } = useState('');\n  const {\n    0: groupID,\n    1: setGroupID\n  } = useState('');\n  const {\n    0: hasRecaptcha,\n    1: setHasRecaptcha\n  } = useState(false);\n  const {\n    0: recaptchaValue,\n    1: setRecaptchaValue\n  } = useState('');\n  const {\n    0: salesnote,\n    1: setSalesNote\n  } = useState('');\n  const {\n    0: pbookData,\n    1: setPbookData\n  } = useState({\n    refcode: '',\n    firstname: '',\n    lastname: '',\n    workemail: '',\n    mobiletel: '',\n    company: ''\n  });\n  const classes = useStyles();\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  useEffect(() => {\n    axios({\n      url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/acc-trans-type/get',\n      method: 'post'\n    }).then(res => {\n      if (res.status === 200 && res.data && res.data.data && res.data.data.length > 0) {\n        const updatedPbookData = _objectSpread({}, pbookData);\n\n        setAccTypes(res.data.data);\n        setAccType(res.data.data[0]);\n        updatedPbookData['refcode'] = res.data.data[0].code.toLowerCase();\n        setPbookData(updatedPbookData);\n      }\n    });\n    axios({\n      url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/clientgr/web/get',\n      method: 'post'\n    }).then(res => {\n      if (res.status === 200 && res.data && res.data.data) {\n        setGroupID(res.data.data.res);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (formData && formData.gid && formData.gid.length > 0) {\n      formData.gid.map(d => {\n        d.type === 'recaptcha' && d.isActive && setHasRecaptcha(true);\n      });\n    }\n  }, [formData]);\n\n  const handleChangeText = (key, value) => {\n    const updatedPbookData = _objectSpread({}, pbookData);\n\n    updatedPbookData[key] = value;\n    setPbookData(updatedPbookData);\n  };\n\n  const onVerifyRecaptcha = value => {\n    setRecaptchaValue(value);\n  };\n\n  const handleSave = () => {\n    axios({\n      url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/pbook/ins',\n      method: 'post',\n      data: {\n        refcode: pbookData.refcode,\n        firstname: pbookData.firstname,\n        lastname: pbookData.lastname,\n        workemail: pbookData.workemail,\n        mobiletel: pbookData.mobiletel,\n        groupid: groupID\n      }\n    }).then(res => {\n      if (res.status === 200 && res.data && res.data.data) {\n        axios({\n          url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/salecall/ins',\n          method: 'post',\n          data: {\n            agencyid: res.data.data.id,\n            salesnote: salesnote\n          }\n        }).then(res1 => {\n          if (res1.status === 200 && res1.data && res1.data.data) {\n            axios({\n              url: GENERAL_SETTINGS.BASE_URL + 'api/contact/send/mail',\n              method: 'post',\n              data: {\n                firstname: pbookData.firstname,\n                lastname: pbookData.lastname,\n                subject: 'Contact Information',\n                email: pbookData.workemail,\n                mobiletel: pbookData.mobiletel,\n                note: salesnote,\n                acctype: accType.description,\n                company: pbookData.company,\n                acctypeLabel: formData.gid.find(x => x.type === 'refcode').label,\n                companyLabel: formData.gid.find(x => x.type === 'company').label,\n                firstnameLabel: formData.gid.find(x => x.type === 'firstname').label,\n                lastnameLabel: formData.gid.find(x => x.type === 'lastname').label,\n                emailLabel: formData.gid.find(x => x.type === 'workemail').label,\n                phoneLabel: formData.gid.find(x => x.type === 'mobiletel').label,\n                noteLabel: formData.gid.find(x => x.type === 'salesnote').label\n              }\n            }).then(res2 => {\n              if (res2.status === 200) {\n                toast.success('Email send successfully', {\n                  position: toast.POSITION.TOP_RIGHT\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, selectedLang !== defaultLang && otherLangFormData && otherLangFormData.length > 0 && otherLangFormData.map((d, i) => {\n    return formData.gid[i].isActive ? __jsx(Grid, {\n      container: true,\n      key: i,\n      style: {\n        marginTop: i === 0 ? 24 : 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 52\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    }, formData.gid[i].type === 'heading' && __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 79\n      }\n    }, __jsx(Typography, {\n      component: 'h5',\n      variant: 'h5',\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 45\n      }\n    }, d.label)), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    }, formData.gid[i].type !== 'heading' && __jsx(Typography, {\n      style: {\n        width: '100%'\n      },\n      component: 'span',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 83\n      }\n    }, formData.gid[i].label)), __jsx(Grid, {\n      item: true,\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 37\n      }\n    }, formData.gid[i].type === 'refcode' && __jsx(FormControl, {\n      variant: \"outlined\",\n      fullWidth: true,\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 83\n      }\n    }, __jsx(Select, {\n      value: accType,\n      onChange: e => {\n        const updatedPbookData = _objectSpread({}, pbookData);\n\n        pbookData['refcode'] = e.target.value;\n        setAccType(e.target.value);\n        setPbookData(updatedPbookData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 49\n      }\n    }, accTypes.map((type, index) => {\n      return __jsx(MenuItem, {\n        value: type.code.toLowerCase(),\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 61\n        }\n      }, ' ', type.description, ' ');\n    }))), (formData.gid[i].type === 'company' || formData.gid[i].type === 'firstname' || formData.gid[i].type === 'lastname') && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: e => handleChangeText(d.type, e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 45\n      }\n    }), formData.gid[i].type === 'mobiletel' && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: e => handleChangeText(d.type, e.target.value),\n      error: pbookData.mobiletel && validator.isMobilePhone(pbookData.mobiletel) === false ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 45\n      }\n    }), formData.gid[i].type === 'workemail' && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: e => handleChangeText(d.type, e.target.value),\n      error: pbookData.workemail && validator.isEmail(pbookData.workemail) === false ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 45\n      }\n    }), formData.gid[i].type === 'recaptcha' && __jsx(ReCaptcha, {\n      sitekey: GENERAL_SETTINGS.RECAPTCHA_SITE_KEY,\n      onChange: onVerifyRecaptcha,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 45\n      }\n    }), formData.gid[i].type === 'salesnote' && __jsx(TextareaAutosize, {\n      rows: 4,\n      className: classes.textArea,\n      value: salesnote,\n      onChange: e => setSalesNote(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 45\n      }\n    }))))) : null;\n  }), selectedLang === defaultLang && formData && formData.gid && formData.gid.length > 0 && formData.gid.map((d, i) => {\n    return d.isActive ? __jsx(Grid, {\n      container: true,\n      key: i,\n      style: {\n        marginTop: i === 1 ? 24 : i !== 0 && 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 38\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 33\n      }\n    }, d.type === 'heading' && __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 65\n      }\n    }, __jsx(Typography, {\n      component: 'h5',\n      variant: 'h5',\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 45\n      }\n    }, d.label)), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 37\n      }\n    }, d.type !== 'heading' && __jsx(Typography, {\n      style: {\n        width: '100%'\n      },\n      component: 'span',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 69\n      }\n    }, d.label)), __jsx(Grid, {\n      item: true,\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 37\n      }\n    }, d.type === 'refcode' && __jsx(FormControl, {\n      variant: \"outlined\",\n      fullWidth: true,\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 69\n      }\n    }, __jsx(Select, {\n      value: accType,\n      onChange: e => {\n        const tmpAccType = e.target.value;\n\n        const updatedPbookData = _objectSpread({}, pbookData);\n\n        pbookData['refcode'] = tmpAccType.code.toLowerCase();\n        setAccType(tmpAccType);\n        setPbookData(updatedPbookData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 49\n      }\n    }, accTypes.map((type, index) => {\n      return __jsx(MenuItem, {\n        value: type,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 61\n        }\n      }, ' ', type.description, ' ');\n    }))), (d.type === 'company' || d.type === 'firstname' || d.type === 'lastname') && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: e => handleChangeText(d.type, e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 45\n      }\n    }), d.type === 'mobiletel' && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: e => handleChangeText(d.type, e.target.value),\n      error: pbookData.mobiletel && validator.isMobilePhone(pbookData.mobiletel) === false ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 45\n      }\n    }), d.type === 'workemail' && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      onChange: e => handleChangeText(d.type, e.target.value),\n      error: pbookData.workemail && validator.isEmail(pbookData.workemail) === false ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 45\n      }\n    }), d.type === 'recaptcha' && __jsx(ReCaptcha, {\n      sitekey: GENERAL_SETTINGS.RECAPTCHA_SITE_KEY,\n      onChange: onVerifyRecaptcha,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 45\n      }\n    }), d.type === 'salesnote' && __jsx(TextareaAutosize, {\n      rows: 4,\n      className: classes.textArea,\n      value: salesnote,\n      onChange: e => setSalesNote(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 45\n      }\n    }))))) : null;\n  }), __jsx(Grid, {\n    container: true,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    className: classes.actionButton,\n    style: {\n      float: \"right\"\n    },\n    onClick: handleSave,\n    disabled: !pbookData.refcode || !pbookData.firstname || !pbookData.workemail || hasRecaptcha && !recaptchaValue || !validator.isEmail(pbookData.workemail),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 21\n    }\n  }, \"SEND\"))), __jsx(ToastContainer, {\n    autoClose: 8000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst memorizedWebsiteContactForm = /*#__PURE__*/memo(WebsiteContactForm);\nexport default memorizedWebsiteContactForm;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/website/pages/WebsiteContactForm.js"],"names":["React","useState","useEffect","useContext","memo","WebCmsGlobal","makeStyles","axios","Typography","Grid","FormControl","Select","MenuItem","TextField","validator","ReCaptcha","TextareaAutosize","Button","toast","ToastContainer","useStyles","theme","actionButton","marginLeft","spacing","borderRadius","float","textArea","width","borderColor","WebsiteContactForm","props","formData","otherLangFormData","selectedLang","defaultLang","accTypes","setAccTypes","accType","setAccType","groupID","setGroupID","hasRecaptcha","setHasRecaptcha","recaptchaValue","setRecaptchaValue","salesnote","setSalesNote","pbookData","setPbookData","refcode","firstname","lastname","workemail","mobiletel","company","classes","GENERAL_SETTINGS","url","BASE_URL","method","then","res","status","data","length","updatedPbookData","code","toLowerCase","gid","map","d","type","isActive","handleChangeText","key","value","onVerifyRecaptcha","handleSave","groupid","agencyid","id","res1","subject","email","note","acctype","description","acctypeLabel","find","x","label","companyLabel","firstnameLabel","lastnameLabel","emailLabel","phoneLabel","noteLabel","res2","success","position","POSITION","TOP_RIGHT","i","marginTop","fontWeight","e","target","index","isMobilePhone","isEmail","RECAPTCHA_SITE_KEY","tmpAccType","memorizedWebsiteContactForm"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, memo } from 'react'\nimport WebCmsGlobal from \"components/webcms-global\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport validator from \"validator\";\nimport ReCaptcha from \"react-google-recaptcha\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport Button from \"@material-ui/core/Button\";\nimport {toast, ToastContainer} from \"react-toastify\";\n\nconst useStyles = makeStyles(theme => ({\n    actionButton: {\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n        float: \"right\",\n    },\n    textArea: {\n        width: '100%',\n        borderColor: 'silver',\n        borderRadius: 5\n    }\n}));\n\nconst WebsiteContactForm = (props) => {\n\n    const {formData, otherLangFormData, selectedLang, defaultLang} = props;\n    const [accTypes, setAccTypes] = useState([]);\n    const [accType, setAccType] = useState('');\n    const [groupID, setGroupID] = useState('');\n    const [hasRecaptcha, setHasRecaptcha] = useState(false);\n    const [recaptchaValue, setRecaptchaValue] = useState('');\n    const [salesnote, setSalesNote] = useState('');\n    const [pbookData, setPbookData] = useState({\n        refcode: '',\n        firstname: '',\n        lastname: '',\n        workemail: '',\n        mobiletel: '',\n        company: ''\n    });\n\n    const classes = useStyles();\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal);\n\n    useEffect(() => {\n        axios({\n            url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/acc-trans-type/get',\n            method: 'post',\n        }).then(res => {\n            if (res.status === 200 && res.data && res.data.data && res.data.data.length > 0) {\n                const updatedPbookData = {...pbookData};\n                setAccTypes(res.data.data);\n                setAccType(res.data.data[0]);\n                updatedPbookData['refcode'] = res.data.data[0].code.toLowerCase();\n                setPbookData(updatedPbookData);\n            }\n        })\n        axios({\n            url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/clientgr/web/get',\n            method: 'post',\n        }).then(res => {\n            if (res.status === 200 && res.data && res.data.data) {\n                setGroupID(res.data.data.res);\n            }\n        })\n    }, []);\n\n    useEffect(() => {\n        if (formData && formData.gid && formData.gid.length > 0) {\n            formData.gid.map(d => {\n                d.type === 'recaptcha' && d.isActive && setHasRecaptcha(true);\n            })\n        }\n    }, [formData]);\n\n    const handleChangeText = (key, value) => {\n        const updatedPbookData = {...pbookData};\n        updatedPbookData[key] = value;\n        setPbookData(updatedPbookData);\n    }\n\n    const onVerifyRecaptcha = (value) => {\n        setRecaptchaValue(value);\n    }\n\n    const handleSave = () => {\n        axios({\n            url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/pbook/ins',\n            method: 'post',\n            data: {\n                refcode: pbookData.refcode,\n                firstname: pbookData.firstname,\n                lastname: pbookData.lastname,\n                workemail: pbookData.workemail,\n                mobiletel: pbookData.mobiletel,\n                groupid: groupID,\n            }\n        }).then(res => {\n            if (res.status === 200 && res.data && res.data.data) {\n                axios({\n                    url: GENERAL_SETTINGS.BASE_URL + 'api/hotel/salecall/ins',\n                    method: 'post',\n                    data: {\n                        agencyid: res.data.data.id,\n                        salesnote: salesnote,\n                    }\n                }).then(res1 => {\n                    if (res1.status === 200 && res1.data && res1.data.data) {\n                        axios({\n                            url: GENERAL_SETTINGS.BASE_URL + 'api/contact/send/mail',\n                            method: 'post',\n                            data: {\n                                firstname: pbookData.firstname,\n                                lastname: pbookData.lastname,\n                                subject: 'Contact Information',\n                                email: pbookData.workemail,\n                                mobiletel: pbookData.mobiletel,\n                                note: salesnote,\n                                acctype: accType.description,\n                                company: pbookData.company,\n                                acctypeLabel: formData.gid.find(x => x.type === 'refcode').label,\n                                companyLabel: formData.gid.find(x => x.type === 'company').label,\n                                firstnameLabel: formData.gid.find(x => x.type === 'firstname').label,\n                                lastnameLabel: formData.gid.find(x => x.type === 'lastname').label,\n                                emailLabel: formData.gid.find(x => x.type === 'workemail').label,\n                                phoneLabel: formData.gid.find(x => x.type === 'mobiletel').label,\n                                noteLabel: formData.gid.find(x => x.type === 'salesnote').label,\n                            }\n                        }).then(res2 => {\n                            if (res2.status === 200) {\n                                toast.success('Email send successfully', {\n                                    position: toast.POSITION.TOP_RIGHT,\n                                });\n                            }\n                        })\n                    }\n                })\n            }\n        })\n    }\n\n    return(\n        <React.Fragment>\n            {\n                selectedLang !== defaultLang && otherLangFormData && otherLangFormData.length > 0 &&\n                otherLangFormData.map((d, i) => {\n                    return(\n                        formData.gid[i].isActive ? <Grid container key={i} style={{marginTop: i === 0 ? 24 : 8}}>\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    {\n                                        formData.gid[i].type === 'heading' && <Grid item xs={12}>\n                                            <Typography component={'h5'} variant={'h5'} style={{fontWeight: \"bold\"}}>\n                                                {\n                                                    d.label\n                                                }\n                                            </Typography>\n                                        </Grid>\n                                    }\n                                    <Grid item xs={4}>\n                                        {\n                                            formData.gid[i].type !== 'heading' && <Typography style={{width: '100%'}} component={'span'}>\n                                                {\n                                                    formData.gid[i].label\n                                                }\n                                            </Typography>\n                                        }\n                                    </Grid>\n                                    <Grid item xs={8}>\n                                        {\n                                            formData.gid[i].type === 'refcode' && <FormControl\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                size={'small'}\n                                            >\n                                                <Select\n                                                    value={accType}\n                                                    onChange={(e) => {\n                                                        const updatedPbookData = {...pbookData};\n                                                        pbookData['refcode'] = e.target.value;\n                                                        setAccType(e.target.value);\n                                                        setPbookData(updatedPbookData);\n                                                    }}\n                                                >\n                                                    {accTypes.map((type, index) => {\n                                                        return (\n                                                            <MenuItem value={type.code.toLowerCase()} key={index}>\n                                                                {' '}\n                                                                {type.description}{' '}\n                                                            </MenuItem>\n                                                        )\n                                                    })}\n                                                </Select>\n                                            </FormControl>\n                                        }\n                                        {\n                                            (formData.gid[i].type === 'company' ||\n                                                formData.gid[i].type === 'firstname' ||\n                                                formData.gid[i].type === 'lastname') &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                            />\n                                        }\n                                        {\n                                            formData.gid[i].type === 'mobiletel' &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                                error={(pbookData.mobiletel && validator.isMobilePhone(pbookData.mobiletel) === false) ? true : false}\n                                            />\n                                        }\n                                        {\n                                            formData.gid[i].type === 'workemail' &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                                error={(pbookData.workemail && validator.isEmail(pbookData.workemail) === false) ? true : false}\n                                            />\n                                        }\n                                        {\n                                            formData.gid[i].type === 'recaptcha' &&\n                                            <ReCaptcha sitekey={GENERAL_SETTINGS.RECAPTCHA_SITE_KEY} onChange={onVerifyRecaptcha} />\n                                        }\n                                        {\n                                            formData.gid[i].type === 'salesnote' &&\n                                            <TextareaAutosize\n                                                rows={4}\n                                                className={classes.textArea}\n                                                value={salesnote}\n                                                onChange={(e) => setSalesNote(e.target.value)}\n                                            />\n                                        }\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid> : null\n                    )\n                })\n            }\n            {\n                selectedLang === defaultLang && formData && formData.gid && formData.gid.length > 0 && formData.gid.map((d, i) => {\n                    return(\n                        d.isActive ? <Grid container key={i} style={{marginTop: i === 1 ? 24 : (i !== 0 && 8)}}>\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    {\n                                        d.type === 'heading' && <Grid item xs={12}>\n                                            <Typography component={'h5'} variant={'h5'} style={{fontWeight: \"bold\"}}>\n                                                {\n                                                    d.label\n                                                }\n                                            </Typography>\n                                        </Grid>\n                                    }\n                                    <Grid item xs={4}>\n                                        {\n                                            d.type !== 'heading' && <Typography style={{width: '100%'}} component={'span'}>\n                                                {\n                                                    d.label\n                                                }\n                                            </Typography>\n                                        }\n                                    </Grid>\n                                    <Grid item xs={8}>\n                                        {\n                                            d.type === 'refcode' && <FormControl\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                size={'small'}\n                                            >\n                                                <Select\n                                                    value={accType}\n                                                    onChange={(e) => {\n                                                        const tmpAccType = e.target.value;\n                                                        const updatedPbookData = {...pbookData};\n                                                        pbookData['refcode'] = tmpAccType.code.toLowerCase();\n                                                        setAccType(tmpAccType);\n                                                        setPbookData(updatedPbookData);\n                                                    }}\n                                                >\n                                                    {accTypes.map((type, index) => {\n                                                        return (\n                                                            <MenuItem value={type} key={index}>\n                                                                {' '}\n                                                                {type.description}{' '}\n                                                            </MenuItem>\n                                                        )\n                                                    })}\n                                                </Select>\n                                            </FormControl>\n                                        }\n                                        {\n                                            (d.type === 'company' || d.type === 'firstname' || d.type === 'lastname') &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                            />\n                                        }\n                                        {\n                                            d.type === 'mobiletel' &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                                error={(pbookData.mobiletel && validator.isMobilePhone(pbookData.mobiletel) === false) ? true : false}\n                                            />\n                                        }\n                                        {\n                                            d.type === 'workemail' &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                onChange={(e) => handleChangeText(d.type, e.target.value)}\n                                                error={(pbookData.workemail && validator.isEmail(pbookData.workemail) === false) ? true : false}\n                                            />\n                                        }\n                                        {\n                                            d.type === 'recaptcha' &&\n                                            <ReCaptcha sitekey={GENERAL_SETTINGS.RECAPTCHA_SITE_KEY} onChange={onVerifyRecaptcha} />\n                                        }\n                                        {\n                                            d.type === 'salesnote' &&\n                                            <TextareaAutosize\n                                                rows={4}\n                                                className={classes.textArea}\n                                                value={salesnote}\n                                                onChange={(e) => setSalesNote(e.target.value)}\n                                            />\n                                        }\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid> : null\n                    )\n                })\n            }\n            <Grid container style={{marginTop: 8}}>\n                <Grid item xs={12}>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        aria-label=\"add\"\n                        className={classes.actionButton}\n                        style={{float: \"right\"}}\n                        onClick={handleSave}\n                        disabled={!pbookData.refcode || !pbookData.firstname ||\n                        !pbookData.workemail || (hasRecaptcha && !recaptchaValue) ||\n                        !validator.isEmail(pbookData.workemail)}\n                    >\n                        SEND\n                    </Button>\n                </Grid>\n            </Grid>\n            <ToastContainer autoClose={8000} />\n        </React.Fragment>\n    )\n}\n\nconst memorizedWebsiteContactForm = memo(WebsiteContactForm)\n\nexport default memorizedWebsiteContactForm"]},"metadata":{},"sourceType":"module"}