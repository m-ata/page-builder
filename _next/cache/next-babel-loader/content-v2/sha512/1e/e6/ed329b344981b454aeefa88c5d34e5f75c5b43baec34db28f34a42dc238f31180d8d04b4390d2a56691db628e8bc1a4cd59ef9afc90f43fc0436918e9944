{"ast":null,"code":"import _extends from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/@webcms-ui/core/select-autocomplete/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LoadingSpinner from 'components/LoadingSpinner';\nimport WebCmsGlobal from 'components/webcms-global';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport { UseOrest } from '@webcms/orest';\n\nvar SelectAutoComplete = function SelectAutoComplete(_ref) {\n  _s();\n\n  var trgQueryKey = _ref.trgQueryKey,\n      trgValKey = _ref.trgValKey,\n      trgValue = _ref.trgValue,\n      optionLabel = _ref.optionLabel,\n      optionKey = _ref.optionKey,\n      isInitialStateLoad = _ref.isInitialStateLoad,\n      defValKey = _ref.defValKey,\n      defValue = _ref.defValue,\n      disabled = _ref.disabled,\n      id = _ref.id,\n      name = _ref.name,\n      selectApi = _ref.selectApi,\n      variant = _ref.variant,\n      label = _ref.label,\n      value = _ref.value,\n      required = _ref.required,\n      _onChange = _ref.onChange,\n      onCallback = _ref.onCallback,\n      helperText = _ref.helperText,\n      error = _ref.error;\n\n  //context\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; //redux\n\n\n  var token = useSelector(function (state) {\n    var _state$orest, _state$orest$currentU;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : _state$orest$currentU.auth.access_token) || false;\n  }); //state\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      selectList = _useState2[0],\n      setSelectList = _useState2[1];\n\n  var _useState3 = useState(false),\n      useFreeSolo = _useState3[0],\n      setUseFreeSolo = _useState3[1];\n\n  var _useState4 = useState(false),\n      prevTrgVal = _useState4[0],\n      setPrevTrgVal = _useState4[1];\n\n  useEffect(function () {\n    if (!isLoading && isInitialStateLoad && !selectList.length > 0 || trgValKey && trgValue && typeof trgValue === 'object' && trgValue[trgValKey] !== prevTrgVal) {\n      setIsLoading(true);\n\n      if (trgValKey && trgQueryKey) {\n        if (trgValue && typeof trgValue === 'object') {\n          trgValue = trgValue[trgValKey];\n          setPrevTrgVal(trgValue);\n        } else {\n          onCallback(defValue || value || '');\n          setSelectList([]);\n          setUseFreeSolo(true);\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: selectApi,\n        token: token,\n        params: Object.assign(trgValKey && trgValue && {\n          query: \"\".concat(trgQueryKey, \"::\").concat(trgValue)\n        } || {}, {\n          limit: 0,\n          allhotels: true\n        })\n      }).then(function (endPointResponse) {\n        var _endPointResponse$dat, _endPointResponse$dat2;\n\n        if (endPointResponse.status === 200 && endPointResponse !== null && endPointResponse !== void 0 && (_endPointResponse$dat = endPointResponse.data) !== null && _endPointResponse$dat !== void 0 && _endPointResponse$dat.data && (endPointResponse === null || endPointResponse === void 0 ? void 0 : (_endPointResponse$dat2 = endPointResponse.data) === null || _endPointResponse$dat2 === void 0 ? void 0 : _endPointResponse$dat2.data.length) > 0) {\n          var _endPointResponse$dat3;\n\n          var endPointResponseData = (endPointResponse === null || endPointResponse === void 0 ? void 0 : (_endPointResponse$dat3 = endPointResponse.data) === null || _endPointResponse$dat3 === void 0 ? void 0 : _endPointResponse$dat3.data) || false;\n          setSelectList(endPointResponseData);\n          setUseFreeSolo(false);\n          setIsLoading(false);\n        } else {\n          if (defValue && typeof defValue !== 'object') {\n            onCallback(defValue);\n          } else {\n            onCallback('');\n          }\n\n          setSelectList([]);\n          setUseFreeSolo(true);\n          setIsLoading(false);\n        }\n      });\n    }\n  }, [isInitialStateLoad, trgValue]);\n  useEffect(function () {\n    if (!isLoading && isInitialStateLoad && selectList && selectList.length > 0 && defValue && typeof defValue !== 'object') {\n      if (defValue) {\n        var newInitialValue;\n\n        if (defValKey) {\n          newInitialValue = selectList.find(function (item) {\n            return String(item[defValKey]) === String(defValue);\n          });\n          onCallback(newInitialValue);\n        } else {\n          newInitialValue = selectList.find(function (item) {\n            return String(item.id) === String(defValue);\n          });\n          onCallback(newInitialValue);\n        }\n      } else {\n        var getDefVal = selectList.find(function (item) {\n          return item.isdef === true;\n        });\n\n        if (getDefVal && typeof onCallback === 'function') {\n          onCallback(getDefVal);\n        }\n      }\n    } else if (!isLoading && isInitialStateLoad && selectList && selectList.length > 0 && defValue) {\n      if (trgValKey && trgQueryKey && trgValue && typeof trgValue === 'object' && defValue) {\n        var filterList = selectList.find(function (item) {\n          return String(item[trgQueryKey]) === String(defValue[trgQueryKey]);\n        });\n\n        if (!filterList) {\n          onCallback('');\n        }\n      } else if (trgValKey && trgQueryKey && !trgValue) {\n        setUseFreeSolo(true);\n        setSelectList([]);\n        onCallback('');\n      }\n    }\n  }, [isLoading, selectList, defValue, trgValue]);\n\n  if (useFreeSolo) {\n    return __jsx(TextField, {\n      disabled: isLoading || !isInitialStateLoad || disabled,\n      value: value,\n      required: required,\n      error: error,\n      fullWidth: true,\n      label: label || '',\n      variant: variant,\n      helperText: helperText,\n      onChange: function onChange(event) {\n        return _onChange(event.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return __jsx(Autocomplete, {\n    id: id,\n    name: name,\n    disabled: isLoading || !isInitialStateLoad || disabled,\n    loading: isLoading,\n    noOptionsText: t('str_notFound'),\n    value: value,\n    variant: variant || 'outlined',\n    onChange: function onChange(event, newValue) {\n      return _onChange(newValue);\n    },\n    options: selectList,\n    getOptionSelected: optionKey ? function (option, value) {\n      return option && value && option[optionKey] && option[optionKey] === value[optionKey] || \"\";\n    } : \"\",\n    getOptionLabel: function getOptionLabel(option) {\n      return option && optionLabel && option[optionLabel] || \"\";\n    },\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        required: required,\n        error: error,\n        fullWidth: true,\n        label: label || '',\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          endAdornment: __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }\n          }, params.InputProps.endAdornment, isLoading ? __jsx(LoadingSpinner, {\n            size: 18,\n            style: {\n              marginTop: -20\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 46\n            }\n          }) : params.InputProps.endAdornment)\n        }),\n        variant: variant,\n        helperText: helperText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  });\n};\n\n_s(SelectAutoComplete, \"54bVmF9htBDzYQy0YdR3XRHQNZk=\", false, function () {\n  return [useTranslation, useSelector];\n});\n\n_c = SelectAutoComplete;\nexport default SelectAutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectAutoComplete\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/@webcms-ui/core/select-autocomplete/index.js"],"names":["React","useContext","useEffect","useState","useSelector","TextField","Autocomplete","LoadingSpinner","WebCmsGlobal","useTranslation","UseOrest","SelectAutoComplete","trgQueryKey","trgValKey","trgValue","optionLabel","optionKey","isInitialStateLoad","defValKey","defValue","disabled","id","name","selectApi","variant","label","value","required","onChange","onCallback","helperText","error","GENERAL_SETTINGS","t","token","state","orest","currentUser","auth","access_token","isLoading","setIsLoading","selectList","setSelectList","useFreeSolo","setUseFreeSolo","prevTrgVal","setPrevTrgVal","length","apiUrl","OREST_URL","endpoint","params","Object","assign","query","limit","allhotels","then","endPointResponse","status","data","endPointResponseData","newInitialValue","find","item","String","getDefVal","isdef","filterList","event","target","newValue","option","InputProps","endAdornment","marginTop"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { TextField } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport WebCmsGlobal from 'components/webcms-global'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport { UseOrest } from '@webcms/orest'\n\nconst SelectAutoComplete = ({ trgQueryKey, trgValKey, trgValue, optionLabel, optionKey, isInitialStateLoad, defValKey, defValue, disabled, id, name, selectApi, variant, label, value, required, onChange, onCallback, helperText, error }) => {\n\n    //context\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const { t } = useTranslation()\n\n    //redux\n    const token = useSelector((state) => state?.orest?.currentUser?.auth.access_token || false)\n\n    //state\n    const [isLoading, setIsLoading] = useState(false)\n    const [selectList, setSelectList] = useState([])\n    const [useFreeSolo, setUseFreeSolo] = useState(false)\n    const [prevTrgVal, setPrevTrgVal] = useState(false)\n\n    useEffect(() => {\n        if((!isLoading && isInitialStateLoad && !selectList.length > 0) || (trgValKey && trgValue && typeof trgValue === 'object' && trgValue[trgValKey] !== prevTrgVal)){\n            setIsLoading(true)\n            if(trgValKey && trgQueryKey){\n                if(trgValue && typeof trgValue === 'object'){\n                    trgValue = trgValue[trgValKey]\n                    setPrevTrgVal(trgValue)\n                }else {\n                    onCallback(defValue || value || '')\n                    setSelectList([])\n                    setUseFreeSolo(true)\n                    setIsLoading(false)\n                    return\n                }\n            }\n\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: selectApi,\n                token,\n                params: Object.assign(trgValKey && trgValue && { query: `${trgQueryKey}::${trgValue}` } || {}, { limit: 0, allhotels: true }),\n            }).then(endPointResponse => {\n                if (endPointResponse.status === 200 && endPointResponse?.data?.data && endPointResponse?.data?.data.length > 0) {\n                    const endPointResponseData = endPointResponse?.data?.data || false\n                    setSelectList(endPointResponseData)\n                    setUseFreeSolo(false)\n                    setIsLoading(false)\n                } else {\n                    if(defValue && typeof defValue !== 'object'){\n                        onCallback(defValue)\n                    }else{\n                        onCallback('')\n                    }\n                    setSelectList([])\n                    setUseFreeSolo(true)\n                    setIsLoading(false)\n                }\n            })\n        }\n    }, [isInitialStateLoad, trgValue])\n\n    useEffect(() => {\n        if(!isLoading && isInitialStateLoad && selectList && selectList.length > 0 && defValue && typeof defValue !== 'object'){\n            if (defValue) {\n                let newInitialValue\n                if (defValKey) {\n                    newInitialValue = selectList.find(item => String(item[defValKey]) === String(defValue))\n                    onCallback(newInitialValue)\n                } else {\n                    newInitialValue = selectList.find(item => String(item.id) === String(defValue))\n                    onCallback(newInitialValue)\n                }\n            } else {\n                const getDefVal = selectList.find(item => item.isdef === true)\n                if (getDefVal && typeof onCallback === 'function') {\n                    onCallback(getDefVal)\n                }\n            }\n        }else if(!isLoading && isInitialStateLoad && selectList && selectList.length > 0 && defValue){\n            if(trgValKey && trgQueryKey && trgValue && typeof trgValue === 'object' && defValue){\n                const filterList = selectList.find(item => String(item[trgQueryKey]) === String(defValue[trgQueryKey]))\n                if(!filterList){\n                   onCallback('')\n                }\n            }else if(trgValKey && trgQueryKey && !trgValue){\n                setUseFreeSolo(true)\n                setSelectList([])\n                onCallback('')\n            }\n        }\n    }, [isLoading, selectList, defValue, trgValue])\n\n    if(useFreeSolo){\n        return (\n            <TextField\n                disabled={isLoading || !isInitialStateLoad || disabled}\n                value={value}\n                required={required}\n                error={error}\n                fullWidth={true}\n                label={label || ''}\n                variant={variant}\n                helperText={helperText}\n                onChange={(event) => onChange(event.target.value)}\n            />\n        )\n    }\n\n    return (\n        <Autocomplete\n            id={id}\n            name={name}\n            disabled={isLoading || !isInitialStateLoad || disabled}\n            loading={isLoading}\n            noOptionsText={t('str_notFound')}\n            value={value}\n            variant={variant || 'outlined'}\n            onChange={(event, newValue) => onChange(newValue)}\n            options={selectList}\n            getOptionSelected={optionKey ? (option, value) => option && value && option[optionKey] && option[optionKey] === value[optionKey] || \"\" : \"\"}\n            getOptionLabel={(option) => option && optionLabel && option[optionLabel] || \"\"}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    required={required}\n                    error={error}\n                    fullWidth={true}\n                    label={label || ''}\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {params.InputProps.endAdornment}\n                                {isLoading ? <LoadingSpinner size={18} style={{ marginTop: -20 }} /> : params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                    variant={variant}\n                    helperText={helperText}\n                />\n            )}\n        />\n    )\n}\n\nexport default SelectAutoComplete"]},"metadata":{},"sourceType":"module"}