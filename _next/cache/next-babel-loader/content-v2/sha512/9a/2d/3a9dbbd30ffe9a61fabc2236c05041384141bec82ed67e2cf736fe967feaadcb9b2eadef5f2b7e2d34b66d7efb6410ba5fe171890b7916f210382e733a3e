{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/@webcms-ui/core/spin-edit/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, IconButton, TextField } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nexport default function SpinEdit(props) {\n  _s();\n\n  var disabled = props.disabled,\n      label = props.label,\n      max = props.max,\n      min = props.min,\n      defaultValue = props.defaultValue,\n      helpText = props.helpText,\n      size = props.size,\n      padding = props.padding,\n      onChange = props.onChange,\n      className = props.className,\n      isWritableText = props.isWritableText,\n      error = props.error,\n      style = props.style;\n\n  var _useState = useState(''),\n      inputType = _useState[0],\n      setInputType = _useState[1];\n\n  var _useState2 = useState(defaultValue),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  useEffect(function () {\n    if (inputValue !== defaultValue && typeof onChange === \"function\") {\n      onChange(inputValue, inputType);\n    }\n  }, [inputValue]);\n\n  var handleInc = function handleInc() {\n    if (max > inputValue) setInputType('inc');\n    setInputValue(inputValue + 1);\n  };\n\n  var handleDec = function handleDec() {\n    if (inputValue > min) {\n      setInputType('dec');\n      setInputValue(inputValue - 1);\n    }\n\n    if (inputValue > max) {\n      setInputValue(max);\n    }\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    p: padding,\n    style: style && style || {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    error: error,\n    disabled: disabled,\n    className: className || \"\",\n    label: label,\n    value: inputValue,\n    variant: \"outlined\",\n    helperText: helpText,\n    onChange: function onChange(e) {\n      if (isWritableText) {\n        var reg = /^[0-9\\b]+$/;\n\n        if (e.target.value === '' || reg.test(e.target.value)) {\n          setInputValue(Number(e.target.value));\n        }\n      }\n    },\n    fullWidth: true,\n    size: size,\n    FormHelperTextProps: {\n      style: {\n        opacity: error ? '1' : '0'\n      }\n    },\n    inputProps: {\n      style: {\n        textAlign: 'center'\n      },\n      pattern: \"[0-9]*\"\n    },\n    InputProps: {\n      readOnly: !isWritableText,\n      startAdornment: __jsx(IconButton, {\n        style: {\n          padding: '4px'\n        },\n        size: size,\n        onClick: function onClick() {\n          return handleDec();\n        },\n        disabled: disabled || inputValue <= min,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }\n      }, __jsx(RemoveIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      })),\n      endAdornment: __jsx(IconButton, {\n        style: {\n          padding: '4px'\n        },\n        size: size,\n        onClick: function onClick() {\n          return handleInc();\n        },\n        disabled: disabled || inputValue >= max,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }\n      }, __jsx(AddIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(SpinEdit, \"xox5IwG4idBIVeWCOj2ocmvzyns=\");\n\n_c = SpinEdit;\nSpinEdit.defaultProps = {\n  label: \"\",\n  max: 99,\n  min: 0,\n  defaultValue: 0,\n  padding: 3,\n  size: \"medium\",\n  helpeText: '',\n  disabled: false,\n  isWritableText: false\n};\nSpinEdit.propTypes = {\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n  helpText: PropTypes.object,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  defaultValue: PropTypes.number,\n  padding: PropTypes.number,\n  size: PropTypes.string,\n  disabled: PropTypes.bool,\n  isWritableText: PropTypes.bool,\n  style: PropTypes.object\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SpinEdit\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/@webcms-ui/core/spin-edit/index.js"],"names":["React","useEffect","useState","PropTypes","Box","IconButton","TextField","AddIcon","RemoveIcon","SpinEdit","props","disabled","label","max","min","defaultValue","helpText","size","padding","onChange","className","isWritableText","error","style","inputType","setInputType","inputValue","setInputValue","handleInc","handleDec","e","reg","target","value","test","Number","opacity","textAlign","pattern","readOnly","startAdornment","endAdornment","defaultProps","helpeText","propTypes","func","string","object","number","bool"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Box, IconButton, TextField } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport RemoveIcon from '@material-ui/icons/Remove'\n\nexport default function SpinEdit(props) {\n\n  let {disabled, label, max, min, defaultValue, helpText, size, padding, onChange, className, isWritableText, error, style} = props;\n  const [inputType, setInputType] = useState('');\n  const [inputValue, setInputValue] = useState(defaultValue);\n\n  useEffect(() => {\n    if(inputValue !== defaultValue && typeof onChange === \"function\"){\n      onChange(inputValue, inputType);\n    }\n  }, [inputValue]);\n\n  const handleInc = () =>{\n    if(max > inputValue)\n      setInputType('inc')\n      setInputValue(inputValue + 1);\n  };\n\n  const handleDec = () =>{\n    if(inputValue > min) {\n      setInputType('dec')\n      setInputValue(inputValue - 1);\n    }\n    if(inputValue > max) {\n      setInputValue(max);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Box p={padding} style={style && style || {}}>\n        <TextField\n          error={error}\n          disabled={disabled}\n          className={className || \"\"}\n          label={label}\n          value={inputValue}\n          variant=\"outlined\"\n          helperText={helpText}\n          onChange={(e) => {\n            if(isWritableText) {\n              const reg = /^[0-9\\b]+$/\n              if (e.target.value === '' || reg.test(e.target.value)) {\n                setInputValue(Number(e.target.value))\n              }\n            }\n          }}\n          fullWidth\n          size={size}\n          FormHelperTextProps={{\n            style:  {opacity: error ? '1' : '0'}\n          }}\n          inputProps={{ style: { textAlign: 'center' }, pattern:\"[0-9]*\" }}\n          InputProps={{\n            readOnly: !isWritableText,\n            startAdornment: (\n              <IconButton style={{padding: '4px'}} size={size} onClick={()=> handleDec()} disabled={disabled || inputValue <= min}>\n                <RemoveIcon />\n              </IconButton>\n            ),\n            endAdornment: (\n              <IconButton style={{padding: '4px'}} size={size} onClick={()=> handleInc()} disabled={disabled || inputValue >= max}>\n                <AddIcon />\n              </IconButton>\n            ),\n          }}\n        />\n      </Box>\n    </React.Fragment>\n  );\n}\n\nSpinEdit.defaultProps = {\n  label: \"\",\n  max: 99,\n  min: 0,\n  defaultValue: 0,\n  padding: 3,\n  size: \"medium\",\n  helpeText: '',\n  disabled: false,\n  isWritableText: false\n}\n\nSpinEdit.propTypes = {\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n  helpText: PropTypes.object,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  defaultValue: PropTypes.number,\n  padding: PropTypes.number,\n  size: PropTypes.string,\n  disabled: PropTypes.bool,\n  isWritableText: PropTypes.bool,\n  style: PropTypes.object\n}"]},"metadata":{},"sourceType":"module"}