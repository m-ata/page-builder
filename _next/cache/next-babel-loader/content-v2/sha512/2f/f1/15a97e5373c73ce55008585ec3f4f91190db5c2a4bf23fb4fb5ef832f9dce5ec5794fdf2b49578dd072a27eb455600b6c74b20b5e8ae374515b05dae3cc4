{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/emp-portal/tabs/Languages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Insert, UseOrest, ViewList, Patch, Delete, Upload } from \"@webcms/orest\";\nimport WebCmsGlobal from \"../../../webcms-global\";\nimport { useSelector } from \"react-redux\";\nimport { isErrorMsg, mobileTelNoFormat, OREST_ENDPOINT } from \"../../../../model/orest/constants\";\nimport { Grid, Typography, Dialog, Checkbox, FormControlLabel, Button, Menu, MenuItem, IconButton, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\nimport { useSnackbar } from \"notistack\";\nimport { SLASH } from \"../../../../model/globals\";\nimport useTranslation from \"../../../../lib/translations/hooks/useTranslation\";\nimport renderFormElements, { ELEMENT_TYPES } from \"../../../render-form-elements\";\nimport { required } from \"../../../../state/utils/form\";\nimport AddDialogActions from \"../../../AddDialogActions\";\nimport { LocaleContext } from \"../../../../lib/translations/context/LocaleContext\";\nimport LoadingSpinner from \"../../../LoadingSpinner\";\nimport { helper, orest } from \"../../../../@webcms-globals\";\nimport TrackedChangesDialog from \"../../../TrackedChangesDialog\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport MaterialTable, { MTableHeader } from \"material-table\";\nimport MaterialTableLocalization from \"../../../MaterialTableLocalization\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport TableColumnText from \"../../../TableColumnText\";\nimport PopupState, { bindMenu, bindTrigger } from \"material-ui-popup-state\";\nimport { CustomToolTip } from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { DropzoneDialog } from \"material-ui-dropzone\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { value } from \"lodash/seq\";\nimport MediaViewerDialog from \"../../../../@webcms-ui/core/media-viewer-dialog\";\nimport VisibilityOutlinedIcon from \"@material-ui/icons/VisibilityOutlined\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport CloudDownloadOutlinedIcon from \"@material-ui/icons/CloudDownloadOutlined\";\nimport { PreviewFile } from \"../../../../model/orest/components/RaFile\";\nimport axios from \"axios\";\nimport { tile2LatLng } from \"google-map-react/lib/utils/utils\";\nconst VARIANT = 'outlined';\n\nfunction Languages(props) {\n  var _languageData$langid, _languageData$langid2, _languageData$langid3, _languageData$langid4, _languageData$langlev, _languageData$langlev2, _languageData$langlev3, _languageData$descrip, _languageData$descrip2, _languageData$descrip3, _languageData$descrip4;\n\n  //props\n  const {\n    empId\n  } = props; //snackbar\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); //context\n\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    locale\n  } = useContext(LocaleContext);\n  const {\n    t\n  } = useTranslation();\n  const tableLocalization = MaterialTableLocalization(); //redux state\n\n  const token = useSelector(state => {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  const hotelRefNo = useSelector(state => {\n    var _state$hotelinfo;\n\n    return (state === null || state === void 0 ? void 0 : (_state$hotelinfo = state.hotelinfo) === null || _state$hotelinfo === void 0 ? void 0 : _state$hotelinfo.currentHotelRefNo) || GENERAL_SETTINGS.HOTELREFNO || false;\n  });\n  const state = useSelector(state => {\n    var _state$orest2, _state$orest2$state, _state$orest2$state$e;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest2 = state.orest) === null || _state$orest2 === void 0 ? void 0 : (_state$orest2$state = _state$orest2.state) === null || _state$orest2$state === void 0 ? void 0 : (_state$orest2$state$e = _state$orest2$state.emp) === null || _state$orest2$state$e === void 0 ? void 0 : _state$orest2$state$e.mid) || false;\n  }); //locale state\n\n  const initialState = {\n    langid: {\n      value: '',\n      isError: false,\n      required: true,\n      helperText: ''\n    },\n    verbalevel: {\n      value: 1,\n      isError: false,\n      required: false,\n      helperText: ''\n    },\n    writenlevel: {\n      value: 1,\n      isError: false,\n      required: false,\n      helperText: ''\n    },\n    readlevel: {\n      value: 1,\n      isError: false,\n      required: false,\n      helperText: ''\n    },\n    langlevel: {\n      value: 'str_langlevel',\n      isError: false,\n      required: false,\n      helperText: ''\n    },\n    description: {\n      value: '',\n      isError: false,\n      required: false,\n      helperText: ''\n    },\n    stdfileid: {\n      value: 0,\n      isError: false,\n      required: false,\n      helperText: ''\n    }\n  };\n  const {\n    0: isLoadingList,\n    1: setIsLoadingList\n  } = useState(false);\n  const {\n    0: allHotels,\n    1: setAllHotels\n  } = useState(false);\n  const {\n    0: languageList,\n    1: setLanguageList\n  } = useState([]);\n  const {\n    0: openAddDialog,\n    1: setOpenAddDialog\n  } = useState(false);\n  const {\n    0: selectedLanguageData,\n    1: setSelectedLanguageData\n  } = useState(null);\n  const {\n    0: selectedGid,\n    1: setSelectedGid\n  } = useState(false);\n  const {\n    0: getData,\n    1: setGetData\n  } = useState(null);\n  const {\n    0: openTrackedDialog,\n    1: setOpenTrackedDialog\n  } = useState(false);\n  const {\n    0: deleteOpenDialog,\n    1: setDeleteOpenDialog\n  } = useState(false);\n  const {\n    0: isDef,\n    1: setIsDef\n  } = useState(false);\n  const {\n    0: isSaving,\n    1: setIsSaving\n  } = useState(false);\n  const {\n    0: languageData,\n    1: setLanguageData\n  } = useState(initialState);\n  const {\n    0: languageDataBase,\n    1: setLanguageDataBase\n  } = useState(initialState);\n  const {\n    0: isInitialStateLoad,\n    1: setIsInitialStateLoad\n  } = useState(false);\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(true);\n  const {\n    0: langFileUploadStatus,\n    1: setLangFileUploadStatus\n  } = useState(false);\n  const {\n    0: taskFileListLoading,\n    1: setLangFileListLoading\n  } = useState(false);\n  const {\n    0: taskFileList,\n    1: setLangFileList\n  } = useState([]);\n  const {\n    0: selectedLanguageGid,\n    1: setSelectedLanguageGid\n  } = useState(null);\n  const {\n    0: openPreviewDialog,\n    1: setOpenPreviewDialog\n  } = useState(false);\n  const {\n    0: isPreviewLoading,\n    1: setIsPreviewLoading\n  } = useState(false);\n  const {\n    0: mediaUrl,\n    1: setMediaUrl\n  } = useState('');\n  const {\n    0: fileType,\n    1: setFileType\n  } = useState('');\n  const {\n    0: isFileDeleting,\n    1: setIsFileDeleting\n  } = useState(false);\n  const {\n    0: isFileDownloading,\n    1: setIsFileDownloading\n  } = useState(false);\n  const {\n    0: popupState,\n    1: setPopupState\n  } = useState({});\n  const {\n    0: deleteFileInfo,\n    1: setDeleteFileInfo\n  } = useState(false);\n  const {\n    0: hasRightData,\n    1: setHasRightData\n  } = useState();\n  const {\n    0: file,\n    1: setFile\n  } = useState(null);\n  const {\n    0: returnText,\n    1: setrReturnText\n  } = useState(false);\n\n  const openDialog = () => {\n    setLangFileUploadStatus(true);\n  };\n\n  const openTrackDialog = gid => {\n    setSelectedLanguageGid(gid);\n    setDeleteOpenDialog(true);\n  };\n\n  const formElements = [{\n    type: ELEMENT_TYPES.autoComplete,\n    id: 'langid',\n    name: 'langid',\n    value: ((_languageData$langid = languageData.langid) === null || _languageData$langid === void 0 ? void 0 : _languageData$langid.value) || null,\n    disabled: isSaving,\n    label: t('str_language'),\n    variant: VARIANT,\n    required: (_languageData$langid2 = languageData.langid) === null || _languageData$langid2 === void 0 ? void 0 : _languageData$langid2.isRequired,\n    error: (_languageData$langid3 = languageData.langid) === null || _languageData$langid3 === void 0 ? void 0 : _languageData$langid3.isError,\n    helperText: (_languageData$langid4 = languageData.langid) === null || _languageData$langid4 === void 0 ? void 0 : _languageData$langid4.helperText,\n    onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n    onBlur: (e, name) => handleOnBlurFormElements(e, name),\n    onLoad: (initialValue, name) => {\n      const data = _objectSpread({}, languageData);\n\n      data[name].value = initialValue ? initialValue : null;\n      setLanguageData(data);\n    },\n    endpoint: 'ralang/view/list',\n    params: {\n      text: '',\n      limit: 25,\n      field: 'code'\n    },\n    initialId: isInitialStateLoad && (selectedLanguageData === null || selectedLanguageData === void 0 ? void 0 : selectedLanguageData.langid) || false,\n    showOptionLabel: 'description',\n    showOption: 'description',\n    searchParam: 'description',\n    fullWidth: true,\n    gridProps: {\n      xs: 12,\n      sm: 6\n    }\n  }, {\n    type: ELEMENT_TYPES.autoComplete,\n    id: 'langlevel',\n    name: 'langlevel',\n    value: t('str_langlevel'),\n    disabled: isSaving,\n    label: t('str_langlevel'),\n    variant: VARIANT,\n    required: (_languageData$langlev = languageData.langlevel) === null || _languageData$langlev === void 0 ? void 0 : _languageData$langlev.isRequired,\n    error: (_languageData$langlev2 = languageData.langlevel) === null || _languageData$langlev2 === void 0 ? void 0 : _languageData$langlev2.isError,\n    helperText: (_languageData$langlev3 = languageData.langlevel) === null || _languageData$langlev3 === void 0 ? void 0 : _languageData$langlev3.helperText,\n    onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n    onBlur: (e, name) => handleOnBlurFormElements(e, name),\n    onLoad: (initialValue, name) => {\n      const data = _objectSpread({}, languageData);\n\n      data[name].value = initialValue ? initialValue : null;\n      setLanguageData(data);\n    },\n    endpoint: 'transtype/langlevel',\n    params: {\n      text: '',\n      limit: 25,\n      field: 'code'\n    },\n    initialId: isInitialStateLoad && (selectedLanguageData === null || selectedLanguageData === void 0 ? void 0 : selectedLanguageData.langlevel) || false,\n    showOptionLabel: 'description',\n    showOption: 'description',\n    searchParam: 'description',\n    fullWidth: true,\n    gridProps: {\n      xs: 12,\n      sm: 6\n    }\n  }, {\n    type: ELEMENT_TYPES.textField,\n    id: 'description',\n    name: 'description',\n    value: (_languageData$descrip = languageData.description) === null || _languageData$descrip === void 0 ? void 0 : _languageData$descrip.value,\n    error: (_languageData$descrip2 = languageData.description) === null || _languageData$descrip2 === void 0 ? void 0 : _languageData$descrip2.isError,\n    required: (_languageData$descrip3 = languageData.description) === null || _languageData$descrip3 === void 0 ? void 0 : _languageData$descrip3.isRequired,\n    disabled: isSaving,\n    label: t('str_description'),\n    helperText: (_languageData$descrip4 = languageData.description) === null || _languageData$descrip4 === void 0 ? void 0 : _languageData$descrip4.helperText,\n    onChange: e => handleOnChangeFormElements(e),\n    onBlur: e => handleOnBlurFormElements(e),\n    variant: VARIANT,\n    fullWidth: true,\n    gridProps: {\n      xs: 12,\n      sm: 12\n    }\n  }];\n  const languageColumns = [{\n    title: __jsx(Button, {\n      style: {\n        padding: 0,\n        maxWidth: 25,\n        minWidth: 25\n      },\n      disabled: true,\n      color: 'primary',\n      variant: 'text',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, __jsx(MoreVertIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    })),\n    render: props => __jsx(TableColumnText, {\n      minWidth: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, __jsx(PopupState, {\n      variant: \"popover\",\n      popupId: \"material-table-action-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }, popupState => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 29\n      }\n    }, __jsx(Button, _extends({\n      style: {\n        padding: 0,\n        maxWidth: 25,\n        minWidth: 25\n      },\n      color: 'primary',\n      variant: 'contained'\n    }, bindTrigger(popupState), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 33\n      }\n    }), __jsx(MoreVertIcon, {\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 37\n      }\n    })), __jsx(Menu, _extends({\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"left\"\n      },\n      transformOrigin: {\n        vertical: \"top\",\n        horizontal: \"left\"\n      },\n      getContentAnchorEl: null\n    }, bindMenu(popupState), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 33\n      }\n    }), __jsx(MenuItem, {\n      onClick: () => {\n        setSelectedLanguageData(props);\n        setSelectedGid((props === null || props === void 0 ? void 0 : props.gid) || false);\n        handleOpenAddDialog(props);\n        popupState.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 37\n      }\n    }, __jsx(EditOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 42\n      }\n    }), __jsx(Typography, {\n      style: {\n        paddingLeft: '8px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 41\n      }\n    }, t('str_edit'))), __jsx(MenuItem, {\n      variant: \"outlined\",\n      onClick: () => openTrackDialog(props === null || props === void 0 ? void 0 : props.gid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 37\n      }\n    }, __jsx(DeleteIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 41\n      }\n    }), __jsx(Typography, {\n      style: {\n        paddingLeft: '8px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 41\n      }\n    }, t('str_delete')))))))\n  }, {\n    title: t('str_language'),\n    field: 'langid',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.langcode)\n  }, {\n    title: t('str_verbalLevel'),\n    field: 'verbalevel',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.verbalevel)\n  }, {\n    title: t('str_writingLevel'),\n    field: 'writenlevel',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.writenlevel)\n  }, {\n    title: t('str_readingLevel'),\n    field: 'readlevel',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.readlevel)\n  }, {\n    title: t('str_description'),\n    field: 'description',\n    render: props => __jsx(TableColumnText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 32\n      }\n    }, props === null || props === void 0 ? void 0 : props.description)\n  }, {\n    title: t('str_preview'),\n    field: 'stdfileid',\n    render: props => props.stdfileid ? __jsx(PopupState, {\n      variant: \"popover\",\n      popupId: \"status-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 29\n      }\n    }, popupState => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 37\n      }\n    }, __jsx(MenuItem, {\n      onClick: () => {\n        setOpenPreviewDialog(true);\n        handlePreviewFile(props.mid, 'EMPLANG.CERT');\n      },\n      disabled: isFileDeleting || isFileDownloading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 41\n      }\n    }, __jsx(VisibilityOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 45\n      }\n    })))) : null\n  }, {\n    title: t('str_download'),\n    field: 'stdfileid',\n    render: props => props.stdfileid ? __jsx(PopupState, {\n      variant: \"popover\",\n      popupId: \"status-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 29\n      }\n    }, popupState => __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 37\n      }\n    }, (hasRightData === null || hasRightData === void 0 ? void 0 : hasRightData.cand) && __jsx(MenuItem, {\n      onClick: () => {\n        setOpenTrackedDialog(true);\n        setDeleteFileInfo(props);\n        setPopupState(popupState);\n      },\n      disabled: isFileDeleting || isFileDownloading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 49\n      }\n    }, isFileDeleting ? __jsx(LoadingSpinner, {\n      size: 18,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 71\n      }\n    }) : __jsx(DeleteOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 57\n      }\n    }), __jsx(Typography, {\n      style: {\n        paddingLeft: '8px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 53\n      }\n    }, t('str_delete'))), __jsx(MenuItem, {\n      onClick: () => handleTaskFileDownload(props.mid, 'EMPLANG.CERT', props.description),\n      disabled: isFileDeleting || isFileDownloading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 41\n      }\n    }, isFileDownloading ? __jsx(LoadingSpinner, {\n      size: 18,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 66\n      }\n    }) : __jsx(CloudDownloadOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 49\n      }\n    })))) : null\n  }];\n  useEffect(() => {\n    if (token && empId) {\n      getLanguageList();\n    }\n  }, []);\n  useEffect(() => {\n    let isEffect = true;\n\n    if (isEffect && languageData && getData) {\n      const newClientInitialState = helper.objectMapper(languageData, getData, ['langid']);\n      setLanguageData(newClientInitialState);\n      setLanguageDataBase(newClientInitialState);\n      setIsInitialStateLoad(true);\n    }\n\n    return () => {\n      isEffect = false;\n    };\n  }, [getData]);\n\n  const handleDeleteItem = gid => {\n    setIsDeleting(true);\n    setDeleteOpenDialog(false);\n    Delete({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.EMPLANG,\n      token,\n      gid: gid,\n      params: {\n        hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        getLanguageList();\n        enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n          variant: 'success'\n        });\n      } else {\n        var _error$errorMsg, _error$errorMsg2;\n\n        const error = isErrorMsg(res);\n        enqueueSnackbar(((_error$errorMsg = error.errorMsg) === null || _error$errorMsg === void 0 ? void 0 : _error$errorMsg.length) > 50 ? (_error$errorMsg2 = error.errorMsg) === null || _error$errorMsg2 === void 0 ? void 0 : _error$errorMsg2.substring(0, 50) : error.errorMsg, {\n          variant: 'error'\n        });\n        setIsDeleting(false);\n      }\n    });\n  };\n\n  const getLanguageList = () => {\n    setIsLoadingList(true);\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.EMPLANG,\n      token,\n      params: {\n        query: `empid:${empId}`,\n        allhotels: allHotels,\n        hotelrefno: hotelRefNo\n      }\n    }).then(res => {\n      setIsLoadingList(false);\n      let resultToReturn = false;\n      let langList = res.data.data;\n\n      for (let i = 0; i < langList.length; i++) {\n        for (let j = 0; j < langList.length; j++) {\n          if (i !== j) {\n            if (langList[i].langid === langList[j].langid) {\n              resultToReturn = true;\n              let gid = langList[j].gid;\n              Delete({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.EMPLANG,\n                token,\n                gid: gid,\n                params: {\n                  hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n                }\n              });\n              break;\n            }\n          }\n        }\n\n        if (resultToReturn) {\n          break;\n        }\n      }\n\n      if (resultToReturn) {\n        setrReturnText(true);\n        enqueueSnackbar(t('str_languageAlreadyExist'), {\n          variant: 'error'\n        });\n      } else {\n        if (res.status === 200) {\n          if (res.data.count > 0) {\n            setLanguageList(res.data.data);\n          }\n        } else {\n          var _error$errorMsg3, _error$errorMsg4;\n\n          const error = isErrorMsg(res);\n          enqueueSnackbar(((_error$errorMsg3 = error.errorMsg) === null || _error$errorMsg3 === void 0 ? void 0 : _error$errorMsg3.length) > 50 ? (_error$errorMsg4 = error.errorMsg) === null || _error$errorMsg4 === void 0 ? void 0 : _error$errorMsg4.substring(0, 50) : error.errorMsg, {\n            variant: 'error'\n          });\n        }\n      }\n    });\n  };\n\n  const handleGetselectedLanguage = selectedLanguage => {\n    if (selectedLanguage) {\n      setIsDef(true);\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.EMPLANG + SLASH + OREST_ENDPOINT.VIEW + SLASH + 'get' + SLASH + selectedLanguage.gid,\n        token\n      }).then(res => {\n        setIsDef(false);\n\n        if (res.status === 200 && res.data.data) {\n          const data = res.data.data;\n          setGetData(data);\n        }\n      });\n    }\n  };\n\n  const handleDefRecord = () => {\n    setIsDef(true);\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.EMPLANG + SLASH + OREST_ENDPOINT.DEF,\n      token,\n      params: {\n        hotelrefno: hotelRefNo\n      }\n    }).then(res => {\n      if (res.status === 200 && res.data.count > 0) {\n        const data = Object.assign({}, res.data.data, languageData);\n        setLanguageData(data);\n        setLanguageDataBase(data);\n      }\n\n      setIsDef(false);\n    });\n  };\n\n  const handleSave = () => {\n    const data = _objectSpread({}, languageData);\n\n    Object.keys(initialState).map(key => {\n      data[key] = typeof data[key].value === 'object' ? data[key].value ? data[key].value.id : null : data[key].value;\n    });\n\n    if (empId) {\n      setIsSaving(true);\n\n      if (languageData.langlevel.value.code === \"6500401\") {\n        data.readlevel = 1;\n        data.writenlevel = 1;\n        data.verbalevel = 1;\n      }\n\n      if (languageData.langlevel.value.code === \"6500402\") {\n        data.readlevel = 2;\n        data.writenlevel = 2;\n        data.verbalevel = 2;\n      }\n\n      if (languageData.langlevel.value.code === \"6500403\") {\n        data.readlevel = 3;\n        data.writenlevel = 3;\n        data.verbalevel = 3;\n      }\n\n      if (languageData.langlevel.value.code === \"6500404\") {\n        data.readlevel = 4;\n        data.writenlevel = 4;\n        data.verbalevel = 4;\n      }\n\n      if (languageData.langlevel.value.code === \"6500405\") {\n        data.readlevel = 5;\n        data.writenlevel = 5;\n        data.verbalevel = 5;\n      }\n\n      if (languageData.langlevel.value.code === \"6500406\") {\n        data.readlevel = 6;\n        data.writenlevel = 6;\n        data.verbalevel = 6;\n      }\n\n      if (selectedGid) {\n        Patch({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.EMPLANG,\n          gid: selectedGid,\n          data: data,\n          token\n        }).then(res => {\n          if (file) {\n            Upload({\n              apiUrl: GENERAL_SETTINGS.OREST_URL,\n              token: token,\n              params: {\n                masterid: res.data.data.mid,\n                code: 'EMPLANG.CERT',\n                orsactive: true,\n                hotelrefno: hotelRefNo\n              },\n              files: [file]\n            });\n          }\n\n          if (res.status === 200) {\n            enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n              variant: 'success'\n            });\n            setOpenAddDialog(false);\n            getLanguageList();\n            handleReset();\n          } else {\n            const error = isErrorMsg(res);\n            enqueueSnackbar(error.errorMsg, {\n              variant: 'error'\n            });\n          }\n\n          setIsSaving(false);\n        });\n      } else {\n        data.empid = empId;\n        data.hotelrefno = hotelRefNo;\n        Insert({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.EMPLANG,\n          token,\n          data: data\n        }).then(async res => {\n          if (res.status === 200) {\n            if (file) {\n              Upload({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                token: token,\n                params: {\n                  masterid: res.data.data.mid,\n                  code: 'EMPLANG.CERT',\n                  orsactive: true,\n                  hotelrefno: hotelRefNo\n                },\n                files: [file]\n              });\n            }\n\n            getLanguageList();\n            setOpenAddDialog(false);\n            handleReset();\n\n            if (returnText) {\n              setOpenAddDialog(false);\n              handleReset();\n            }\n          } else {\n            const error = isErrorMsg(res);\n            enqueueSnackbar(error.errorMsg, {\n              variant: 'error'\n            });\n          }\n\n          setIsSaving(false);\n        });\n      }\n    }\n  };\n\n  const handleOnChangeFormElements = (event, key, isOnBlur) => {\n    const name = key ? key : event.target.name;\n    const value = event !== null && event !== void 0 && event.target ? event.target.value : event;\n\n    if (isOnBlur) {\n      var _languageData$name, _languageData$name2;\n\n      setLanguageData(_objectSpread(_objectSpread({}, languageData), {}, {\n        [name]: _objectSpread(_objectSpread({}, languageData[name]), {}, {\n          isError: ((_languageData$name = languageData[name]) === null || _languageData$name === void 0 ? void 0 : _languageData$name.isRequired) && !!required(value),\n          helperText: ((_languageData$name2 = languageData[name]) === null || _languageData$name2 === void 0 ? void 0 : _languageData$name2.isRequired) && !!required(value) && t('str_mandatory')\n        })\n      }));\n    } else {\n      var _languageData$name3, _languageData$name4;\n\n      setLanguageData(_objectSpread(_objectSpread({}, languageData), {}, {\n        [name]: _objectSpread(_objectSpread({}, languageData[name]), {}, {\n          value: value,\n          isError: ((_languageData$name3 = languageData[name]) === null || _languageData$name3 === void 0 ? void 0 : _languageData$name3.isRequired) && !!required(value),\n          helperText: ((_languageData$name4 = languageData[name]) === null || _languageData$name4 === void 0 ? void 0 : _languageData$name4.isRequired) && !!required(value) && t('str_mandatory')\n        })\n      }));\n    }\n  };\n\n  const handleOnBlurFormElements = (event, key) => {\n    handleOnChangeFormElements(event, key, true);\n  };\n\n  const handleOpenAddDialog = (selectedLanguage = false) => {\n    if (selectedLanguage) {\n      handleGetselectedLanguage(selectedLanguage);\n    } else {\n      handleDefRecord();\n    }\n\n    setOpenAddDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    if (JSON.stringify(languageData) !== JSON.stringify(languageDataBase)) {\n      setOpenTrackedDialog(true);\n    } else {\n      setOpenAddDialog(false);\n      handleReset();\n    }\n  };\n\n  const handleReset = () => {\n    setTimeout(() => {\n      setIsInitialStateLoad(false);\n      setGetData(null);\n      setLanguageData(initialState);\n      setLanguageDataBase(initialState);\n      setSelectedLanguageData(null);\n      setSelectedGid(null);\n      setFileType('');\n      setMediaUrl('');\n    }, 100);\n  };\n\n  const handlePreviewFile = (mid, code) => {\n    setIsPreviewLoading(true);\n    axios({\n      url: `${GENERAL_SETTINGS.OREST_URL}/tools/file/download`,\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      method: 'get',\n      responseType: 'arraybuffer',\n      params: {\n        mid: mid,\n        code: code,\n        hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n      }\n    }).then(r => {\n      if (r.status === 200) {\n        let blob = new Blob([r.data], {\n          type: r.data.type\n        }),\n            url = URL.createObjectURL(blob);\n        setMediaUrl(url);\n        setIsPreviewLoading(false);\n      }\n    });\n  };\n\n  const handleTaskFileDownload = (mid, code, description) => {\n    axios({\n      url: `${GENERAL_SETTINGS.OREST_URL}/tools/file/download`,\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      method: 'get',\n      responseType: 'blob',\n      params: {\n        mid: mid,\n        code: code,\n        hotelrefno: GENERAL_SETTINGS.HOTELREFNO\n      }\n    }).then(r => {\n      if (r.status === 200) {\n        let blob = new Blob([r.data], {\n          type: r.data.type\n        }),\n            url = URL.createObjectURL(blob),\n            link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `${description}`.toLowerCase()); //or any other extension\n\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n      }\n    });\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 9\n    }\n  }, __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 29\n    }\n  }, __jsx(CustomToolTip, {\n    title: t('str_refresh'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 33\n    }\n  }, __jsx(IconButton, {\n    onClick: () => getLanguageList(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 37\n    }\n  }, __jsx(CachedIcon, {\n    style: {\n      color: \"#F16A4B\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 41\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 29\n    }\n  }, __jsx(CustomToolTip, {\n    title: t('str_add'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 33\n    }\n  }, __jsx(IconButton, {\n    onClick: () => handleOpenAddDialog(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 37\n    }\n  }, __jsx(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 41\n    }\n  })))))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 732,\n      columnNumber: 21\n    }\n  }), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 21\n    }\n  }, __jsx(MaterialTable, {\n    isLoading: isLoadingList,\n    columns: languageColumns,\n    data: languageList,\n    localization: tableLocalization,\n    options: {\n      headerStyle: {\n        cursor: 'default',\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        color: \"#A3A6B4\",\n        textTransform: \"uppercase\",\n        backgroundColor: \"#F5F6FA\",\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid #FFF'\n      },\n      cellStyle: {\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid rgba(224, 224, 224, 1)',\n        fontSize: '13px'\n      },\n      toolbar: false,\n      selection: false,\n      sorting: false,\n      search: false,\n      actionsColumnIndex: 1,\n      selectionColumnIndex: 1\n    },\n    components: {\n      Header: props => {\n        const overrideProps = _objectSpread({}, props);\n\n        overrideProps.draggable = false;\n        return __jsx(MTableHeader, _extends({}, overrideProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 41\n          }\n        }));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 25\n    }\n  }))), __jsx(Dialog, {\n    open: openAddDialog,\n    maxWidth: 'sm',\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    style: {\n      fontWeight: '600',\n      fontSize: '18px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 779,\n      columnNumber: 33\n    }\n  }, selectedLanguageData ? t('str_editLanguage') : t('str_addLanguage'))), isDef ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 37\n    }\n  }, __jsx(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 41\n    }\n  })) : __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 37\n    }\n  }, formElements.map((item, index) => __jsx(Grid, _extends({\n    key: index,\n    item: true\n  }, item.gridProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 49\n    }\n  }), renderFormElements(item))), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 41\n    }\n  }, __jsx(Fab, {\n    variant: \"extended\",\n    size: \"18px\",\n    onClick: openDialog,\n    color: \"primary\",\n    style: {\n      fontWeight: '600',\n      fontSize: 'inherit',\n      borderRadius: 7,\n      height: 42\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 45\n    }\n  }, __jsx(CloudUploadIcon, {\n    style: {\n      marginRight: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 49\n    }\n  }), t('str_upload')), __jsx(DropzoneDialog, {\n    open: langFileUploadStatus,\n    onSave: file => {\n      setLangFileUploadStatus(false);\n      setFile(file[0]);\n    },\n    acceptedFiles: ['image/jpeg', 'image/png', 'image/bmp', 'image/gif', 'video/mp4', 'application/zip'],\n    showPreviews: true,\n    filesLimit: 3,\n    maxFileSize: 5000000,\n    onClose: () => setLangFileUploadStatus(false),\n    submitButtonText: t('str_save'),\n    cancelButtonText: t('str_cancel'),\n    dialogTitle: t('str_uploadALanguageCertificateFile'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 814,\n      columnNumber: 45\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 41\n    }\n  }, __jsx(AddDialogActions, {\n    disabled: isSaving,\n    loading: isSaving,\n    disabledSave: languageData.langid.value.length <= 0,\n    toolTipTitle: __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 53\n      }\n    }, __jsx(Typography, {\n      style: {\n        fontWeight: '600',\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 57\n      }\n    }, t('str_invalidFields')), languageData.langid.isError || required(languageData.langid.value) && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 65\n      }\n    }, t('str_language'))),\n    onCancelClick: handleCloseDialog,\n    onSaveClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 838,\n      columnNumber: 45\n    }\n  })))))), __jsx(MediaViewerDialog, {\n    open: openPreviewDialog,\n    maxWidth: 'md',\n    fullWidth: true,\n    loading: isPreviewLoading,\n    fileType: fileType,\n    url: mediaUrl,\n    t: t,\n    onClose: () => {\n      setOpenPreviewDialog(false);\n      setTimeout(() => {\n        handleReset();\n      }, 100);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 866,\n      columnNumber: 17\n    }\n  }), __jsx(TrackedChangesDialog, {\n    open: openTrackedDialog || deleteOpenDialog,\n    onPressNo: e => {\n      setOpenTrackedDialog(e);\n      setDeleteOpenDialog(e);\n    },\n    dialogTitle: deleteOpenDialog ? t('str_delete') : false,\n    dialogDesc: deleteOpenDialog ? t('str_alertDeleteTitle') : false,\n    onPressYes: e => {\n      if (deleteOpenDialog) {\n        handleDeleteItem(selectedLanguageGid);\n      } else {\n        setOpenTrackedDialog(e);\n        setOpenAddDialog(false);\n        setDeleteOpenDialog(e);\n        handleReset();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default Languages;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/emp-portal/tabs/Languages/index.js"],"names":["React","useState","useEffect","useContext","Insert","UseOrest","ViewList","Patch","Delete","Upload","WebCmsGlobal","useSelector","isErrorMsg","mobileTelNoFormat","OREST_ENDPOINT","Grid","Typography","Dialog","Checkbox","FormControlLabel","Button","Menu","MenuItem","IconButton","DialogTitle","DialogContent","DialogActions","useSnackbar","SLASH","useTranslation","renderFormElements","ELEMENT_TYPES","required","AddDialogActions","LocaleContext","LoadingSpinner","helper","orest","TrackedChangesDialog","EditOutlinedIcon","MaterialTable","MTableHeader","MaterialTableLocalization","MoreVertIcon","TableColumnText","PopupState","bindMenu","bindTrigger","CustomToolTip","CachedIcon","AddIcon","DeleteIcon","DropzoneDialog","CloudUploadIcon","Fab","value","MediaViewerDialog","VisibilityOutlinedIcon","DeleteOutlinedIcon","CloudDownloadOutlinedIcon","PreviewFile","axios","tile2LatLng","VARIANT","Languages","props","empId","enqueueSnackbar","GENERAL_SETTINGS","locale","t","tableLocalization","token","state","currentUser","auth","access_token","hotelRefNo","hotelinfo","currentHotelRefNo","HOTELREFNO","emp","mid","initialState","langid","isError","helperText","verbalevel","writenlevel","readlevel","langlevel","description","stdfileid","isLoadingList","setIsLoadingList","allHotels","setAllHotels","languageList","setLanguageList","openAddDialog","setOpenAddDialog","selectedLanguageData","setSelectedLanguageData","selectedGid","setSelectedGid","getData","setGetData","openTrackedDialog","setOpenTrackedDialog","deleteOpenDialog","setDeleteOpenDialog","isDef","setIsDef","isSaving","setIsSaving","languageData","setLanguageData","languageDataBase","setLanguageDataBase","isInitialStateLoad","setIsInitialStateLoad","isDeleting","setIsDeleting","open","setOpen","langFileUploadStatus","setLangFileUploadStatus","taskFileListLoading","setLangFileListLoading","taskFileList","setLangFileList","selectedLanguageGid","setSelectedLanguageGid","openPreviewDialog","setOpenPreviewDialog","isPreviewLoading","setIsPreviewLoading","mediaUrl","setMediaUrl","fileType","setFileType","isFileDeleting","setIsFileDeleting","isFileDownloading","setIsFileDownloading","popupState","setPopupState","deleteFileInfo","setDeleteFileInfo","hasRightData","setHasRightData","file","setFile","returnText","setrReturnText","openDialog","openTrackDialog","gid","formElements","type","autoComplete","id","name","disabled","label","variant","isRequired","error","onChange","newValue","handleOnChangeFormElements","onBlur","e","handleOnBlurFormElements","onLoad","initialValue","data","endpoint","params","text","limit","field","initialId","showOptionLabel","showOption","searchParam","fullWidth","gridProps","xs","sm","textField","languageColumns","title","padding","maxWidth","minWidth","render","vertical","horizontal","handleOpenAddDialog","close","paddingLeft","langcode","handlePreviewFile","cand","handleTaskFileDownload","getLanguageList","isEffect","newClientInitialState","objectMapper","handleDeleteItem","apiUrl","OREST_URL","EMPLANG","hotelrefno","then","res","status","errorMsg","length","substring","query","allhotels","resultToReturn","langList","i","j","count","handleGetselectedLanguage","selectedLanguage","VIEW","handleDefRecord","DEF","Object","assign","handleSave","keys","map","key","code","masterid","orsactive","files","handleReset","empid","event","isOnBlur","target","handleCloseDialog","JSON","stringify","setTimeout","url","headers","method","responseType","r","blob","Blob","URL","createObjectURL","link","document","createElement","href","setAttribute","toLowerCase","body","appendChild","click","remove","color","headerStyle","cursor","fontWeight","fontSize","textTransform","backgroundColor","whiteSpace","borderLeft","cellStyle","toolbar","selection","sorting","search","actionsColumnIndex","selectionColumnIndex","Header","overrideProps","draggable","item","index","borderRadius","height","marginRight"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\nimport {Insert, UseOrest, ViewList, Patch, Delete, Upload} from \"@webcms/orest\";\nimport WebCmsGlobal from \"../../../webcms-global\";\nimport {useSelector} from \"react-redux\";\nimport {isErrorMsg, mobileTelNoFormat, OREST_ENDPOINT} from \"../../../../model/orest/constants\";\nimport {\n    Grid,\n    Typography,\n    Dialog,\n    Checkbox, FormControlLabel, Button, Menu, MenuItem, IconButton, DialogTitle, DialogContent, DialogActions\n} from \"@material-ui/core\";\nimport {useSnackbar} from \"notistack\";\nimport {SLASH} from \"../../../../model/globals\";\nimport useTranslation from \"../../../../lib/translations/hooks/useTranslation\";\nimport renderFormElements, {ELEMENT_TYPES} from \"../../../render-form-elements\";\nimport {required} from \"../../../../state/utils/form\";\nimport AddDialogActions from \"../../../AddDialogActions\";\nimport {LocaleContext} from \"../../../../lib/translations/context/LocaleContext\";\nimport LoadingSpinner from \"../../../LoadingSpinner\";\nimport {helper, orest} from \"../../../../@webcms-globals\";\nimport TrackedChangesDialog from \"../../../TrackedChangesDialog\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport MaterialTable, {MTableHeader} from \"material-table\";\nimport MaterialTableLocalization from \"../../../MaterialTableLocalization\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport TableColumnText from \"../../../TableColumnText\";\nimport PopupState, {bindMenu, bindTrigger} from \"material-ui-popup-state\";\nimport {CustomToolTip} from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport {DropzoneDialog} from \"material-ui-dropzone\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport Fab from \"@material-ui/core/Fab\";\nimport {value} from \"lodash/seq\";\nimport MediaViewerDialog from \"../../../../@webcms-ui/core/media-viewer-dialog\";\nimport VisibilityOutlinedIcon from \"@material-ui/icons/VisibilityOutlined\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport CloudDownloadOutlinedIcon from \"@material-ui/icons/CloudDownloadOutlined\";\nimport {PreviewFile} from \"../../../../model/orest/components/RaFile\";\nimport axios from \"axios\";\nimport {tile2LatLng} from \"google-map-react/lib/utils/utils\";\n\nconst VARIANT = 'outlined'\n\nfunction Languages(props) {\n\n    //props\n    const {empId} = props\n\n    //snackbar\n    const {enqueueSnackbar} = useSnackbar();\n\n    //context\n    const {GENERAL_SETTINGS} = useContext(WebCmsGlobal)\n    const {locale} = useContext(LocaleContext)\n    const {t} = useTranslation()\n\n    const tableLocalization = MaterialTableLocalization();\n\n    //redux state\n    const token = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n    const hotelRefNo = useSelector((state) => state?.hotelinfo?.currentHotelRefNo || GENERAL_SETTINGS.HOTELREFNO || false)\n    const state = useSelector((state) => state?.orest?.state?.emp?.mid || false)\n\n    //locale state\n    const initialState = {\n        langid: {value: '', isError: false, required: true, helperText: ''},\n        verbalevel: {value: 1, isError: false, required: false, helperText: ''},\n        writenlevel: {value: 1, isError: false, required: false, helperText: ''},\n        readlevel: {value: 1, isError: false, required: false, helperText: ''},\n        langlevel: {value: 'str_langlevel', isError: false, required: false, helperText: ''},\n        description: {value: '', isError: false, required: false, helperText: ''},\n        stdfileid: {value: 0, isError: false, required: false, helperText: ''},\n    }\n\n    const [isLoadingList, setIsLoadingList] = useState(false)\n    const [allHotels, setAllHotels] = useState(false)\n    const [languageList, setLanguageList] = useState([])\n    const [openAddDialog, setOpenAddDialog] = useState(false);\n\n    const [selectedLanguageData, setSelectedLanguageData] = useState(null)\n    const [selectedGid, setSelectedGid] = useState(false)\n    const [getData, setGetData] = useState(null)\n    const [openTrackedDialog, setOpenTrackedDialog] = useState(false);\n    const [deleteOpenDialog, setDeleteOpenDialog] = useState(false);\n    const [isDef, setIsDef] = useState(false)\n    const [isSaving, setIsSaving] = useState(false)\n    const [languageData, setLanguageData] = useState(initialState)\n    const [languageDataBase, setLanguageDataBase] = useState(initialState)\n    const [isInitialStateLoad, setIsInitialStateLoad] = useState(false)\n    const [isDeleting, setIsDeleting] = useState(false)\n    const [open, setOpen] = useState(true);\n    const [langFileUploadStatus, setLangFileUploadStatus] = useState(false)\n    const [taskFileListLoading, setLangFileListLoading] = useState(false)\n    const [taskFileList, setLangFileList] = useState([])\n    const [selectedLanguageGid, setSelectedLanguageGid] = useState(null)\n    const [openPreviewDialog, setOpenPreviewDialog] = useState(false);\n    const [isPreviewLoading, setIsPreviewLoading] = useState(false);\n    const [mediaUrl, setMediaUrl] = useState('');\n    const [fileType, setFileType] = useState('');\n    const [isFileDeleting, setIsFileDeleting] = useState(false);\n    const [isFileDownloading, setIsFileDownloading] = useState(false);\n    const [popupState, setPopupState] = useState({});\n    const [deleteFileInfo, setDeleteFileInfo] = useState(false);\n    const [hasRightData, setHasRightData] = useState();\n    const [file, setFile] = useState(null);\n    const [returnText, setrReturnText] = useState(false);\n\n    const openDialog = () => {\n        setLangFileUploadStatus(true)\n    }\n\n    const openTrackDialog = (gid) => {\n        setSelectedLanguageGid(gid)\n        setDeleteOpenDialog(true)\n    }\n\n    const formElements = [\n        {\n            type: ELEMENT_TYPES.autoComplete,\n            id: 'langid',\n            name: 'langid',\n            value: languageData.langid?.value || null,\n            disabled: isSaving,\n            label: t('str_language'),\n            variant: VARIANT,\n            required: languageData.langid?.isRequired,\n            error: languageData.langid?.isError,\n            helperText: languageData.langid?.helperText,\n            onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n            onBlur: (e, name) => handleOnBlurFormElements(e, name),\n            onLoad: (initialValue, name) => {\n                const data = {...languageData}\n                data[name].value = initialValue ? initialValue : null\n                setLanguageData(data)\n            },\n            endpoint: 'ralang/view/list',\n            params: {text: '', limit: 25, field: 'code'},\n            initialId: isInitialStateLoad && selectedLanguageData?.langid || false,\n            showOptionLabel: 'description',\n            showOption: 'description',\n            searchParam: 'description',\n            fullWidth: true,\n            gridProps: {xs: 12, sm: 6}\n        },\n        {\n            type: ELEMENT_TYPES.autoComplete,\n            id: 'langlevel',\n            name: 'langlevel',\n            value: t('str_langlevel'),\n            disabled: isSaving,\n            label: t('str_langlevel'),\n            variant: VARIANT,\n            required: languageData.langlevel?.isRequired,\n            error: languageData.langlevel?.isError,\n            helperText: languageData.langlevel?.helperText,\n            onChange: (newValue, name) => handleOnChangeFormElements(newValue, name),\n            onBlur: (e, name) => handleOnBlurFormElements(e, name),\n            onLoad: (initialValue, name) => {\n                const data = {...languageData}\n                data[name].value = initialValue ? initialValue : null\n                setLanguageData(data)\n            },\n            endpoint: 'transtype/langlevel',\n            params: {text: '', limit: 25, field: 'code'},\n            initialId: isInitialStateLoad && selectedLanguageData?.langlevel || false,\n            showOptionLabel: 'description',\n            showOption: 'description',\n            searchParam: 'description',\n            fullWidth: true,\n            gridProps: {xs: 12, sm: 6}\n        },\n        {\n            type: ELEMENT_TYPES.textField,\n            id: 'description',\n            name: 'description',\n            value: languageData.description?.value,\n            error: languageData.description?.isError,\n            required: languageData.description?.isRequired,\n            disabled: isSaving,\n            label: t('str_description'),\n            helperText: languageData.description?.helperText,\n            onChange: (e) => handleOnChangeFormElements(e),\n            onBlur: (e) => handleOnBlurFormElements(e),\n            variant: VARIANT,\n            fullWidth: true,\n            gridProps: {xs: 12, sm: 12}\n        }\n    ]\n\n    const languageColumns = [\n        {\n            title: (\n                <Button\n                    style={{padding: 0, maxWidth: 25, minWidth: 25}}\n                    disabled\n                    color={'primary'}\n                    variant={'text'}\n                >\n                    <MoreVertIcon/>\n                </Button>\n            ),\n            render: props => (\n                <TableColumnText minWidth={30}>\n                    <PopupState variant=\"popover\" popupId=\"material-table-action-column\">\n                        {(popupState) => (\n                            <React.Fragment>\n                                <Button\n                                    style={{padding: 0, maxWidth: 25, minWidth: 25}}\n                                    color={'primary'}\n                                    variant={'contained'}\n                                    {...bindTrigger(popupState)}\n                                >\n                                    <MoreVertIcon size={'small'}/>\n                                </Button>\n                                <Menu\n                                    anchorOrigin={{\n                                        vertical: \"bottom\",\n                                        horizontal: \"left\"\n                                    }}\n                                    transformOrigin={{\n                                        vertical: \"top\",\n                                        horizontal: \"left\"\n                                    }}\n                                    getContentAnchorEl={null}\n                                    {...bindMenu(popupState)}\n                                >\n                                    <MenuItem\n                                        onClick={() => {\n                                            setSelectedLanguageData(props)\n                                            setSelectedGid(props?.gid || false)\n                                            handleOpenAddDialog(props)\n                                            popupState.close();\n                                        }}\n                                    >\n                                        {<EditOutlinedIcon/>}\n                                        <Typography style={{paddingLeft: '8px'}}>{t('str_edit')}</Typography>\n                                    </MenuItem>\n                                    <MenuItem\n                                        variant=\"outlined\" onClick={() => openTrackDialog(props?.gid)}\n\n                                    >\n                                        <DeleteIcon/>\n                                        <Typography style={{paddingLeft: '8px'}}>{t('str_delete')}</Typography>\n\n                                    </MenuItem>\n                                </Menu>\n                            </React.Fragment>\n                        )}\n                    </PopupState>\n                </TableColumnText>\n            )\n        },\n        {\n            title: t('str_language'),\n            field: 'langid',\n            render: (props) => <TableColumnText>{props?.langcode}</TableColumnText>\n        },\n        {\n            title: t('str_verbalLevel'),\n            field: 'verbalevel',\n            render: (props) => <TableColumnText>{props?.verbalevel}</TableColumnText>\n        },\n        {\n            title: t('str_writingLevel'),\n            field: 'writenlevel',\n            render: (props) => <TableColumnText>{props?.writenlevel}</TableColumnText>\n        },\n        {\n            title: t('str_readingLevel'),\n            field: 'readlevel',\n            render: (props) => <TableColumnText>{props?.readlevel}</TableColumnText>\n        },\n        {\n            title: t('str_description'),\n            field: 'description',\n            render: (props) => <TableColumnText>{props?.description}</TableColumnText>\n        },\n        {\n            title: t('str_preview'),\n            field: 'stdfileid',\n            render: (props) => (\n                (\n                    props.stdfileid ?\n                        (\n                            <PopupState variant=\"popover\" popupId=\"status-menu\">\n                                {(popupState) => (\n                                    <React.Fragment>\n                                        <MenuItem\n                                            onClick={() => {\n                                                setOpenPreviewDialog(true);\n                                                handlePreviewFile(props.mid, 'EMPLANG.CERT')\n                                            }}\n                                            disabled={isFileDeleting || isFileDownloading}\n                                        >\n                                            <VisibilityOutlinedIcon/>\n                                        </MenuItem>\n                                    </React.Fragment>\n                                )}\n                            </PopupState>\n                        ) : null\n                )\n            ),\n        },\n        {\n            title: t('str_download'),\n            field: 'stdfileid',\n            render: props => (\n                (\n                    props.stdfileid ?\n                        (\n                            <PopupState variant=\"popover\" popupId=\"status-menu\">\n                                {(popupState) => (\n                                    <React.Fragment>\n                                        {\n                                            hasRightData?.cand && (\n                                                <MenuItem\n                                                    onClick={() => {\n                                                        setOpenTrackedDialog(true)\n                                                        setDeleteFileInfo(props);\n                                                        setPopupState(popupState);\n                                                    }}\n                                                    disabled={isFileDeleting || isFileDownloading}\n                                                >\n                                                    {isFileDeleting ? <LoadingSpinner size={18}/> :\n                                                        <DeleteOutlinedIcon/>}\n                                                    <Typography\n                                                        style={{paddingLeft: '8px'}}>{t('str_delete')}</Typography>\n                                                </MenuItem>\n                                            )\n                                        }\n                                        <MenuItem\n                                            onClick={() => handleTaskFileDownload(props.mid, 'EMPLANG.CERT', props.description)}\n                                            disabled={isFileDeleting || isFileDownloading}\n                                        >\n                                            {isFileDownloading ? <LoadingSpinner size={18}/> :\n                                                <CloudDownloadOutlinedIcon/>}\n                                        </MenuItem>\n                                    </React.Fragment>\n                                )}\n                            </PopupState>\n                        ) : null\n                )\n            )\n        },\n    ]\n\n    useEffect(() => {\n        if (token && empId) {\n            getLanguageList()\n        }\n    }, [])\n\n    useEffect(() => {\n        let isEffect = true\n        if (isEffect && languageData && getData) {\n            const newClientInitialState = helper.objectMapper(languageData, getData, ['langid'])\n            setLanguageData(newClientInitialState)\n            setLanguageDataBase(newClientInitialState)\n            setIsInitialStateLoad(true)\n        }\n\n        return () => {\n            isEffect = false\n        }\n\n    }, [getData])\n\n    const handleDeleteItem = (gid) => {\n        setIsDeleting(true)\n        setDeleteOpenDialog(false)\n        Delete({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.EMPLANG,\n            token,\n            gid: gid,\n            params: {\n                hotelrefno: GENERAL_SETTINGS.HOTELREFNO,\n            }\n        }).then((res) => {\n            if (res.status === 200) {\n                getLanguageList()\n                enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'})\n            } else {\n                const error = isErrorMsg(res)\n                enqueueSnackbar(error.errorMsg?.length > 50 ? error.errorMsg?.substring(0, 50) : error.errorMsg, {variant: 'error'})\n                setIsDeleting(false)\n            }\n        })\n    }\n\n    const getLanguageList = () => {\n        setIsLoadingList(true)\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.EMPLANG,\n            token,\n            params: {\n                query: `empid:${empId}`,\n                allhotels: allHotels,\n                hotelrefno: hotelRefNo\n            }\n        }).then(res => {\n            setIsLoadingList(false)\n            let resultToReturn = false;\n            let langList = res.data.data;\n            for (let i = 0; i < langList.length; i++) {\n                for (let j = 0; j < langList.length; j++) {\n                    if (i !== j) {\n                        if (langList[i].langid === langList[j].langid) {\n                            resultToReturn = true;\n                            let gid = langList[j].gid\n                            Delete({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: OREST_ENDPOINT.EMPLANG,\n                                token,\n                                gid: gid,\n                                params: {\n                                    hotelrefno: GENERAL_SETTINGS.HOTELREFNO,\n                                }\n                            })\n                            break;\n                        }\n                    }\n                }\n                if (resultToReturn) {\n                    break;\n                }\n            }\n            if (resultToReturn) {\n                setrReturnText(true)\n                enqueueSnackbar(t('str_languageAlreadyExist'), {variant: 'error'})\n            } else {\n                if (res.status === 200) {\n                    if (res.data.count > 0) {\n                        setLanguageList(res.data.data)\n                    }\n                } else {\n                    const error = isErrorMsg(res)\n                    enqueueSnackbar(error.errorMsg?.length > 50 ? error.errorMsg?.substring(0, 50) : error.errorMsg, {variant: 'error'})\n                }\n            }\n        })\n    }\n\n    const handleGetselectedLanguage = (selectedLanguage) => {\n        if (selectedLanguage) {\n            setIsDef(true)\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.EMPLANG + SLASH + OREST_ENDPOINT.VIEW + SLASH + 'get' + SLASH + selectedLanguage.gid,\n                token\n            }).then(res => {\n                setIsDef(false)\n                if (res.status === 200 && res.data.data) {\n                    const data = res.data.data\n                    setGetData(data)\n                }\n            })\n        }\n    }\n\n    const handleDefRecord = () => {\n        setIsDef(true)\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.EMPLANG + SLASH + OREST_ENDPOINT.DEF,\n            token,\n            params: {\n                hotelrefno: hotelRefNo\n            }\n        }).then(res => {\n            if (res.status === 200 && res.data.count > 0) {\n                const data = Object.assign({}, res.data.data, languageData)\n                setLanguageData(data)\n                setLanguageDataBase(data)\n            }\n            setIsDef(false)\n        })\n    }\n\n    const handleSave = () => {\n        const data = {...languageData}\n        Object.keys(initialState).map((key) => {\n            data[key] = typeof data[key].value === 'object' ? data[key].value ? data[key].value.id : null : data[key].value\n        })\n        if (empId) {\n            setIsSaving(true)\n            if (languageData.langlevel.value.code === \"6500401\") {\n                data.readlevel = 1\n                data.writenlevel = 1\n                data.verbalevel = 1\n            }\n            if (languageData.langlevel.value.code === \"6500402\") {\n                data.readlevel = 2\n                data.writenlevel = 2\n                data.verbalevel = 2\n            }\n            if (languageData.langlevel.value.code === \"6500403\") {\n                data.readlevel = 3\n                data.writenlevel = 3\n                data.verbalevel = 3\n            }\n            if (languageData.langlevel.value.code === \"6500404\") {\n                data.readlevel = 4\n                data.writenlevel = 4\n                data.verbalevel = 4\n            }\n            if (languageData.langlevel.value.code === \"6500405\") {\n                data.readlevel = 5\n                data.writenlevel = 5\n                data.verbalevel = 5\n            }\n            if (languageData.langlevel.value.code === \"6500406\") {\n                data.readlevel = 6\n                data.writenlevel = 6\n                data.verbalevel = 6\n            }\n            if (selectedGid) {\n                Patch({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.EMPLANG,\n                    gid: selectedGid,\n                    data: data,\n                    token\n                }).then(res => {\n                    if (file) {\n                        Upload({\n                            apiUrl: GENERAL_SETTINGS.OREST_URL,\n                            token: token,\n                            params: {\n                                masterid: res.data.data.mid,\n                                code: 'EMPLANG.CERT',\n                                orsactive: true,\n                                hotelrefno: hotelRefNo\n                            },\n                            files: [file],\n                        })\n                    }\n                    if (res.status === 200) {\n                        enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'})\n                        setOpenAddDialog(false)\n                        getLanguageList()\n                        handleReset()\n                    } else {\n                        const error = isErrorMsg(res)\n                        enqueueSnackbar(error.errorMsg, {variant: 'error'})\n                    }\n                    setIsSaving(false)\n                })\n            } else {\n                data.empid = empId\n                data.hotelrefno = hotelRefNo\n                Insert({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.EMPLANG,\n                    token,\n                    data: data\n                }).then(async (res) => {\n                    if (res.status === 200) {\n                        if (file) {\n                            Upload({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                token: token,\n                                params: {\n                                    masterid: res.data.data.mid,\n                                    code: 'EMPLANG.CERT',\n                                    orsactive: true,\n                                    hotelrefno: hotelRefNo\n                                },\n                                files: [file],\n                            })\n                        }\n                        getLanguageList()\n                        setOpenAddDialog(false)\n                        handleReset()\n                        if (returnText) {\n                            setOpenAddDialog(false)\n                            handleReset()\n                        }\n                    } else {\n                        const error = isErrorMsg(res)\n                        enqueueSnackbar(error.errorMsg, {variant: 'error'})\n                    }\n                    setIsSaving(false)\n                })\n            }\n        }\n    }\n\n    const handleOnChangeFormElements = (event, key, isOnBlur) => {\n        const name = key ? key : event.target.name\n        const value = event?.target ? event.target.value : event\n\n        if (isOnBlur) {\n            setLanguageData({\n                ...languageData,\n                [name]: {\n                    ...languageData[name],\n                    isError: languageData[name]?.isRequired && !!required(value),\n                    helperText: languageData[name]?.isRequired && !!required(value) && t('str_mandatory'),\n                }\n            })\n        } else {\n            setLanguageData({\n                ...languageData,\n                [name]: {\n                    ...languageData[name],\n                    value: value,\n                    isError: languageData[name]?.isRequired && !!required(value),\n                    helperText: languageData[name]?.isRequired && !!required(value) && t('str_mandatory'),\n                }\n            })\n        }\n    }\n\n    const handleOnBlurFormElements = (event, key) => {\n        handleOnChangeFormElements(event, key, true)\n    }\n\n    const handleOpenAddDialog = (selectedLanguage = false) => {\n        if (selectedLanguage) {\n            handleGetselectedLanguage(selectedLanguage)\n        } else {\n            handleDefRecord()\n        }\n        setOpenAddDialog(true)\n    }\n\n    const handleCloseDialog = () => {\n        if (JSON.stringify(languageData) !== JSON.stringify(languageDataBase)) {\n            setOpenTrackedDialog(true)\n        } else {\n            setOpenAddDialog(false)\n            handleReset()\n        }\n    }\n\n    const handleReset = () => {\n        setTimeout(() => {\n            setIsInitialStateLoad(false)\n            setGetData(null)\n            setLanguageData(initialState)\n            setLanguageDataBase(initialState)\n            setSelectedLanguageData(null)\n            setSelectedGid(null)\n            setFileType('');\n            setMediaUrl('');\n        }, 100)\n    }\n\n    const handlePreviewFile = (mid, code) => {\n        setIsPreviewLoading(true)\n        axios({\n            url: `${GENERAL_SETTINGS.OREST_URL}/tools/file/download`,\n            headers: {\n                'Authorization': `Bearer ${token}`,\n            },\n            method: 'get',\n            responseType: 'arraybuffer',\n            params: {\n                mid: mid,\n                code: code,\n                hotelrefno: GENERAL_SETTINGS.HOTELREFNO,\n            },\n        }).then((r) => {\n            if (r.status === 200) {\n                let blob = new Blob([r.data], {type: r.data.type})\n                    , url = URL.createObjectURL(blob)\n\n                setMediaUrl(url)\n                setIsPreviewLoading(false)\n            }\n        })\n    }\n\n    const handleTaskFileDownload = (mid, code, description) => {\n        axios({\n            url: `${GENERAL_SETTINGS.OREST_URL}/tools/file/download`,\n            headers: {\n                'Authorization': `Bearer ${token}`,\n            },\n            method: 'get',\n            responseType: 'blob',\n            params: {\n                mid: mid,\n                code: code,\n                hotelrefno: GENERAL_SETTINGS.HOTELREFNO,\n            },\n        }).then((r) => {\n            if (r.status === 200) {\n                let blob = new Blob([r.data], {type: r.data.type})\n                    , url = URL.createObjectURL(blob)\n                    , link = document.createElement('a')\n\n                link.href = url\n                link.setAttribute('download', `${description}`.toLowerCase()) //or any other extension\n                document.body.appendChild(link)\n                link.click()\n                link.remove()\n            }\n        })\n    }\n\n    return (\n        <div>\n            <React.Fragment>\n                <Grid container>\n                    <Grid item xs={4} sm={3}>\n                        <Grid container>\n                            <Grid item xs={6} sm={3}>\n                                <CustomToolTip title={t('str_refresh')}>\n                                    <IconButton\n                                        onClick={() => getLanguageList()}\n                                    >\n                                        <CachedIcon style={{color: \"#F16A4B\"}}/>\n                                    </IconButton>\n                                </CustomToolTip>\n                            </Grid>\n                            <Grid item xs={6} sm={3}>\n                                <CustomToolTip title={t('str_add')}>\n                                    <IconButton\n                                        onClick={() => handleOpenAddDialog(false)}\n                                    >\n                                        <AddIcon/>\n                                    </IconButton>\n                                </CustomToolTip>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={6} sm={7}>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            isLoading={isLoadingList}\n                            columns={languageColumns}\n                            data={languageList}\n                            localization={tableLocalization}\n                            options={{\n                                headerStyle: {\n                                    cursor: 'default',\n                                    fontWeight: \"bold\",\n                                    fontSize: \"12px\",\n                                    color: \"#A3A6B4\",\n                                    textTransform: \"uppercase\",\n                                    backgroundColor: \"#F5F6FA\",\n                                    whiteSpace: 'nowrap',\n                                    borderLeft: '1px solid #FFF',\n                                },\n                                cellStyle: {\n                                    whiteSpace: 'nowrap',\n                                    borderLeft: '1px solid rgba(224, 224, 224, 1)',\n                                    fontSize: '13px',\n                                },\n                                toolbar: false,\n                                selection: false,\n                                sorting: false,\n                                search: false,\n                                actionsColumnIndex: 1,\n                                selectionColumnIndex: 1\n                            }}\n                            components={{\n                                Header: (props) => {\n                                    const overrideProps = {...props}\n                                    overrideProps.draggable = false\n                                    return (\n                                        <MTableHeader  {...overrideProps}/>\n                                    )\n                                },\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n                <Dialog open={openAddDialog} maxWidth={'sm'} fullWidth>\n                    <div style={{padding: 24}}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <Typography style={{\n                                    fontWeight: '600',\n                                    fontSize: '18px'\n                                }}>{selectedLanguageData ? t('str_editLanguage') : t('str_addLanguage')}</Typography>\n                            </Grid>\n                            {\n                                isDef ? (\n                                    <Grid item xs={12}>\n                                        <LoadingSpinner/>\n                                    </Grid>\n                                ) : (\n                                    <React.Fragment>\n                                        {\n                                            formElements.map((item, index) => (\n                                                <Grid key={index} item {...item.gridProps}>\n                                                    {renderFormElements(item)}\n                                                </Grid>\n                                            ))\n                                        }\n                                        <Grid item xs={4}>\n                                            <Fab\n                                                variant=\"extended\"\n                                                size=\"18px\"\n                                                onClick={openDialog}\n                                                color=\"primary\"\n                                                style={{\n                                                    fontWeight: '600',\n                                                    fontSize: 'inherit',\n                                                    borderRadius: 7,\n                                                    height: 42\n                                                }}\n                                            >\n                                                <CloudUploadIcon style={{marginRight: 10}}/>\n                                                {t('str_upload')}\n                                            </Fab>\n                                            <DropzoneDialog\n                                                open={langFileUploadStatus}\n                                                onSave={(file) => {\n                                                    setLangFileUploadStatus(false)\n                                                    setFile(file[0])\n                                                }}\n                                                acceptedFiles={[\n                                                    'image/jpeg',\n                                                    'image/png',\n                                                    'image/bmp',\n                                                    'image/gif',\n                                                    'video/mp4',\n                                                    'application/zip',\n                                                ]}\n                                                showPreviews={true}\n                                                filesLimit={3}\n                                                maxFileSize={5000000}\n                                                onClose={() => setLangFileUploadStatus(false)}\n                                                submitButtonText={t('str_save')}\n                                                cancelButtonText={t('str_cancel')}\n                                                dialogTitle={t('str_uploadALanguageCertificateFile')}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12}>\n                                            <AddDialogActions\n                                                disabled={isSaving}\n                                                loading={isSaving}\n                                                disabledSave={languageData.langid.value.length <= 0}\n                                                toolTipTitle={\n                                                    <div>\n                                                        <Typography style={{\n                                                            fontWeight: '600',\n                                                            fontSize: 'inherit'\n                                                        }}>{t('str_invalidFields')}</Typography>\n                                                        {\n                                                            languageData.langid.isError || required(languageData.langid.value) && (\n                                                                <Typography\n                                                                    style={{fontSize: 'inherit'}}>{t('str_language')}</Typography>\n                                                            )\n                                                        }\n                                                    </div>\n                                                }\n                                                onCancelClick={handleCloseDialog}\n                                                onSaveClick={handleSave}\n                                            />\n                                        </Grid>\n                                    </React.Fragment>\n                                )\n                            }\n                        </Grid>\n                    </div>\n                </Dialog>\n                <MediaViewerDialog\n                    open={openPreviewDialog}\n                    maxWidth={'md'}\n                    fullWidth\n                    loading={isPreviewLoading}\n                    fileType={fileType}\n                    url={mediaUrl}\n                    t={t}\n                    onClose={() => {\n                        setOpenPreviewDialog(false);\n                        setTimeout(() => {\n                            handleReset();\n                        }, 100)\n                    }}\n                />\n                <TrackedChangesDialog\n                    open={openTrackedDialog || deleteOpenDialog}\n                    onPressNo={(e) => {\n                        setOpenTrackedDialog(e);\n                        setDeleteOpenDialog(e)\n                    }}\n                    dialogTitle={deleteOpenDialog ? t('str_delete') : false}\n                    dialogDesc={deleteOpenDialog ? t('str_alertDeleteTitle') : false}\n                    onPressYes={(e) => {\n                        if (deleteOpenDialog) {\n                            handleDeleteItem(selectedLanguageGid)\n                        } else {\n                            setOpenTrackedDialog(e);\n                            setOpenAddDialog(false)\n                            setDeleteOpenDialog(e)\n                            handleReset()\n                        }\n                    }}\n                />\n            </React.Fragment>\n        </div>\n    )\n}\n\nexport default Languages"]},"metadata":{},"sourceType":"module"}