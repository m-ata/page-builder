{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/contact-form/EditContactForm.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react'; //material imports\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport { UseOrest } from \"@webcms/orest\";\nimport { OREST_ENDPOINT } from \"../../../../../../../model/orest/constants\";\nimport WebCmsGlobal from \"../../../../../../webcms-global\";\nimport { useRouter } from \"next/router\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ReCaptcha from 'react-google-recaptcha';\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { connect } from 'react-redux';\nconst useStyles = makeStyles(theme => ({\n  actionButton: {\n    marginLeft: theme.spacing(1),\n    borderRadius: 20,\n    float: \"right\"\n  },\n  textArea: {\n    width: '100%',\n    borderColor: 'silver',\n    borderRadius: 5\n  }\n}));\n\nconst EditContactForm = props => {\n  const {\n    contactFormComponent,\n    handleComponent,\n    state,\n    otherLangContactForm\n  } = props;\n  const {\n    0: accTypes,\n    1: setAccTypes\n  } = useState([]);\n  const {\n    0: accType,\n    1: setAccType\n  } = useState('');\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: otherLangData,\n    1: setOtherLangData\n  } = useState([]);\n  const {\n    0: useBgColor,\n    1: setUseBgColor\n  } = useState(false);\n  const classes = useStyles();\n  const {\n    GENERAL_SETTINGS,\n    token\n  } = useContext(WebCmsGlobal);\n  const router = useRouter();\n  const companyId = router.query.companyID;\n  const authToken = token || router.query.authToken;\n  useEffect(() => {\n    // getting languages from service\n    UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.TRANSTYPE + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.ACCTYPE,\n      token: authToken,\n      method: 'get',\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(res => {\n      if (res.status === 200 && res.data && res.data.data.length > 0) {\n        setAccTypes(res.data.data);\n        setAccType(res.data.data[0].code.toLowerCase());\n      }\n    });\n  }, []);\n  useEffect(() => {\n    var _contactFormComponent;\n\n    if ((contactFormComponent === null || contactFormComponent === void 0 ? void 0 : (_contactFormComponent = contactFormComponent.gid) === null || _contactFormComponent === void 0 ? void 0 : _contactFormComponent.length) > 0) {\n      const tmpData = [...contactFormComponent.gid];\n      Promise.all(tmpData.map(d => {\n        d['isEditMode'] = false;\n      }));\n      setData(tmpData);\n    }\n\n    contactFormComponent !== null && contactFormComponent !== void 0 && contactFormComponent.useBgColor ? setUseBgColor(contactFormComponent.useBgColor) : null;\n  }, [contactFormComponent]);\n  useEffect(() => {\n    if (otherLangContactForm && otherLangContactForm.contactForm && otherLangContactForm.contactForm.labels && otherLangContactForm.contactForm.labels.length > 0) {\n      const tmpData = [...otherLangContactForm.contactForm.labels];\n      Promise.all(tmpData.map(d => {\n        d['isEditMode'] = false;\n      }));\n      setOtherLangData(tmpData);\n    }\n  }, [otherLangContactForm]);\n  useEffect(() => {\n    let updatedData = [];\n    Promise.all(data.map(d => {\n      updatedData.push({\n        id: d.id,\n        type: d.type,\n        label: d.label,\n        isActive: d.isActive\n      });\n    }));\n    handleComponent({\n      service: 'pbook',\n      type: 'contactForm',\n      gid: updatedData,\n      width: contactFormComponent.width,\n      id: contactFormComponent.id,\n      useBgColor: useBgColor\n    });\n  }, [data, useBgColor]);\n  useEffect(() => {\n    let updatedData = [];\n    Promise.all(otherLangData.map(d => {\n      updatedData.push({\n        id: d.id,\n        label: d.label\n      });\n    }));\n    handleComponent({\n      contactForm: {\n        labels: updatedData\n      }\n    });\n  }, [otherLangData]);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    component: 'div',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: useBgColor,\n      onChange: () => setUseBgColor(!useBgColor),\n      name: \"background-color\",\n      color: \"primary\",\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }),\n    label: \"Background Color\",\n    disabled: (state === null || state === void 0 ? void 0 : state.langCode) !== (state === null || state === void 0 ? void 0 : state.defaultLang),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  })), state.langCode !== state.defaultLang && otherLangData.length > 0 && otherLangData.map((d, i) => {\n    const dataValue = d;\n    return __jsx(Grid, {\n      container: true,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 33\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 37\n      }\n    }, !d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 62\n      }\n    }, d.type === 'heading' ? __jsx(Typography, {\n      component: 'h5',\n      variant: 'h5',\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 76\n      }\n    }, d.label) : __jsx(Typography, {\n      style: {\n        width: '100%'\n      },\n      component: 'span',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 69\n      }\n    }, d.label)), !d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 62\n      }\n    }, d.type !== 'recaptcha' && __jsx(IconButton, {\n      \"aria-label\": \"Edit item\",\n      color: \"primary\",\n      onClick: () => {\n        const updatedData = [...otherLangData];\n        updatedData[i].isEditMode = !d.isEditMode;\n        setOtherLangData(updatedData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 79\n      }\n    }, __jsx(BorderColorSharpIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 57\n      }\n    }))), d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 61\n      }\n    }, __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      value: dataValue.label,\n      InputProps: {\n        endAdornment: __jsx(IconButton, {\n          \"aria-label\": \"Edit item\",\n          color: \"primary\",\n          onClick: () => {\n            const updatedData = [...otherLangData];\n            updatedData[i].isEditMode = !d.isEditMode;\n            setOtherLangData(updatedData);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 71\n          }\n        }, __jsx(CheckBoxIcon, {\n          color: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 61\n          }\n        }))\n      },\n      onChange: e => {\n        const updatedData = [...otherLangData];\n        updatedData[i].label = e.target.value;\n        setOtherLangData(updatedData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 49\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 41\n      }\n    }, data[i].type === 'refcode' && __jsx(FormControl, {\n      variant: \"outlined\",\n      fullWidth: true,\n      size: 'small',\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 79\n      }\n    }, __jsx(Select, {\n      value: accType,\n      onChange: e => setAccType(e.target.value),\n      label: \"Language\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 53\n      }\n    }, accTypes.map((type, index) => {\n      return __jsx(MenuItem, {\n        value: type.code.toLowerCase(),\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 65\n        }\n      }, ' ', type.description, ' ');\n    }))), (data[i].type === 'company' || data[i].type === 'firstname' || data[i].type === 'lastname' || data[i].type === 'mobiletel' || data[i].type === 'workemail') && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 49\n      }\n    }), data[i].type === 'recaptcha' && __jsx(Typography, {\n      component: 'div',\n      style: {\n        pointerEvents: \"none\",\n        opacity: 0.5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 49\n      }\n    }, __jsx(ReCaptcha, {\n      sitekey: GENERAL_SETTINGS.RECAPTCHA_SITE_KEY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 53\n      }\n    })), data[i].type === 'salesnote' && __jsx(TextareaAutosize, {\n      rows: 4,\n      className: classes.textArea,\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 49\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 41\n      }\n    }, __jsx(FormControlLabel, {\n      style: {\n        float: \"right\"\n      },\n      control: __jsx(Checkbox, {\n        checked: data[i].isActive,\n        color: \"primary\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 53\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 45\n      }\n    })))));\n  }), state.langCode === state.defaultLang && data.length > 0 && data.map((d, i) => {\n    const dataValue = d;\n    return __jsx(Grid, {\n      container: true,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 25\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 29\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 33\n      }\n    }, !d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 58\n      }\n    }, d.type === 'heading' ? __jsx(Typography, {\n      component: 'h6',\n      variant: 'h6',\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 72\n      }\n    }, d.label) : __jsx(Typography, {\n      style: {\n        width: '100%'\n      },\n      component: 'span',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 65\n      }\n    }, d.label)), !d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 58\n      }\n    }, d.type !== 'recaptcha' && __jsx(IconButton, {\n      \"aria-label\": \"Edit item\",\n      color: \"primary\",\n      onClick: () => {\n        const updatedData = [...data];\n        updatedData[i].isEditMode = !d.isEditMode;\n        setData(updatedData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 75\n      }\n    }, __jsx(BorderColorSharpIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 53\n      }\n    }))), d.isEditMode && __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 57\n      }\n    }, __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      value: dataValue.label,\n      InputProps: {\n        endAdornment: __jsx(IconButton, {\n          \"aria-label\": \"Edit item\",\n          color: \"primary\",\n          onClick: () => {\n            const updatedData = [...data];\n            updatedData[i].isEditMode = !d.isEditMode;\n            setData(updatedData);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 67\n          }\n        }, __jsx(CheckBoxIcon, {\n          color: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 57\n          }\n        }))\n      },\n      onChange: e => {\n        const updatedData = [...data];\n        updatedData[i].label = e.target.value;\n        setData(updatedData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 45\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 37\n      }\n    }, d.type === 'refcode' && __jsx(FormControl, {\n      variant: \"outlined\",\n      fullWidth: true,\n      size: 'small',\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 69\n      }\n    }, __jsx(Select, {\n      value: accType,\n      onChange: e => setAccType(e.target.value),\n      label: \"Language\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 49\n      }\n    }, accTypes.map((type, index) => {\n      return __jsx(MenuItem, {\n        value: type.code.toLowerCase(),\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 61\n        }\n      }, ' ', type.description, ' ');\n    }))), (d.type === 'company' || d.type === 'firstname' || d.type === 'lastname' || d.type === 'mobiletel' || d.type === 'workemail') && __jsx(TextField, {\n      variant: 'outlined',\n      size: 'small',\n      fullWidth: true,\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 45\n      }\n    }), d.type === 'recaptcha' && __jsx(Typography, {\n      component: 'div',\n      style: {\n        pointerEvents: \"none\",\n        opacity: 0.5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 45\n      }\n    }, __jsx(ReCaptcha, {\n      sitekey: GENERAL_SETTINGS.RECAPTCHA_SITE_KEY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 49\n      }\n    })), d.type === 'salesnote' && __jsx(TextareaAutosize, {\n      rows: 4,\n      className: classes.textArea,\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 45\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 37\n      }\n    }, __jsx(FormControlLabel, {\n      style: {\n        float: \"right\"\n      },\n      control: __jsx(Checkbox, {\n        checked: d.isActive,\n        onChange: () => {\n          const updatedData = [...data];\n          updatedData[i].isActive = !d.isActive;\n          setData(updatedData);\n        },\n        color: \"primary\",\n        disabled: state.langCode !== state.defaultLang || d.type === 'refcode' || d.type === 'firstname' || d.type === 'workemail',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 49\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 41\n      }\n    })))));\n  }), __jsx(Grid, {\n    container: true,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    className: classes.actionButton,\n    style: {\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 21\n    }\n  }, \"SEND\"))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.pageBuilder\n  };\n};\n\nexport default connect(mapStateToProps)(EditContactForm);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/contact-form/EditContactForm.js"],"names":["React","useState","useEffect","useContext","makeStyles","Grid","Button","Typography","TextField","TextareaAutosize","UseOrest","OREST_ENDPOINT","WebCmsGlobal","useRouter","Select","MenuItem","FormControl","ReCaptcha","BorderColorSharpIcon","IconButton","CheckBoxIcon","Checkbox","FormControlLabel","connect","useStyles","theme","actionButton","marginLeft","spacing","borderRadius","float","textArea","width","borderColor","EditContactForm","props","contactFormComponent","handleComponent","state","otherLangContactForm","accTypes","setAccTypes","accType","setAccType","data","setData","otherLangData","setOtherLangData","useBgColor","setUseBgColor","classes","GENERAL_SETTINGS","token","router","companyId","query","companyID","authToken","apiUrl","OREST_URL","endpoint","TRANSTYPE","SLASH","ACCTYPE","method","params","hotelrefno","Number","then","res","status","length","code","toLowerCase","gid","tmpData","Promise","all","map","d","contactForm","labels","updatedData","push","id","type","label","isActive","service","langCode","defaultLang","i","dataValue","isEditMode","fontWeight","endAdornment","e","target","value","index","description","pointerEvents","opacity","RECAPTCHA_SITE_KEY","marginTop","mapStateToProps","formReducer","pageBuilder"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\n//material imports\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport {UseOrest} from \"@webcms/orest\";\nimport {OREST_ENDPOINT} from \"../../../../../../../model/orest/constants\";\nimport WebCmsGlobal from \"../../../../../../webcms-global\";\nimport {useRouter} from \"next/router\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ReCaptcha from 'react-google-recaptcha';\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport {Checkbox, FormControlLabel} from \"@material-ui/core\";\n\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n    actionButton: {\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n        float: \"right\",\n    },\n    textArea: {\n        width: '100%',\n        borderColor: 'silver',\n        borderRadius: 5\n    }\n}));\n\nconst EditContactForm = (props) => {\n\n    const {contactFormComponent, handleComponent, state, otherLangContactForm} = props\n    const [accTypes, setAccTypes] = useState([]);\n    const [accType, setAccType] = useState('');\n    const [data, setData] = useState([]);\n    const [otherLangData, setOtherLangData] = useState([]);\n    const [useBgColor, setUseBgColor] = useState(false);\n\n    const classes = useStyles();\n    const { GENERAL_SETTINGS, token } = useContext(WebCmsGlobal);\n    const router = useRouter();\n    const companyId = router.query.companyID;\n    const authToken = token || router.query.authToken;\n\n    useEffect(() => {\n        // getting languages from service\n        UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.TRANSTYPE + OREST_ENDPOINT.SLASH + OREST_ENDPOINT.ACCTYPE,\n            token: authToken,\n            method: 'get',\n            params: {\n                hotelrefno: Number(companyId),\n            },\n        }).then((res) => {\n            if (res.status === 200 && res.data && res.data.data.length > 0) {\n                setAccTypes(res.data.data);\n                setAccType(res.data.data[0].code.toLowerCase());\n            }\n        })\n    }, []);\n\n    useEffect(() => {\n        if (contactFormComponent?.gid?.length > 0) {\n            const tmpData = [...contactFormComponent.gid];\n            Promise.all(tmpData.map(d => {\n                d['isEditMode'] = false\n            }))\n            setData(tmpData);\n        }\n        contactFormComponent?.useBgColor ? setUseBgColor(contactFormComponent.useBgColor) : null;\n    }, [contactFormComponent]);\n\n    useEffect(() => {\n        if (otherLangContactForm && otherLangContactForm.contactForm &&\n            otherLangContactForm.contactForm.labels &&\n            otherLangContactForm.contactForm.labels.length > 0) {\n            const tmpData = [...otherLangContactForm.contactForm.labels];\n            Promise.all(tmpData.map(d => {\n                d['isEditMode'] = false\n            }))\n            setOtherLangData(tmpData);\n        }\n    }, [otherLangContactForm]);\n\n    useEffect(() => {\n        let updatedData = [];\n        Promise.all(data.map(d => {\n            updatedData.push({\n                id: d.id,\n                type: d.type,\n                label: d.label,\n                isActive: d.isActive\n            })\n        }))\n        handleComponent({\n            service: 'pbook',\n            type: 'contactForm',\n            gid: updatedData,\n            width: contactFormComponent.width,\n            id: contactFormComponent.id,\n            useBgColor: useBgColor\n        })\n    }, [data, useBgColor]);\n\n    useEffect(() => {\n        let updatedData = [];\n        Promise.all(otherLangData.map(d => {\n            updatedData.push({\n                id: d.id,\n                label: d.label,\n            })\n        }))\n        handleComponent({\n            contactForm: {\n                labels: updatedData\n            }\n        })\n    }, [otherLangData]);\n\n    return(\n        <React.Fragment>\n            <Typography component={'div'}>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={useBgColor}\n                            onChange={() => setUseBgColor(!useBgColor)}\n                            name=\"background-color\"\n                            color=\"primary\"\n                            style={{float: 'right'}}\n                        />\n                    }\n                    label=\"Background Color\"\n                    disabled={state?.langCode !== state?.defaultLang}\n                />\n            </Typography>\n            {\n                state.langCode !== state.defaultLang && otherLangData.length > 0 &&\n                    otherLangData.map((d, i) => {\n                        const dataValue = d;\n                        return(\n                            <Grid container key={i}>\n                                <Grid item xs={12}>\n                                    <Grid container>\n                                        {\n                                            !d.isEditMode && <Grid item xs={3}>\n                                                {\n                                                    d.type === 'heading' ? <Typography component={'h5'} variant={'h5'} style={{fontWeight: \"bold\"}}>\n                                                        {\n                                                            d.label\n                                                        }\n                                                    </Typography> : <Typography style={{width: '100%'}} component={'span'}>\n                                                        {\n                                                            d.label\n                                                        }\n                                                    </Typography>\n                                                }\n                                            </Grid>\n                                        }\n                                        {\n                                            !d.isEditMode && <Grid item xs={1}>\n                                                {\n                                                    d.type !== 'recaptcha' && <IconButton\n                                                        aria-label=\"Edit item\"\n                                                        color=\"primary\"\n                                                        onClick={() => {\n                                                            const updatedData = [...otherLangData];\n                                                            updatedData[i].isEditMode = !d.isEditMode\n                                                            setOtherLangData(updatedData);\n                                                        }\n                                                        }\n                                                    >\n                                                        <BorderColorSharpIcon color=\"primary\"/>\n                                                    </IconButton>\n                                                }\n                                            </Grid>\n                                        }\n                                        {\n                                            d.isEditMode && <Grid item xs={4}>\n                                                <TextField\n                                                    variant={'outlined'}\n                                                    size={'small'}\n                                                    fullWidth\n                                                    value={dataValue.label}\n                                                    InputProps={{\n                                                        endAdornment: <IconButton\n                                                            aria-label=\"Edit item\"\n                                                            color=\"primary\"\n                                                            onClick={() => {\n                                                                const updatedData = [...otherLangData];\n                                                                updatedData[i].isEditMode = !d.isEditMode\n                                                                setOtherLangData(updatedData);\n                                                            }}\n                                                        >\n                                                            <CheckBoxIcon color=\"primary\"/>\n                                                        </IconButton>\n                                                    }}\n                                                    onChange={(e) => {\n                                                        const updatedData = [...otherLangData];\n                                                        updatedData[i].label = e.target.value\n                                                        setOtherLangData(updatedData);\n                                                    }}\n                                                />\n                                            </Grid>\n                                        }\n                                        <Grid item xs={4}>\n                                            {\n                                                data[i].type === 'refcode' && <FormControl\n                                                    variant=\"outlined\"\n                                                    fullWidth\n                                                    size={'small'}\n                                                    disabled\n                                                >\n                                                    <Select\n                                                        value={accType}\n                                                        onChange={(e) => setAccType(e.target.value)}\n                                                        label=\"Language\"\n                                                    >\n                                                        {accTypes.map((type, index) => {\n                                                            return (\n                                                                <MenuItem value={type.code.toLowerCase()} key={index}>\n                                                                    {' '}\n                                                                    {type.description}{' '}\n                                                                </MenuItem>\n                                                            )\n                                                        })}\n                                                    </Select>\n                                                </FormControl>\n                                            }\n                                            {\n                                                (data[i].type === 'company' || data[i].type === 'firstname' ||\n                                                    data[i].type === 'lastname' || data[i].type === 'mobiletel' ||\n                                                    data[i].type === 'workemail') &&\n                                                <TextField\n                                                    variant={'outlined'}\n                                                    size={'small'}\n                                                    fullWidth\n                                                    disabled\n                                                />\n                                            }\n                                            {\n                                                data[i].type === 'recaptcha' &&\n                                                <Typography component={'div'} style={{pointerEvents: \"none\", opacity: 0.5}}>\n                                                    <ReCaptcha sitekey={GENERAL_SETTINGS.RECAPTCHA_SITE_KEY} />\n                                                </Typography>\n                                            }\n                                            {\n                                                data[i].type === 'salesnote' &&\n                                                <TextareaAutosize\n                                                    rows={4}\n                                                    className={classes.textArea}\n                                                    disabled\n                                                />\n                                            }\n                                        </Grid>\n                                        <Grid item xs={2}>\n                                            <FormControlLabel\n                                                style={{float: \"right\"}}\n                                                control={\n                                                    <Checkbox\n                                                        checked={data[i].isActive}\n                                                        color=\"primary\"\n                                                        disabled\n                                                    />\n                                                }\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        )\n                    })\n            }\n            {\n                state.langCode === state.defaultLang && data.length > 0 && data.map((d, i) => {\n                    const dataValue = d;\n                    return(\n                        <Grid container key={i}>\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    {\n                                        !d.isEditMode && <Grid item xs={3}>\n                                            {\n                                                d.type === 'heading' ? <Typography component={'h6'} variant={'h6'} style={{fontWeight: \"bold\"}}>\n                                                    {\n                                                        d.label\n                                                    }\n                                                </Typography> : <Typography style={{width: '100%'}} component={'span'}>\n                                                    {\n                                                        d.label\n                                                    }\n                                                </Typography>\n                                            }\n                                        </Grid>\n                                    }\n                                    {\n                                        !d.isEditMode && <Grid item xs={1}>\n                                            {\n                                                d.type !== 'recaptcha' && <IconButton\n                                                    aria-label=\"Edit item\"\n                                                    color=\"primary\"\n                                                    onClick={() => {\n                                                        const updatedData = [...data];\n                                                        updatedData[i].isEditMode = !d.isEditMode\n                                                        setData(updatedData);\n                                                    }\n                                                    }\n                                                >\n                                                    <BorderColorSharpIcon color=\"primary\"/>\n                                                </IconButton>\n                                            }\n                                        </Grid>\n                                    }\n                                    {\n                                        d.isEditMode && <Grid item xs={4}>\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                value={dataValue.label}\n                                                InputProps={{\n                                                    endAdornment: <IconButton\n                                                        aria-label=\"Edit item\"\n                                                        color=\"primary\"\n                                                        onClick={() => {\n                                                            const updatedData = [...data];\n                                                            updatedData[i].isEditMode = !d.isEditMode\n                                                            setData(updatedData);\n                                                        }}\n                                                    >\n                                                        <CheckBoxIcon color=\"primary\"/>\n                                                    </IconButton>\n                                                }}\n                                                onChange={(e) => {\n                                                    const updatedData = [...data];\n                                                    updatedData[i].label = e.target.value\n                                                    setData(updatedData);\n                                                }}\n                                            />\n                                        </Grid>\n                                    }\n                                    <Grid item xs={4}>\n                                        {\n                                            d.type === 'refcode' && <FormControl\n                                                variant=\"outlined\"\n                                                fullWidth\n                                                size={'small'}\n                                                disabled\n                                            >\n                                                <Select\n                                                    value={accType}\n                                                    onChange={(e) => setAccType(e.target.value)}\n                                                    label=\"Language\"\n                                                >\n                                                    {accTypes.map((type, index) => {\n                                                        return (\n                                                            <MenuItem value={type.code.toLowerCase()} key={index}>\n                                                                {' '}\n                                                                {type.description}{' '}\n                                                            </MenuItem>\n                                                        )\n                                                    })}\n                                                </Select>\n                                            </FormControl>\n                                        }\n                                        {\n                                            (d.type === 'company' || d.type === 'firstname' || d.type === 'lastname' ||\n                                                d.type === 'mobiletel' || d.type === 'workemail') &&\n                                            <TextField\n                                                variant={'outlined'}\n                                                size={'small'}\n                                                fullWidth\n                                                disabled\n                                            />\n                                        }\n                                        {\n                                            d.type === 'recaptcha' &&\n                                            <Typography component={'div'} style={{pointerEvents: \"none\", opacity: 0.5}}>\n                                                <ReCaptcha sitekey={GENERAL_SETTINGS.RECAPTCHA_SITE_KEY} />\n                                            </Typography>\n                                        }\n                                        {\n                                            d.type === 'salesnote' &&\n                                            <TextareaAutosize\n                                                rows={4}\n                                                className={classes.textArea}\n                                                disabled\n                                            />\n                                        }\n                                    </Grid>\n                                    <Grid item xs={2}>\n                                        <FormControlLabel\n                                            style={{float: \"right\"}}\n                                            control={\n                                                <Checkbox\n                                                    checked={d.isActive}\n                                                    onChange={() => {\n                                                        const updatedData = [...data];\n                                                        updatedData[i].isActive = !d.isActive;\n                                                        setData(updatedData);\n                                                    }}\n                                                    color=\"primary\"\n                                                    disabled={state.langCode !== state.defaultLang || (d.type === 'refcode' || d.type === 'firstname' ||\n                                                    d.type === 'workemail')}\n                                                />\n                                            }\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    )\n                })\n            }\n            <Grid container style={{marginTop: 8}}>\n                <Grid item xs={8}>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        aria-label=\"add\"\n                        className={classes.actionButton}\n                        style={{float: \"right\"}}\n                    >\n                        SEND\n                    </Button>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        state: state.formReducer.pageBuilder\n    }\n};\n\nexport default connect(mapStateToProps)(EditContactForm)"]},"metadata":{},"sourceType":"module"}