{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/@webcms-ui/core/phone-input/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport Divider from '@material-ui/core/Divider';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { withStyles } from '@material-ui/core/styles';\nimport { some, find, reduce, map, filter, includes, findIndex, head, tail, debounce, memoize, trim, startsWith, isString } from 'lodash';\nimport countryData from './countryData';\nimport Item from './item';\nconst style = {\n  flagButton: {\n    minWidth: 30,\n    padding: 0,\n    height: 30\n  },\n  native: {\n    width: 30,\n    height: 30,\n    padding: 8\n  },\n  nativeRoot: {\n    padding: 0,\n    '& + svg': {\n      display: 'none'\n    }\n  },\n  nativeSelect: {\n    padding: 0,\n    lineHeight: 0,\n    height: 11\n  },\n  positionStart: {\n    position: 'relative'\n  }\n};\n\nclass PhoneInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"flags\", {});\n\n    _defineProperty(this, \"guessSelectedCountry\", memoize((inputNumber, onlyCountries, defaultCountry) => {\n      const secondBestGuess = find(onlyCountries, {\n        iso2: defaultCountry\n      }) || {};\n      if (trim(inputNumber) === '') return secondBestGuess;\n      const bestGuess = reduce(onlyCountries, (selectedCountry, country) => {\n        if (startsWith(inputNumber, country.dialCode)) {\n          if (country.dialCode.length > selectedCountry.dialCode.length) {\n            return country;\n          }\n\n          if (country.dialCode.length === selectedCountry.dialCode.length && country.priority < selectedCountry.priority) {\n            return country;\n          }\n        }\n\n        return selectedCountry;\n      }, {\n        dialCode: '',\n        priority: 10001\n      }, this);\n      if (!bestGuess.name) return secondBestGuess;\n      return bestGuess;\n    }));\n\n    _defineProperty(this, \"getProbableCandidate\", memoize(queryString => {\n      if (!queryString || queryString.length === 0) {\n        return null;\n      }\n\n      const {\n        onlyCountries\n      } = this.state; // don't include the preferred countries in search\n\n      const probableCountries = filter(onlyCountries, country => startsWith(country.name.toLowerCase(), queryString.toLowerCase()), this);\n      return probableCountries[0];\n    }));\n\n    _defineProperty(this, \"getOnlyCountries\", (onlyCountriesArray, filteredCountries) => {\n      if (onlyCountriesArray.length === 0) return filteredCountries;\n      return filteredCountries.filter(country => onlyCountriesArray.some(element => element === country.iso2));\n    });\n\n    _defineProperty(this, \"excludeCountries\", (selectedCountries, excludedCountries) => {\n      if (excludedCountries.length === 0) {\n        return selectedCountries;\n      }\n\n      return filter(selectedCountries, selCountry => !includes(excludedCountries, selCountry.iso2));\n    });\n\n    _defineProperty(this, \"filterRegions\", (regions, filteredCountries) => {\n      if (typeof regions === 'string') {\n        const region = regions;\n        return filteredCountries.filter(country => country.regions.some(element => element === region));\n      }\n\n      return filteredCountries.filter(country => {\n        const matches = regions.map(region => country.regions.some(element => element === region));\n        return matches.some(el => el);\n      });\n    });\n\n    _defineProperty(this, \"deleteAreaCodes\", filteredCountries => filteredCountries.filter(country => country.isAreaCode !== true));\n\n    _defineProperty(this, \"updateDefaultCountry\", country => {\n      const {\n        onlyCountries\n      } = this.state;\n      const {\n        disableCountryCode\n      } = this.props;\n      const newSelectedCountry = find(onlyCountries, {\n        iso2: country\n      });\n\n      if (newSelectedCountry) {\n        this.setState({\n          defaultCountry: country,\n          selectedCountry: newSelectedCountry,\n          formattedNumber: disableCountryCode ? '' : `+${newSelectedCountry.dialCode}`\n        });\n      }\n    });\n\n    _defineProperty(this, \"scrollTo\", country => {\n      if (!country) {\n        return;\n      }\n\n      const container = this.dropdownContainerRef;\n\n      if (!container || !document.body) {\n        return;\n      }\n\n      container.scrollTop = country.offsetTop;\n    });\n\n    _defineProperty(this, \"formatNumber\", (text, patternArg) => {\n      const {\n        disableCountryCode,\n        enableLongNumbers,\n        autoFormat\n      } = this.props;\n      let pattern;\n\n      if (disableCountryCode && patternArg) {\n        pattern = patternArg.split(' ');\n        pattern.shift();\n        pattern = pattern.join(' ');\n      } else {\n        pattern = patternArg;\n      }\n\n      if (!text || text.length === 0) {\n        return disableCountryCode ? '' : '+';\n      } // for all strings with length less than 3, just return it (1, 2 etc.)\n      // also return the same text if the selected country has no fixed format\n\n\n      if (text && text.length < 2 || !pattern || !autoFormat) {\n        return disableCountryCode ? text : `+${text}`;\n      }\n\n      const formattedObject = reduce(pattern, (acc, character) => {\n        if (acc.remainingText.length === 0) {\n          return acc;\n        }\n\n        if (character !== '.') {\n          return {\n            formattedText: acc.formattedText + character,\n            remainingText: acc.remainingText\n          };\n        }\n\n        return {\n          formattedText: acc.formattedText + head(acc.remainingText),\n          remainingText: tail(acc.remainingText)\n        };\n      }, {\n        formattedText: '',\n        remainingText: text.split('')\n      });\n      let formattedNumber;\n\n      if (enableLongNumbers) {\n        formattedNumber = formattedObject.formattedText + formattedObject.remainingText.join('');\n      } else {\n        formattedNumber = formattedObject.formattedText;\n      } // Always close brackets\n\n\n      if (formattedNumber.includes('(') && !formattedNumber.includes(')')) formattedNumber += ')';\n      return formattedNumber;\n    });\n\n    _defineProperty(this, \"cursorToEnd\", () => {\n      const {\n        isModernBrowser\n      } = this.props;\n      const input = this.inputRef;\n      input.focus();\n\n      if (isModernBrowser) {\n        const len = input.value.length;\n        input.setSelectionRange(len, len);\n      }\n    });\n\n    _defineProperty(this, \"getElement\", index => this.flags[`flag_no_${index}`]);\n\n    _defineProperty(this, \"getCountryData\", () => {\n      const {\n        selectedCountry\n      } = this.state;\n      if (!selectedCountry) return {};\n      return {\n        name: selectedCountry.name || '',\n        dialCode: selectedCountry.dialCode || '',\n        countryCode: selectedCountry.iso2 || ''\n      };\n    });\n\n    _defineProperty(this, \"handleInput\", e => {\n      let {\n        selectedCountry: newSelectedCountry,\n        freezeSelection\n      } = this.state;\n      const {\n        selectedCountry,\n        formattedNumber: oldFormattedText,\n        onlyCountries,\n        defaultCountry\n      } = this.state;\n      const {\n        disableCountryCode,\n        countryCodeEditable,\n        isModernBrowser,\n        onChange\n      } = this.props;\n      let formattedNumber = disableCountryCode ? '' : '+';\n\n      if (!countryCodeEditable) {\n        const updatedInput = `+${newSelectedCountry.dialCode}`;\n\n        if (e.target.value.length < updatedInput.length) {\n          return;\n        }\n      } // Does not exceed 15 digit phone number limit\n\n\n      if (e.target.value.replace(/\\D/g, '').length > 15) {\n        return;\n      } // if the input is the same as before, must be some special key like enter etc.\n\n\n      if (e.target.value === oldFormattedText) {\n        return;\n      } // ie hack\n\n\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n\n      if (e.target.value.length > 0) {\n        // before entering the number in new format, lets check if the dial code now matches some other country\n        const inputNumber = e.target.value.replace(/\\D/g, ''); // we don't need to send the whole number to guess the country... only the first 6 characters are enough\n        // the guess country function can then use memoization much more effectively since the set of input it\n        // gets has drastically reduced\n\n        if (!freezeSelection || selectedCountry.dialCode.length > inputNumber.length) {\n          newSelectedCountry = this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);\n          freezeSelection = false;\n        } // let us remove all non numerals from the input\n\n\n        formattedNumber = this.formatNumber(inputNumber, newSelectedCountry.format);\n      }\n\n      let caretPosition = e.target.selectionStart;\n      const diff = formattedNumber.length - oldFormattedText.length;\n      this.setState({\n        formattedNumber,\n        freezeSelection,\n        selectedCountry: newSelectedCountry.dialCode ? newSelectedCountry : selectedCountry\n      }, () => {\n        if (isModernBrowser) {\n          if (diff > 0) {\n            caretPosition -= diff;\n          }\n\n          const lastChar = formattedNumber.charAt(formattedNumber.length - 1);\n\n          if (lastChar === ')') {\n            this.inputRef.setSelectionRange(formattedNumber.length - 1, formattedNumber.length - 1);\n          } else if (caretPosition > 0 && oldFormattedText.length >= formattedNumber.length) {\n            this.inputRef.setSelectionRange(caretPosition, caretPosition);\n          }\n        }\n\n        if (onChange) {\n          onChange(formattedNumber, this.getCountryData());\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleRefInput\", ref => {\n      const {\n        inputRef,\n        InputProps\n      } = this.props;\n      this.inputRef = ref;\n      let refProp;\n\n      if (inputRef) {\n        refProp = inputRef;\n      } else if (InputProps && InputProps.ref) {\n        refProp = InputProps.ref;\n      }\n\n      if (refProp) {\n        if (typeof refProp === 'function') {\n          refProp(ref);\n        } else {\n          refProp.current = ref;\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleInputClick\", e => {\n      const {\n        onClick\n      } = this.props;\n\n      if (onClick) {\n        onClick(e, this.getCountryData());\n      }\n    });\n\n    _defineProperty(this, \"handleFlagItemClick\", country => {\n      const {\n        formattedNumber,\n        selectedCountry,\n        onlyCountries\n      } = this.state;\n      const {\n        onChange\n      } = this.props;\n      const currentSelectedCountry = selectedCountry;\n      const nextSelectedCountry = isString(country) ? find(onlyCountries, countryItem => countryItem.iso2 === country) : find(onlyCountries, country);\n      const unformattedNumber = formattedNumber.replace(' ', '').replace('(', '').replace(')', '').replace('-', '');\n      const newNumber = unformattedNumber.length > 1 ? unformattedNumber.replace(currentSelectedCountry.dialCode, nextSelectedCountry.dialCode) : nextSelectedCountry.dialCode;\n      const newFormattedNumber = this.formatNumber(newNumber.replace(/\\D/g, ''), nextSelectedCountry.format);\n      this.setState({\n        anchorEl: null,\n        selectedCountry: nextSelectedCountry,\n        freezeSelection: true,\n        formattedNumber: newFormattedNumber\n      }, () => {\n        this.cursorToEnd();\n\n        if (onChange) {\n          onChange(newFormattedNumber, this.getCountryData());\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleInputFocus\", e => {\n      const {\n        selectedCountry\n      } = this.state;\n      const {\n        disableCountryCode,\n        onFocus\n      } = this.props; // if the input is blank, insert dial code of the selected country\n\n      if (this.inputRef) {\n        if (this.inputRef.value === '+' && selectedCountry && !disableCountryCode) {\n          this.setState({\n            formattedNumber: `+${selectedCountry.dialCode}`\n          }, () => setTimeout(this.cursorToEnd, 10));\n        }\n      }\n\n      this.setState({\n        placeholder: ''\n      });\n\n      if (onFocus) {\n        onFocus(e, this.getCountryData());\n      }\n\n      setTimeout(this.cursorToEnd, 10);\n    });\n\n    _defineProperty(this, \"handleInputBlur\", e => {\n      const {\n        placeholder,\n        onBlur\n      } = this.props;\n\n      if (!e.target.value) {\n        this.setState({\n          placeholder\n        });\n      }\n\n      if (onBlur) {\n        onBlur(e, this.getCountryData());\n      }\n    });\n\n    _defineProperty(this, \"getHighlightCountryIndex\", direction => {\n      const {\n        highlightCountryIndex: oldHighlightCountryIndex,\n        onlyCountries,\n        preferredCountries\n      } = this.state; // had to write own function because underscore does not have findIndex. lodash has it\n\n      const highlightCountryIndex = oldHighlightCountryIndex + direction;\n\n      if (highlightCountryIndex < 0 || highlightCountryIndex >= onlyCountries.length + preferredCountries.length) {\n        return highlightCountryIndex - direction;\n      }\n\n      return highlightCountryIndex;\n    });\n\n    _defineProperty(this, \"searchCountry\", () => {\n      const {\n        queryString,\n        onlyCountries,\n        preferredCountries\n      } = this.state;\n      const probableCandidate = this.getProbableCandidate(queryString) || onlyCountries[0];\n      const probableCandidateIndex = findIndex(onlyCountries, probableCandidate) + preferredCountries.length;\n      this.scrollTo(this.getElement(probableCandidateIndex), true);\n      this.setState({\n        queryString: '',\n        highlightCountryIndex: probableCandidateIndex\n      });\n    });\n\n    _defineProperty(this, \"handleKeydown\", e => {\n      const {\n        anchorEl,\n        highlightCountryIndex,\n        preferredCountries,\n        onlyCountries,\n        queryString,\n        debouncedQueryStingSearcher\n      } = this.state;\n      const {\n        keys,\n        disabled\n      } = this.props;\n      if (!anchorEl || disabled) return; // ie hack\n\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n\n      const moveHighlight = direction => {\n        this.setState({\n          highlightCountryIndex: this.getHighlightCountryIndex(direction)\n        }, () => {\n          this.scrollTo(this.getElement(highlightCountryIndex + preferredCountries.length), true);\n        });\n      };\n\n      switch (e.which) {\n        case keys.DOWN:\n          moveHighlight(1);\n          break;\n\n        case keys.UP:\n          moveHighlight(-1);\n          break;\n\n        case keys.ENTER:\n          this.handleFlagItemClick(onlyCountries[highlightCountryIndex], e);\n          break;\n\n        case keys.ESC:\n          this.setState({\n            anchorEl: null\n          }, this.cursorToEnd);\n          break;\n\n        default:\n          if (e.which >= keys.A && e.which <= keys.Z || e.which === keys.SPACE) {\n            this.setState({\n              queryString: queryString + String.fromCharCode(e.which)\n            }, debouncedQueryStingSearcher);\n          }\n\n      }\n    });\n\n    _defineProperty(this, \"handleInputKeyDown\", e => {\n      const {\n        keys,\n        onEnterKeyPress,\n        onKeyDown\n      } = this.props;\n\n      if (e.which === keys.ENTER && onEnterKeyPress) {\n        onEnterKeyPress(e);\n      }\n\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    });\n\n    _defineProperty(this, \"checkIfValid\", () => {\n      const {\n        formattedNumber\n      } = this.state;\n      const {\n        isValid\n      } = this.props;\n      return isValid(formattedNumber.replace(/\\D/g, ''));\n    });\n\n    _defineProperty(this, \"updateFormattedNumber\", number => {\n      const {\n        onlyCountries,\n        defaultCountry\n      } = this.state;\n      const {\n        disableCountryCode\n      } = this.props;\n      let countryGuess;\n      let inputNumber = number;\n      let formattedNumber = number; // if inputNumber does not start with '+', then use default country's dialing prefix,\n      // otherwise use logic for finding country based on country prefix.\n\n      if (inputNumber.startsWith('00')) {\n        inputNumber = inputNumber.replace('00', '+');\n      }\n\n      if (!inputNumber.startsWith('+')) {\n        countryGuess = find(onlyCountries, {\n          iso2: defaultCountry\n        });\n        const dialCode = countryGuess && !startsWith(inputNumber.replace(/\\D/g, ''), countryGuess.dialCode) ? countryGuess.dialCode : '';\n        formattedNumber = this.formatNumber((disableCountryCode ? '' : dialCode) + inputNumber.replace(/\\D/g, ''), countryGuess ? countryGuess.format : undefined);\n      } else {\n        inputNumber = inputNumber.replace(/\\D/g, '');\n        countryGuess = this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);\n        formattedNumber = this.formatNumber(inputNumber, countryGuess.format);\n      }\n\n      this.setState({\n        selectedCountry: countryGuess,\n        formattedNumber\n      });\n    });\n\n    _defineProperty(this, \"getDropdownProps\", () => {\n      const {\n        selectedCountry,\n        anchorEl,\n        preferredCountries,\n        onlyCountries\n      } = this.state;\n      const {\n        classes,\n        dropdownClass,\n        localization,\n        disableDropdown,\n        native\n      } = this.props;\n      const inputFlagClasses = `flag ${selectedCountry.iso2}`;\n\n      const isSelected = country => Boolean(selectedCountry && selectedCountry.dialCode === country.dialCode);\n\n      const dropdownProps = disableDropdown ? {} : {\n        startAdornment: __jsx(InputAdornment, {\n          className: classes.positionStart,\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 17\n          }\n        }, native ? __jsx(React.Fragment, null, __jsx(NativeSelect, {\n          id: \"country-menu\",\n          open: Boolean(anchorEl),\n          onClose: () => this.setState({\n            anchorEl: null\n          }),\n          className: classes.native,\n          classes: {\n            root: clsx(classes.nativeRoot, 'native', inputFlagClasses),\n            select: classes.nativeSelect\n          },\n          onChange: e => this.handleFlagItemClick(e.target.value),\n          disableUnderline: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 33\n          }\n        }, !!preferredCountries.length && map(preferredCountries, (country, index) => __jsx(Item, {\n          key: `preferred_${country.iso2}_${index}`,\n          itemRef: node => {\n            this.flags[`flag_no_${index}`] = node;\n          },\n          name: country.name,\n          iso2: country.iso2,\n          dialCode: country.dialCode,\n          localization: localization && localization[country.name],\n          native: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 41\n          }\n        })), map(onlyCountries, (country, index) => __jsx(Item, {\n          key: `preferred_${country.iso2}_${index}`,\n          itemRef: node => {\n            this.flags[`flag_no_${index}`] = node;\n          },\n          name: country.name,\n          iso2: country.iso2,\n          dialCode: country.dialCode,\n          localization: localization && localization[country.name],\n          native: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 41\n          }\n        })))) : __jsx(React.Fragment, null, __jsx(Button, {\n          className: classes.flagButton,\n          \"aria-owns\": anchorEl ? 'country-menu' : null,\n          \"aria-label\": \"Select country\",\n          onClick: e => this.setState({\n            anchorEl: e.currentTarget\n          }),\n          \"aria-haspopup\": true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 33\n          }\n        }, __jsx(\"div\", {\n          className: inputFlagClasses,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 37\n          }\n        })), __jsx(Menu, {\n          keepMounted: true,\n          className: dropdownClass,\n          id: \"country-menu\",\n          anchorEl: anchorEl,\n          open: Boolean(anchorEl),\n          onClose: () => this.setState({\n            anchorEl: null\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 33\n          }\n        }, !!preferredCountries.length && map(preferredCountries, (country, index) => __jsx(Item, {\n          key: `preferred_${country.iso2}_${index}`,\n          itemRef: node => {\n            this.flags[`flag_no_${index}`] = node;\n          },\n          selected: isSelected(country),\n          onClick: () => this.handleFlagItemClick(country),\n          name: country.name,\n          iso2: country.iso2,\n          dialCode: country.dialCode,\n          localization: localization && localization[country.name],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 41\n          }\n        })), !!preferredCountries.length && __jsx(Divider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 69\n          }\n        }), map(onlyCountries, (country, index) => __jsx(Item, {\n          key: `preferred_${country.iso2}_${index}`,\n          itemRef: node => {\n            this.flags[`flag_no_${index}`] = node;\n          },\n          selected: isSelected(country),\n          onClick: () => this.handleFlagItemClick(country),\n          name: country.name,\n          iso2: country.iso2,\n          dialCode: country.dialCode,\n          localization: localization && localization[country.name],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 41\n          }\n        })))))\n      };\n      return dropdownProps;\n    });\n\n    let _filteredCountries = countryData.allCountries;\n    if (props.disableAreaCodes) _filteredCountries = this.deleteAreaCodes(_filteredCountries);\n    if (props.regions) _filteredCountries = this.filterRegions(props.regions, _filteredCountries);\n\n    const _onlyCountries = this.excludeCountries(this.getOnlyCountries(props.onlyCountries, _filteredCountries), props.excludeCountries);\n\n    const _preferredCountries = filter(_filteredCountries, country => some(props.preferredCountries, preferredCountry => preferredCountry === country.iso2));\n\n    let _inputNumber = props.value || '';\n\n    if (_inputNumber.startsWith('00')) {\n      _inputNumber = _inputNumber.replace('00', '+');\n    }\n\n    let _countryGuess;\n\n    if (_inputNumber.length > 1) {\n      // Country detect by value field\n      _countryGuess = this.guessSelectedCountry(_inputNumber.replace(/\\D/g, '').substring(0, 6), _onlyCountries, props.defaultCountry) || 0;\n    } else if (props.defaultCountry) {\n      // Default country\n      _countryGuess = find(_onlyCountries, {\n        iso2: props.defaultCountry\n      }) || 0;\n    } else {\n      // Empty params\n      _countryGuess = 0;\n    }\n\n    const countryGuessIndex = findIndex(this.allCountries, _countryGuess);\n\n    const _dialCode = _inputNumber.length < 2 && _countryGuess && !startsWith(_inputNumber.replace(/\\D/g, ''), _countryGuess.dialCode) ? _countryGuess.dialCode : '';\n\n    const _formattedNumber = _inputNumber === '' && _countryGuess === 0 ? '' : this.formatNumber((props.disableCountryCode ? '' : _dialCode) + _inputNumber.replace(/\\D/g, ''), _countryGuess.name ? _countryGuess.format : undefined);\n\n    this.state = {\n      formattedNumber: _formattedNumber,\n      placeholder: props.placeholder,\n      onlyCountries: _onlyCountries,\n      preferredCountries: _preferredCountries,\n      defaultCountry: props.defaultCountry,\n      selectedCountry: _countryGuess,\n      highlightCountryIndex: countryGuessIndex,\n      queryString: '',\n      freezeSelection: false,\n      debouncedQueryStingSearcher: debounce(this.searchCountry, 100),\n      anchorEl: null\n    };\n  }\n\n  componentDidMount() {\n    if (document.addEventListener) {\n      document.addEventListener('keydown', this.handleKeydown);\n    }\n  }\n\n  componentDidUpdate({\n    value: prevValue\n  }) {\n    const {\n      defaultCountry: prevDefaultCountry,\n      formattedNumber,\n      onlyCountries\n    } = this.state;\n    const {\n      defaultCountry,\n      value\n    } = this.props;\n    let isDefCountryUpd = false;\n    const countryGuess = this.guessSelectedCountry(value && value.length > 0 ? value.substring(0, 6) : '', onlyCountries, defaultCountry);\n\n    if (countryGuess && countryGuess.iso2) {\n      isDefCountryUpd = false;\n    } else {\n      isDefCountryUpd = true;\n    }\n\n    if (isDefCountryUpd && defaultCountry && defaultCountry !== prevDefaultCountry) {\n      this.updateDefaultCountry(defaultCountry);\n    }\n\n    if (typeof value === 'string' && value !== prevValue && value !== formattedNumber) {\n      this.updateFormattedNumber(value);\n    }\n  }\n\n  componentWillUnmount() {\n    if (document.removeEventListener) {\n      document.removeEventListener('keydown', this.handleKeydown);\n    }\n  }\n\n  render() {\n    const {\n      formattedNumber,\n      placeholder: statePlaceholder\n    } = this.state;\n\n    const _this$props = this.props,\n          {\n      // start placeholder props\n      native,\n      defaultCountry,\n      excludeCountries,\n      onlyCountries,\n      preferredCountries,\n      dropdownClass,\n      autoFormat,\n      disableAreaCodes,\n      isValid,\n      disableCountryCode,\n      disableDropdown,\n      enableLongNumbers,\n      countryCodeEditable,\n      onEnterKeyPress,\n      isModernBrowser,\n      classes,\n      keys,\n      localization,\n      placeholder,\n      regions,\n      onChange,\n      value,\n      // end placeholder props\n      inputClass,\n      error,\n      InputProps\n    } = _this$props,\n          restProps = _objectWithoutProperties(_this$props, [\"native\", \"defaultCountry\", \"excludeCountries\", \"onlyCountries\", \"preferredCountries\", \"dropdownClass\", \"autoFormat\", \"disableAreaCodes\", \"isValid\", \"disableCountryCode\", \"disableDropdown\", \"enableLongNumbers\", \"countryCodeEditable\", \"onEnterKeyPress\", \"isModernBrowser\", \"classes\", \"keys\", \"localization\", \"placeholder\", \"regions\", \"onChange\", \"value\", \"inputClass\", \"error\", \"InputProps\"]);\n\n    const dropdownProps = this.getDropdownProps();\n    return __jsx(TextField, _extends({\n      placeholder: statePlaceholder,\n      value: formattedNumber,\n      className: inputClass,\n      inputRef: this.handleRefInput,\n      error: error || !this.checkIfValid(),\n      onChange: this.handleInput,\n      onClick: this.handleInputClick,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputBlur,\n      onKeyDown: this.handleInputKeyDown,\n      type: \"tel\",\n      InputProps: _objectSpread(_objectSpread({}, dropdownProps), InputProps)\n    }, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nPhoneInput.propTypes = {\n  classes: PropTypes.object,\n  excludeCountries: PropTypes.arrayOf(PropTypes.string),\n  onlyCountries: PropTypes.arrayOf(PropTypes.string),\n  preferredCountries: PropTypes.arrayOf(PropTypes.string),\n  defaultCountry: PropTypes.string,\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  variant: PropTypes.string,\n  native: PropTypes.bool,\n  inputClass: PropTypes.string,\n  dropdownClass: PropTypes.string,\n  InputProps: PropTypes.object,\n  inputProps: PropTypes.object,\n  inputRef: PropTypes.func,\n  autoFormat: PropTypes.bool,\n  disableAreaCodes: PropTypes.bool,\n  disableCountryCode: PropTypes.bool,\n  disableDropdown: PropTypes.bool,\n  enableLongNumbers: PropTypes.bool,\n  countryCodeEditable: PropTypes.bool,\n  regions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  localization: PropTypes.object,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  isValid: PropTypes.func,\n  isModernBrowser: PropTypes.func,\n  onEnterKeyPress: PropTypes.func,\n  keys: PropTypes.object\n};\nPhoneInput.defaultProps = {\n  classes: {},\n  excludeCountries: [],\n  onlyCountries: [],\n  preferredCountries: [],\n  defaultCountry: '',\n  placeholder: '+1 (702) 123-4567',\n  disabled: false,\n  error: false,\n  variant: 'standard',\n  native: false,\n  inputClass: '',\n  dropdownClass: '',\n  autoFormat: true,\n  disableAreaCodes: false,\n  isValid: inputNumber => some(countryData.allCountries, country => startsWith(inputNumber, country.dialCode) || startsWith(country.dialCode, inputNumber)),\n  disableCountryCode: false,\n  disableDropdown: false,\n  enableLongNumbers: true,\n  countryCodeEditable: true,\n  regions: '',\n  localization: {},\n  onEnterKeyPress: () => {},\n  onChange: () => {},\n  isModernBrowser: () => document.createElement ? Boolean(document.createElement('input').setSelectionRange) : false,\n  keys: {\n    UP: 38,\n    DOWN: 40,\n    RIGHT: 39,\n    LEFT: 37,\n    ENTER: 13,\n    ESC: 27,\n    PLUS: 43,\n    A: 65,\n    Z: 90,\n    SPACE: 32\n  }\n};\nPhoneInput.displayName = 'PhoneInput';\nexport default withStyles(style)(PhoneInput);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/@webcms-ui/core/phone-input/index.js"],"names":["React","PropTypes","clsx","TextField","InputAdornment","Button","Menu","Divider","NativeSelect","withStyles","some","find","reduce","map","filter","includes","findIndex","head","tail","debounce","memoize","trim","startsWith","isString","countryData","Item","style","flagButton","minWidth","padding","height","native","width","nativeRoot","display","nativeSelect","lineHeight","positionStart","position","PhoneInput","Component","constructor","props","inputNumber","onlyCountries","defaultCountry","secondBestGuess","iso2","bestGuess","selectedCountry","country","dialCode","length","priority","name","queryString","state","probableCountries","toLowerCase","onlyCountriesArray","filteredCountries","element","selectedCountries","excludedCountries","selCountry","regions","region","matches","el","isAreaCode","disableCountryCode","newSelectedCountry","setState","formattedNumber","container","dropdownContainerRef","document","body","scrollTop","offsetTop","text","patternArg","enableLongNumbers","autoFormat","pattern","split","shift","join","formattedObject","acc","character","remainingText","formattedText","isModernBrowser","input","inputRef","focus","len","value","setSelectionRange","index","flags","countryCode","e","freezeSelection","oldFormattedText","countryCodeEditable","onChange","updatedInput","target","replace","preventDefault","returnValue","guessSelectedCountry","substring","formatNumber","format","caretPosition","selectionStart","diff","lastChar","charAt","getCountryData","ref","InputProps","refProp","current","onClick","currentSelectedCountry","nextSelectedCountry","countryItem","unformattedNumber","newNumber","newFormattedNumber","anchorEl","cursorToEnd","onFocus","setTimeout","placeholder","onBlur","direction","highlightCountryIndex","oldHighlightCountryIndex","preferredCountries","probableCandidate","getProbableCandidate","probableCandidateIndex","scrollTo","getElement","debouncedQueryStingSearcher","keys","disabled","moveHighlight","getHighlightCountryIndex","which","DOWN","UP","ENTER","handleFlagItemClick","ESC","A","Z","SPACE","String","fromCharCode","onEnterKeyPress","onKeyDown","isValid","number","countryGuess","undefined","classes","dropdownClass","localization","disableDropdown","inputFlagClasses","isSelected","Boolean","dropdownProps","startAdornment","root","select","node","currentTarget","allCountries","disableAreaCodes","deleteAreaCodes","filterRegions","excludeCountries","getOnlyCountries","preferredCountry","countryGuessIndex","searchCountry","componentDidMount","addEventListener","handleKeydown","componentDidUpdate","prevValue","prevDefaultCountry","isDefCountryUpd","updateDefaultCountry","updateFormattedNumber","componentWillUnmount","removeEventListener","render","statePlaceholder","inputClass","error","restProps","getDropdownProps","handleRefInput","checkIfValid","handleInput","handleInputClick","handleInputFocus","handleInputBlur","handleInputKeyDown","propTypes","object","arrayOf","string","bool","variant","inputProps","func","oneOfType","defaultProps","createElement","RIGHT","LEFT","PLUS","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport Divider from '@material-ui/core/Divider';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n    some, find, reduce, map, filter, includes, findIndex,\n    head, tail, debounce, memoize, trim, startsWith, isString,\n} from 'lodash';\nimport countryData from './countryData';\nimport Item from './item';\n\nconst style = {\n    flagButton: {\n        minWidth: 30,\n        padding: 0,\n        height: 30,\n    },\n    native: {\n        width: 30,\n        height: 30,\n        padding: 8,\n    },\n    nativeRoot: {\n        padding: 0,\n        '& + svg': {\n            display: 'none',\n        },\n    },\n    nativeSelect: {\n        padding: 0,\n        lineHeight: 0,\n        height: 11,\n    },\n    positionStart: {\n        position: 'relative',\n    },\n}\n\nclass PhoneInput extends React.Component {\n    flags = {};\n    guessSelectedCountry = memoize((inputNumber, onlyCountries, defaultCountry) => {\n        const secondBestGuess = find(onlyCountries, { iso2: defaultCountry }) || {};\n        if (trim(inputNumber) === '') return secondBestGuess;\n\n        const bestGuess = reduce(onlyCountries, (selectedCountry, country) => {\n            if (startsWith(inputNumber, country.dialCode)) {\n                if (country.dialCode.length > selectedCountry.dialCode.length) {\n                    return country;\n                }\n                if (country.dialCode.length === selectedCountry.dialCode.length && country.priority < selectedCountry.priority) {\n                    return country;\n                }\n            }\n            return selectedCountry;\n        }, { dialCode: '', priority: 10001 }, this);\n\n        if (!bestGuess.name) return secondBestGuess;\n        return bestGuess;\n    });\n\n    constructor(props) {\n        super(props);\n        let filteredCountries = countryData.allCountries;\n\n        if (props.disableAreaCodes) filteredCountries = this.deleteAreaCodes(filteredCountries);\n        if (props.regions) filteredCountries = this.filterRegions(props.regions, filteredCountries);\n\n        const onlyCountries = this.excludeCountries(\n            this.getOnlyCountries(props.onlyCountries, filteredCountries), props.excludeCountries,\n        );\n\n        const preferredCountries = filter(filteredCountries, (country) => some(props.preferredCountries, (preferredCountry) => preferredCountry === country.iso2));\n\n        let inputNumber = props.value || '';\n        if(inputNumber.startsWith('00')){\n            inputNumber =  inputNumber.replace('00', '+')\n        }\n\n        let countryGuess;\n        if (inputNumber.length > 1) {\n            // Country detect by value field\n            countryGuess = this.guessSelectedCountry(inputNumber.replace(/\\D/g, '').substring(0, 6), onlyCountries, props.defaultCountry) || 0;\n        } else if (props.defaultCountry) {\n            // Default country\n            countryGuess = find(onlyCountries, { iso2: props.defaultCountry }) || 0;\n        } else {\n            // Empty params\n            countryGuess = 0;\n        }\n\n        const countryGuessIndex = findIndex(this.allCountries, countryGuess);\n        const dialCode = (\n            inputNumber.length < 2\n            && countryGuess\n            && !startsWith(inputNumber.replace(/\\D/g, ''), countryGuess.dialCode)\n        ) ? countryGuess.dialCode : '';\n\n        const formattedNumber = (inputNumber === '' && countryGuess === 0) ? ''\n            : this.formatNumber(\n                (props.disableCountryCode ? '' : dialCode) + inputNumber.replace(/\\D/g, ''),\n                countryGuess.name ? countryGuess.format : undefined,\n            );\n\n        this.state = {\n            formattedNumber,\n            placeholder: props.placeholder,\n            onlyCountries,\n            preferredCountries,\n            defaultCountry: props.defaultCountry,\n            selectedCountry: countryGuess,\n            highlightCountryIndex: countryGuessIndex,\n            queryString: '',\n            freezeSelection: false,\n            debouncedQueryStingSearcher: debounce(this.searchCountry, 100),\n            anchorEl: null,\n        };\n    }\n\n    componentDidMount() {\n        if (document.addEventListener) {\n            document.addEventListener('keydown', this.handleKeydown);\n        }\n    }\n\n    componentDidUpdate({ value: prevValue }) {\n        const { defaultCountry: prevDefaultCountry, formattedNumber, onlyCountries } = this.state;\n        const { defaultCountry, value } = this.props;\n        let isDefCountryUpd = false\n\n        const countryGuess = this.guessSelectedCountry(value && value.length > 0 ? value.substring(0, 6) : '', onlyCountries, defaultCountry);\n        if(countryGuess && countryGuess.iso2){\n            isDefCountryUpd = false\n        }else{\n            isDefCountryUpd = true\n        }\n\n        if (isDefCountryUpd && defaultCountry && defaultCountry !== prevDefaultCountry) {\n            this.updateDefaultCountry(defaultCountry);\n        }\n\n        if (typeof value === 'string' && value !== prevValue && value !== formattedNumber) {\n            this.updateFormattedNumber(value);\n        }\n    }\n\n    componentWillUnmount() {\n        if (document.removeEventListener) {\n            document.removeEventListener('keydown', this.handleKeydown);\n        }\n    }\n\n    getProbableCandidate = memoize((queryString) => {\n        if (!queryString || queryString.length === 0) {\n            return null;\n        }\n\n        const { onlyCountries } = this.state;\n\n        // don't include the preferred countries in search\n        const probableCountries = filter(onlyCountries, (country) => startsWith(country.name.toLowerCase(), queryString.toLowerCase()), this);\n        return probableCountries[0];\n    });\n\n    getOnlyCountries = (onlyCountriesArray, filteredCountries) => {\n        if (onlyCountriesArray.length === 0) return filteredCountries;\n\n        return filteredCountries.filter((country) => onlyCountriesArray.some((element) => element === country.iso2));\n    }\n\n    excludeCountries = (selectedCountries, excludedCountries) => {\n        if (excludedCountries.length === 0) {\n            return selectedCountries;\n        }\n        return filter(selectedCountries, (selCountry) => !includes(excludedCountries, selCountry.iso2));\n    }\n\n    filterRegions = (regions, filteredCountries) => {\n        if (typeof regions === 'string') {\n            const region = regions;\n            return filteredCountries.filter((country) => country.regions.some((element) => element === region));\n        }\n\n        return filteredCountries.filter((country) => {\n            const matches = regions.map((region) => country.regions.some((element) => element === region));\n            return matches.some((el) => el);\n        });\n    }\n\n    // Countries array methods\n    deleteAreaCodes = (filteredCountries) => filteredCountries.filter((country) => country.isAreaCode !== true);\n\n    // Hooks for updated props\n    updateDefaultCountry = (country) => {\n        const { onlyCountries } = this.state;\n        const { disableCountryCode } = this.props;\n\n        const newSelectedCountry = find(onlyCountries, { iso2: country });\n        if(newSelectedCountry) {\n            this.setState({\n                defaultCountry: country,\n                selectedCountry: newSelectedCountry,\n                formattedNumber: disableCountryCode ? '' : `+${newSelectedCountry.dialCode}`,\n            });\n        }\n\n    }\n\n    // View methods\n    scrollTo = (country) => {\n        if (!country) { return; }\n\n        const container = this.dropdownContainerRef;\n\n        if (!container || !document.body) { return; }\n        container.scrollTop = country.offsetTop;\n    }\n\n    formatNumber = (text, patternArg) => {\n        const { disableCountryCode, enableLongNumbers, autoFormat } = this.props;\n\n        let pattern;\n        if (disableCountryCode && patternArg) {\n            pattern = patternArg.split(' ');\n            pattern.shift();\n            pattern = pattern.join(' ');\n        } else {\n            pattern = patternArg;\n        }\n\n        if (!text || text.length === 0) {\n            return disableCountryCode ? '' : '+';\n        }\n\n        // for all strings with length less than 3, just return it (1, 2 etc.)\n        // also return the same text if the selected country has no fixed format\n        if ((text && text.length < 2) || !pattern || !autoFormat) {\n            return disableCountryCode ? text : `+${text}`;\n        }\n\n        const formattedObject = reduce(pattern, (acc, character) => {\n            if (acc.remainingText.length === 0) {\n                return acc;\n            }\n\n            if (character !== '.') {\n                return {\n                    formattedText: acc.formattedText + character,\n                    remainingText: acc.remainingText,\n                };\n            }\n\n            return {\n                formattedText: acc.formattedText + head(acc.remainingText),\n                remainingText: tail(acc.remainingText),\n            };\n        }, {\n            formattedText: '',\n            remainingText: text.split(''),\n        });\n\n        let formattedNumber;\n        if (enableLongNumbers) {\n            formattedNumber = formattedObject.formattedText + formattedObject.remainingText.join('');\n        } else {\n            formattedNumber = formattedObject.formattedText;\n        }\n\n        // Always close brackets\n        if (formattedNumber.includes('(') && !formattedNumber.includes(')')) formattedNumber += ')';\n        return formattedNumber;\n    }\n\n    // Put the cursor to the end of the input (usually after a focus event)\n    cursorToEnd = () => {\n        const { isModernBrowser } = this.props;\n\n        const input = this.inputRef;\n        input.focus();\n        if (isModernBrowser) {\n            const len = input.value.length;\n            input.setSelectionRange(len, len);\n        }\n    }\n\n    getElement = (index) => this.flags[`flag_no_${index}`]\n\n    // return country data from state\n    getCountryData = () => {\n        const { selectedCountry } = this.state;\n\n        if (!selectedCountry) return {};\n\n        return {\n            name: selectedCountry.name || '',\n            dialCode: selectedCountry.dialCode || '',\n            countryCode: selectedCountry.iso2 || '',\n        };\n    }\n\n    handleInput = (e) => {\n        let { selectedCountry: newSelectedCountry, freezeSelection } = this.state;\n        const {\n            selectedCountry, formattedNumber: oldFormattedText, onlyCountries, defaultCountry,\n        } = this.state;\n        const {\n            disableCountryCode, countryCodeEditable, isModernBrowser, onChange,\n        } = this.props;\n\n        let formattedNumber = disableCountryCode ? '' : '+';\n\n        if (!countryCodeEditable) {\n            const updatedInput = `+${newSelectedCountry.dialCode}`;\n            if (e.target.value.length < updatedInput.length) {\n                return;\n            }\n        }\n\n        // Does not exceed 15 digit phone number limit\n        if (e.target.value.replace(/\\D/g, '').length > 15) {\n            return;\n        }\n\n        // if the input is the same as before, must be some special key like enter etc.\n        if (e.target.value === oldFormattedText) {\n            return;\n        }\n\n        // ie hack\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n\n        if (e.target.value.length > 0) {\n            // before entering the number in new format, lets check if the dial code now matches some other country\n            const inputNumber = e.target.value.replace(/\\D/g, '');\n\n            // we don't need to send the whole number to guess the country... only the first 6 characters are enough\n            // the guess country function can then use memoization much more effectively since the set of input it\n            // gets has drastically reduced\n            if (!freezeSelection || selectedCountry.dialCode.length > inputNumber.length) {\n                newSelectedCountry = this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);\n                freezeSelection = false;\n            }\n            // let us remove all non numerals from the input\n            formattedNumber = this.formatNumber(inputNumber, newSelectedCountry.format);\n        }\n\n        let caretPosition = e.target.selectionStart;\n        const diff = formattedNumber.length - oldFormattedText.length;\n\n        this.setState({\n            formattedNumber,\n            freezeSelection,\n            selectedCountry: newSelectedCountry.dialCode\n                ? newSelectedCountry\n                : selectedCountry,\n        }, () => {\n            if (isModernBrowser) {\n                if (diff > 0) {\n                    caretPosition -= diff;\n                }\n\n                const lastChar = formattedNumber.charAt(formattedNumber.length - 1);\n\n                if (lastChar === ')') {\n                    this.inputRef.setSelectionRange(formattedNumber.length - 1, formattedNumber.length - 1);\n                } else if (caretPosition > 0 && oldFormattedText.length >= formattedNumber.length) {\n                    this.inputRef.setSelectionRange(caretPosition, caretPosition);\n                }\n            }\n\n            if (onChange) {\n                onChange(formattedNumber, this.getCountryData());\n            }\n        });\n    }\n\n    handleRefInput = (ref) => {\n        const { inputRef, InputProps } = this.props;\n        this.inputRef = ref;\n\n        let refProp;\n\n        if (inputRef) {\n            refProp = inputRef;\n        } else if (InputProps && InputProps.ref) {\n            refProp = InputProps.ref;\n        }\n\n        if (refProp) {\n            if (typeof refProp === 'function') {\n                refProp(ref);\n            } else {\n                refProp.current = ref;\n            }\n        }\n    };\n\n    handleInputClick = (e) => {\n        const { onClick } = this.props;\n\n        if (onClick) {\n            onClick(e, this.getCountryData());\n        }\n    }\n\n    handleFlagItemClick = (country) => {\n        const { formattedNumber, selectedCountry, onlyCountries } = this.state;\n        const { onChange } = this.props;\n\n        const currentSelectedCountry = selectedCountry;\n        const nextSelectedCountry = isString(country) ? find(onlyCountries, (countryItem) => countryItem.iso2 === country) : find(onlyCountries, country);\n\n        const unformattedNumber = formattedNumber.replace(' ', '').replace('(', '').replace(')', '').replace('-', '');\n        const newNumber = unformattedNumber.length > 1 ? unformattedNumber.replace(currentSelectedCountry.dialCode, nextSelectedCountry.dialCode) : nextSelectedCountry.dialCode;\n\n        const newFormattedNumber = this.formatNumber(newNumber.replace(/\\D/g, ''), nextSelectedCountry.format);\n\n        this.setState({\n            anchorEl: null,\n            selectedCountry: nextSelectedCountry,\n            freezeSelection: true,\n            formattedNumber: newFormattedNumber,\n        }, () => {\n            this.cursorToEnd();\n            if (onChange) {\n                onChange(newFormattedNumber, this.getCountryData());\n            }\n        });\n    }\n\n    handleInputFocus = (e) => {\n        const { selectedCountry } = this.state;\n        const { disableCountryCode, onFocus } = this.props;\n\n        // if the input is blank, insert dial code of the selected country\n        if (this.inputRef) {\n            if (this.inputRef.value === '+' && selectedCountry && !disableCountryCode) {\n                this.setState({\n                    formattedNumber: `+${selectedCountry.dialCode}`,\n                }, () => setTimeout(this.cursorToEnd, 10));\n            }\n        }\n\n        this.setState({ placeholder: '' });\n\n        if (onFocus) {\n            onFocus(e, this.getCountryData());\n        }\n\n        setTimeout(this.cursorToEnd, 10);\n    }\n\n    handleInputBlur = (e) => {\n        const { placeholder, onBlur } = this.props;\n\n        if (!e.target.value) {\n            this.setState({ placeholder });\n        }\n\n        if (onBlur) {\n            onBlur(e, this.getCountryData());\n        }\n    }\n\n    getHighlightCountryIndex = (direction) => {\n        const { highlightCountryIndex: oldHighlightCountryIndex, onlyCountries, preferredCountries } = this.state;\n\n        // had to write own function because underscore does not have findIndex. lodash has it\n        const highlightCountryIndex = oldHighlightCountryIndex + direction;\n\n        if (highlightCountryIndex < 0 || highlightCountryIndex >= (onlyCountries.length + preferredCountries.length)) {\n            return highlightCountryIndex - direction;\n        }\n\n        return highlightCountryIndex;\n    }\n\n    searchCountry = () => {\n        const { queryString, onlyCountries, preferredCountries } = this.state;\n\n        const probableCandidate = this.getProbableCandidate(queryString) || onlyCountries[0];\n        const probableCandidateIndex = findIndex(onlyCountries, probableCandidate) + preferredCountries.length;\n\n        this.scrollTo(this.getElement(probableCandidateIndex), true);\n\n        this.setState({ queryString: '', highlightCountryIndex: probableCandidateIndex });\n    }\n\n    handleKeydown = (e) => {\n        const {\n            anchorEl, highlightCountryIndex, preferredCountries, onlyCountries,\n            queryString, debouncedQueryStingSearcher,\n        } = this.state;\n        const { keys, disabled } = this.props;\n\n        if (!anchorEl || disabled) return;\n\n        // ie hack\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n\n        const moveHighlight = (direction) => {\n            this.setState({\n                highlightCountryIndex: this.getHighlightCountryIndex(direction),\n            }, () => {\n                this.scrollTo(this.getElement(\n                    highlightCountryIndex + preferredCountries.length,\n                ), true);\n            });\n        };\n\n        switch (e.which) {\n            case keys.DOWN:\n                moveHighlight(1);\n                break;\n            case keys.UP:\n                moveHighlight(-1);\n                break;\n            case keys.ENTER:\n                this.handleFlagItemClick(onlyCountries[highlightCountryIndex], e);\n                break;\n            case keys.ESC:\n                this.setState({\n                    anchorEl: null,\n                }, this.cursorToEnd);\n                break;\n            default:\n                if ((e.which >= keys.A && e.which <= keys.Z) || e.which === keys.SPACE) {\n                    this.setState({\n                        queryString: queryString + String.fromCharCode(e.which),\n                    }, debouncedQueryStingSearcher);\n                }\n        }\n    }\n\n    handleInputKeyDown = (e) => {\n        const { keys, onEnterKeyPress, onKeyDown } = this.props;\n        if (e.which === keys.ENTER && onEnterKeyPress) {\n            onEnterKeyPress(e);\n        }\n\n        if (onKeyDown) {\n            onKeyDown(e);\n        }\n    }\n\n    checkIfValid = () => {\n        const { formattedNumber } = this.state;\n        const { isValid } = this.props;\n\n        return isValid(formattedNumber.replace(/\\D/g, ''));\n    };\n\n    updateFormattedNumber = (number) => {\n        const { onlyCountries, defaultCountry } = this.state;\n        const { disableCountryCode } = this.props;\n\n        let countryGuess;\n        let inputNumber = number;\n        let formattedNumber = number;\n\n        // if inputNumber does not start with '+', then use default country's dialing prefix,\n        // otherwise use logic for finding country based on country prefix.\n        if(inputNumber.startsWith('00')){\n            inputNumber =  inputNumber.replace('00', '+')\n        }\n        if (!inputNumber.startsWith('+')) {\n            countryGuess = find(onlyCountries, { iso2: defaultCountry });\n            const dialCode = countryGuess && !startsWith(inputNumber.replace(/\\D/g, ''), countryGuess.dialCode) ? countryGuess.dialCode : '';\n            formattedNumber = this.formatNumber(\n                (disableCountryCode ? '' : dialCode) + inputNumber.replace(/\\D/g, ''),\n                countryGuess ? countryGuess.format : undefined,\n            );\n        } else {\n            inputNumber = inputNumber.replace(/\\D/g, '');\n            countryGuess = this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);\n            formattedNumber = this.formatNumber(inputNumber, countryGuess.format);\n        }\n\n        this.setState({ selectedCountry: countryGuess, formattedNumber });\n    };\n\n    getDropdownProps = () => {\n        const {\n            selectedCountry, anchorEl, preferredCountries, onlyCountries,\n        } = this.state;\n\n        const { classes, dropdownClass, localization, disableDropdown, native, } = this.props;\n        const inputFlagClasses = `flag ${selectedCountry.iso2}`;\n\n        const isSelected = (country) => Boolean(selectedCountry && selectedCountry.dialCode === country.dialCode);\n\n        const dropdownProps = disableDropdown ? {} : {\n            startAdornment: (\n                <InputAdornment\n                    className={classes.positionStart}\n                    position=\"start\"\n                >\n                    {native ? (\n                            <>\n                                <NativeSelect\n                                    id=\"country-menu\"\n                                    open={Boolean(anchorEl)}\n                                    onClose={() => this.setState({ anchorEl: null })}\n                                    className={classes.native}\n                                    classes={{\n                                        root: clsx(classes.nativeRoot, 'native', inputFlagClasses),\n                                        select: classes.nativeSelect,\n                                    }}\n                                    onChange={(e) => this.handleFlagItemClick(e.target.value)}\n                                    disableUnderline\n                                >\n                                    {!!preferredCountries.length && map(preferredCountries, (country, index) => (\n                                        <Item\n                                            key={`preferred_${country.iso2}_${index}`}\n                                            itemRef={(node) => {\n                                                this.flags[`flag_no_${index}`] = node;\n                                            }}\n                                            name={country.name}\n                                            iso2={country.iso2}\n                                            dialCode={country.dialCode}\n                                            localization={localization && localization[country.name]}\n                                            native\n                                        />\n                                    ))}\n\n                                    {map(onlyCountries, (country, index) => (\n                                        <Item\n                                            key={`preferred_${country.iso2}_${index}`}\n                                            itemRef={(node) => {\n                                                this.flags[`flag_no_${index}`] = node;\n                                            }}\n                                            name={country.name}\n                                            iso2={country.iso2}\n                                            dialCode={country.dialCode}\n                                            localization={localization && localization[country.name]}\n                                            native\n                                        />\n                                    ))}\n                                </NativeSelect>\n                            </>\n                        )\n                        : (\n                            <>\n                                <Button\n                                    className={classes.flagButton}\n                                    aria-owns={anchorEl ? 'country-menu' : null}\n                                    aria-label=\"Select country\"\n                                    onClick={(e) => this.setState({ anchorEl: e.currentTarget })}\n                                    aria-haspopup\n                                >\n                                    <div className={inputFlagClasses} />\n                                </Button>\n                                <Menu\n                                    keepMounted\n                                    className={dropdownClass}\n                                    id=\"country-menu\"\n                                    anchorEl={anchorEl}\n                                    open={Boolean(anchorEl)}\n                                    onClose={() => this.setState({ anchorEl: null })}\n                                >\n                                    {!!preferredCountries.length && map(preferredCountries, (country, index) => (\n                                        <Item\n                                            key={`preferred_${country.iso2}_${index}`}\n                                            itemRef={(node) => {\n                                                this.flags[`flag_no_${index}`] = node;\n                                            }}\n                                            selected={isSelected(country)}\n                                            onClick={() => this.handleFlagItemClick(country)}\n                                            name={country.name}\n                                            iso2={country.iso2}\n                                            dialCode={country.dialCode}\n                                            localization={localization && localization[country.name]}\n                                        />\n                                    ))}\n\n                                    {!!preferredCountries.length && <Divider />}\n\n                                    {map(onlyCountries, (country, index) => (\n                                        <Item\n                                            key={`preferred_${country.iso2}_${index}`}\n                                            itemRef={(node) => {\n                                                this.flags[`flag_no_${index}`] = node;\n                                            }}\n                                            selected={isSelected(country)}\n                                            onClick={() => this.handleFlagItemClick(country)}\n                                            name={country.name}\n                                            iso2={country.iso2}\n                                            dialCode={country.dialCode}\n                                            localization={localization && localization[country.name]}\n                                        />\n                                    ))}\n                                </Menu>\n                            </>\n                        )}\n                </InputAdornment>\n            ),\n        };\n\n        return dropdownProps;\n    };\n\n    render() {\n        const {\n            formattedNumber, placeholder: statePlaceholder,\n        } = this.state;\n\n        const {\n            // start placeholder props\n            native, defaultCountry, excludeCountries, onlyCountries, preferredCountries,\n            dropdownClass, autoFormat, disableAreaCodes, isValid, disableCountryCode,\n            disableDropdown, enableLongNumbers, countryCodeEditable, onEnterKeyPress,\n            isModernBrowser, classes, keys, localization, placeholder, regions, onChange,\n            value,\n            // end placeholder props\n            inputClass, error, InputProps,\n            ...restProps\n        } = this.props;\n\n        const dropdownProps = this.getDropdownProps();\n\n        return (\n            <TextField\n                placeholder={statePlaceholder}\n                value={formattedNumber}\n                className={inputClass}\n                inputRef={this.handleRefInput}\n                error={error || !this.checkIfValid()}\n                onChange={this.handleInput}\n                onClick={this.handleInputClick}\n                onFocus={this.handleInputFocus}\n                onBlur={this.handleInputBlur}\n                onKeyDown={this.handleInputKeyDown}\n                type=\"tel\"\n                InputProps={{\n                    ...dropdownProps,\n                    ...InputProps,\n                }}\n                {...restProps}\n            />\n        );\n    }\n}\n\nPhoneInput.propTypes = {\n    classes: PropTypes.object,\n    excludeCountries: PropTypes.arrayOf(PropTypes.string),\n    onlyCountries: PropTypes.arrayOf(PropTypes.string),\n    preferredCountries: PropTypes.arrayOf(PropTypes.string),\n    defaultCountry: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    disabled: PropTypes.bool,\n    error: PropTypes.bool,\n    variant: PropTypes.string,\n    native: PropTypes.bool,\n    inputClass: PropTypes.string,\n    dropdownClass: PropTypes.string,\n    InputProps: PropTypes.object,\n    inputProps: PropTypes.object,\n    inputRef: PropTypes.func,\n    autoFormat: PropTypes.bool,\n    disableAreaCodes: PropTypes.bool,\n    disableCountryCode: PropTypes.bool,\n    disableDropdown: PropTypes.bool,\n    enableLongNumbers: PropTypes.bool,\n    countryCodeEditable: PropTypes.bool,\n    regions: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    localization: PropTypes.object,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    isValid: PropTypes.func,\n    isModernBrowser: PropTypes.func,\n    onEnterKeyPress: PropTypes.func,\n    keys: PropTypes.object,\n};\n\nPhoneInput.defaultProps = {\n    classes: {},\n    excludeCountries: [],\n    onlyCountries: [],\n    preferredCountries: [],\n    defaultCountry: '',\n    placeholder: '+1 (702) 123-4567',\n    disabled: false,\n    error: false,\n    variant: 'standard',\n    native: false,\n    inputClass: '',\n    dropdownClass: '',\n    autoFormat: true,\n    disableAreaCodes: false,\n    isValid: (inputNumber) => some(countryData.allCountries, (country) => startsWith(inputNumber, country.dialCode) || startsWith(country.dialCode, inputNumber)),\n    disableCountryCode: false,\n    disableDropdown: false,\n    enableLongNumbers: true,\n    countryCodeEditable: true,\n    regions: '',\n    localization: {},\n    onEnterKeyPress: () => { },\n    onChange: () => { },\n    isModernBrowser: () => (document.createElement ? Boolean(document.createElement('input').setSelectionRange) : false),\n    keys: {\n        UP: 38,\n        DOWN: 40,\n        RIGHT: 39,\n        LEFT: 37,\n        ENTER: 13,\n        ESC: 27,\n        PLUS: 43,\n        A: 65,\n        Z: 90,\n        SPACE: 32,\n    },\n};\n\nPhoneInput.displayName = 'PhoneInput';\n\nexport default withStyles(style)(PhoneInput)"]},"metadata":{},"sourceType":"module"}