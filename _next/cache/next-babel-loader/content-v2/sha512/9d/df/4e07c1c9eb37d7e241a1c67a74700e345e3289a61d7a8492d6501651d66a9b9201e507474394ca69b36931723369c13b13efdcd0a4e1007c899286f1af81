{"ast":null,"code":"import _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/Preferences/RemarkRadio.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { useSelector } from 'react-redux';\nimport { setToState as _setToState, updateState as _updateState } from \"../../../../state/actions\";\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport { connect } from 'react-redux';\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { TextField } from \"@material-ui/core\";\n\nvar RemarkRadio = function RemarkRadio(props) {\n  _s();\n\n  var _state$profile$radioG, _state$profile$radioG2, _state$profile$radioG3, _state$profile$radioG4;\n\n  var state = props.state,\n      remark = props.remark,\n      isDisabled = props.isDisabled,\n      setRadioGroupValue = props.setRadioGroupValue,\n      setToState = props.setToState;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; //redux\n\n\n  var clientBase = useSelector(function (state) {\n    var _state$orest, _state$orest$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$state = _state$orest.state) === null || _state$orest$state === void 0 ? void 0 : _state$orest$state.client) || false;\n  });\n  var selectedRemarkList = useSelector(function (state) {\n    var _state$orest2, _state$orest2$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest2 = state.orest) === null || _state$orest2 === void 0 ? void 0 : (_state$orest2$state = _state$orest2.state) === null || _state$orest2$state === void 0 ? void 0 : _state$orest2$state.selectedRemarkList) || false;\n  });\n  useEffect(function () {\n    var active = true;\n\n    if (active) {\n      if (isLoading) {\n        return undefined;\n      }\n\n      setIsLoading(true);\n\n      if (remark) {\n        if (clientBase) {\n          if (selectedRemarkList) {\n            var checkExistRemark = selectedRemarkList.find(function (e) {\n              return e.remarkid === remark.id;\n            });\n\n            if (checkExistRemark) {\n              setRadioGroupValue(String(remark.id));\n\n              var data = _defineProperty({}, remark.remarkgrid, remark !== null && remark !== void 0 && remark.hasnote ? {\n                canBeDelete: checkExistRemark.gid,\n                canBeInsert: false,\n                id: remark.id,\n                note: checkExistRemark.note,\n                isUpdateNote: false\n              } : {\n                canBeDelete: checkExistRemark.gid,\n                canBeInsert: false,\n                id: remark.id\n              });\n\n              setToState('guest', ['profile', 'radioGroupAllGid'], Object.assign(state.profile.radioGroupAllGid, data));\n              setToState('guest', ['profile', 'radioGroupAllGidBase'], Object.assign(state.profile.radioGroupAllGidBase, data));\n            }\n\n            setIsLoading(false);\n          } else {\n            setIsLoading(false);\n          }\n        }\n      } else {\n        setIsLoading(false);\n      }\n    }\n\n    return function () {\n      active = false;\n    };\n  }, [selectedRemarkList]);\n\n  var handleChangeRemark = function handleChangeRemark(event) {\n    var _state$profile, _group$remark$remarkg, _group$remark$remarkg2, _group$remark$remarkg3;\n\n    var oldValue = selectedRemarkList === null || selectedRemarkList === void 0 ? void 0 : selectedRemarkList.find(function (e) {\n      return e.remarkid === remark.id;\n    });\n    var value = event.target.value;\n    var group = (state === null || state === void 0 ? void 0 : (_state$profile = state.profile) === null || _state$profile === void 0 ? void 0 : _state$profile.radioGroupAllGid) || false;\n\n    var obj = _defineProperty({}, remark.remarkgrid, {\n      canBeDelete: group && ((_group$remark$remarkg = group[remark.remarkgrid]) === null || _group$remark$remarkg === void 0 ? void 0 : _group$remark$remarkg.canBeDelete) || false,\n      canBeInsert: oldValue ? false : Number(value),\n      id: remark.id,\n      note: group && ((_group$remark$remarkg2 = group[remark.remarkgrid]) === null || _group$remark$remarkg2 === void 0 ? void 0 : _group$remark$remarkg2.note) || null,\n      hasNote: remark === null || remark === void 0 ? void 0 : remark.hasnote,\n      isUpdateNote: group && ((_group$remark$remarkg3 = group[remark.remarkgrid]) === null || _group$remark$remarkg3 === void 0 ? void 0 : _group$remark$remarkg3.isUpdateNote) || false,\n      info: {\n        remarkgr: remark.remarkgrdesc,\n        remark: remark.description\n      }\n    });\n\n    if (oldValue) {\n      if (obj[remark.remarkgrid].info) {\n        delete obj[remark.remarkgrid].info;\n      }\n    }\n\n    setToState('guest', ['profile', 'radioGroupAllGid'], Object.assign(state.profile.radioGroupAllGid, obj));\n    setRadioGroupValue(value);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(FormControlLabel, {\n    onChange: handleChangeRemark,\n    name: String(remark.id),\n    value: String(remark.id),\n    control: __jsx(Radio, {\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 22\n      }\n    }),\n    disabled: isDisabled || isLoading,\n    label: t(remark.description),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), (remark === null || remark === void 0 ? void 0 : remark.hasnote) && __jsx(TextField, {\n    value: ((_state$profile$radioG = state.profile.radioGroupAllGid) === null || _state$profile$radioG === void 0 ? void 0 : (_state$profile$radioG2 = _state$profile$radioG[remark.remarkgrid]) === null || _state$profile$radioG2 === void 0 ? void 0 : _state$profile$radioG2.note) || '',\n    disabled: remark.hasnote && ((_state$profile$radioG3 = state.profile.radioGroupAllGid) === null || _state$profile$radioG3 === void 0 ? void 0 : (_state$profile$radioG4 = _state$profile$radioG3[remark.remarkgrid]) === null || _state$profile$radioG4 === void 0 ? void 0 : _state$profile$radioG4.id) !== remark.id,\n    onChange: function onChange(e) {\n      var _state$profile$radioG5, _state$profile$radioG6, _state$profile$radioG7;\n\n      setToState('guest', ['profile', 'radioGroupAllGid', remark.remarkgrid], _objectSpread(_objectSpread({}, (_state$profile$radioG5 = state.profile.radioGroupAllGid) === null || _state$profile$radioG5 === void 0 ? void 0 : _state$profile$radioG5[remark.remarkgrid]), {}, {\n        note: e.target.value,\n        isUpdateNote: ((_state$profile$radioG6 = state.profile.radioGroupAllGidBase) === null || _state$profile$radioG6 === void 0 ? void 0 : (_state$profile$radioG7 = _state$profile$radioG6[remark === null || remark === void 0 ? void 0 : remark.id]) === null || _state$profile$radioG7 === void 0 ? void 0 : _state$profile$radioG7.note) !== e.target.value\n      }));\n    },\n    variant: 'outlined',\n    size: 'small',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }));\n};\n\n_s(RemarkRadio, \"VE8p39n+tCdHtcCwkopmsMgxZnc=\", false, function () {\n  return [useTranslation, useSelector, useSelector];\n});\n\n_c = RemarkRadio;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setToState: function setToState(stateType, stateName, value) {\n      return dispatch(_setToState(stateType, stateName, value));\n    },\n    updateState: function updateState(stateType, stateName, value) {\n      return dispatch(_updateState(stateType, stateName, value));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemarkRadio);\n\nvar _c;\n\n$RefreshReg$(_c, \"RemarkRadio\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/Preferences/RemarkRadio.js"],"names":["React","useContext","useEffect","useState","FormControlLabel","Radio","useSelector","setToState","updateState","useTranslation","connect","Checkbox","TextField","RemarkRadio","props","state","remark","isDisabled","setRadioGroupValue","isLoading","setIsLoading","t","clientBase","orest","client","selectedRemarkList","active","undefined","checkExistRemark","find","e","remarkid","id","String","data","remarkgrid","hasnote","canBeDelete","gid","canBeInsert","note","isUpdateNote","Object","assign","profile","radioGroupAllGid","radioGroupAllGidBase","handleChangeRemark","event","oldValue","value","target","group","obj","Number","hasNote","info","remarkgr","remarkgrdesc","description","display","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Radio from '@material-ui/core/Radio'\nimport { useSelector } from 'react-redux'\nimport { setToState, updateState } from \"../../../../state/actions\";\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport { connect } from 'react-redux'\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport {TextField} from \"@material-ui/core\";\n\nconst RemarkRadio = (props) => {\n    const { state, remark, isDisabled, setRadioGroupValue, setToState } = props\n    const [isLoading, setIsLoading] = useState(false)\n    const { t } = useTranslation()\n\n    //redux\n    const clientBase = useSelector((state) => state?.orest?.state?.client || false)\n    const selectedRemarkList = useSelector((state) => state?.orest?.state?.selectedRemarkList || false);\n\n    useEffect(() => {\n        let active = true\n        if (active) {\n            if (isLoading) {\n                return undefined\n            }\n\n            setIsLoading(true)\n            if (remark) {\n                if (clientBase) {\n                    if(selectedRemarkList) {\n                        const checkExistRemark = selectedRemarkList.find(e => e.remarkid === remark.id)\n                        if(checkExistRemark) {\n                            setRadioGroupValue(String(remark.id))\n                            let data = {\n                                [remark.remarkgrid]: remark?.hasnote ? {\n                                    canBeDelete: checkExistRemark.gid,\n                                    canBeInsert: false,\n                                    id: remark.id,\n                                    note: checkExistRemark.note,\n                                    isUpdateNote: false\n                                } : {\n                                    canBeDelete: checkExistRemark.gid,\n                                    canBeInsert: false,\n                                    id: remark.id,\n                                }\n                            }\n\n                            setToState('guest', ['profile', 'radioGroupAllGid'], Object.assign(state.profile.radioGroupAllGid, data))\n                            setToState('guest', ['profile', 'radioGroupAllGidBase'], Object.assign(state.profile.radioGroupAllGidBase, data))\n\n                        }\n                        setIsLoading(false);\n\n                    } else {\n                        setIsLoading(false);\n                    }\n                }\n            } else {\n                setIsLoading(false)\n            }\n        }\n        return () => {\n            active = false\n        }\n    }, [selectedRemarkList])\n\n    const handleChangeRemark = (event) => {\n        const oldValue = selectedRemarkList?.find(e => e.remarkid === remark.id)\n        const value = event.target.value\n        const group = state?.profile?.radioGroupAllGid || false;\n\n        const obj = {\n            [remark.remarkgrid]: {\n                canBeDelete: group && group[remark.remarkgrid]?.canBeDelete || false,\n                canBeInsert: oldValue ? false : Number(value),\n                id: remark.id,\n                note: group && group[remark.remarkgrid]?.note || null,\n                hasNote: remark?.hasnote,\n                isUpdateNote: group && group[remark.remarkgrid]?.isUpdateNote || false,\n                info: {\n                    remarkgr: remark.remarkgrdesc,\n                    remark: remark.description\n                }\n            }\n        }\n        if(oldValue) {\n            if(obj[remark.remarkgrid].info) {\n                delete obj[remark.remarkgrid].info\n            }\n        }\n\n        setToState('guest', ['profile', 'radioGroupAllGid'], Object.assign(state.profile.radioGroupAllGid, obj))\n        setRadioGroupValue(value);\n    }\n\n    return (\n    <div style={{display: 'flex'}}>\n        <FormControlLabel\n            onChange={handleChangeRemark}\n            name={String(remark.id)}\n            value={String(remark.id)}\n            control={<Radio color=\"primary\"/>}\n            disabled={isDisabled || isLoading}\n            label={t(remark.description)}\n        />\n        {\n            remark?.hasnote && (\n                <TextField\n                    value={state.profile.radioGroupAllGid?.[remark.remarkgrid]?.note || ''}\n                    disabled={remark.hasnote && state.profile.radioGroupAllGid?.[remark.remarkgrid]?.id !== remark.id}\n                    onChange={(e) => {\n                        setToState(\n                            'guest',\n                            ['profile', 'radioGroupAllGid', remark.remarkgrid],\n                            {\n                                ...state.profile.radioGroupAllGid?.[remark.remarkgrid],\n                                note: e.target.value,\n                                isUpdateNote: state.profile.radioGroupAllGidBase?.[remark?.id]?.note !== e.target.value\n                            }\n                        )\n                    }}\n                    variant={'outlined'}\n                    size={'small'}\n                />\n            )\n        }\n    </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemarkRadio)\n"]},"metadata":{},"sourceType":"module"}