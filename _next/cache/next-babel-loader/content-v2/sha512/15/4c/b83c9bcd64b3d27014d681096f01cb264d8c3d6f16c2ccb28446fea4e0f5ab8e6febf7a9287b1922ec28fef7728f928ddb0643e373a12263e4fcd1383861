{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/public/components/info/event-reservation/product-menu-list.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState, useRef, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setToState as _setToState, updateState as _updateState } from 'state/actions';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport MenuProductCard from './menu-product-card';\nimport MenuCard from './menu-card';\nimport BackIcon from '@material-ui/icons/KeyboardBackspace';\nimport Divider from '@material-ui/core/Divider';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport WebCmsGlobal from 'components/webcms-global';\n\nvar ProductMenuList = function ProductMenuList(props) {\n  _s();\n\n  var menuGroupAndProductList = props.menuGroupAndProductList,\n      isAddActive = props.isAddActive,\n      isOnlyProduct = props.isOnlyProduct,\n      getSelectedGroupOrItem = props.getSelectedGroupOrItem,\n      isSpaRes = props.isSpaRes,\n      sPGroupName = props.sPGroupName,\n      setSPGroupName = props.setSPGroupName;\n\n  var _useState = useState(null),\n      selectedProduct = _useState[0],\n      setSelectedProduct = _useState[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS;\n\n  var isPortal = GENERAL_SETTINGS.ISPORTAL;\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, isPortal ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 25\n    }\n  }, __jsx(Box, {\n    component: Grid,\n    xs: 12,\n    sm: 12,\n    md: sPGroupName ? 5 : 12,\n    display: {\n      xs: sPGroupName ? 'none' : 'block',\n      sm: 'block'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 33\n    }\n  }, isOnlyProduct ? menuGroupAndProductList.map(function (item, index) {\n    return __jsx(MenuCard, {\n      key: index,\n      selectGroupName: item === null || item === void 0 ? void 0 : item.title,\n      description: item === null || item === void 0 ? void 0 : item.title,\n      onClick: function onClick(e) {\n        setSPGroupName(e);\n        setSelectedProduct(item);\n      },\n      imageUrl: item.imageurl,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 53\n      }\n    });\n  }) : Object.keys(menuGroupAndProductList).map(function (groupName, index) {\n    return __jsx(MenuCard, {\n      key: index,\n      selectGroupName: sPGroupName,\n      description: groupName,\n      onClick: function onClick(e) {\n        return setSPGroupName(e);\n      },\n      imageUrl: GENERAL_SETTINGS.STATIC_URL + menuGroupAndProductList[groupName][0].spgroupimageurl,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 56\n      }\n    });\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    md: sPGroupName ? 7 : false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 28\n    }\n  }, sPGroupName && menuGroupAndProductList[sPGroupName].length > 0 && __jsx(Grid, {\n    container: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 36\n    }\n  }, __jsx(Box, {\n    item: true,\n    xs: 1,\n    style: {\n      width: \"0\",\n      maxWidth: \"0\",\n      paddingRight: \"16px\"\n    },\n    display: {\n      xs: 'none',\n      sm: 'block'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 40\n    }\n  }, __jsx(Divider, {\n    orientation: \"vertical\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 44\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 11,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 40\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: sPGroupName ? 'block' : 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 44\n    }\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 48\n    }\n  }, __jsx(IconButton, {\n    onClick: function onClick() {\n      return setSPGroupName(null);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 52\n    }\n  }, __jsx(BackIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 56\n    }\n  }))), __jsx(Grid, {\n    container: true,\n    style: {\n      maxHeight: \"50vh\",\n      overflowY: \"auto\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 48\n    }\n  }, menuGroupAndProductList[sPGroupName].map(function (pList, pIndex) {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      key: pIndex,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 56\n      }\n    }, __jsx(MenuProductCard, {\n      isAddActive: isAddActive,\n      productItem: pList,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 60\n      }\n    }));\n  })))))))) : __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: sPGroupName === null ? 'block' : 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 37\n    }\n  }, isOnlyProduct ? menuGroupAndProductList && menuGroupAndProductList.map(function (item, index) {\n    return __jsx(MenuCard, {\n      key: index,\n      selectGroupName: item === null || item === void 0 ? void 0 : item.title,\n      description: item === null || item === void 0 ? void 0 : item.description,\n      onClick: function onClick(e) {\n        setSPGroupName(e);\n        setSelectedProduct(item);\n        if (typeof getSelectedGroupOrItem === 'function') getSelectedGroupOrItem(e);\n      },\n      imageUrl: item.imageurl,\n      isOnlyProduct: isOnlyProduct,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 57\n      }\n    });\n  }) : Object.keys(menuGroupAndProductList).map(function (groupName, index) {\n    return __jsx(MenuCard, {\n      key: index,\n      selectGroupName: sPGroupName,\n      description: groupName,\n      onClick: function onClick(e) {\n        return setSPGroupName(e);\n      },\n      imageUrl: GENERAL_SETTINGS.STATIC_URL + menuGroupAndProductList[groupName][0].spgroupimageurl,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 60\n      }\n    });\n  }))))), (isOnlyProduct || sPGroupName && menuGroupAndProductList[sPGroupName].length > 0) && __jsx(\"div\", {\n    style: {\n      display: sPGroupName ? 'block' : 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 33\n    }\n  }, isOnlyProduct ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    key: sPGroupName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 45\n    }\n  }, sPGroupName && selectedProduct && __jsx(MenuProductCard, {\n    isAddActive: isAddActive,\n    productItem: selectedProduct,\n    isOnlyProduct: isOnlyProduct,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 84\n    }\n  })) : menuGroupAndProductList[sPGroupName].map(function (pList, pIndex) {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      key: pIndex,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 49\n      }\n    }, __jsx(MenuProductCard, {\n      isAddActive: isAddActive,\n      productItem: pList,\n      isOnlyProduct: isSpaRes,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 53\n      }\n    }));\n  })))));\n};\n\n_s(ProductMenuList, \"7Y0KiEdrJCoHcnIFGZ8pg3saAk4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ProductMenuList;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setToState: function setToState(stateType, stateName, value) {\n      return dispatch(_setToState(stateType, stateName, value));\n    },\n    updateState: function updateState(stateType, stateName, value) {\n      return dispatch(_updateState(stateType, stateName, value));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductMenuList);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductMenuList\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/public/components/info/event-reservation/product-menu-list.js"],"names":["React","useContext","useState","useRef","useEffect","connect","setToState","updateState","Button","IconButton","Box","Grid","MenuProductCard","MenuCard","BackIcon","Divider","useTranslation","WebCmsGlobal","ProductMenuList","props","menuGroupAndProductList","isAddActive","isOnlyProduct","getSelectedGroupOrItem","isSpaRes","sPGroupName","setSPGroupName","selectedProduct","setSelectedProduct","t","GENERAL_SETTINGS","isPortal","ISPORTAL","xs","sm","map","item","index","title","e","imageurl","Object","keys","groupName","STATIC_URL","spgroupimageurl","length","width","maxWidth","paddingRight","display","textAlign","maxHeight","overflowY","pList","pIndex","description","mapStateToProps","state","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useRef, useEffect} from 'react'\nimport { connect } from 'react-redux'\nimport { setToState, updateState } from 'state/actions'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport MenuProductCard from './menu-product-card'\nimport MenuCard from './menu-card'\nimport BackIcon from '@material-ui/icons/KeyboardBackspace';\nimport Divider from '@material-ui/core/Divider'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport WebCmsGlobal from 'components/webcms-global'\n\nconst ProductMenuList = (props) => {\n    const { menuGroupAndProductList, isAddActive, isOnlyProduct, getSelectedGroupOrItem, isSpaRes, sPGroupName, setSPGroupName } = props\n    const [selectedProduct, setSelectedProduct] = useState(null)\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const isPortal = GENERAL_SETTINGS.ISPORTAL;\n\n    return (\n        <React.Fragment>\n            {\n                isPortal ? (\n                    <div>\n                        <Grid container spacing={2}>\n                            <Box\n                                component={Grid}\n                                xs={12}\n                                sm={12}\n                                md={sPGroupName ? 5 : 12}\n                                display={{xs: (sPGroupName ? 'none' : 'block'), sm: 'block' }}\n                            >\n                                <Grid container spacing={2}>\n                                    {\n                                        isOnlyProduct ? (\n                                            menuGroupAndProductList.map((item, index) => {\n                                                return (\n                                                    <MenuCard\n                                                        key={index}\n                                                        selectGroupName={item?.title}\n                                                        description={item?.title}\n                                                        onClick={(e) => {\n                                                            setSPGroupName(e)\n                                                            setSelectedProduct(item)}\n                                                        }\n                                                        imageUrl={item.imageurl}\n                                                    />\n                                                )\n                                            })\n                                        ) : (\n                                            Object.keys(menuGroupAndProductList).map((groupName, index) => {\n                                                return <MenuCard key={index} selectGroupName={sPGroupName} description={groupName} onClick={(e) => setSPGroupName(e)} imageUrl={GENERAL_SETTINGS.STATIC_URL + menuGroupAndProductList[groupName][0].spgroupimageurl} />\n                                            })\n                                        )\n                                    }\n\n                                </Grid>\n                            </Box>\n                           <Grid item xs={12} sm={12} md={sPGroupName ? 7 : false}>\n                               {sPGroupName && menuGroupAndProductList[sPGroupName].length > 0 && (\n                                   <Grid container>\n                                       <Box\n                                           item\n                                           xs={1}\n                                           style={{width: \"0\", maxWidth: \"0\", paddingRight: \"16px\"}}\n                                           display={{xs: 'none', sm: 'block'}}\n                                       >\n                                           <Divider orientation={\"vertical\"}/>\n                                       </Box>\n                                       <Grid item xs={12} sm={11}>\n                                           <div style={{ display: sPGroupName ? 'block' : 'none' }}>\n                                               <div style={{textAlign: \"right\"}}>\n                                                   <IconButton onClick={()=> setSPGroupName(null)}>\n                                                       <BackIcon />\n                                                   </IconButton>\n                                               </div>\n                                               <Grid container style={{maxHeight:\"50vh\", overflowY: \"auto\"}}>\n                                                   {menuGroupAndProductList[sPGroupName].map((pList, pIndex) => (\n                                                       <Grid item xs={12}  key={pIndex}>\n                                                           <MenuProductCard isAddActive={isAddActive} productItem={pList} />\n                                                       </Grid>\n                                                   ))}\n                                               </Grid>\n                                           </div>\n                                       </Grid>\n                                   </Grid>\n                                  )\n                               }\n                           </Grid>\n                        </Grid>\n                    </div>\n                ) : (\n                    <React.Fragment>\n                        <div\n                            style={{ display: sPGroupName === null ? 'block' : 'none'}}\n                        >\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <Grid container spacing={2}>\n                                        {\n                                            isOnlyProduct ? (\n                                                menuGroupAndProductList && menuGroupAndProductList.map((item, index) => {\n                                                    return (\n                                                        <MenuCard\n                                                            key={index}\n                                                            selectGroupName={item?.title}\n                                                            description={item?.description}\n                                                            onClick={(e) => {\n                                                                setSPGroupName(e)\n                                                                setSelectedProduct(item)\n                                                               if(typeof getSelectedGroupOrItem === 'function') getSelectedGroupOrItem(e)\n                                                            }}\n                                                            imageUrl={item.imageurl}\n                                                            isOnlyProduct={isOnlyProduct}\n                                                        />\n                                                    )\n                                                })\n                                            ) : (\n                                                Object.keys(menuGroupAndProductList).map((groupName, index) => {\n                                                    return <MenuCard key={index} selectGroupName={sPGroupName} description={groupName} onClick={(e) => setSPGroupName(e)} imageUrl={GENERAL_SETTINGS.STATIC_URL + menuGroupAndProductList[groupName][0].spgroupimageurl} />\n                                                })\n                                            )\n                                        }\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </div>\n                        {(isOnlyProduct || (sPGroupName && menuGroupAndProductList[sPGroupName].length > 0)) && (\n                            <div style={{ display: sPGroupName ? 'block' : 'none'}}>\n                                <Grid container spacing={2}>\n                                    {\n                                        isOnlyProduct ? (\n                                            <Grid item xs={12} key={sPGroupName}>\n                                                {sPGroupName && selectedProduct && <MenuProductCard isAddActive={isAddActive} productItem={selectedProduct} isOnlyProduct={isOnlyProduct}/>}\n                                            </Grid>\n                                        ) : (\n                                            menuGroupAndProductList[sPGroupName].map((pList, pIndex) => (\n                                                <Grid item xs={12} key={pIndex}>\n                                                    <MenuProductCard isAddActive={isAddActive} productItem={pList} isOnlyProduct={isSpaRes}/>\n                                                </Grid>\n                                            ))\n                                        )\n                                    }\n                                </Grid>\n                            </div>)\n                        }\n                    </React.Fragment>\n                )\n            }\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductMenuList)\n"]},"metadata":{},"sourceType":"module"}