{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/Details/RoomSelection/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport { UseOrest } from '@webcms/orest';\nimport { connect, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport Alert from '@material-ui/lab/Alert';\nimport WebCmsGlobal from 'components/webcms-global';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport RoomCard from './RoomCard';\nimport { useSnackbar } from 'notistack';\nimport { updateState as _updateState } from 'state/actions';\nimport LoadingSpinner from 'components/LoadingSpinner';\nvar CleanAndCheckInRoomStatus = 'VC';\n\nvar RoomSelection = function RoomSelection(_ref) {\n  _s();\n\n  var updateState = _ref.updateState,\n      open = _ref.open,\n      _onClose = _ref.onClose,\n      useClientOrestState = _ref.useClientOrestState,\n      useClientReservation = _ref.useClientReservation,\n      confirmClassName = _ref.confirmClassName;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS;\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var _useState = useState(null),\n      chooseRoomNo = _useState[0],\n      setChooseRoomNo = _useState[1];\n\n  var _useState2 = useState(false),\n      roomBookListData = _useState2[0],\n      setRoomBookListData = _useState2[1];\n\n  var _useState3 = useState(false),\n      isLoading = _useState3[0],\n      setIsLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      isPatchLoading = _useState4[0],\n      setIsPatchLoading = _useState4[1];\n\n  var useToken = useSelector(function (state) {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  useEffect(function () {\n    var active = true;\n\n    if (active && open) {\n      setIsLoading(true);\n      var roomBookListQuery = {\n        startdate: useClientReservation.checkin,\n        enddate: useClientReservation.checkout,\n        reservno: useClientReservation.reservno,\n        roomtypeid: (useClientReservation === null || useClientReservation === void 0 ? void 0 : useClientReservation.roomtypeid) || null,\n        hotelrefno: useClientReservation.hotelrefno,\n        limit: 0\n      };\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'room/book/list',\n        token: useToken,\n        params: roomBookListQuery\n      }).then(function (roomBookListResponse) {\n        if (active) {\n          if (roomBookListResponse.status === 200 && roomBookListResponse.data.count > 0) {\n            setRoomBookListData(roomBookListResponse.data.data);\n            setIsLoading(false);\n          } else {\n            setRoomBookListData(null);\n            setIsLoading(false);\n          }\n        }\n      })[\"catch\"](function () {\n        setRoomBookListData(null);\n        setIsLoading(false);\n      });\n    }\n\n    return function () {\n      active = false;\n    };\n  }, [open]);\n\n  var setRoomNoForReservation = function setRoomNoForReservation(roomNo, hotelrefno) {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: \"reservat/patch/\".concat(useClientReservation.gid),\n      method: 'patch',\n      token: useToken,\n      params: {\n        hotelrefno: hotelrefno\n      },\n      data: {\n        roomno: roomNo\n      }\n    }).then(function (reservatPatchResponse) {\n      if (reservatPatchResponse.status === 200 && reservatPatchResponse.data.count > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    })[\"catch\"](function () {\n      return false;\n    });\n  };\n\n  var getClientReservNo = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(clientId) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'client/reservno',\n                token: useToken,\n                params: {\n                  clientid: clientId,\n                  isgapp: true\n                }\n              }).then(function (clientReservnoResponse) {\n                if (clientReservnoResponse.status === 200 && clientReservnoResponse.data.count > 0) {\n                  updateState('guest', 'changeHotelRefno', clientReservnoResponse.data.data.hotelrefno);\n                  updateState('guest', 'changeHotelName', clientReservnoResponse.data.data.hotelname);\n                  updateState('guest', 'clientReservation', clientReservnoResponse.data.data);\n                } else {\n                  updateState('guest', 'clientReservation', null);\n                }\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getClientReservNo(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSetRoomNo = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var isRoomSelected;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setIsPatchLoading(true);\n              _context2.next = 3;\n              return setRoomNoForReservation(chooseRoomNo, useClientReservation.hotelrefno);\n\n            case 3:\n              isRoomSelected = _context2.sent;\n\n              if (!isRoomSelected) {\n                _context2.next = 14;\n                break;\n              }\n\n              updateState('guest', 'clientReservIsLoading', true);\n              _context2.next = 8;\n              return getClientReservNo(useClientOrestState.id);\n\n            case 8:\n              enqueueSnackbar(t('str_theRoomHasBeenSelectedYouCanCheckIn'), {\n                variant: 'success'\n              });\n              updateState('guest', 'clientReservIsLoading', false);\n              setIsPatchLoading(false);\n\n              _onClose();\n\n              _context2.next = 16;\n              break;\n\n            case 14:\n              enqueueSnackbar(t('str_theRoomWasNotSelectedYouCanTryAgainWithADifferentRoom'), {\n                variant: 'warning'\n              });\n              setIsPatchLoading(false);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSetRoomNo() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Dialog, {\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: open,\n    onClose: function onClose() {\n      return _onClose();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, __jsx(DialogTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, t('str_selectYourRoom')), __jsx(DialogContent, {\n    dividers: true,\n    style: {\n      overflowX: 'hidden',\n      overflowY: 'scroll'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, isLoading ? __jsx(LoadingSpinner, {\n    size: 40,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 30\n    }\n  }) : __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 23\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, __jsx(Alert, {\n    severity: \"info\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }, t('str_clickOnTheRoomYouWantToSelectAndThenPressTheConfirmButton'))), roomBookListData && roomBookListData.filter(function (room) {\n    return room.roomstate === CleanAndCheckInRoomStatus;\n  }).length > 0 ? roomBookListData.filter(function (room) {\n    return room.roomstate === CleanAndCheckInRoomStatus;\n  }).map(function (item, i) {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 37\n      }\n    }, __jsx(RoomCard, {\n      roomNo: item.roomno,\n      roomType: item.roomtypedesc,\n      roomTypeThumbnail: item.imgfileurl ? GENERAL_SETTINGS.STATIC_URL + item.imgfileurl : '/imgs/not-found.png',\n      bedType: item.bedtypedesc,\n      isSelect: String(item.roomno) === String(chooseRoomNo),\n      onSelect: function onSelect(roomNo) {\n        return setChooseRoomNo(roomNo);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 41\n      }\n    }));\n  }) : __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 31\n    }\n  }, __jsx(Alert, {\n    variant: \"outlined\",\n    severity: \"warning\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 33\n    }\n  }, t('str_thereAreNoSelectableRoomsAvailableForThisRoomType'))))), __jsx(DialogActions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return _onClose();\n    },\n    color: \"primary\",\n    disabled: isPatchLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, t('str_close')), __jsx(Button, {\n    startIcon: isPatchLoading ? __jsx(LoadingSpinner, {\n      size: 16,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 49\n      }\n    }) : null,\n    className: confirmClassName,\n    onClick: function onClick() {\n      return handleSetRoomNo();\n    },\n    disabled: isPatchLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, t('str_confirm'))));\n};\n\n_s(RoomSelection, \"ddD3bOYeTrPPlvFD6vk2FBsVE0M=\", false, function () {\n  return [useTranslation, useSnackbar, useSelector];\n});\n\n_c = RoomSelection;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateState: function updateState(stateType, stateName, value) {\n      return dispatch(_updateState(stateType, stateName, value));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomSelection);\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomSelection\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/Details/RoomSelection/index.js"],"names":["React","useContext","useEffect","useState","UseOrest","connect","useSelector","Button","Dialog","DialogActions","DialogContent","DialogTitle","Grid","Alert","WebCmsGlobal","useTranslation","RoomCard","useSnackbar","updateState","LoadingSpinner","CleanAndCheckInRoomStatus","RoomSelection","open","onClose","useClientOrestState","useClientReservation","confirmClassName","t","GENERAL_SETTINGS","enqueueSnackbar","chooseRoomNo","setChooseRoomNo","roomBookListData","setRoomBookListData","isLoading","setIsLoading","isPatchLoading","setIsPatchLoading","useToken","state","orest","currentUser","auth","access_token","active","roomBookListQuery","startdate","checkin","enddate","checkout","reservno","roomtypeid","hotelrefno","limit","apiUrl","OREST_URL","endpoint","token","params","then","roomBookListResponse","status","data","count","setRoomNoForReservation","roomNo","gid","method","roomno","reservatPatchResponse","getClientReservNo","clientId","clientid","isgapp","clientReservnoResponse","hotelname","handleSetRoomNo","isRoomSelected","id","variant","overflowX","overflowY","filter","room","roomstate","length","map","item","i","roomtypedesc","imgfileurl","STATIC_URL","bedtypedesc","String","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { UseOrest } from '@webcms/orest'\nimport { connect, useSelector } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Grid from '@material-ui/core/Grid'\nimport Alert from '@material-ui/lab/Alert'\nimport WebCmsGlobal from 'components/webcms-global'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport RoomCard from './RoomCard'\nimport { useSnackbar } from 'notistack'\nimport { updateState } from 'state/actions'\nimport LoadingSpinner from 'components/LoadingSpinner'\nconst CleanAndCheckInRoomStatus = 'VC'\n\nconst RoomSelection = ({ updateState, open, onClose, useClientOrestState, useClientReservation, confirmClassName }) => {\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const { enqueueSnackbar } = useSnackbar()\n    const [chooseRoomNo, setChooseRoomNo] = useState(null)\n    const [roomBookListData, setRoomBookListData] = useState(false)\n    const [isLoading, setIsLoading] = useState(false)\n    const [isPatchLoading, setIsPatchLoading] = useState(false)\n    const useToken = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n\n    useEffect(() => {\n        let active = true\n        if (active && open) {\n            setIsLoading(true)\n            const roomBookListQuery = {\n                startdate: useClientReservation.checkin,\n                enddate: useClientReservation.checkout,\n                reservno: useClientReservation.reservno,\n                roomtypeid: useClientReservation?.roomtypeid || null,\n                hotelrefno: useClientReservation.hotelrefno,\n                limit: 0,\n            }\n\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'room/book/list',\n                token: useToken,\n                params: roomBookListQuery,\n            }).then((roomBookListResponse) => {\n                if (active) {\n                    if (roomBookListResponse.status === 200 && roomBookListResponse.data.count > 0) {\n                        setRoomBookListData(roomBookListResponse.data.data)\n                        setIsLoading(false)\n                    } else {\n                        setRoomBookListData(null)\n                        setIsLoading(false)\n                    }\n                }\n            }).catch(() => {\n                setRoomBookListData(null)\n                setIsLoading(false)\n            })\n        }\n\n        return () => {\n            active = false\n        }\n\n    }, [open])\n\n    const setRoomNoForReservation = (roomNo, hotelrefno) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: `reservat/patch/${useClientReservation.gid}`,\n            method: 'patch',\n            token: useToken,\n            params: {\n                hotelrefno: hotelrefno\n            },\n            data: {\n                roomno: roomNo,\n            },\n        }).then((reservatPatchResponse) => {\n            if (reservatPatchResponse.status === 200 && reservatPatchResponse.data.count > 0) {\n                return true\n            } else {\n                return false\n            }\n        }).catch(() => {\n            return false\n        })\n    }\n\n    const getClientReservNo = async (clientId) =>{\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'client/reservno',\n            token: useToken,\n            params: {\n                clientid: clientId,\n                isgapp: true,\n            },\n        }).then((clientReservnoResponse) => {\n            if (clientReservnoResponse.status === 200 && clientReservnoResponse.data.count > 0) {\n                updateState('guest', 'changeHotelRefno', clientReservnoResponse.data.data.hotelrefno)\n                updateState('guest', 'changeHotelName', clientReservnoResponse.data.data.hotelname)\n                updateState('guest', 'clientReservation', clientReservnoResponse.data.data)\n            } else {\n                updateState('guest', 'clientReservation', null)\n            }\n        })\n    }\n\n    const handleSetRoomNo = async () => {\n        setIsPatchLoading(true)\n        const isRoomSelected = await setRoomNoForReservation(chooseRoomNo, useClientReservation.hotelrefno)\n        if(isRoomSelected){\n            updateState('guest', 'clientReservIsLoading', true)\n            await getClientReservNo(useClientOrestState.id)\n            enqueueSnackbar(t('str_theRoomHasBeenSelectedYouCanCheckIn'), { variant: 'success' })\n            updateState('guest', 'clientReservIsLoading', false)\n            setIsPatchLoading(false)\n            onClose()\n        }else {\n            enqueueSnackbar(t('str_theRoomWasNotSelectedYouCanTryAgainWithADifferentRoom'), { variant: 'warning' })\n            setIsPatchLoading(false)\n        }\n    }\n\n    return (\n        <Dialog fullWidth maxWidth='md' open={open} onClose={() => onClose()}>\n            <DialogTitle>{t('str_selectYourRoom')}</DialogTitle>\n            <DialogContent dividers style={{ overflowX: 'hidden', overflowY: 'scroll' }}>\n                {isLoading ? <LoadingSpinner size={40} />\n                    : <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <Alert severity=\"info\">\n                                {t('str_clickOnTheRoomYouWantToSelectAndThenPressTheConfirmButton')}\n                            </Alert>\n                        </Grid>\n                        {roomBookListData\n                        && roomBookListData.filter(room => room.roomstate === CleanAndCheckInRoomStatus).length > 0\n                            ? roomBookListData.filter(room => room.roomstate === CleanAndCheckInRoomStatus).map((item, i) => {\n                                return (\n                                    <Grid item xs={12} sm={6} key={i}>\n                                        <RoomCard\n                                            roomNo={item.roomno}\n                                            roomType={item.roomtypedesc}\n                                            roomTypeThumbnail={item.imgfileurl ? GENERAL_SETTINGS.STATIC_URL + item.imgfileurl : '/imgs/not-found.png'}\n                                            bedType={item.bedtypedesc}\n                                            isSelect={String(item.roomno) === String(chooseRoomNo)}\n                                            onSelect={(roomNo) => setChooseRoomNo(roomNo)}\n                                        />\n                                    </Grid>\n                                )\n                            })\n                            : <Grid item xs={12}>\n                                <Alert variant='outlined' severity='warning'>\n                                    {t('str_thereAreNoSelectableRoomsAvailableForThisRoomType')}\n                                </Alert>\n                            </Grid>\n                        }\n                    </Grid>\n                }\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick={() => onClose()}\n                    color='primary'\n                    disabled={isPatchLoading}\n                >\n                    {t('str_close')}\n                </Button>\n                <Button\n                    startIcon={isPatchLoading ? <LoadingSpinner size={16}/> : null}\n                    className={confirmClassName}\n                    onClick={() => handleSetRoomNo()}\n                    disabled={isPatchLoading}\n                >\n                    {t('str_confirm')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomSelection)\n"]},"metadata":{},"sourceType":"module"}