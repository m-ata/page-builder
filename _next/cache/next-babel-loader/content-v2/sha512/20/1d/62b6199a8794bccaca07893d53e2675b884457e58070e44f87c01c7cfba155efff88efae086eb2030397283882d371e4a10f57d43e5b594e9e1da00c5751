{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/MaterialTableGeneric/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MaterialTable, { MTableHeader } from \"material-table\";\nimport MaterialTableLocalization from \"../MaterialTableLocalization\";\nimport { IconButton, Menu, MenuItem, Typography, Button, Grid } from \"@material-ui/core\";\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport TableColumnText from \"../TableColumnText\";\nimport PopupState, { bindMenu, bindTrigger } from \"material-ui-popup-state\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport { CustomToolTip } from \"../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport PropTypes from \"prop-types\";\nimport CustomAutoComplete from \"../CustomAutoComplete/CustomAutoComplete\";\nconst useStyles = makeStyles(theme => ({\n  table: {\n    '& .MuiTableCell-root': {\n      padding: '10px'\n    },\n    \"& tbody>.MuiTableRow-root:hover\": {\n      backgroundColor: \"rgb(163, 166, 180,0.1)\"\n    },\n    \"& tbody>.MuiTableRow-root:hover $hoverMenu\": {\n      visibility: 'visible'\n    },\n    \"& tbody>.MuiTableRow-root:hover $dataContainer\": {\n      visibility: 'hidden'\n    }\n  },\n  container: {\n    position: 'relative'\n  },\n  hoverMenu: {\n    visibility: 'hidden'\n  },\n  dataContainer: {\n    position: 'absolute',\n    visibility: 'visible'\n  },\n  iconButtonStyle: {\n    padding: '0'\n  },\n  popoverStyle: {\n    width: '140px'\n  },\n  actionColumnButton: {\n    minWidth: '10px',\n    padding: '6px'\n  }\n}));\n\nfunction MaterialTableGeneric(props) {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation();\n  const {\n    columns,\n    data,\n    isLoading,\n    actionFirstColumn,\n    hoverFirstColumn,\n    showMoreActionButton,\n    moreActionList,\n    onRefresh,\n    refreshText,\n    onAdd,\n    addText\n  } = props;\n  const tableLocalization = MaterialTableLocalization();\n  useEffect(() => {\n    if (actionFirstColumn) {\n      var _columns$;\n\n      const actionColumn = {\n        id: 'actionColumn',\n        title: __jsx(Button, {\n          style: {\n            padding: 0,\n            maxWidth: 25,\n            minWidth: 25\n          },\n          disabled: true,\n          color: 'primary',\n          variant: 'text',\n          className: classes.actionColumnButton,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }\n        }, __jsx(MoreVertIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }\n        })),\n        headerStyle: {\n          textAlign: 'center',\n          maxWidth: '30px'\n        },\n        cellStyle: {\n          textAlign: 'center'\n        },\n        render: props => __jsx(TableColumnText, {\n          minWidth: 30,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }\n        }, __jsx(PopupState, {\n          variant: \"popover\",\n          popupId: \"material-table-action-column\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }\n        }, popupState => __jsx(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }\n        }, __jsx(Button, _extends({\n          style: {\n            padding: 0,\n            maxWidth: 25,\n            minWidth: 25\n          },\n          color: 'primary',\n          variant: 'contained'\n        }, bindTrigger(popupState), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 37\n          }\n        }), __jsx(MoreVertIcon, {\n          size: 'small',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 41\n          }\n        })), __jsx(Menu, _extends({\n          classes: {\n            paper: classes.popoverStyle\n          },\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"left\"\n          },\n          transformOrigin: {\n            vertical: \"top\",\n            horizontal: \"left\"\n          },\n          getContentAnchorEl: null\n        }, bindMenu(popupState), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 37\n          }\n        }), moreActionList && moreActionList.map((item, i) => __jsx(MenuItem, {\n          key: `menu-item-${i}`,\n          onClick: () => {\n            item.onClick(props);\n            popupState.close();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 49\n          }\n        }, item.icon, __jsx(Typography, {\n          style: {\n            paddingLeft: '8px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 53\n          }\n        }, item.title)))))))\n      };\n\n      if (((_columns$ = columns[0]) === null || _columns$ === void 0 ? void 0 : _columns$.id) !== 'actionColumn') {\n        columns.splice(0, 0, actionColumn);\n      } else {\n        columns.splice(0, 1, actionColumn);\n      }\n    } else {\n      if (hoverFirstColumn) {\n        columns[0].render = rowData => handleRenderFirstColumn(rowData);\n      }\n    }\n  }, []);\n  /** for hover use standardRender instead of render when defining columns. Write the space to be rendered as child **/\n\n  const handleRenderFirstColumn = rowData => {\n    var _columns$2, _columns$2$standardRe;\n\n    const firstColumnProps = (_columns$2 = columns[0]) === null || _columns$2 === void 0 ? void 0 : (_columns$2$standardRe = _columns$2.standardRender) === null || _columns$2$standardRe === void 0 ? void 0 : _columns$2$standardRe.props;\n    const firstColumnField = columns[0].field;\n\n    if (hoverFirstColumn) {\n      return __jsx(\"div\", {\n        className: classes.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: classes.dataContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }\n      }, __jsx(TableColumnText, {\n        maxWidth: firstColumnProps === null || firstColumnProps === void 0 ? void 0 : firstColumnProps.maxWidth,\n        textAlign: firstColumnProps === null || firstColumnProps === void 0 ? void 0 : firstColumnProps.textAlign,\n        minWidth: firstColumnProps === null || firstColumnProps === void 0 ? void 0 : firstColumnProps.minWidth,\n        showToolTip: firstColumnProps === null || firstColumnProps === void 0 ? void 0 : firstColumnProps.showToolTip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }\n      }, rowData[firstColumnField])), __jsx(\"div\", {\n        className: classes.hoverMenu,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, showMoreActionButton && __jsx(PopupState, {\n        variant: \"popover\",\n        popupId: \"material-table-generic\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 33\n        }\n      }, popupState => __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 41\n        }\n      }, __jsx(IconButton, _extends({\n        className: classes.iconButtonStyle\n      }, bindTrigger(popupState), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 45\n        }\n      }), __jsx(MoreVertIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 49\n        }\n      })), __jsx(Menu, _extends({\n        classes: {\n          paper: classes.popoverStyle\n        },\n        anchorOrigin: {\n          vertical: \"bottom\",\n          horizontal: \"left\"\n        },\n        transformOrigin: {\n          vertical: \"top\",\n          horizontal: \"left\"\n        },\n        getContentAnchorEl: null\n      }, bindMenu(popupState), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 45\n        }\n      }), moreActionList && moreActionList.map((item, i) => __jsx(MenuItem, {\n        key: `menu-item-${i}`,\n        onClick: () => {\n          item.onClick(rowData);\n          popupState.close();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 57\n        }\n      }, item.icon, __jsx(Typography, {\n        style: {\n          paddingLeft: '8px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 61\n        }\n      }, item.title))))))));\n    } else {\n      return __jsx(TableColumnText, {\n        maxWidth: firstColumnProps === null || firstColumnProps === void 0 ? void 0 : firstColumnProps.maxWidth,\n        textAlign: firstColumnProps === null || firstColumnProps === void 0 ? void 0 : firstColumnProps.textAlign,\n        minWidth: firstColumnProps === null || firstColumnProps === void 0 ? void 0 : firstColumnProps.minWidth,\n        showToolTip: firstColumnProps === null || firstColumnProps === void 0 ? void 0 : firstColumnProps.showToolTip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }\n      }, rowData[firstColumnField]);\n    }\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 25\n    }\n  }, typeof onRefresh === 'function' && __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 33\n    }\n  }, __jsx(CustomToolTip, {\n    title: refreshText || t('str_refresh'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 37\n    }\n  }, __jsx(IconButton, {\n    onClick: onRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 41\n    }\n  }, __jsx(CachedIcon, {\n    style: {\n      color: \"#F16A4B\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 45\n    }\n  })))), typeof onAdd === 'function' && __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 33\n    }\n  }, __jsx(CustomToolTip, {\n    title: addText || t('str_add'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 37\n    }\n  }, __jsx(IconButton, {\n    onClick: onAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 41\n    }\n  }, __jsx(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 45\n    }\n  })))))), __jsx(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 21\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: classes.table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 17\n    }\n  }, __jsx(MaterialTable, {\n    isLoading: isLoading,\n    columns: columns,\n    data: data,\n    localization: tableLocalization,\n    options: {\n      headerStyle: {\n        cursor: 'default',\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        color: \"#A3A6B4\",\n        textTransform: \"uppercase\",\n        backgroundColor: \"#F5F6FA\",\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid #FFF'\n      },\n      cellStyle: {\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid rgba(224, 224, 224, 1)',\n        fontSize: '13px'\n      },\n      toolbar: false,\n      selection: false,\n      sorting: false,\n      search: false,\n      actionsColumnIndex: 1,\n      selectionColumnIndex: 1\n    },\n    components: {\n      Header: props => {\n        const overrideProps = _objectSpread({}, props);\n\n        overrideProps.draggable = false;\n\n        if (actionFirstColumn) {\n          overrideProps.columns[0].tableData.initialWidth = 'calc(30px)';\n          overrideProps.columns[0].tableData.width = 'calc(30px)';\n        }\n\n        return __jsx(MTableHeader, _extends({}, overrideProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 37\n          }\n        }));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default MaterialTableGeneric;\nMaterialTableGeneric.propTypes = {\n  columns: PropTypes.object,\n  data: PropTypes.object,\n  isLoading: PropTypes.bool,\n  actionFirstColumn: PropTypes.bool,\n  hoverFirstColumn: PropTypes.bool,\n  showMoreActionButton: PropTypes.bool,\n  moreActionList: PropTypes.array,\n  onRefresh: PropTypes.func,\n  refreshText: PropTypes.string,\n  onAdd: PropTypes.func,\n  addText: PropTypes.string\n};","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/MaterialTableGeneric/index.js"],"names":["React","useEffect","useState","makeStyles","MaterialTable","MTableHeader","MaterialTableLocalization","IconButton","Menu","MenuItem","Typography","Button","Grid","MoreVertIcon","TableColumnText","PopupState","bindMenu","bindTrigger","EditOutlinedIcon","CustomToolTip","CachedIcon","AddIcon","useTranslation","PropTypes","CustomAutoComplete","useStyles","theme","table","padding","backgroundColor","visibility","container","position","hoverMenu","dataContainer","iconButtonStyle","popoverStyle","width","actionColumnButton","minWidth","MaterialTableGeneric","props","classes","t","columns","data","isLoading","actionFirstColumn","hoverFirstColumn","showMoreActionButton","moreActionList","onRefresh","refreshText","onAdd","addText","tableLocalization","actionColumn","id","title","maxWidth","headerStyle","textAlign","cellStyle","render","popupState","paper","vertical","horizontal","map","item","i","onClick","close","icon","paddingLeft","splice","rowData","handleRenderFirstColumn","firstColumnProps","standardRender","firstColumnField","field","showToolTip","color","cursor","fontWeight","fontSize","textTransform","whiteSpace","borderLeft","toolbar","selection","sorting","search","actionsColumnIndex","selectionColumnIndex","Header","overrideProps","draggable","tableData","initialWidth","propTypes","object","bool","array","func","string"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport MaterialTable, {MTableHeader} from \"material-table\";\nimport MaterialTableLocalization from \"../MaterialTableLocalization\";\nimport {IconButton, Menu, MenuItem, Typography, Button, Grid} from \"@material-ui/core\";\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport TableColumnText from \"../TableColumnText\";\nimport PopupState, {bindMenu, bindTrigger} from \"material-ui-popup-state\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport {CustomToolTip} from \"../user-portal/components/CustomToolTip/CustomToolTip\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport PropTypes from \"prop-types\";\nimport CustomAutoComplete from \"../CustomAutoComplete/CustomAutoComplete\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    table: {\n        '& .MuiTableCell-root': {\n            padding: '10px'\n        },\n        \"& tbody>.MuiTableRow-root:hover\": {\n            backgroundColor: \"rgb(163, 166, 180,0.1)\",\n        },\n        \"& tbody>.MuiTableRow-root:hover $hoverMenu\": {\n            visibility: 'visible'\n        },\n        \"& tbody>.MuiTableRow-root:hover $dataContainer\": {\n            visibility: 'hidden'\n        },\n    },\n    container: {\n        position: 'relative'\n    },\n    hoverMenu: {\n        visibility: 'hidden'\n    },\n    dataContainer: {\n        position: 'absolute',\n        visibility: 'visible'\n    },\n    iconButtonStyle: {\n        padding: '0'\n    },\n    popoverStyle: {\n        width: '140px'\n    },\n    actionColumnButton: {\n        minWidth: '10px',\n        padding: '6px'\n    }\n\n}))\n\n\n\nfunction MaterialTableGeneric(props) {\n\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    const {columns, data, isLoading, actionFirstColumn, hoverFirstColumn, showMoreActionButton, moreActionList, onRefresh, refreshText, onAdd, addText} = props\n\n    const tableLocalization = MaterialTableLocalization();\n\n\n    useEffect(() => {\n        if(actionFirstColumn) {\n            const actionColumn =  {\n                id: 'actionColumn',\n                title: (\n                    <Button\n                        style={{padding: 0, maxWidth: 25, minWidth: 25}}\n                        disabled\n                        color={'primary'}\n                        variant={'text'}\n                        className={classes.actionColumnButton}\n                    >\n                        <MoreVertIcon/>\n                    </Button>\n                ),\n                headerStyle: {\n                    textAlign: 'center',\n                    maxWidth: '30px'\n                },\n                cellStyle: {\n                    textAlign: 'center',\n                },\n                render: props => (\n                    <TableColumnText minWidth={30}>\n                        <PopupState variant=\"popover\" popupId=\"material-table-action-column\">\n                            {(popupState) => (\n                                <React.Fragment>\n                                    <Button\n                                        style={{padding: 0, maxWidth: 25, minWidth: 25}}\n                                        color={'primary'}\n                                        variant={'contained'}\n                                        {...bindTrigger(popupState)}\n                                    >\n                                        <MoreVertIcon size={'small'} />\n                                    </Button>\n                                    <Menu\n                                        classes={{\n                                            paper: classes.popoverStyle,\n                                        }}\n                                        anchorOrigin={{\n                                            vertical: \"bottom\",\n                                            horizontal: \"left\"\n                                        }}\n                                        transformOrigin={{\n                                            vertical: \"top\",\n                                            horizontal: \"left\"\n                                        }}\n                                        getContentAnchorEl={null}\n                                        {...bindMenu(popupState)}\n                                    >\n                                        {\n                                            moreActionList && moreActionList.map((item, i) => (\n                                                <MenuItem\n                                                    key={`menu-item-${i}`}\n                                                    onClick={() => {\n                                                        item.onClick(props)\n                                                        popupState.close();\n                                                    }}\n                                                >\n                                                    {item.icon}\n                                                    <Typography style={{paddingLeft: '8px'}}>{item.title}</Typography>\n                                                </MenuItem>\n                                            ))\n                                        }\n                                    </Menu>\n                                </React.Fragment>\n                            )}\n                        </PopupState>\n                    </TableColumnText>)\n            }\n\n            if(columns[0]?.id !== 'actionColumn') {\n                columns.splice(0, 0, actionColumn)\n            } else {\n                columns.splice(0, 1, actionColumn)\n            }\n\n        } else {\n            if(hoverFirstColumn) {\n                columns[0].render = rowData => handleRenderFirstColumn(rowData)\n            }\n\n        }\n    }, [])\n\n\n    /** for hover use standardRender instead of render when defining columns. Write the space to be rendered as child **/\n    const handleRenderFirstColumn = (rowData) => {\n        const firstColumnProps = columns[0]?.standardRender?.props\n        const firstColumnField = columns[0].field\n\n        if(hoverFirstColumn) {\n            return(\n                <div className={classes.container}>\n                    <div className={classes.dataContainer}>\n                        <TableColumnText\n                            maxWidth={firstColumnProps?.maxWidth}\n                            textAlign={firstColumnProps?.textAlign}\n                            minWidth={firstColumnProps?.minWidth}\n                            showToolTip={firstColumnProps?.showToolTip}\n                        >\n                            {rowData[firstColumnField]}\n                        </TableColumnText>\n                    </div>\n                    <div className={classes.hoverMenu}>\n                        {\n                            showMoreActionButton && (\n                                <PopupState variant=\"popover\" popupId=\"material-table-generic\">\n                                    {(popupState) => (\n                                        <React.Fragment>\n                                            <IconButton className={classes.iconButtonStyle} {...bindTrigger(popupState)}>\n                                                <MoreVertIcon />\n                                            </IconButton>\n                                            <Menu\n                                                classes={{\n                                                    paper: classes.popoverStyle,\n                                                }}\n                                                anchorOrigin={{\n                                                    vertical: \"bottom\",\n                                                    horizontal: \"left\"\n                                                }}\n                                                transformOrigin={{\n                                                    vertical: \"top\",\n                                                    horizontal: \"left\"\n                                                }}\n                                                getContentAnchorEl={null}\n                                                {...bindMenu(popupState)}\n                                            >\n                                                {\n                                                    moreActionList && moreActionList.map((item, i) => (\n                                                        <MenuItem\n                                                            key={`menu-item-${i}`}\n                                                            onClick={() => {\n                                                                item.onClick(rowData)\n                                                                popupState.close();\n                                                            }}\n                                                        >\n                                                            {item.icon}\n                                                            <Typography style={{paddingLeft: '8px'}}>{item.title}</Typography>\n                                                        </MenuItem>\n                                                    ))\n                                                }\n                                            </Menu>\n                                        </React.Fragment>\n                                    )}\n                                </PopupState>\n                            )\n\n                        }\n                    </div>\n                </div>\n            )\n        } else {\n            return(\n                <TableColumnText\n                    maxWidth={firstColumnProps?.maxWidth}\n                    textAlign={firstColumnProps?.textAlign}\n                    minWidth={firstColumnProps?.minWidth}\n                    showToolTip={firstColumnProps?.showToolTip}\n                >\n                    {rowData[firstColumnField]}\n                </TableColumnText>\n\n            )\n        }\n\n    }\n\n\n\n\n\n\n\n    return(\n        <Grid container>\n            <Grid item xs={12}>\n                <Grid container spacing={3}>\n                    <Grid item xs={4} sm={3}>\n                        <Grid container>\n                            {typeof onRefresh === 'function' && (\n                                <Grid item xs={6} sm={3}>\n                                    <CustomToolTip title={refreshText || t('str_refresh')}>\n                                        <IconButton\n                                            onClick={onRefresh}\n                                        >\n                                            <CachedIcon style={{color:\"#F16A4B\"}}/>\n                                        </IconButton>\n                                    </CustomToolTip>\n                                </Grid>\n                            )}\n                            {typeof onAdd === 'function' && (\n                                <Grid item xs={6} sm={3}>\n                                    <CustomToolTip title={addText || t('str_add')}>\n                                        <IconButton\n                                            onClick={onAdd}\n                                        >\n                                            <AddIcon/>\n                                        </IconButton>\n                                    </CustomToolTip>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={8}>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <div className={classes.table}>\n                    <MaterialTable\n                        isLoading={isLoading}\n                        columns={columns}\n                        data={data}\n                        localization={tableLocalization}\n                        options={{\n                            headerStyle:{\n                                cursor: 'default',\n                                fontWeight:\"bold\",\n                                fontSize:\"12px\",\n                                color:\"#A3A6B4\",\n                                textTransform:\"uppercase\",\n                                backgroundColor:\"#F5F6FA\",\n                                whiteSpace: 'nowrap',\n                                borderLeft: '1px solid #FFF',\n                            },\n                            cellStyle: {\n                                whiteSpace: 'nowrap',\n                                borderLeft: '1px solid rgba(224, 224, 224, 1)',\n                                fontSize: '13px',\n                            },\n                            toolbar: false,\n                            selection: false,\n                            sorting: false,\n                            search: false,\n                            actionsColumnIndex: 1,\n                            selectionColumnIndex: 1\n                        }}\n                        components={{\n                            Header: (props) => {\n                                const overrideProps = {...props}\n                                overrideProps.draggable = false\n                                if(actionFirstColumn) {\n                                    overrideProps.columns[0].tableData.initialWidth = 'calc(30px)'\n                                    overrideProps.columns[0].tableData.width = 'calc(30px)'\n                                }\n                                return(\n                                    <MTableHeader  {...overrideProps}/>\n                                )\n                            },\n                        }}\n                    />\n                </div>\n            </Grid>\n        </Grid>\n\n    );\n}\n\nexport default MaterialTableGeneric;\n\nMaterialTableGeneric.propTypes = {\n    columns: PropTypes.object,\n    data: PropTypes.object,\n    isLoading: PropTypes.bool,\n    actionFirstColumn: PropTypes.bool,\n    hoverFirstColumn: PropTypes.bool,\n    showMoreActionButton: PropTypes.bool,\n    moreActionList: PropTypes.array,\n    onRefresh: PropTypes.func,\n    refreshText: PropTypes.string,\n    onAdd: PropTypes.func,\n    addText: PropTypes.string\n\n}"]},"metadata":{},"sourceType":"module"}