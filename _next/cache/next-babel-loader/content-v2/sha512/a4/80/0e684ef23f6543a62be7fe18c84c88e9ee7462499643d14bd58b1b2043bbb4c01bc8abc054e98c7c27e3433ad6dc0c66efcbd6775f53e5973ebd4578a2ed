{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/booking/components/PaymentInformation.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateState } from 'state/actions';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Grid } from '@material-ui/core';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { FileCopy } from '@material-ui/icons';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport IconButton from '@material-ui/core/IconButton';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport PaymentForm from 'components/payment/credit-card/form';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Alert from '@material-ui/lab/Alert';\nimport { useSnackbar } from 'notistack';\nconst NON_ALPHANUM = /[^a-zA-Z0-9]/g,\n      EVERY_FOUR_CHARS = /(.{4})(?!$)/g;\n\nconst electronicFormat = iban => {\n  return iban.replace(NON_ALPHANUM, '').toUpperCase();\n};\n\nconst ibanPrintFormat = (iban, separator) => {\n  if (typeof separator == 'undefined') {\n    separator = ' ';\n  }\n\n  return electronicFormat(iban).replace(EVERY_FOUR_CHARS, \"$1\" + separator);\n};\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  return __jsx(Typography, _extends({\n    component: \"div\",\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `scrollable-force-tabpanel-${index}`,\n    \"aria-labelledby\": `scrollable-force-tab-${index}`\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), value === index && __jsx(Box, {\n    p: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 33\n    }\n  }, children));\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-force-tab-${index}`,\n    'aria-controls': `scrollable-force-tabpanel-${index}`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    width: '100%'\n  },\n  copyButton: {\n    visibility: 'hidden'\n  },\n  tableRowHover: {\n    \"&:hover $copyButton\": {\n      visibility: 'visible'\n    }\n  }\n}));\n\nconst PaymentInformation = props => {\n  const classes = useStyles();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    t\n  } = useTranslation();\n  const {\n    updateState,\n    state,\n    className,\n    customRadioButton\n  } = props;\n\n  const handleChange = event => {\n    const payType = state.hotelPaymentType.paymentypes.filter(item => Number(item.id) === Number(event.target.value))[0];\n    updateState('ibe', 'selectedPaymentType', payType);\n    updateState('ibe', 'selectedPaymentTypeId', Number(event.target.value));\n    updateState('ibe', 'selectedPaymentIbanId', null);\n  };\n\n  const handleCopyIban = (e, iban, ibanId) => {\n    updateState('ibe', 'selectedPaymentIbanId', ibanId);\n    enqueueSnackbar(t('str_ibanCopied'), {\n      variant: 'success'\n    });\n    navigator.clipboard.writeText(iban);\n  };\n\n  const hasPayType = (id, filter) => {\n    const payType = state.hotelPaymentType && state.hotelPaymentType.paymentypes.length > 0 && state.hotelPaymentType.paymentypes.filter(item => item[filter])[0];\n    return Boolean(payType && Number(id) === Number(payType.id));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, state.hotelPaymentType.paymentypes && state.hotelPaymentType.paymentypes.length <= 3 ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, __jsx(FormLabel, {\n    component: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }, t('str_paymentOptions')), __jsx(RadioGroup, {\n    \"aria-label\": \"payment-options\",\n    name: \"payment-options\",\n    value: state.selectedPaymentTypeId,\n    onChange: handleChange,\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }\n  }, state.hotelPaymentType.paymentypes.sort((a, b) => a.index - b.index).sort((a, b) => b.isdef - a.isdef).map((item, index) => __jsx(FormControlLabel, {\n    key: index,\n    value: item.id,\n    control: customRadioButton !== undefined ? customRadioButton : __jsx(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 146\n      }\n    }),\n    label: t(item.description),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 37\n    }\n  }))))) : state.hotelPaymentType.paymentypes && state.hotelPaymentType.paymentypes.length > 3 ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, __jsx(FormControl, {\n    required: true,\n    fullWidth: true,\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, __jsx(InputLabel, {\n    id: \"payment-options-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }, t('str_paymentOptions')), __jsx(Select, {\n    className: className || null,\n    labelId: \"payment-options-label\",\n    id: \"payment-options\",\n    value: state.selectedPaymentTypeId,\n    onChange: handleChange,\n    label: t('str_paymentOptions'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 29\n    }\n  }, state.hotelPaymentType.paymentypes && state.hotelPaymentType.paymentypes.sort((a, b) => a.index - b.index).sort((a, b) => b.isdef - a.isdef).map((item, index) => __jsx(MenuItem, {\n    key: index,\n    value: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 41\n    }\n  }, t(item.description)))))) : __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, __jsx(Alert, {\n    className: className || null,\n    variant: \"outlined\",\n    severity: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }, t('str_noPaymentOptionAvailable'))), hasPayType(state.selectedPaymentTypeId, 'isccpay') && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }, __jsx(Alert, {\n    className: className || null,\n    variant: \"outlined\",\n    severity: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  }, t('str_atTheNextStepYourCCInformationWillBeRequestedThreeDSecurePayment'))), hasPayType(state.selectedPaymentTypeId, 'iscash') && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, __jsx(Alert, {\n    className: className || null,\n    variant: \"outlined\",\n    severity: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 25\n    }\n  }, t('str_payAtHotelMsg'))), hasPayType(state.selectedPaymentTypeId, 'istransfer') && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, __jsx(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 25\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 29\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 33\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 37\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 41\n    }\n  }, t('str_bankName')), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 41\n    }\n  }, t('str_branch')), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 41\n    }\n  }, t('str_currency')), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 41\n    }\n  }, t('str_bankIban')))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 33\n    }\n  }, state.hotelPaymentType && state.hotelPaymentType && state.hotelPaymentType.bankiban ? state.hotelPaymentType.bankiban.map((row, i) => __jsx(TableRow, {\n    hover: true,\n    key: i,\n    classes: {\n      hover: classes.tableRowHover\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 41\n    }\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 45\n    }\n  }, row.bankname), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 45\n    }\n  }, row.bankbranch), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 45\n    }\n  }, row.currencycode), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 45\n    }\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    size: \"small\",\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 49\n    }\n  }, __jsx(OutlinedInput, {\n    style: {\n      background: '#ffffff'\n    },\n    readOnly: true,\n    id: \"copy-iban\",\n    value: row.iban && ibanPrintFormat(row.iban) || \"\",\n    variant: \"outlined\",\n    size: \"small\",\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 61\n      }\n    }, __jsx(IconButton, {\n      className: classes.copyButton,\n      size: \"small\",\n      \"aria-label\": \"copy-iban-button\",\n      onClick: e => handleCopyIban(e, row.iban, row.id),\n      onMouseDown: e => e.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 65\n      }\n    }, __jsx(FileCopy, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 69\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 53\n    }\n  }))))) : __jsx(Box, {\n    p: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 41\n    }\n  }, \" \", t('str_noDefaultRecord'), \" \"))))), hasPayType(state.selectedPaymentTypeId, 'ismailorder') && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, __jsx(PaymentForm, {\n    showCard: true,\n    onChange: e => updateState('ibe', 'mailOrderInfo', e),\n    isValid: e => {\n      return;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 25\n    }\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.ibe\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PaymentInformation);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/booking/components/PaymentInformation.js"],"names":["React","PropTypes","connect","updateState","makeStyles","Box","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","Grid","Radio","RadioGroup","FormControlLabel","FormLabel","FileCopy","InputAdornment","OutlinedInput","IconButton","useTranslation","PaymentForm","InputLabel","MenuItem","FormControl","Select","Alert","useSnackbar","NON_ALPHANUM","EVERY_FOUR_CHARS","electronicFormat","iban","replace","toUpperCase","ibanPrintFormat","separator","TabPanel","props","children","value","index","other","propTypes","node","any","isRequired","a11yProps","id","useStyles","theme","root","flexGrow","width","copyButton","visibility","tableRowHover","PaymentInformation","classes","enqueueSnackbar","t","state","className","customRadioButton","handleChange","event","payType","hotelPaymentType","paymentypes","filter","item","Number","target","handleCopyIban","e","ibanId","variant","navigator","clipboard","writeText","hasPayType","length","Boolean","selectedPaymentTypeId","sort","a","b","isdef","map","undefined","description","formControl","table","bankiban","row","i","hover","bankname","bankbranch","currencycode","background","preventDefault","mapStateToProps","formReducer","ibe","mapDispatchToProps","dispatch","stateType","stateName"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { updateState } from 'state/actions'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    Grid,\n} from '@material-ui/core'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport { FileCopy } from '@material-ui/icons'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\nimport IconButton from '@material-ui/core/IconButton'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport PaymentForm from 'components/payment/credit-card/form'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport Alert from '@material-ui/lab/Alert'\nimport { useSnackbar } from 'notistack'\n\nconst NON_ALPHANUM = /[^a-zA-Z0-9]/g,\n    EVERY_FOUR_CHARS =/(.{4})(?!$)/g;\n\nconst electronicFormat = (iban) => {\n    return iban.replace(NON_ALPHANUM, '').toUpperCase();\n}\n\nconst ibanPrintFormat = (iban, separator) => {\n    if (typeof separator == 'undefined'){\n        separator = ' ';\n    }\n    return electronicFormat(iban).replace(EVERY_FOUR_CHARS, \"$1\" + separator);\n}\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-force-tabpanel-${index}`}\n            aria-labelledby={`scrollable-force-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `scrollable-force-tab-${index}`,\n        'aria-controls': `scrollable-force-tabpanel-${index}`,\n    }\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n    },\n    copyButton: {\n      visibility: 'hidden'\n    },\n    tableRowHover: {\n        \"&:hover $copyButton\": {\n            visibility: 'visible',\n        }\n    }\n}))\n\nconst PaymentInformation = (props) => {\n    const classes = useStyles()\n    const { enqueueSnackbar } = useSnackbar()\n    const { t } = useTranslation()\n    const { updateState, state, className, customRadioButton } = props\n\n    const handleChange = (event) => {\n        const payType = state.hotelPaymentType.paymentypes.filter((item) => Number(item.id) === Number(event.target.value))[0]\n        updateState('ibe', 'selectedPaymentType', payType)\n        updateState('ibe', 'selectedPaymentTypeId', Number(event.target.value))\n        updateState('ibe', 'selectedPaymentIbanId', null)\n    }\n\n    const handleCopyIban = (e, iban, ibanId) => {\n        updateState('ibe', 'selectedPaymentIbanId', ibanId)\n        enqueueSnackbar(t('str_ibanCopied'), { variant: 'success' })\n        navigator.clipboard.writeText(iban)\n    }\n\n    const hasPayType = (id, filter) => {\n        const payType = state.hotelPaymentType && state.hotelPaymentType.paymentypes.length > 0 && state.hotelPaymentType.paymentypes.filter((item) => item[filter])[0]\n        return Boolean(payType && Number(id) === Number(payType.id))\n    }\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {(state.hotelPaymentType.paymentypes && state.hotelPaymentType.paymentypes.length <= 3) ? (\n                    <Grid item xs={12}>\n                        <FormControl component=\"fieldset\" required>\n                            <FormLabel component=\"legend\">{t('str_paymentOptions')}</FormLabel>\n                            <RadioGroup aria-label=\"payment-options\" name=\"payment-options\" value={state.selectedPaymentTypeId} onChange={handleChange} row>\n                                {state.hotelPaymentType.paymentypes.sort((a, b) => a.index - b.index).sort((a, b) => b.isdef - a.isdef).map((item, index) =>\n                                    <FormControlLabel key={index} value={item.id} control={customRadioButton !== undefined ? customRadioButton : <Radio color=\"primary\"/>} label={t(item.description)} />\n                                )}\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                ): (state.hotelPaymentType.paymentypes && state.hotelPaymentType.paymentypes.length > 3) ? (\n                    <Grid item xs={12} sm={6}>\n                        <FormControl required fullWidth variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel id=\"payment-options-label\">{t('str_paymentOptions')}</InputLabel>\n                            <Select\n                                className={className || null}\n                                labelId=\"payment-options-label\"\n                                id=\"payment-options\"\n                                value={state.selectedPaymentTypeId}\n                                onChange={handleChange}\n                                label={t('str_paymentOptions')}\n                            >\n                                {state.hotelPaymentType.paymentypes && state.hotelPaymentType.paymentypes.sort((a, b) => a.index - b.index).sort((a, b) => b.isdef - a.isdef).map((item, index) =>\n                                        <MenuItem key={index} value={item.id}>{t(item.description)}</MenuItem>\n                                )}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                ): (<Grid item xs={12}>\n                        <Alert className={className || null} variant=\"outlined\" severity=\"info\">\n                            {t('str_noPaymentOptionAvailable')}\n                        </Alert>\n                    </Grid>\n                )}\n                {hasPayType(state.selectedPaymentTypeId, 'isccpay') && (\n                    <Grid item xs={12}>\n                        <Alert className={className || null} variant=\"outlined\" severity=\"info\">\n                            {t('str_atTheNextStepYourCCInformationWillBeRequestedThreeDSecurePayment')}\n                        </Alert>\n                    </Grid>\n                )}\n                {hasPayType(state.selectedPaymentTypeId, 'iscash') && (\n                    <Grid item xs={12}>\n                        <Alert className={className || null} variant=\"outlined\" severity=\"info\">\n                            {t('str_payAtHotelMsg')}\n                        </Alert>\n                    </Grid>\n                )}\n                {hasPayType(state.selectedPaymentTypeId, 'istransfer') && (\n                    <Grid item xs={12}>\n                        <TableContainer component={Paper}>\n                            <Table className={classes.table} size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>{t('str_bankName')}</TableCell>\n                                        <TableCell>{t('str_branch')}</TableCell>\n                                        <TableCell>{t('str_currency')}</TableCell>\n                                        <TableCell>{t('str_bankIban')}</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {state.hotelPaymentType && state.hotelPaymentType && state.hotelPaymentType.bankiban ? state.hotelPaymentType.bankiban.map((row, i) => (\n                                        <TableRow hover key={i} classes={{hover: classes.tableRowHover}}>\n                                            <TableCell component=\"th\" scope=\"row\">{row.bankname}</TableCell>\n                                            <TableCell>{row.bankbranch}</TableCell>\n                                            <TableCell>{row.currencycode}</TableCell>\n                                            <TableCell>\n                                                <FormControl variant='outlined' size='small' style={{ width: '100%' }}>\n                                                    <OutlinedInput\n                                                        style={{ background: '#ffffff' }}\n                                                        readOnly={true}\n                                                        id='copy-iban'\n                                                        value={row.iban && ibanPrintFormat(row.iban) || \"\"}\n                                                        variant='outlined'\n                                                        size='small'\n                                                        endAdornment={\n                                                            <InputAdornment position='end'>\n                                                                <IconButton\n                                                                    className={classes.copyButton}\n                                                                    size='small'\n                                                                    aria-label='copy-iban-button'\n                                                                    onClick={(e) => handleCopyIban(e, row.iban, row.id)}\n                                                                    onMouseDown={(e) => e.preventDefault()}\n                                                                >\n                                                                    <FileCopy />\n                                                                </IconButton>\n                                                            </InputAdornment>\n                                                        }\n                                                    />\n                                                </FormControl>\n                                            </TableCell>\n                                        </TableRow>\n                                    )): <Box p={3}> {t('str_noDefaultRecord')} </Box>}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                )}\n                {hasPayType(state.selectedPaymentTypeId, 'ismailorder') && (\n                    <Grid item xs={12}>\n                        <PaymentForm\n                            showCard={true}\n                            onChange={(e) => updateState('ibe', 'mailOrderInfo', e)}\n                            isValid={(e) => { return; }}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.ibe,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PaymentInformation)\n"]},"metadata":{},"sourceType":"module"}