{"ast":null,"code":"const axios = require('axios');\n\nconst helpers = require('./helpers');\n\nconst orestEndpoint = require('../constants/orest-endpoints.json');\n\nconst getHotelAppLang = async (req, res, langCode) => {\n  if (!langCode) {\n    return [];\n  }\n\n  const hotelLanguageList = await axios({\n    url: helpers.getUrl(res, orestEndpoint.api.rafileViewList),\n    method: orestEndpoint.methods.get,\n    headers: helpers.getHeaders(req, res),\n    params: {\n      query: `langcode:${langCode},filetype:HCMLANG.TARGET`,\n      chkselfish: false\n    }\n  }).then(response => {\n    var _response$data;\n\n    if (response.status === 200 && response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.data) {\n      return response.data.data;\n    } else {\n      return false;\n    }\n  }).catch(() => {\n    return false;\n  });\n  let targetMergeData = [];\n\n  if (hotelLanguageList) {\n    hotelLanguageList.map(trgFile => {\n      const mergeData = (trgFile === null || trgFile === void 0 ? void 0 : trgFile.filedata) && JSON.parse(Buffer.from(trgFile.filedata, 'base64').toString('utf-8')) || [];\n      targetMergeData = targetMergeData.concat(...mergeData);\n    });\n  }\n\n  return targetMergeData;\n};\n\nmodule.exports = getHotelAppLang;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/@api/core/get-hotel-app-lang.js"],"names":["axios","require","helpers","orestEndpoint","getHotelAppLang","req","res","langCode","hotelLanguageList","url","getUrl","api","rafileViewList","method","methods","get","headers","getHeaders","params","query","chkselfish","then","response","status","data","catch","targetMergeData","map","trgFile","mergeData","filedata","JSON","parse","Buffer","from","toString","concat","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,mCAAD,CAA7B;;AAEA,MAAMG,eAAe,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,QAAjB,KAA8B;AAClD,MAAG,CAACA,QAAJ,EAAa;AACT,WAAO,EAAP;AACH;;AAED,QAAMC,iBAAiB,GAAG,MAAMR,KAAK,CAAC;AAClCS,IAAAA,GAAG,EAAEP,OAAO,CAACQ,MAAR,CAAeJ,GAAf,EAAoBH,aAAa,CAACQ,GAAd,CAAkBC,cAAtC,CAD6B;AAElCC,IAAAA,MAAM,EAAEV,aAAa,CAACW,OAAd,CAAsBC,GAFI;AAGlCC,IAAAA,OAAO,EAAEd,OAAO,CAACe,UAAR,CAAmBZ,GAAnB,EAAwBC,GAAxB,CAHyB;AAIlCY,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAG,YAAWZ,QAAS,0BADxB;AAEJa,MAAAA,UAAU,EAAE;AAFR;AAJ0B,GAAD,CAAL,CAQ7BC,IAR6B,CAQvBC,QAAD,IAAc;AAAA;;AAClB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAA3B,aAA2BA,QAA3B,iCAA2BA,QAAQ,CAAEE,IAArC,2CAA2B,eAAgBA,IAA/C,EAAqD;AACjD,aAAOF,QAAQ,CAACE,IAAT,CAAcA,IAArB;AACH,KAFD,MAEK;AACD,aAAO,KAAP;AACH;AACJ,GAd+B,EAc7BC,KAd6B,CAcvB,MAAM;AACX,WAAO,KAAP;AACH,GAhB+B,CAAhC;AAkBA,MAAIC,eAAe,GAAG,EAAtB;;AACA,MAAGlB,iBAAH,EAAqB;AACjBA,IAAAA,iBAAiB,CAACmB,GAAlB,CAAsBC,OAAO,IAAI;AAC7B,YAAMC,SAAS,GAAG,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,QAAT,KAAqBC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYN,OAAO,CAACE,QAApB,EAA8B,QAA9B,EAAwCK,QAAxC,CAAiD,OAAjD,CAAX,CAArB,IAA8F,EAAhH;AACAT,MAAAA,eAAe,GAAGA,eAAe,CAACU,MAAhB,CAAuB,GAAGP,SAA1B,CAAlB;AACH,KAHD;AAIH;;AAED,SAAOH,eAAP;AACH,CAhCD;;AAkCAW,MAAM,CAACC,OAAP,GAAiBlC,eAAjB","sourcesContent":["const axios = require('axios')\nconst helpers = require('./helpers')\nconst orestEndpoint = require('../constants/orest-endpoints.json')\n\nconst getHotelAppLang = async (req, res, langCode) => {\n    if(!langCode){\n        return []\n    }\n\n    const hotelLanguageList = await axios({\n        url: helpers.getUrl(res, orestEndpoint.api.rafileViewList),\n        method: orestEndpoint.methods.get,\n        headers: helpers.getHeaders(req, res),\n        params: {\n            query: `langcode:${langCode},filetype:HCMLANG.TARGET`,\n            chkselfish: false\n        }\n    }).then((response) => {\n        if (response.status === 200 && response?.data?.data) {\n            return response.data.data\n        }else{\n            return false\n        }\n    }).catch(() => {\n        return false\n    })\n\n    let targetMergeData = []\n    if(hotelLanguageList){\n        hotelLanguageList.map(trgFile => {\n            const mergeData = trgFile?.filedata && JSON.parse(Buffer.from(trgFile.filedata, 'base64').toString('utf-8')) || []\n            targetMergeData = targetMergeData.concat(...mergeData)\n        })\n    }\n\n    return targetMergeData\n}\n\nmodule.exports = getHotelAppLang"]},"metadata":{},"sourceType":"script"}