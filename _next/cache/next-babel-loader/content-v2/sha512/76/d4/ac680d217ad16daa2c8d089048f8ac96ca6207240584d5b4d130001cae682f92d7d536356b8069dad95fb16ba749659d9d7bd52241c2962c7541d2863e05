{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/Details/CheckInConfirmation/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport { UseOrest, Patch } from '@webcms/orest';\nimport { connect, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Alert from '@material-ui/lab/Alert';\nimport WebCmsGlobal from 'components/webcms-global';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport { useSnackbar } from 'notistack';\nimport { OREST_ENDPOINT, REQUEST_METHOD_CONST } from 'model/orest/constants';\nimport { updateState as _updateState } from 'state/actions';\nimport LoadingSpinner from 'components/LoadingSpinner';\nimport TabHeader from 'components/layout/components/TabHeader';\nimport CheckInReservationCard from '../../Details/CheckInConfirmation/CheckInReservationCard';\nimport PrimaryGuestCard from '../../Details/CheckInConfirmation/PrimaryGuestCard';\nimport { sendCheckInNotificationForHotelAndClient } from '../../Base/helper';\n\nvar CheckInConfirmation = function CheckInConfirmation(_ref) {\n  _s();\n\n  var open = _ref.open,\n      _onClose = _ref.onClose,\n      updateState = _ref.updateState,\n      useClientOrestState = _ref.useClientOrestState,\n      useClientReservation = _ref.useClientReservation,\n      confirmClassName = _ref.confirmClassName;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS,\n      locale = _useContext.locale;\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      useReservation = _useState2[0],\n      setUseReservation = _useState2[1];\n\n  var _useState3 = useState(false),\n      isCheckinLoading = _useState3[0],\n      setIsCheckinLoading = _useState3[1];\n\n  var useToken = useSelector(function (state) {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  useEffect(function () {\n    var isEffect = true;\n\n    if (isEffect && open && useClientReservation) {\n      getReservation(useClientReservation.gid, useClientReservation.hotelrefno);\n    }\n\n    return function () {\n      isEffect = false;\n    };\n  }, [open]);\n\n  var getReservation = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gid, hotelrefno) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsLoading(true);\n              return _context.abrupt(\"return\", UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'reservat/view/get',\n                token: useToken,\n                params: {\n                  gid: gid,\n                  hotelrefno: hotelrefno\n                }\n              }).then(function (reservatViewGetResponse) {\n                var _reservatViewGetRespo;\n\n                if (reservatViewGetResponse.status === 200 && reservatViewGetResponse !== null && reservatViewGetResponse !== void 0 && (_reservatViewGetRespo = reservatViewGetResponse.data) !== null && _reservatViewGetRespo !== void 0 && _reservatViewGetRespo.data) {\n                  setUseReservation(reservatViewGetResponse.data.data);\n                  setIsLoading(false);\n                  return true;\n                } else {\n                  setIsLoading(false);\n                  return false;\n                }\n              })[\"catch\"](function () {\n                setIsLoading(false);\n                return false;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getReservation(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleReservatDoci = function handleReservatDoci(reservno) {\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'reservat/doci',\n      token: useToken,\n      method: REQUEST_METHOD_CONST.PUT,\n      params: {\n        reservno: reservno\n      }\n    }).then(function (reservatDociResponse) {\n      return !!reservatDociResponse.data.data.res;\n    })[\"catch\"](function () {\n      return false;\n    });\n  };\n\n  var setTemporaryRoomNoForReservation = function setTemporaryRoomNoForReservation(gid, hotelrefno) {\n    return Patch({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.RESERVAT,\n      token: useToken,\n      gid: gid,\n      params: {\n        hotelrefno: hotelrefno\n      },\n      data: {\n        roomno: 'T'\n      }\n    }).then(function (reservatPatchResponse) {\n      return !!reservatPatchResponse.data.data;\n    })[\"catch\"](function () {\n      return false;\n    });\n  };\n\n  var getClientReservno = function getClientReservno(clientid) {\n    updateState('guest', 'clientReservIsLoading', true);\n    return UseOrest({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: 'client/reservno',\n      token: useToken,\n      method: REQUEST_METHOD_CONST.GET,\n      params: {\n        clientid: clientid,\n        isgapp: true\n      }\n    }).then(function (clientReservnoResponse) {\n      if (clientReservnoResponse.status === 200 && clientReservnoResponse.data.count > 0) {\n        updateState('guest', 'changeHotelRefno', clientReservnoResponse.data.data.hotelrefno);\n        updateState('guest', 'changeHotelName', clientReservnoResponse.data.data.hotelname);\n        updateState('guest', 'clientReservation', clientReservnoResponse.data.data);\n        updateState('guest', 'clientReservIsLoading', false);\n        return true;\n      } else {\n        updateState('guest', 'clientReservation', null);\n        updateState('guest', 'clientReservIsLoading', false);\n        return false;\n      }\n    });\n  };\n\n  var handleOnCheckin = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var isCheckin;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setIsCheckinLoading(true);\n\n              if (!(!GENERAL_SETTINGS.hotelSettings.roomno && !useReservation.roomno)) {\n                _context2.next = 4;\n                break;\n              }\n\n              _context2.next = 4;\n              return setTemporaryRoomNoForReservation(useReservation.gid, useReservation.hotelrefno);\n\n            case 4:\n              _context2.next = 6;\n              return handleReservatDoci(useReservation.reservno);\n\n            case 6:\n              isCheckin = _context2.sent;\n\n              if (!isCheckin) {\n                _context2.next = 16;\n                break;\n              }\n\n              _context2.next = 10;\n              return sendCheckInNotificationForHotelAndClient(useReservation.gid, useReservation.reservno, useReservation.clientname, useReservation.email, locale, useReservation.hotelrefno);\n\n            case 10:\n              _context2.next = 12;\n              return getClientReservno(useReservation.clientid);\n\n            case 12:\n              enqueueSnackbar(t('str_checkInProccessSuccessful'), {\n                variant: 'success'\n              });\n              setIsCheckinLoading(false);\n              _context2.next = 18;\n              break;\n\n            case 16:\n              enqueueSnackbar(t('str_unexpectedProblem'), {\n                variant: 'warning'\n              });\n              setIsCheckinLoading(false);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleOnCheckin() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Dialog, {\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: open,\n    onClose: function onClose() {\n      return _onClose();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, __jsx(DialogTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, t('str_checkInConfirm')), __jsx(DialogContent, {\n    dividers: true,\n    style: {\n      overflowX: 'hidden',\n      overflowY: 'scroll'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, isLoading ? __jsx(LoadingSpinner, {\n    size: 40,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }) : !isLoading && !useReservation ? __jsx(Alert, {\n    severity: \"warning\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, t('str_widgetReservatListNoRecordYet')) : __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }, __jsx(TabHeader, {\n    title: t('str_checkInSummary'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    }\n  }), __jsx(CheckInReservationCard, {\n    useReservation: useReservation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }), __jsx(TabHeader, {\n    title: t('str_guest1'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  }), __jsx(PrimaryGuestCard, {\n    useClientOrestState: useClientOrestState,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  }))), __jsx(DialogActions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    disabled: isCheckinLoading,\n    onClick: function onClick() {\n      return _onClose();\n    },\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, t('str_close')), __jsx(Button, {\n    disabled: isCheckinLoading,\n    startIcon: isCheckinLoading ? __jsx(LoadingSpinner, {\n      size: 16,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 51\n      }\n    }) : null,\n    className: confirmClassName,\n    onClick: function onClick() {\n      return handleOnCheckin();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, t('str_confirm'))));\n};\n\n_s(CheckInConfirmation, \"FhAu8Xsf6mg/L7TItVZymXgivdE=\", false, function () {\n  return [useTranslation, useSnackbar, useSelector];\n});\n\n_c = CheckInConfirmation;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateState: function updateState(stateType, stateName, value) {\n      return dispatch(_updateState(stateType, stateName, value));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckInConfirmation);\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckInConfirmation\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/Details/CheckInConfirmation/index.js"],"names":["React","useContext","useEffect","useState","UseOrest","Patch","connect","useSelector","Button","Dialog","DialogActions","DialogContent","DialogTitle","Alert","WebCmsGlobal","useTranslation","useSnackbar","OREST_ENDPOINT","REQUEST_METHOD_CONST","updateState","LoadingSpinner","TabHeader","CheckInReservationCard","PrimaryGuestCard","sendCheckInNotificationForHotelAndClient","CheckInConfirmation","open","onClose","useClientOrestState","useClientReservation","confirmClassName","t","GENERAL_SETTINGS","locale","enqueueSnackbar","isLoading","setIsLoading","useReservation","setUseReservation","isCheckinLoading","setIsCheckinLoading","useToken","state","orest","currentUser","auth","access_token","isEffect","getReservation","gid","hotelrefno","apiUrl","OREST_URL","endpoint","token","params","then","reservatViewGetResponse","status","data","handleReservatDoci","reservno","method","PUT","reservatDociResponse","res","setTemporaryRoomNoForReservation","RESERVAT","roomno","reservatPatchResponse","getClientReservno","clientid","GET","isgapp","clientReservnoResponse","count","hotelname","handleOnCheckin","hotelSettings","isCheckin","clientname","email","variant","overflowX","overflowY","mapStateToProps","formReducer","guest","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { UseOrest, Patch } from '@webcms/orest'\nimport { connect, useSelector } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Alert from '@material-ui/lab/Alert'\nimport WebCmsGlobal from 'components/webcms-global'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport { useSnackbar } from 'notistack'\nimport { OREST_ENDPOINT, REQUEST_METHOD_CONST } from 'model/orest/constants'\nimport { updateState } from 'state/actions'\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport TabHeader from 'components/layout/components/TabHeader'\nimport CheckInReservationCard from '../../Details/CheckInConfirmation/CheckInReservationCard'\nimport PrimaryGuestCard from '../../Details/CheckInConfirmation/PrimaryGuestCard'\nimport { sendCheckInNotificationForHotelAndClient } from '../../Base/helper'\n\nconst CheckInConfirmation = ({ open, onClose, updateState, useClientOrestState, useClientReservation, confirmClassName }) => {\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS, locale } = useContext(WebCmsGlobal)\n    const { enqueueSnackbar } = useSnackbar()\n    const [isLoading, setIsLoading] = useState(false)\n    const [useReservation, setUseReservation] = useState(false)\n    const [isCheckinLoading, setIsCheckinLoading] = useState(false)\n    const useToken = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n\n    useEffect(() => {\n        let isEffect = true\n\n        if (isEffect && open && useClientReservation) {\n            getReservation(useClientReservation.gid, useClientReservation.hotelrefno)\n        }\n\n        return () => {\n            isEffect = false\n        }\n    }, [open])\n\n    const getReservation = async (gid, hotelrefno) => {\n        setIsLoading(true)\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'reservat/view/get',\n            token: useToken,\n            params: {\n                gid: gid,\n                hotelrefno: hotelrefno,\n            },\n        }).then((reservatViewGetResponse) => {\n            if (reservatViewGetResponse.status === 200 && reservatViewGetResponse?.data?.data) {\n                setUseReservation(reservatViewGetResponse.data.data)\n                setIsLoading(false)\n                return true\n            } else {\n                setIsLoading(false)\n                return false\n            }\n        }).catch(()=> {\n            setIsLoading(false)\n            return false\n        })\n    }\n\n    const handleReservatDoci = (reservno) => {\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'reservat/doci',\n            token: useToken,\n            method: REQUEST_METHOD_CONST.PUT,\n            params: {\n                reservno: reservno,\n            },\n        }).then( (reservatDociResponse) => {\n            return !!reservatDociResponse.data.data.res\n        }).catch(()=> {\n           return false\n        })\n    }\n\n    const setTemporaryRoomNoForReservation = (gid, hotelrefno) => {\n        return Patch({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RESERVAT,\n            token: useToken,\n            gid: gid,\n            params: {\n                hotelrefno: hotelrefno\n            },\n            data: {\n                roomno: 'T'\n            }\n        }).then( (reservatPatchResponse) => {\n            return !!reservatPatchResponse.data.data\n        }).catch(()=> {\n            return false\n        })\n    }\n\n    const getClientReservno = (clientid) => {\n        updateState('guest', 'clientReservIsLoading', true)\n        return UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: 'client/reservno',\n            token: useToken,\n            method: REQUEST_METHOD_CONST.GET,\n            params: {\n                clientid: clientid,\n                isgapp: true,\n            },\n        }).then((clientReservnoResponse) => {\n            if (clientReservnoResponse.status === 200 && clientReservnoResponse.data.count > 0) {\n                updateState('guest', 'changeHotelRefno', clientReservnoResponse.data.data.hotelrefno)\n                updateState('guest', 'changeHotelName', clientReservnoResponse.data.data.hotelname)\n                updateState('guest', 'clientReservation', clientReservnoResponse.data.data)\n                updateState('guest', 'clientReservIsLoading', false)\n                return true\n            } else {\n                updateState('guest', 'clientReservation', null)\n                updateState('guest', 'clientReservIsLoading', false)\n                return false\n            }\n        })\n    }\n\n    const handleOnCheckin = async () =>{\n        setIsCheckinLoading(true)\n        if(!GENERAL_SETTINGS.hotelSettings.roomno && !useReservation.roomno){\n            await setTemporaryRoomNoForReservation(useReservation.gid, useReservation.hotelrefno)\n        }\n        const isCheckin = await handleReservatDoci(useReservation.reservno)\n        if(isCheckin){\n            await sendCheckInNotificationForHotelAndClient(useReservation.gid, useReservation.reservno, useReservation.clientname, useReservation.email, locale, useReservation.hotelrefno)\n            await getClientReservno(useReservation.clientid)\n            enqueueSnackbar(t('str_checkInProccessSuccessful'), { variant: 'success' })\n            setIsCheckinLoading(false)\n        }else{\n            enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n            setIsCheckinLoading(false)\n        }\n    }\n\n    return (\n        <Dialog fullWidth maxWidth='md' open={open} onClose={() => onClose()}>\n            <DialogTitle>{t('str_checkInConfirm')}</DialogTitle>\n            <DialogContent dividers style={{ overflowX: 'hidden', overflowY: 'scroll' }}>\n                {isLoading ? (\n                    <LoadingSpinner size={40} />\n                ): !isLoading && !useReservation ? (\n                    <Alert severity=\"warning\">{t('str_widgetReservatListNoRecordYet')}</Alert>\n                ) : (\n                    <React.Fragment>\n                        <TabHeader title={t('str_checkInSummary')}/>\n                        <CheckInReservationCard useReservation={useReservation}/>\n                        <TabHeader title={t('str_guest1')}/>\n                        <PrimaryGuestCard useClientOrestState={useClientOrestState} />\n                    </React.Fragment>\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={isCheckinLoading}\n                    onClick={() => onClose()}\n                    color='primary'\n                >\n                    {t('str_close')}\n                </Button>\n                <Button\n                    disabled={isCheckinLoading}\n                    startIcon={isCheckinLoading ? <LoadingSpinner size={16}/> : null}\n                    className={confirmClassName}\n                    onClick={() => handleOnCheckin()}\n                >\n                    {t('str_confirm')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckInConfirmation)\n"]},"metadata":{},"sourceType":"module"}