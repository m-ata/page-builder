{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/Details/ChangePassword.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from 'react';\nimport { UseOrest } from '@webcms/orest';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport WebCmsGlobal from 'components/webcms-global';\nimport Grid from '@material-ui/core/Grid';\nimport useNotifications from 'model/notification/useNotifications';\nimport IconButton from '@material-ui/core/IconButton';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Container from '@material-ui/core/Container';\nimport LockIcon from '@material-ui/icons/Lock';\nimport { Typography } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\n\nconst ChangePassword = props => {\n  var _values$password, _values$passwordrepea;\n\n  //props\n  const {\n    textClassName,\n    textFieldClassName,\n    dialogButtonClassName,\n    disabled,\n    align,\n    buttonVisible,\n    dialogOpen,\n    onClose\n  } = props;\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); //context\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal); //redux\n\n  const token = useSelector(state => {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  const clientBase = useSelector(state => {\n    var _state$orest2, _state$orest2$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest2 = state.orest) === null || _state$orest2 === void 0 ? void 0 : (_state$orest2$state = _state$orest2.state) === null || _state$orest2$state === void 0 ? void 0 : _state$orest2$state.client) || false;\n  });\n  const loginfo = useSelector(state => {\n    var _state$orest3, _state$orest3$current;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest3 = state.orest) === null || _state$orest3 === void 0 ? void 0 : (_state$orest3$current = _state$orest3.currentUser) === null || _state$orest3$current === void 0 ? void 0 : _state$orest3$current.loginfo) || false;\n  });\n  const isClient = loginfo.roletype === '6500310'; //state\n\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n\n    if (typeof onClose === \"function\") {\n      onClose(false);\n    }\n\n    setValues({\n      password: ''\n    }, {\n      passwordrepeat: ''\n    });\n  };\n\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    password: '',\n    showPassword: false,\n    passwordrepeat: '',\n    showPasswordRepeat: false\n  });\n\n  const handleChange = prop => event => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [prop]: event.target.value\n    }));\n  };\n\n  const handleClickShowPassword = name => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: !values[name]\n    }));\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const handleSave = () => {\n    if (!values.password && !values.passwordrepeat) {\n      enqueueSnackbar(t('str_pleaseCheckMandatoryFields'), {\n        variant: 'warning'\n      });\n    } else if (values.password !== values.passwordrepeat) {\n      enqueueSnackbar(t('str_wrongMatchPassword'), {\n        variant: 'error'\n      });\n    } else {\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: 'tools/user/password',\n        method: 'put',\n        token: token,\n        params: {\n          email: isClient ? clientBase === null || clientBase === void 0 ? void 0 : clientBase.email : loginfo === null || loginfo === void 0 ? void 0 : loginfo.email,\n          pass: values.password,\n          sendmsg: false\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          enqueueSnackbar(t('str_yourRequestHasBeenSaved'), {\n            variant: 'success'\n          });\n          handleClose();\n        } else {\n          enqueueSnackbar(t('str_unexpectedProblem'), {\n            variant: 'error'\n          });\n          handleClose();\n        }\n      });\n    }\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, buttonVisible ? __jsx(\"div\", {\n    style: {\n      padding: 7,\n      textAlign: align ? align : 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    className: dialogButtonClassName || null,\n    color: 'primary',\n    startIcon: __jsx(LockIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 100\n      }\n    }),\n    variant: \"outlined\",\n    onClick: handleClickOpen,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, t('str_changePassword'))) : null, __jsx(Dialog, {\n    open: dialogOpen || open,\n    onClose: handleClose,\n    maxWidth: 'xs',\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, __jsx(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, t('str_changePassword')), __jsx(Container, {\n    maxWidth: \"xs\",\n    style: {\n      paddingBottom: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 25\n    }\n  }, __jsx(Typography, {\n    className: textClassName || null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }, `${t('str_newPassword')}*`), __jsx(FormControl, {\n    className: textFieldClassName || null,\n    variant: \"outlined\",\n    fullWidth: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  }, __jsx(OutlinedInput, {\n    id: \"outlined-adornment-password\",\n    type: values.showPassword ? 'text' : 'password',\n    value: values.password,\n    onChange: handleChange('password'),\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: () => handleClickShowPassword('showPassword'),\n      onMouseDown: e => handleMouseDownPassword(e),\n      edge: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 45\n      }\n    }, values.showPassword ? __jsx(Visibility, {\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 57\n      }\n    }) : __jsx(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 57\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 33\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }\n  }, __jsx(Typography, {\n    className: textClassName || null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 29\n    }\n  }, `${t('str_newPassword')}(${t('str_repeat')})*`), __jsx(FormControl, {\n    className: textFieldClassName || null,\n    variant: \"outlined\",\n    fullWidth: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 29\n    }\n  }, __jsx(OutlinedInput, {\n    id: \"outlined-adornment-password\",\n    type: values.showPasswordRepeat ? 'text' : 'password',\n    value: values.passwordrepeat,\n    onChange: handleChange('passwordrepeat'),\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 41\n      }\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: () => handleClickShowPassword('showPasswordRepeat'),\n      onMouseDown: e => handleMouseDownPassword(e),\n      edge: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 45\n      }\n    }, values.showPasswordRepeat ? __jsx(Visibility, {\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 57\n      }\n    }) : __jsx(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 57\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 33\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, __jsx(DialogActions, {\n    style: {\n      padding: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    color: 'primary',\n    variant: 'outlined',\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 33\n    }\n  }, t('str_close')), __jsx(Button, {\n    disabled: ((_values$password = values.password) === null || _values$password === void 0 ? void 0 : _values$password.length) <= 0 || ((_values$passwordrepea = values.passwordrepeat) === null || _values$passwordrepea === void 0 ? void 0 : _values$passwordrepea.length) <= 0,\n    variant: 'contained',\n    color: 'primary',\n    onClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 33\n    }\n  }, t('str_save'))))))));\n};\n\nChangePassword.defaultProps = {\n  dialogButtonClassName: null,\n  textClassName: null,\n  textFieldClassName: null,\n  closeButtonClassName: null,\n  saveButtonClassName: null,\n  visibilityIconColor: '',\n  buttonVisible: true,\n  dialogOpen: false\n};\nChangePassword.propTypes = {\n  dialogButtonClassName: PropTypes.string,\n  textClassName: PropTypes.string,\n  textFieldClassName: PropTypes.string,\n  closeButtonClassName: PropTypes.string,\n  saveButtonClassName: PropTypes.string,\n  visibilityIconColor: PropTypes.string,\n  buttonVisible: PropTypes.bool,\n  dialogOpen: PropTypes.bool\n};\nexport default ChangePassword;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/Details/ChangePassword.js"],"names":["React","useState","useContext","UseOrest","PropTypes","useSelector","Button","Dialog","DialogActions","DialogTitle","useTranslation","WebCmsGlobal","Grid","useNotifications","IconButton","OutlinedInput","InputAdornment","FormControl","Visibility","VisibilityOff","Container","LockIcon","Typography","useSnackbar","ChangePassword","props","textClassName","textFieldClassName","dialogButtonClassName","disabled","align","buttonVisible","dialogOpen","onClose","enqueueSnackbar","t","GENERAL_SETTINGS","token","state","orest","currentUser","auth","access_token","clientBase","client","loginfo","isClient","roletype","open","setOpen","handleClickOpen","handleClose","setValues","password","passwordrepeat","values","showPassword","showPasswordRepeat","handleChange","prop","event","target","value","handleClickShowPassword","name","handleMouseDownPassword","preventDefault","handleSave","variant","apiUrl","OREST_URL","endpoint","method","params","email","pass","sendmsg","then","response","status","padding","textAlign","paddingBottom","e","length","defaultProps","closeButtonClassName","saveButtonClassName","visibilityIconColor","propTypes","string","bool"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,WAAT,QAA4B,WAA5B;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA,QAAM;AACFC,IAAAA,aADE;AAEFC,IAAAA,kBAFE;AAGFC,IAAAA,qBAHE;AAIFC,IAAAA,QAJE;AAKFC,IAAAA,KALE;AAMFC,IAAAA,aANE;AAOFC,IAAAA,UAPE;AAQFC,IAAAA;AARE,MASFR,KATJ;AAWA,QAAM;AAAES,IAAAA;AAAF,MAAsBX,WAAW,EAAvC,CAb8B,CAe9B;;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAQzB,cAAc,EAA5B;AACA,QAAM;AAAE0B,IAAAA;AAAF,MAAuBlC,UAAU,CAACS,YAAD,CAAvC,CAjB8B,CAmB9B;;AACA,QAAM0B,KAAK,GAAGhC,WAAW,CAAEiC,KAAD;AAAA;;AAAA,WAAW,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,4BAAAA,KAAK,CAAEC,KAAP,uFAAcC,WAAd,0GAA2BC,IAA3B,kFAAiCC,YAAjC,KAAiD,KAA5D;AAAA,GAAD,CAAzB;AACA,QAAMC,UAAU,GAAGtC,WAAW,CAAEiC,KAAD;AAAA;;AAAA,WAAW,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,6BAAAA,KAAK,CAAEC,KAAP,uFAAcD,KAAd,4EAAqBM,MAArB,KAA+B,KAA1C;AAAA,GAAD,CAA9B;AACA,QAAMC,OAAO,GAAGxC,WAAW,CAAEiC,KAAD;AAAA;;AAAA,WAAW,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,6BAAAA,KAAK,CAAEC,KAAP,yFAAcC,WAAd,gFAA2BK,OAA3B,KAAsC,KAAjD;AAAA,GAAD,CAA3B;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAACE,QAAR,KAAqB,SAAtC,CAvB8B,CAyB9B;;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBhD,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMiD,eAAe,GAAG,MAAM;AAC1BD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAFD;;AAIA,QAAME,WAAW,GAAG,MAAM;AACtBF,IAAAA,OAAO,CAAC,KAAD,CAAP;;AAEA,QAAG,OAAOhB,OAAP,KAAmB,UAAtB,EAAiC;AAC7BA,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH;;AAEDmB,IAAAA,SAAS,CAAC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAD,EAAmB;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAnB,CAAT;AACH,GARD;;AAUA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASH;AAAT,MAAsBnD,QAAQ,CAAC;AACjCoD,IAAAA,QAAQ,EAAE,EADuB;AAEjCG,IAAAA,YAAY,EAAE,KAFmB;AAGjCF,IAAAA,cAAc,EAAE,EAHiB;AAIjCG,IAAAA,kBAAkB,EAAE;AAJa,GAAD,CAApC;;AAOA,QAAMC,YAAY,GAAIC,IAAD,IAAWC,KAAD,IAAW;AACtCR,IAAAA,SAAS,iCAAMG,MAAN;AAAc,OAACI,IAAD,GAAQC,KAAK,CAACC,MAAN,CAAaC;AAAnC,OAAT;AACH,GAFD;;AAIA,QAAMC,uBAAuB,GAAIC,IAAD,IAAU;AACtCZ,IAAAA,SAAS,iCAAMG,MAAN;AAAc,OAACS,IAAD,GAAQ,CAACT,MAAM,CAACS,IAAD;AAA7B,OAAT;AACH,GAFD;;AAIA,QAAMC,uBAAuB,GAAIL,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACM,cAAN;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACrB,QAAI,CAACZ,MAAM,CAACF,QAAR,IAAoB,CAACE,MAAM,CAACD,cAAhC,EAAgD;AAC5CpB,MAAAA,eAAe,CAACC,CAAC,CAAC,gCAAD,CAAF,EAAsC;AAAEiC,QAAAA,OAAO,EAAE;AAAX,OAAtC,CAAf;AACH,KAFD,MAEO,IAAIb,MAAM,CAACF,QAAP,KAAoBE,MAAM,CAACD,cAA/B,EAA+C;AAClDpB,MAAAA,eAAe,CAACC,CAAC,CAAC,wBAAD,CAAF,EAA8B;AAAEiC,QAAAA,OAAO,EAAE;AAAX,OAA9B,CAAf;AACH,KAFM,MAEA;AACHjE,MAAAA,QAAQ,CAAC;AACLkE,QAAAA,MAAM,EAAEjC,gBAAgB,CAACkC,SADpB;AAELC,QAAAA,QAAQ,EAAE,qBAFL;AAGLC,QAAAA,MAAM,EAAE,KAHH;AAILnC,QAAAA,KAAK,EAAEA,KAJF;AAKLoC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE5B,QAAQ,GAAGH,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAE+B,KAAf,GAAuB7B,OAAvB,aAAuBA,OAAvB,uBAAuBA,OAAO,CAAE6B,KAD3C;AAEJC,UAAAA,IAAI,EAAEpB,MAAM,CAACF,QAFT;AAGJuB,UAAAA,OAAO,EAAE;AAHL;AALH,OAAD,CAAR,CAUGC,IAVH,CAUSC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB7C,UAAAA,eAAe,CAACC,CAAC,CAAC,6BAAD,CAAF,EAAmC;AAAEiC,YAAAA,OAAO,EAAE;AAAX,WAAnC,CAAf;AACAjB,UAAAA,WAAW;AACd,SAHD,MAGO;AACHjB,UAAAA,eAAe,CAACC,CAAC,CAAC,uBAAD,CAAF,EAA6B;AAAEiC,YAAAA,OAAO,EAAE;AAAX,WAA7B,CAAf;AACAjB,UAAAA,WAAW;AACd;AACJ,OAlBD;AAmBH;AACJ,GA1BD;;AA4BA,SACI,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKpB,aAAa,GACV;AAAK,IAAA,KAAK,EAAE;AAAEiD,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,SAAS,EAAEnD,KAAK,GAAGA,KAAH,GAAW;AAAzC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAEF,qBAAqB,IAAI,IAA5C;AAAkD,IAAA,KAAK,EAAE,SAAzD;AAAoE,IAAA,SAAS,EAAE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/E;AAA6F,IAAA,OAAO,EAAC,UAArG;AAAgH,IAAA,OAAO,EAAEsB,eAAzH;AAA0I,IAAA,QAAQ,EAAErB,QAApJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKM,CAAC,CAAC,oBAAD,CADN,CADJ,CADU,GAKD,IANjB,EAOI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAEH,UAAU,IAAIgB,IAA5B;AAAkC,IAAA,OAAO,EAAEG,WAA3C;AAAwD,IAAA,QAAQ,EAAE,IAAlE;AAAwE,uBAAgB,mBAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqChB,CAAC,CAAC,oBAAD,CAAtC,CADJ,EAEI,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAyB,IAAA,KAAK,EAAE;AAAE+C,MAAAA,aAAa,EAAE;AAAjB,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAY,IAAA,SAAS,EAAExD,aAAa,IAAI,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgD,GAAES,CAAC,CAAC,iBAAD,CAAoB,GAAvE,CADJ,EAEI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAER,kBAAkB,IAAI,IAA9C;AAAoD,IAAA,OAAO,EAAC,UAA5D;AAAuE,IAAA,SAAS,EAAE,IAAlF;AAAwF,IAAA,QAAQ,MAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AACI,IAAA,EAAE,EAAC,6BADP;AAEI,IAAA,IAAI,EAAE4B,MAAM,CAACC,YAAP,GAAsB,MAAtB,GAA+B,UAFzC;AAGI,IAAA,KAAK,EAAED,MAAM,CAACF,QAHlB;AAII,IAAA,QAAQ,EAAEK,YAAY,CAAC,UAAD,CAJ1B;AAKI,IAAA,YAAY,EACR,MAAC,cAAD;AAAgB,MAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AACI,oBAAW,4BADf;AAEI,MAAA,OAAO,EAAE,MAAMK,uBAAuB,CAAC,cAAD,CAF1C;AAGI,MAAA,WAAW,EAAEoB,CAAC,IAAIlB,uBAAuB,CAACkB,CAAD,CAH7C;AAII,MAAA,IAAI,EAAC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOQ5B,MAAM,CAACC,YAAP,GACI,MAAC,UAAD;AAAY,MAAA,KAAK,EAAE,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,GAGI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVZ,CADJ,CANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CADJ,EA6BI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAY,IAAA,SAAS,EAAE9B,aAAa,IAAI,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgD,GAAES,CAAC,CAAC,iBAAD,CAAoB,IAAGA,CAAC,CAAC,YAAD,CAAe,IAA1F,CADJ,EAEI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAER,kBAAkB,IAAI,IAA9C;AAAoD,IAAA,OAAO,EAAC,UAA5D;AAAuE,IAAA,SAAS,EAAE,IAAlF;AAAwF,IAAA,QAAQ,MAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AACI,IAAA,EAAE,EAAC,6BADP;AAEI,IAAA,IAAI,EAAE4B,MAAM,CAACE,kBAAP,GAA4B,MAA5B,GAAqC,UAF/C;AAGI,IAAA,KAAK,EAAEF,MAAM,CAACD,cAHlB;AAII,IAAA,QAAQ,EAAEI,YAAY,CAAC,gBAAD,CAJ1B;AAKI,IAAA,YAAY,EACR,MAAC,cAAD;AAAgB,MAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AACI,oBAAW,4BADf;AAEI,MAAA,OAAO,EAAE,MAAMK,uBAAuB,CAAC,oBAAD,CAF1C;AAGI,MAAA,WAAW,EAAEoB,CAAC,IAAIlB,uBAAuB,CAACkB,CAAD,CAH7C;AAII,MAAA,IAAI,EAAC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOQ5B,MAAM,CAACE,kBAAP,GACI,MAAC,UAAD;AAAY,MAAA,KAAK,EAAE,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,GAGI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVZ,CADJ,CANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CA7BJ,EAyDI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,SAAf;AAA0B,IAAA,OAAO,EAAE,UAAnC;AAA+C,IAAA,OAAO,EAAE7B,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,CAAC,CAAC,WAAD,CADN,CADJ,EAII,MAAC,MAAD;AACI,IAAA,QAAQ,EAAE,qBAAAoB,MAAM,CAACF,QAAP,sEAAiB+B,MAAjB,KAA2B,CAA3B,IAAgC,0BAAA7B,MAAM,CAACD,cAAP,gFAAuB8B,MAAvB,KAAiC,CAD/E;AAEI,IAAA,OAAO,EAAE,WAFb;AAGI,IAAA,KAAK,EAAE,SAHX;AAII,IAAA,OAAO,EAAEjB,UAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKhC,CAAC,CAAC,UAAD,CANN,CAJJ,CADJ,CAzDJ,CADJ,CAFJ,CAPJ,CADJ;AAwFH,CAjLD;;AAmLAX,cAAc,CAAC6D,YAAf,GAA8B;AAC1BzD,EAAAA,qBAAqB,EAAE,IADG;AAE1BF,EAAAA,aAAa,EAAE,IAFW;AAG1BC,EAAAA,kBAAkB,EAAE,IAHM;AAI1B2D,EAAAA,oBAAoB,EAAE,IAJI;AAK1BC,EAAAA,mBAAmB,EAAE,IALK;AAM1BC,EAAAA,mBAAmB,EAAE,EANK;AAO1BzD,EAAAA,aAAa,EAAE,IAPW;AAQ1BC,EAAAA,UAAU,EAAE;AARc,CAA9B;AAWAR,cAAc,CAACiE,SAAf,GAA2B;AACvB7D,EAAAA,qBAAqB,EAAExB,SAAS,CAACsF,MADV;AAEvBhE,EAAAA,aAAa,EAAEtB,SAAS,CAACsF,MAFF;AAGvB/D,EAAAA,kBAAkB,EAAEvB,SAAS,CAACsF,MAHP;AAIvBJ,EAAAA,oBAAoB,EAAElF,SAAS,CAACsF,MAJT;AAKvBH,EAAAA,mBAAmB,EAAEnF,SAAS,CAACsF,MALR;AAMvBF,EAAAA,mBAAmB,EAAEpF,SAAS,CAACsF,MANR;AAOvB3D,EAAAA,aAAa,EAAE3B,SAAS,CAACuF,IAPF;AAQvB3D,EAAAA,UAAU,EAAE5B,SAAS,CAACuF;AARC,CAA3B;AAWA,eAAenE,cAAf","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { UseOrest } from '@webcms/orest'\nimport PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport WebCmsGlobal from 'components/webcms-global'\nimport Grid from '@material-ui/core/Grid'\nimport useNotifications from 'model/notification/useNotifications'\nimport IconButton from '@material-ui/core/IconButton'\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport FormControl from '@material-ui/core/FormControl'\nimport Visibility from '@material-ui/icons/Visibility'\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\nimport Container from '@material-ui/core/Container'\nimport LockIcon from '@material-ui/icons/Lock'\nimport { Typography } from '@material-ui/core'\nimport { useSnackbar } from 'notistack'\n\nconst ChangePassword = (props) => {\n    //props\n    const {\n        textClassName,\n        textFieldClassName,\n        dialogButtonClassName,\n        disabled,\n        align,\n        buttonVisible,\n        dialogOpen,\n        onClose\n    } = props\n\n    const { enqueueSnackbar } = useSnackbar()\n\n    //context\n    const { t } = useTranslation()\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n\n    //redux\n    const token = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n    const clientBase = useSelector((state) => state?.orest?.state?.client || false)\n    const loginfo = useSelector((state) => state?.orest?.currentUser?.loginfo || false)\n    const isClient = loginfo.roletype === '6500310'\n\n    //state\n    const [open, setOpen] = useState(false)\n\n    const handleClickOpen = () => {\n        setOpen(true)\n    }\n\n    const handleClose = () => {\n        setOpen(false)\n\n        if(typeof onClose === \"function\"){\n            onClose(false)\n        }\n\n        setValues({ password: '' }, { passwordrepeat: '' })\n    }\n\n    const [values, setValues] = useState({\n        password: '',\n        showPassword: false,\n        passwordrepeat: '',\n        showPasswordRepeat: false,\n    })\n\n    const handleChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value })\n    }\n\n    const handleClickShowPassword = (name) => {\n        setValues({ ...values, [name]: !values[name] })\n    }\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault()\n    }\n\n    const handleSave = () => {\n        if (!values.password && !values.passwordrepeat) {\n            enqueueSnackbar(t('str_pleaseCheckMandatoryFields'), { variant: 'warning' })\n        } else if (values.password !== values.passwordrepeat) {\n            enqueueSnackbar(t('str_wrongMatchPassword'), { variant: 'error' })\n        } else {\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: 'tools/user/password',\n                method: 'put',\n                token: token,\n                params: {\n                    email: isClient ? clientBase?.email : loginfo?.email,\n                    pass: values.password,\n                    sendmsg: false,\n                },\n            }).then((response) => {\n                if (response.status === 200) {\n                    enqueueSnackbar(t('str_yourRequestHasBeenSaved'), { variant: 'success' })\n                    handleClose()\n                } else {\n                    enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'error' })\n                    handleClose()\n                }\n            })\n        }\n    }\n\n    return (\n        <React.Fragment>\n            {buttonVisible ?\n                <div style={{ padding: 7, textAlign: align ? align : 'center' }}>\n                    <Button className={dialogButtonClassName || null} color={'primary'} startIcon={<LockIcon />} variant='outlined' onClick={handleClickOpen} disabled={disabled}>\n                        {t('str_changePassword')}\n                    </Button>\n                </div> : null}\n            <Dialog open={dialogOpen || open} onClose={handleClose} maxWidth={'xs'} aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>{t('str_changePassword')}</DialogTitle>\n                <Container maxWidth='xs' style={{ paddingBottom: '16px' }}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <Typography className={textClassName || null}>{`${t('str_newPassword')}*`}</Typography>\n                            <FormControl className={textFieldClassName || null} variant='outlined' fullWidth={true} required>\n                                <OutlinedInput\n                                    id='outlined-adornment-password'\n                                    type={values.showPassword ? 'text' : 'password'}\n                                    value={values.password}\n                                    onChange={handleChange('password')}\n                                    endAdornment={\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                aria-label='toggle password visibility'\n                                                onClick={() => handleClickShowPassword('showPassword')}\n                                                onMouseDown={e => handleMouseDownPassword(e)}\n                                                edge='end'\n                                            >\n                                                {\n                                                    values.showPassword ?\n                                                        <Visibility color={'primary'}/>\n                                                        :\n                                                        <VisibilityOff />\n                                                }\n                                            </IconButton>\n                                        </InputAdornment>\n                                    }\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Typography className={textClassName || null}>{`${t('str_newPassword')}(${t('str_repeat')})*`}</Typography>\n                            <FormControl className={textFieldClassName || null} variant='outlined' fullWidth={true} required>\n                                <OutlinedInput\n                                    id='outlined-adornment-password'\n                                    type={values.showPasswordRepeat ? 'text' : 'password'}\n                                    value={values.passwordrepeat}\n                                    onChange={handleChange('passwordrepeat')}\n                                    endAdornment={\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                aria-label='toggle password visibility'\n                                                onClick={() => handleClickShowPassword('showPasswordRepeat')}\n                                                onMouseDown={e => handleMouseDownPassword(e)}\n                                                edge='end'\n                                            >\n                                                {\n                                                    values.showPasswordRepeat ?\n                                                        <Visibility color={'primary'}/>\n                                                        :\n                                                        <VisibilityOff />\n                                                }\n                                            </IconButton>\n                                        </InputAdornment>\n                                    }\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <DialogActions style={{ padding: '0' }}>\n                                <Button color={'primary'} variant={'outlined'} onClick={handleClose}>\n                                    {t('str_close')}\n                                </Button>\n                                <Button\n                                    disabled={values.password?.length <= 0 || values.passwordrepeat?.length <= 0}\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    onClick={handleSave}\n                                >\n                                    {t('str_save')}\n                                </Button>\n                            </DialogActions>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nChangePassword.defaultProps = {\n    dialogButtonClassName: null,\n    textClassName: null,\n    textFieldClassName: null,\n    closeButtonClassName: null,\n    saveButtonClassName: null,\n    visibilityIconColor: '',\n    buttonVisible: true,\n    dialogOpen: false\n}\n\nChangePassword.propTypes = {\n    dialogButtonClassName: PropTypes.string,\n    textClassName: PropTypes.string,\n    textFieldClassName: PropTypes.string,\n    closeButtonClassName: PropTypes.string,\n    saveButtonClassName: PropTypes.string,\n    visibilityIconColor: PropTypes.string,\n    buttonVisible: PropTypes.bool,\n    dialogOpen: PropTypes.bool\n}\n\nexport default ChangePassword\n"]},"metadata":{},"sourceType":"module"}