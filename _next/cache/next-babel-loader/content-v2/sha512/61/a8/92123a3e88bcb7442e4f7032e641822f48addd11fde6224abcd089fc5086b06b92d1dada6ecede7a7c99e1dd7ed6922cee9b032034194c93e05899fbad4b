{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/MyRequest/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ViewList, Insert, Upload, List, UseOrest } from '@webcms/orest';\nimport { DEFAULT_OREST_TOKEN, isErrorMsg, OREST_ENDPOINT, useOrestQuery } from 'model/orest/constants';\nimport WebCmsGlobal from 'components/webcms-global';\nimport useNotifications from 'model/notification/useNotifications';\nimport MaterialTable, { MTableHeader } from 'material-table';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\nimport LoadingSpinner from 'components/LoadingSpinner';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport clsx from 'clsx';\nimport { useRouter } from 'next/router';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport AddIcon from '@material-ui/icons/Add';\nimport { sendGuestChangeNotifyMail } from '../Base/helper';\nimport { CustomToolTip } from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport { SLASH } from \"../../../../model/globals\";\nimport MaterialTableLocalization from \"../../../MaterialTableLocalization\";\nimport { decimalColorToHexCode } from \"../../../../@webcms-globals/helpers\";\nimport { DropzoneDialog } from 'material-ui-dropzone';\nconst useStyles = makeStyles(theme => ({\n  saveRequestWrapper: {\n    position: 'relative'\n  },\n  saveRequestButton: {\n    minWidth: 105\n  },\n  saveRequestProgress: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12\n  },\n  dialogKiosk: {\n    marginTop: -285\n  },\n  container: {\n    border: \"1px solid #B2CECF\",\n    padding: \"8px\",\n    textAlign: \"center\",\n    height: \"60vh\",\n    maxHeight: \"60vh\",\n    overflow: \"auto\"\n  },\n  formControlLabelStyle: {\n    whiteSpace: \"nowrap\",\n    \"& .MuiFormControlLabel-label\": {\n      fontSize: \"13px\"\n    }\n  },\n  overflowContainer: {\n    maxWidth: '255px',\n    minWidth: '255px',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis'\n  }\n}));\n\nconst MyRequest = props => {\n  var _state$clientReservat;\n\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    t\n  } = useTranslation();\n  const classes = useStyles();\n  const {\n    state\n  } = props;\n  const router = useRouter();\n  const isKiosk = router.query.kiosk === 'true' ? true : false;\n  const getOpenForm = router.query.open === 'true' ? true : false; //redux\n\n  const {\n    showSuccess,\n    showError\n  } = useNotifications();\n  const token = useSelector(state => {\n    var _state$orest, _state$orest$currentU, _state$orest$currentU2;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : (_state$orest$currentU2 = _state$orest$currentU.auth) === null || _state$orest$currentU2 === void 0 ? void 0 : _state$orest$currentU2.access_token) || false;\n  });\n  const clientBase = useSelector(state => {\n    var _state$orest2, _state$orest2$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest2 = state.orest) === null || _state$orest2 === void 0 ? void 0 : (_state$orest2$state = _state$orest2.state) === null || _state$orest2$state === void 0 ? void 0 : _state$orest2$state.client) || false;\n  });\n  const reservBase = state.clientReservation || false;\n  const hotelRefNo = (state === null || state === void 0 ? void 0 : state.changeHotelRefno) || (state === null || state === void 0 ? void 0 : (_state$clientReservat = state.clientReservation) === null || _state$clientReservat === void 0 ? void 0 : _state$clientReservat.hotelrefno) || GENERAL_SETTINGS.HOTELREFNO;\n  const loginfo = useSelector(state => state.orest.currentUser && state.orest.currentUser.loginfo); //state\n\n  const {\n    0: file,\n    1: setFile\n  } = useState(null);\n  const {\n    0: fileDialog,\n    1: setFileDialog\n  } = useState(false);\n  const {\n    0: agencyCode,\n    1: setAgencyCode\n  } = useState('');\n  const {\n    0: tsTrans,\n    1: setTsTrans\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: tsType,\n    1: setTsType\n  } = useState([]);\n  const {\n    0: selectedTransType,\n    1: setSelectedTransType\n  } = useState(false);\n  const {\n    0: tsDesc,\n    1: setTsDesc\n  } = useState([]);\n  const {\n    0: tsDescId,\n    1: setTsDescId\n  } = useState(false);\n  const {\n    0: tsNote,\n    1: setTsNote\n  } = useState('');\n  const {\n    0: isReqType,\n    1: setIsReqType\n  } = useState(false);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: requestIsLoading,\n    1: setRequestIsLoading\n  } = useState(false);\n  const {\n    0: openTsDescDialog,\n    1: setOpenTsDescDialog\n  } = useState(false);\n  const {\n    0: tsCategoryList,\n    1: setTsCategoryList\n  } = useState([]);\n  const {\n    0: selectedTsCategory,\n    1: setSelectedTsCategory\n  } = useState(null);\n  const {\n    0: tsTypeList,\n    1: setTsTypeList\n  } = useState([]);\n  const {\n    0: isTsTypeLoading,\n    1: setIsTsTypeLoading\n  } = useState(false);\n  const {\n    0: selectedTsType,\n    1: setSelectedTsType\n  } = useState(null);\n  const {\n    0: tsDescList,\n    1: setTsDescList\n  } = useState([]);\n  const {\n    0: isTsDescLoading,\n    1: setIsTsDescLoading\n  } = useState(false);\n  const {\n    0: isTsDescLoadingFromMain,\n    1: setIsTsDescLoadingFromMain\n  } = useState(false);\n  const {\n    0: selectedTsDesc,\n    1: setSelectedTsDesc\n  } = useState(null);\n  const {\n    0: confirmedValue,\n    1: setConfirmedValue\n  } = useState(null);\n  const isClient = loginfo.roletype === '6500310';\n  useEffect(() => {\n    if (getOpenForm) {\n      handleOpenRequest(true);\n    }\n  }, []);\n\n  const handleOpenRequest = isreq => {\n    setIsReqType(isreq);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setRequestIsLoading(false);\n    setTsType([]);\n    setSelectedTransType(false);\n    setTsDesc([]);\n    setTsDescId(false);\n    setTsNote('');\n    setIsReqType(false);\n    delete router.query.open;\n  };\n\n  const getTsTrans = active => {\n    setIsLoading(true);\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.TSTRANS,\n      token,\n      params: {\n        query: `requestedbyid:${clientBase.id},hotelrefno:${hotelRefNo}`,\n        sort: 'insdatetime-',\n        allhotels: true\n      }\n    }).then(r => {\n      if (active) {\n        if (r.status === 200) {\n          setTsTrans(r.data.data);\n          setIsLoading(false);\n        } else {\n          const retErr = isErrorMsg(r);\n          showError(retErr.errorMsg);\n          setIsLoading(false);\n        }\n      }\n    });\n  };\n\n  const getTsCat = (type, catId) => {\n    if (type === \"get\") {\n      List({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: \"tscategory\",\n        token: token,\n        params: {\n          query: \"isactive:true\",\n          hotelrefno: hotelRefNo,\n          field: \"transtype\",\n          text: `${selectedTransType.code},null`\n        }\n      }).then(res => {\n        if (res.status === 200) {\n          if (res.data.count > 0) {\n            setSelectedTsCategory(res.data.data[0].id);\n            setTsCategoryList(res.data.data);\n            getTsType(\"get\", res.data.data[0].id);\n          } else {\n            setSelectedTsCategory(null);\n          }\n        }\n      });\n    } else if (type === \"select\") {\n      getTsType(\"get\", catId);\n    }\n  };\n\n  const getTsType = (type, catId, tsTypeId) => {\n    if (type === \"get\") {\n      setIsTsTypeLoading(true);\n      List({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.TSTYPE,\n        token: token,\n        params: {\n          query: `isactive:true,catid:${catId}`,\n          hotelrefno: hotelRefNo\n        }\n      }).then(r1 => {\n        if (r1.status === 200) {\n          setIsTsTypeLoading(false);\n\n          if (r1.data.count > 0) {\n            setSelectedTsType(r1.data.data[0].id);\n            setTsTypeList(r1.data.data);\n            getTsDesc(catId, r1.data.data[0].id);\n          } else {\n            setSelectedTsType(null);\n            setSelectedTsDesc(null);\n            setTsDescList([]);\n            setTsTypeList([]);\n            setIsTsDescLoading(false);\n          }\n        } else {\n          setIsTsTypeLoading(false);\n        }\n      });\n    } else if (type === \"select\") {\n      setIsTsDescLoading(true);\n      setTsDescList([]);\n      getTsDesc(catId, tsTypeId);\n    }\n  };\n\n  const getTsDesc = (catId, tsTypeId) => {\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.TSDESC,\n      token: token,\n      params: {\n        hotelrefno: hotelRefNo,\n        query: `isactive:true,tscatid${catId},tstypeid:${tsTypeId},transtype:${selectedTransType.code}`\n      }\n    }).then(r2 => {\n      if (r2.status === 200) {\n        setIsTsDescLoading(false);\n\n        if (r2.data.count > 0) {\n          setTsDescList(r2.data.data);\n          setSelectedTsDesc(r2.data.data[0].id);\n        } else {\n          setTsDescList([]);\n          setSelectedTsDesc(null);\n        }\n      } else {\n        setIsTsDescLoading(false);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!isClient) {\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.CLIENT + SLASH + OREST_ENDPOINT.RESERVNO,\n        token,\n        params: {\n          clientid: clientBase === null || clientBase === void 0 ? void 0 : clientBase.id\n        }\n      }).then(res => {\n        if (res.status === 200) {\n          var _res$data, _res$data$data;\n\n          setAgencyCode((res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.agencycode) || '');\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (selectedTransType && !isClient) {\n      getTsCat(\"get\");\n      setIsTsDescLoadingFromMain(true);\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.TSDESC,\n        token: token,\n        params: {\n          limit: 25,\n          query: `isactive:true,transtype:${selectedTransType.code}`,\n          hotelrefno: hotelRefNo\n        }\n      }).then(r1 => {\n        if (r1.status === 200) {\n          setIsTsDescLoadingFromMain(false);\n\n          if (r1.data.count > 0) {\n            setTsDesc(r1.data.data);\n          } else {\n            setTsDesc([]);\n          }\n        } else {\n          setTsDesc([]);\n          setIsTsDescLoadingFromMain(false);\n        }\n      });\n    }\n  }, [selectedTransType]);\n  useEffect(() => {\n    let active = true;\n\n    if (active) {\n      if (isLoading) {\n        return undefined;\n      }\n\n      if (isClient) {\n        if (!Object.keys(tsType).length > 0) {\n          ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.TSTYPE,\n            token,\n            params: {\n              query: useOrestQuery({\n                code: `*GUESTAPP.`\n              }),\n              hotelrefno: hotelRefNo,\n              allhotels: true\n            }\n          }).then(r => {\n            if (r.status === 200) {\n              setTsType(r.data.data);\n              setSelectedTransType(r.data.data[0]);\n            }\n          });\n        }\n      } else {\n        if (tsType.length <= 0) {\n          UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.TRANSTYPE + SLASH + OREST_ENDPOINT.VIEW + SLASH + OREST_ENDPOINT.TSTRANSTYPE,\n            token,\n            params: {\n              hotelrefno: hotelRefNo,\n              query: \"isactive:true\"\n            }\n          }).then(res => {\n            if (res.status === 200) {\n              setTsType(res.data.data);\n              setSelectedTransType(res.data.data[0]);\n            }\n          });\n        }\n      }\n\n      if (!Object.keys(tsTrans).length > 0 && clientBase !== null && clientBase !== void 0 && clientBase.id) {\n        getTsTrans(active);\n      } else {\n        setIsLoading(false);\n      }\n    }\n\n    return () => {\n      active = false;\n      setIsLoading(false);\n    };\n  }, [open]);\n  useEffect(() => {\n    let active = true;\n\n    if (active) {\n      if (isLoading) {\n        return undefined;\n      }\n\n      getTsTrans(active);\n    }\n\n    return () => {\n      active = false;\n      setIsLoading(false);\n    };\n  }, [state.changeHotelRefno]);\n  useEffect(() => {\n    if (selectedTransType && isClient) {\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.TSDESC,\n        token,\n        params: {\n          query: useOrestQuery({\n            tstypeid: isClient ? selectedTransType.id : selectedTransType.code\n          }),\n          hotelrefno: hotelRefNo,\n          allhotels: true\n        }\n      }).then(r => {\n        if (r.status === 200) {\n          setTsDesc(r.data.data);\n        }\n      });\n    }\n  }, [selectedTransType]);\n\n  const handleSaveRequest = () => {\n    let setMyRequest = {};\n\n    if (confirmedValue) {\n      setMyRequest.tstypeid = confirmedValue.tstypeid;\n    }\n\n    if (selectedTransType) {\n      setMyRequest.transtype = isClient ? selectedTransType.transtype : selectedTransType.code;\n    }\n\n    if (tsDescId) {\n      setMyRequest.tsdescid = tsDescId;\n    }\n\n    if (!selectedTransType && !tsDescId) {\n      setMyRequest.description = tsNote;\n    } else {\n      setMyRequest.description = (confirmedValue === null || confirmedValue === void 0 ? void 0 : confirmedValue.description) || tsNote || \"\";\n    }\n\n    setMyRequest.requestedbyid = clientBase.id;\n    setMyRequest.note = tsNote;\n    setMyRequest.accid = clientBase.id;\n    setMyRequest.hotelrefno = hotelRefNo;\n    const notifyValues = {\n      \"roomno\": (reservBase === null || reservBase === void 0 ? void 0 : reservBase.roomno) || \"\",\n      \"clientname\": clientBase.clientname || \"\",\n      \"request\": t(setMyRequest.description, false, GENERAL_SETTINGS.hotelLocalLangGCode) || \"\",\n      \"description\": setMyRequest.note || \"\"\n    };\n\n    if (Number(state.changeHotelRefno) !== Number(state.clientReservation.hotelrefno)) {\n      enqueueSnackbar(t('str_youCanOnlyCreateARequestFromTheHotelYouAreStayingAt'), {\n        variant: 'warning'\n      });\n      return false;\n    }\n\n    if (!isReqType && setMyRequest.note || isReqType && setMyRequest.tstypeid && setMyRequest.tsdescid) {\n      setRequestIsLoading(true);\n      Insert({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.TSTRANS,\n        token: token,\n        params: {\n          hotelrefno: hotelRefNo\n        },\n        data: setMyRequest\n      }).then(async tsTransResponse => {\n        if (tsTransResponse.status === 200) {\n          if (file) {\n            Upload({\n              apiUrl: GENERAL_SETTINGS.OREST_URL,\n              token: token,\n              params: {\n                masterid: tsTransResponse.data.data.mid,\n                orsactive: true,\n                hotelrefno: hotelRefNo\n              },\n              files: [file]\n            });\n          }\n\n          enqueueSnackbar(t('str_contactMailSendMsg'), {\n            variant: 'success'\n          });\n          await sendGuestChangeNotifyMail(reservBase !== null && reservBase !== void 0 && reservBase.gid ? false : true, 'tstrans', 'upd', clientBase.id, reservBase !== null && reservBase !== void 0 && reservBase.gid ? reservBase.gid : clientBase.gid, notifyValues, (reservBase === null || reservBase === void 0 ? void 0 : reservBase.hotelrefno) || GENERAL_SETTINGS.HOTELREFNO);\n          getTsTrans(true);\n        } else {\n          setIsLoading(false);\n        }\n\n        setRequestIsLoading(false);\n        setTsType([]);\n        setSelectedTransType(false);\n        setTsDesc([]);\n        setTsDescId(false);\n        setTsNote('');\n        setFile(null);\n        setConfirmedValue(null);\n        handleClose();\n      });\n    } else {\n      enqueueSnackbar(t('str_fillRequiredFields'), {\n        variant: 'warning'\n      });\n    }\n  };\n\n  const tsTransColumns = [{\n    title: `${t('str_trans')}#`,\n    field: 'transno',\n    headerStyle: {\n      textAlign: 'right'\n    },\n    render: state => __jsx(Typography, {\n      style: {\n        fontSize: 'inherit',\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 17\n      }\n    }, state.transno)\n  }, {\n    title: t('str_status'),\n    field: 'status',\n    render: props => __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '8px',\n        height: '8px',\n        borderRadius: '50%',\n        backgroundColor: decimalColorToHexCode(props.statuscolor)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 21\n      }\n    }), __jsx(Typography, {\n      style: {\n        paddingLeft: '4px',\n        fontSize: 'inherit',\n        color: decimalColorToHexCode(props.statuscolor)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 21\n      }\n    }, props.status === \"UNDEFINED\" ? '-' : t(props.status)))\n  }, {\n    title: t('str_request'),\n    field: 'description',\n    render: props => {\n      var _props$description;\n\n      return ((_props$description = props.description) === null || _props$description === void 0 ? void 0 : _props$description.length) > 35 ? __jsx(CustomToolTip, {\n        title: props.description,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 21\n        }\n      }, __jsx(Typography, {\n        className: classes.overflowContainer,\n        style: {\n          fontSize: 'inherit'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 25\n        }\n      }, t(props.description))) : __jsx(Typography, {\n        style: {\n          fontSize: 'inherit'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 21\n        }\n      }, t(props.description));\n    }\n  }, {\n    title: t('str_explanation'),\n    field: 'note',\n    render: props => {\n      var _props$note;\n\n      return ((_props$note = props.note) === null || _props$note === void 0 ? void 0 : _props$note.length) > 35 ? __jsx(CustomToolTip, {\n        title: props.note,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 21\n        }\n      }, __jsx(Typography, {\n        className: classes.overflowContainer,\n        style: {\n          fontSize: 'inherit'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 25\n        }\n      }, props.note)) : __jsx(Typography, {\n        style: {\n          fontSize: 'inherit'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 21\n        }\n      }, props.note);\n    }\n  }, {\n    title: t('str_requestDate'),\n    field: 'transdate',\n    render: props => props.transdate && moment(props.transdate, 'YYYY-MM-DD').format('ddd, MMM DD, YYYY')\n  }];\n  return __jsx(Container, {\n    maxWidth: \"xl\",\n    style: {\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 37\n    }\n  }, __jsx(CustomToolTip, {\n    title: t('str_refresh'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 41\n    }\n  }, __jsx(IconButton, {\n    onClick: () => {\n      getTsTrans(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 45\n    }\n  }, __jsx(CachedIcon, {\n    style: {\n      color: \"#F16A4B\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 49\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 37\n    }\n  }, __jsx(CustomToolTip, {\n    title: t('str_add'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 41\n    }\n  }, __jsx(IconButton, {\n    onClick: () => handleOpenRequest(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 45\n    }\n  }, __jsx(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 49\n    }\n  })))))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 21\n    }\n  }, __jsx(MaterialTable, {\n    title: \"\",\n    options: {\n      headerStyle: {\n        cursor: 'default',\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        color: \"#A3A6B4\",\n        textTransform: \"uppercase\",\n        backgroundColor: \"#F5F6FA\",\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid #FFF'\n      },\n      cellStyle: {\n        whiteSpace: 'nowrap',\n        borderLeft: '1px solid rgba(224, 224, 224, 1)',\n        minWidth: '100px'\n      },\n      search: false,\n      toolbar: false,\n      sorting: false\n    },\n    isLoading: isLoading,\n    columns: tsTransColumns,\n    data: tsTrans,\n    localization: MaterialTableLocalization,\n    components: {\n      Header: props => {\n        const overrideProps = _objectSpread({}, props);\n\n        overrideProps.draggable = false;\n        return __jsx(MTableHeader, _extends({}, overrideProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 41\n          }\n        }));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 25\n    }\n  }), __jsx(Dialog, {\n    fullWidth: true,\n    maxWidth: \"md\",\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"add-new-request-dialog-title\",\n    \"aria-describedby\": \"add-new-request-dialog-description\",\n    classes: {\n      paper: clsx(null, {\n        [classes.dialogKiosk]: isKiosk\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 25\n    }\n  }, __jsx(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 29\n    }\n  }, t('str_addNewRecord')), __jsx(DialogContent, {\n    dividers: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 33\n    }\n  }, isReqType && __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 41\n    }\n  }, !isClient ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 53\n    }\n  }, __jsx(TextField, {\n    value: agencyCode,\n    disabled: true,\n    fullWidth: true,\n    variant: 'outlined',\n    label: t('str_company'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 57\n    }\n  })) : null, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 45\n    }\n  }, __jsx(Autocomplete, {\n    value: selectedTransType ? selectedTransType : null,\n    disableClearable: true,\n    fullWidth: true,\n    id: \"request-type\",\n    options: tsType,\n    disabled: requestIsLoading,\n    getOptionLabel: option => t(option.description),\n    getOptionSelected: (option, value) => option.id === value.id,\n    onKeyUp: (event, newValue) => {\n      if (newValue && newValue.id) {\n        //setTsDesc([])\n        setTsDescId(false);\n        setSelectedTransType(newValue);\n        setConfirmedValue(null);\n      }\n    },\n    onKeyDown: (event, newValue) => {\n      if (newValue && newValue.id) {\n        //setTsDesc([])\n        setTsDescId(false);\n        setSelectedTransType(newValue);\n        setConfirmedValue(null);\n      }\n    },\n    onChange: (event, newValue) => {\n      if (newValue && newValue.id) {\n        //setTsDesc([])\n        setTsDescId(false);\n        setSelectedTransType(newValue);\n        setConfirmedValue(null);\n      }\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      required: true,\n      label: t('str_requestType'),\n      fullWidth: true,\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 57\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 49\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: isClient ? 12 : 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 45\n    }\n  }, __jsx(Autocomplete, {\n    value: confirmedValue ? confirmedValue : null,\n    fullWidth: true,\n    disabled: !selectedTransType || requestIsLoading || isTsDescLoadingFromMain,\n    id: \"request\",\n    options: tsDesc,\n    getOptionLabel: option => isClient ? t(option.description) : option.tscat + ' - ' + option.tstype + ' - ' + t(option.description),\n    getOptionSelected: (option, value) => option.id === value.id,\n    onKeyUp: (event, newValue) => {\n      if (newValue && newValue.id) {\n        setTsDescId(newValue.id);\n        setConfirmedValue(newValue);\n      }\n    },\n    onKeyDown: (event, newValue) => {\n      if (newValue && newValue.id) {\n        setTsDescId(newValue.id);\n        setConfirmedValue(newValue);\n      }\n    },\n    onChange: (event, newValue) => {\n      if (newValue && newValue.id) {\n        setTsDescId(newValue.id);\n        setConfirmedValue(newValue);\n      }\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      required: true,\n      label: t('str_request'),\n      fullWidth: true,\n      variant: \"outlined\",\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 69\n          }\n        }, isTsDescLoadingFromMain ? __jsx(LoadingSpinner, {\n          size: 18,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 100\n          }\n        }) : null, params.InputProps.endAdornment)\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 57\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 49\n    }\n  })), !isClient && __jsx(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 49\n    }\n  }, __jsx(CustomToolTip, {\n    title: t(\"str_selectTaskDescription\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 53\n    }\n  }, __jsx(IconButton, {\n    onClick: () => setOpenTsDescDialog(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 57\n    }\n  }, __jsx(FormatListBulletedIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 61\n    }\n  }))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 37\n    }\n  }, __jsx(TextField, {\n    value: tsNote,\n    required: !isReqType,\n    onKeyUp: e => setTsNote(e.target.value),\n    onKeyDown: e => setTsNote(e.target.value),\n    onChange: e => setTsNote(e.target.value),\n    disabled: isReqType && !tsDescId || requestIsLoading,\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"explanation\",\n    label: t('str_explanation'),\n    multiline: true,\n    rows: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 41\n    }\n  })), isReqType && __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 41\n    }\n  }, __jsx(Button, {\n    startIcon: __jsx(CloudUploadIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 64\n      }\n    }),\n    onClick: () => setFileDialog(true),\n    disabled: isReqType && !tsDescId || requestIsLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 45\n    }\n  }, t('str_upload')), __jsx(DropzoneDialog, {\n    dropzoneText: t('str_pleaseSelectFile'),\n    previewText: '',\n    cancelButtonText: t('str_cancel'),\n    dialogTitle: t('str_upload'),\n    submitButtonText: t('str_add'),\n    disabled: isReqType && !tsDescId || requestIsLoading,\n    open: fileDialog,\n    onSave: file => {\n      setFileDialog(false);\n      setFile(file[0]);\n    },\n    acceptedFiles: ['image/jpeg', 'image/png', 'image/bmp', 'image/gif'],\n    showPreviews: true,\n    filesLimit: 1,\n    maxFileSize: 5000000,\n    onClose: () => setFileDialog(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 45\n    }\n  })))), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    disabled: requestIsLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 33\n    }\n  }, t('str_cancel')), __jsx(\"div\", {\n    className: classes.saveRequestWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 33\n    }\n  }, __jsx(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: () => handleSaveRequest(),\n    disabled: requestIsLoading,\n    fullWidth: true,\n    className: classes.saveRequestButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 802,\n      columnNumber: 37\n    }\n  }, t('str_save'), requestIsLoading && __jsx(LoadingSpinner, {\n    size: 24,\n    className: classes.saveRequestProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 812,\n      columnNumber: 45\n    }\n  }))))), __jsx(Dialog, {\n    open: openTsDescDialog,\n    fullWidth: true,\n    maxWidth: \"md\",\n    onClose: () => setOpenTsDescDialog(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: \"24px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    style: {\n      fontSize: \"24px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 41\n    }\n  }, t(\"str_tsDesc\"))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 37\n    }\n  }, __jsx(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 41\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"table\",\n      margin: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 45\n    }\n  }, __jsx(RadioGroup, {\n    value: selectedTsCategory ? selectedTsCategory.toString() : \"\",\n    name: \"tsCategory\",\n    onChange: e => {\n      getTsCat(\"select\", e.target.value);\n      setSelectedTsCategory(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 49\n    }\n  }, tsCategoryList.length > 0 ? tsCategoryList.map((item, i) => __jsx(FormControlLabel, {\n    className: classes.formControlLabelStyle,\n    id: `radio-${i}`,\n    name: `radio-${i}`,\n    value: String(item.id),\n    control: __jsx(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 196\n      }\n    }),\n    label: item.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 844,\n      columnNumber: 65\n    }\n  })) : __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 61\n    }\n  }, t(\"str_noRecordsToDisplay\")))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 855,\n      columnNumber: 37\n    }\n  }, __jsx(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 856,\n      columnNumber: 41\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"table\",\n      margin: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 45\n    }\n  }, isTsTypeLoading ? __jsx(LoadingSpinner, {\n    size: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 860,\n      columnNumber: 57\n    }\n  }) : __jsx(RadioGroup, {\n    value: selectedTsType ? selectedTsType.toString() : \"\",\n    name: \"tsType\",\n    onChange: e => {\n      getTsType(\"select\", selectedTsCategory, e.target.value);\n      setSelectedTsType(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 57\n    }\n  }, tsTypeList.length > 0 ? tsTypeList.map((item, i) => __jsx(FormControlLabel, {\n    className: classes.formControlLabelStyle,\n    id: `radio-${i}`,\n    name: `radio-${i}`,\n    value: String(item.id),\n    control: __jsx(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 204\n      }\n    }),\n    label: item.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 872,\n      columnNumber: 73\n    }\n  })) : __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 875,\n      columnNumber: 69\n    }\n  }, t(\"str_noRecordsToDisplay\")))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 884,\n      columnNumber: 37\n    }\n  }, __jsx(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 885,\n      columnNumber: 41\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"table\",\n      margin: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 45\n    }\n  }, selectedTsType && !isTsTypeLoading && (isTsDescLoading ? __jsx(LoadingSpinner, {\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 890,\n      columnNumber: 61\n    }\n  }) : __jsx(RadioGroup, {\n    value: selectedTsDesc ? selectedTsDesc.toString() : \"\",\n    name: \"tsDesc\",\n    onChange: e => {\n      setSelectedTsDesc(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 61\n    }\n  }, tsDescList.length > 0 ? tsDescList.map((item, i) => __jsx(FormControlLabel, {\n    className: classes.formControlLabelStyle,\n    id: `radio-${i}`,\n    name: `radio-${i}`,\n    value: String(item.id),\n    control: __jsx(Radio, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 208\n      }\n    }),\n    label: item.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 901,\n      columnNumber: 77\n    }\n  })) : __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 904,\n      columnNumber: 73\n    }\n  }, t(\"str_noRecordsToDisplay\"))))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 37\n    }\n  }, __jsx(Button, {\n    onClick: () => setOpenTsDescDialog(false),\n    color: \"primary\",\n    disabled: requestIsLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 915,\n      columnNumber: 41\n    }\n  }, t('str_cancel')), __jsx(Button, {\n    onClick: () => {\n      const tsDesc = tsDescList.find(e => e.id === selectedTsDesc);\n      setOpenTsDescDialog(false);\n      setConfirmedValue(tsDesc && tsDesc);\n      setTsDescId(selectedTsDesc);\n    },\n    color: \"primary\",\n    variant: \"contained\",\n    disabled: requestIsLoading || !requestIsLoading && !selectedTsDesc,\n    className: classes.saveRequestButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 41\n    }\n  }, t('str_save'), requestIsLoading && __jsx(LoadingSpinner, {\n    size: 24,\n    className: classes.saveRequestProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 49\n    }\n  })))))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nexport default connect(mapStateToProps, null)(MyRequest);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/MyRequest/index.js"],"names":["React","useContext","useEffect","useState","useSelector","Container","Grid","makeStyles","ViewList","Insert","Upload","List","UseOrest","DEFAULT_OREST_TOKEN","isErrorMsg","OREST_ENDPOINT","useOrestQuery","WebCmsGlobal","useNotifications","MaterialTable","MTableHeader","useTranslation","Dialog","DialogActions","DialogContent","DialogTitle","Button","IconButton","CloudUploadIcon","TextField","Typography","Radio","RadioGroup","FormControlLabel","Autocomplete","FormatListBulletedIcon","LoadingSpinner","moment","connect","useSnackbar","clsx","useRouter","CachedIcon","AddIcon","sendGuestChangeNotifyMail","CustomToolTip","SLASH","MaterialTableLocalization","decimalColorToHexCode","DropzoneDialog","useStyles","theme","saveRequestWrapper","position","saveRequestButton","minWidth","saveRequestProgress","top","left","marginTop","marginLeft","dialogKiosk","container","border","padding","textAlign","height","maxHeight","overflow","formControlLabelStyle","whiteSpace","fontSize","overflowContainer","maxWidth","textOverflow","MyRequest","props","GENERAL_SETTINGS","enqueueSnackbar","t","classes","state","router","isKiosk","query","kiosk","getOpenForm","open","showSuccess","showError","token","orest","currentUser","auth","access_token","clientBase","client","reservBase","clientReservation","hotelRefNo","changeHotelRefno","hotelrefno","HOTELREFNO","loginfo","file","setFile","fileDialog","setFileDialog","agencyCode","setAgencyCode","tsTrans","setTsTrans","isLoading","setIsLoading","tsType","setTsType","selectedTransType","setSelectedTransType","tsDesc","setTsDesc","tsDescId","setTsDescId","tsNote","setTsNote","isReqType","setIsReqType","setOpen","requestIsLoading","setRequestIsLoading","openTsDescDialog","setOpenTsDescDialog","tsCategoryList","setTsCategoryList","selectedTsCategory","setSelectedTsCategory","tsTypeList","setTsTypeList","isTsTypeLoading","setIsTsTypeLoading","selectedTsType","setSelectedTsType","tsDescList","setTsDescList","isTsDescLoading","setIsTsDescLoading","isTsDescLoadingFromMain","setIsTsDescLoadingFromMain","selectedTsDesc","setSelectedTsDesc","confirmedValue","setConfirmedValue","isClient","roletype","handleOpenRequest","isreq","handleClose","getTsTrans","active","apiUrl","OREST_URL","endpoint","TSTRANS","params","id","sort","allhotels","then","r","status","data","retErr","errorMsg","getTsCat","type","catId","field","text","code","res","count","getTsType","tsTypeId","TSTYPE","r1","getTsDesc","TSDESC","r2","CLIENT","RESERVNO","clientid","agencycode","limit","undefined","Object","keys","length","TRANSTYPE","VIEW","TSTRANSTYPE","tstypeid","handleSaveRequest","setMyRequest","transtype","tsdescid","description","requestedbyid","note","accid","notifyValues","roomno","clientname","hotelLocalLangGCode","Number","variant","tsTransResponse","masterid","mid","orsactive","files","gid","tsTransColumns","title","headerStyle","render","transno","display","alignItems","width","borderRadius","backgroundColor","statuscolor","paddingLeft","color","transdate","format","cursor","fontWeight","textTransform","borderLeft","cellStyle","search","toolbar","sorting","Header","overrideProps","draggable","paper","option","value","event","newValue","tscat","tstype","InputProps","endAdornment","e","target","margin","toString","map","item","i","String","find","mapStateToProps","formReducer","guest"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCC,QAAzC,QAAyD,eAAzD;AACA,SAASC,mBAAT,EAA8BC,UAA9B,EAA0CC,cAA1C,EAA0DC,aAA1D,QAA+E,uBAA/E;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AACA,OAAOC,aAAP,IAAwBC,YAAxB,QAA6C,gBAA7C;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,sBAAP,MAAmC,uCAAnC;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,yBAAT,QAA0C,gBAA1C;AACA,SAAQC,aAAR,QAA4B,6DAA5B;AACA,SAASC,KAAT,QAAsB,2BAAtB;AACA,OAAOC,yBAAP,MAAsC,oCAAtC;AACA,SAAQC,qBAAR,QAAoC,qCAApC;AACA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,MAAMC,SAAS,GAAG3C,UAAU,CAAE4C,KAAD,KAAY;AACrCC,EAAAA,kBAAkB,EAAE;AAChBC,IAAAA,QAAQ,EAAE;AADM,GADiB;AAIrCC,EAAAA,iBAAiB,EAAE;AACfC,IAAAA,QAAQ,EAAE;AADK,GAJkB;AAOrCC,EAAAA,mBAAmB,EAAE;AACjBH,IAAAA,QAAQ,EAAE,UADO;AAEjBI,IAAAA,GAAG,EAAE,KAFY;AAGjBC,IAAAA,IAAI,EAAE,KAHW;AAIjBC,IAAAA,SAAS,EAAE,CAAC,EAJK;AAKjBC,IAAAA,UAAU,EAAE,CAAC;AALI,GAPgB;AAcrCC,EAAAA,WAAW,EAAE;AACTF,IAAAA,SAAS,EAAE,CAAC;AADH,GAdwB;AAiBrCG,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EAAE,mBADD;AAEPC,IAAAA,OAAO,EAAE,KAFF;AAGPC,IAAAA,SAAS,EAAE,QAHJ;AAIPC,IAAAA,MAAM,EAAE,MAJD;AAKPC,IAAAA,SAAS,EAAE,MALJ;AAMPC,IAAAA,QAAQ,EAAE;AANH,GAjB0B;AAyBrCC,EAAAA,qBAAqB,EAAE;AACnBC,IAAAA,UAAU,EAAE,QADO;AAEnB,oCAAgC;AAC5BC,MAAAA,QAAQ,EAAE;AADkB;AAFb,GAzBc;AA+BrCC,EAAAA,iBAAiB,EAAE;AACfC,IAAAA,QAAQ,EAAE,OADK;AAEflB,IAAAA,QAAQ,EAAE,OAFK;AAGfa,IAAAA,QAAQ,EAAE,QAHK;AAIfE,IAAAA,UAAU,EAAE,QAJG;AAKfI,IAAAA,YAAY,EAAE;AALC;AA/BkB,CAAZ,CAAD,CAA5B;;AAwCA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAuB5E,UAAU,CAACgB,YAAD,CAAvC;AACA,QAAM;AAAE6D,IAAAA;AAAF,MAAsBvC,WAAW,EAAvC;AACA,QAAM;AAAEwC,IAAAA;AAAF,MAAQ1D,cAAc,EAA5B;AACA,QAAM2D,OAAO,GAAG9B,SAAS,EAAzB;AACA,QAAM;AAAE+B,IAAAA;AAAF,MAAYL,KAAlB;AACA,QAAMM,MAAM,GAAGzC,SAAS,EAAxB;AACA,QAAM0C,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAaC,KAAb,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC,KAAvD;AACA,QAAMC,WAAW,GAAGJ,MAAM,CAACE,KAAP,CAAaG,IAAb,KAAsB,MAAtB,GAA+B,IAA/B,GAAsC,KAA1D,CARyB,CAUzB;;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA6BvE,gBAAgB,EAAnD;AACA,QAAMwE,KAAK,GAAGtF,WAAW,CAAE6E,KAAD;AAAA;;AAAA,WAAW,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,4BAAAA,KAAK,CAAEU,KAAP,uFAAcC,WAAd,0GAA2BC,IAA3B,kFAAiCC,YAAjC,KAAiD,KAA5D;AAAA,GAAD,CAAzB;AACA,QAAMC,UAAU,GAAG3F,WAAW,CAAE6E,KAAD;AAAA;;AAAA,WAAW,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,6BAAAA,KAAK,CAAEU,KAAP,uFAAcV,KAAd,4EAAqBe,MAArB,KAA+B,KAA1C;AAAA,GAAD,CAA9B;AACA,QAAMC,UAAU,GAAGhB,KAAK,CAACiB,iBAAN,IAA2B,KAA9C;AACA,QAAMC,UAAU,GAAG,CAAAlB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEmB,gBAAP,MAA2BnB,KAA3B,aAA2BA,KAA3B,gDAA2BA,KAAK,CAAEiB,iBAAlC,0DAA2B,sBAA0BG,UAArD,KAAmExB,gBAAgB,CAACyB,UAAvG;AACA,QAAMC,OAAO,GAAGnG,WAAW,CAAE6E,KAAD,IAAWA,KAAK,CAACU,KAAN,CAAYC,WAAZ,IAA2BX,KAAK,CAACU,KAAN,CAAYC,WAAZ,CAAwBW,OAA/D,CAA3B,CAhByB,CAkBzB;;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBtG,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM;AAAA,OAACuG,UAAD;AAAA,OAAaC;AAAb,MAA8BxG,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACyG,UAAD;AAAA,OAAaC;AAAb,MAA8B1G,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM;AAAA,OAAC2G,OAAD;AAAA,OAAUC;AAAV,MAAwB5G,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAAC6G,SAAD;AAAA,OAAYC;AAAZ,MAA4B9G,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM;AAAA,OAAC+G,MAAD;AAAA,OAASC;AAAT,MAAsBhH,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACiH,iBAAD;AAAA,OAAoBC;AAApB,MAA4ClH,QAAQ,CAAC,KAAD,CAA1D;AAEA,QAAM;AAAA,OAACmH,MAAD;AAAA,OAASC;AAAT,MAAsBpH,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACqH,QAAD;AAAA,OAAWC;AAAX,MAA0BtH,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAA,OAACuH,MAAD;AAAA,OAASC;AAAT,MAAsBxH,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACyH,SAAD;AAAA,OAAYC;AAAZ,MAA4B1H,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM;AAAA,OAACoF,IAAD;AAAA,OAAOuC;AAAP,MAAkB3H,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAA,OAAC4H,gBAAD;AAAA,OAAmBC;AAAnB,MAA0C7H,QAAQ,CAAC,KAAD,CAAxD;AAEA,QAAM;AAAA,OAAC8H,gBAAD;AAAA,OAAmBC;AAAnB,MAA0C/H,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM;AAAA,OAACgI,cAAD;AAAA,OAAiBC;AAAjB,MAAsCjI,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM;AAAA,OAACkI,kBAAD;AAAA,OAAqBC;AAArB,MAA8CnI,QAAQ,CAAC,IAAD,CAA5D;AAEA,QAAM;AAAA,OAACoI,UAAD;AAAA,OAAaC;AAAb,MAA8BrI,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACsI,eAAD;AAAA,OAAkBC;AAAlB,MAAwCvI,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAA,OAACwI,cAAD;AAAA,OAAiBC;AAAjB,MAAsCzI,QAAQ,CAAC,IAAD,CAApD;AAEA,QAAM;AAAA,OAAC0I,UAAD;AAAA,OAAaC;AAAb,MAA8B3I,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAAC4I,eAAD;AAAA,OAAkBC;AAAlB,MAAwC7I,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAA,OAAC8I,uBAAD;AAAA,OAA0BC;AAA1B,MAAwD/I,QAAQ,CAAC,KAAD,CAAtE;AACA,QAAM;AAAA,OAACgJ,cAAD;AAAA,OAAiBC;AAAjB,MAAsCjJ,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM;AAAA,OAACkJ,cAAD;AAAA,OAAiBC;AAAjB,MAAsCnJ,QAAQ,CAAC,IAAD,CAApD;AACA,QAAMoJ,QAAQ,GAAGhD,OAAO,CAACiD,QAAR,KAAqB,SAAtC;AAEAtJ,EAAAA,SAAS,CAAC,MAAK;AACX,QAAGoF,WAAH,EAAe;AACXmE,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMA,iBAAiB,GAAIC,KAAD,IAAW;AACjC7B,IAAAA,YAAY,CAAC6B,KAAD,CAAZ;AACA5B,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAHD;;AAKA,QAAM6B,WAAW,GAAG,MAAM;AACtB7B,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAE,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAb,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACAE,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAO3C,MAAM,CAACE,KAAP,CAAaG,IAApB;AACH,GAVD;;AAYA,QAAMqE,UAAU,GAAIC,MAAD,IAAY;AAC3B5C,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAzG,IAAAA,QAAQ,CAAC;AACLsJ,MAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADpB;AAELC,MAAAA,QAAQ,EAAEjJ,cAAc,CAACkJ,OAFpB;AAGLvE,MAAAA,KAHK;AAILwE,MAAAA,MAAM,EAAE;AACJ9E,QAAAA,KAAK,EAAE,iBAAgBW,UAAU,CAACoE,EAAG,eAAchE,UAAW,EAD1D;AAEJiE,QAAAA,IAAI,EAAC,cAFD;AAGJC,QAAAA,SAAS,EAAE;AAHP;AAJH,KAAD,CAAR,CASGC,IATH,CASSC,CAAD,IAAO;AACX,UAAIV,MAAJ,EAAY;AACR,YAAIU,CAAC,CAACC,MAAF,KAAa,GAAjB,EAAsB;AAClBzD,UAAAA,UAAU,CAACwD,CAAC,CAACE,IAAF,CAAOA,IAAR,CAAV;AACAxD,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,SAHD,MAGO;AACH,gBAAMyD,MAAM,GAAG5J,UAAU,CAACyJ,CAAD,CAAzB;AACA9E,UAAAA,SAAS,CAACiF,MAAM,CAACC,QAAR,CAAT;AACA1D,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ;AACJ,KApBD;AAqBH,GAvBD;;AAyBA,QAAM2D,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9B,QAAGD,IAAI,KAAK,KAAZ,EAAmB;AACflK,MAAAA,IAAI,CAAC;AACDmJ,QAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADxB;AAEDC,QAAAA,QAAQ,EAAE,YAFT;AAGDtE,QAAAA,KAAK,EAAEA,KAHN;AAIDwE,QAAAA,MAAM,EAAE;AACJ9E,UAAAA,KAAK,EAAE,eADH;AAEJiB,UAAAA,UAAU,EAAEF,UAFR;AAGJ4E,UAAAA,KAAK,EAAE,WAHH;AAIJC,UAAAA,IAAI,EAAG,GAAE5D,iBAAiB,CAAC6D,IAAK;AAJ5B;AAJP,OAAD,CAAJ,CAUGX,IAVH,CAUQY,GAAG,IAAI;AACX,YAAGA,GAAG,CAACV,MAAJ,KAAe,GAAlB,EAAuB;AACnB,cAAGU,GAAG,CAACT,IAAJ,CAASU,KAAT,GAAiB,CAApB,EAAuB;AACnB7C,YAAAA,qBAAqB,CAAC4C,GAAG,CAACT,IAAJ,CAASA,IAAT,CAAc,CAAd,EAAiBN,EAAlB,CAArB;AACA/B,YAAAA,iBAAiB,CAAC8C,GAAG,CAACT,IAAJ,CAASA,IAAV,CAAjB;AACAW,YAAAA,SAAS,CAAC,KAAD,EAAQF,GAAG,CAACT,IAAJ,CAASA,IAAT,CAAc,CAAd,EAAiBN,EAAzB,CAAT;AACH,WAJD,MAIO;AACH7B,YAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH;AAEJ;AAEJ,OAtBD;AAuBH,KAxBD,MAwBO,IAAGuC,IAAI,KAAK,QAAZ,EAAsB;AACzBO,MAAAA,SAAS,CAAC,KAAD,EAAQN,KAAR,CAAT;AACH;AACJ,GA5BD;;AA8BA,QAAMM,SAAS,GAAG,CAACP,IAAD,EAAOC,KAAP,EAAcO,QAAd,KAA2B;AACzC,QAAGR,IAAI,KAAK,KAAZ,EAAmB;AACfnC,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA/H,MAAAA,IAAI,CAAC;AACDmJ,QAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADxB;AAEDC,QAAAA,QAAQ,EAAEjJ,cAAc,CAACuK,MAFxB;AAGD5F,QAAAA,KAAK,EAAEA,KAHN;AAIDwE,QAAAA,MAAM,EAAE;AACJ9E,UAAAA,KAAK,EAAG,uBAAsB0F,KAAM,EADhC;AAEJzE,UAAAA,UAAU,EAAEF;AAFR;AAJP,OAAD,CAAJ,CAQGmE,IARH,CAQQiB,EAAE,IAAI;AACV,YAAGA,EAAE,CAACf,MAAH,KAAc,GAAjB,EAAsB;AAClB9B,UAAAA,kBAAkB,CAAC,KAAD,CAAlB;;AACA,cAAG6C,EAAE,CAACd,IAAH,CAAQU,KAAR,GAAgB,CAAnB,EAAsB;AAClBvC,YAAAA,iBAAiB,CAAC2C,EAAE,CAACd,IAAH,CAAQA,IAAR,CAAa,CAAb,EAAgBN,EAAjB,CAAjB;AACA3B,YAAAA,aAAa,CAAC+C,EAAE,CAACd,IAAH,CAAQA,IAAT,CAAb;AACAe,YAAAA,SAAS,CAACV,KAAD,EAAQS,EAAE,CAACd,IAAH,CAAQA,IAAR,CAAa,CAAb,EAAgBN,EAAxB,CAAT;AACH,WAJD,MAIO;AACHvB,YAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAQ,YAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAN,YAAAA,aAAa,CAAC,EAAD,CAAb;AACAN,YAAAA,aAAa,CAAC,EAAD,CAAb;AACAQ,YAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH;AACJ,SAbD,MAaO;AACHN,UAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH;AACJ,OAzBD;AA0BH,KA5BD,MA4BO,IAAGmC,IAAI,KAAK,QAAZ,EAAsB;AACzB7B,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,MAAAA,aAAa,CAAC,EAAD,CAAb;AACA0C,MAAAA,SAAS,CAACV,KAAD,EAAQO,QAAR,CAAT;AACH;AACJ,GAlCD;;AAoCA,QAAMG,SAAS,GAAG,CAACV,KAAD,EAAQO,QAAR,KAAqB;AACnC7K,IAAAA,QAAQ,CAAC;AACLsJ,MAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADpB;AAELC,MAAAA,QAAQ,EAAEjJ,cAAc,CAAC0K,MAFpB;AAGL/F,MAAAA,KAAK,EAAEA,KAHF;AAILwE,MAAAA,MAAM,EAAE;AACJ7D,QAAAA,UAAU,EAAEF,UADR;AAEJf,QAAAA,KAAK,EAAG,wBAAuB0F,KAAM,aAAYO,QAAS,cAAajE,iBAAiB,CAAC6D,IAAK;AAF1F;AAJH,KAAD,CAAR,CAQGX,IARH,CAQQoB,EAAE,IAAI;AACV,UAAGA,EAAE,CAAClB,MAAH,KAAc,GAAjB,EAAsB;AAClBxB,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;;AACA,YAAG0C,EAAE,CAACjB,IAAH,CAAQU,KAAR,GAAgB,CAAnB,EAAsB;AAClBrC,UAAAA,aAAa,CAAC4C,EAAE,CAACjB,IAAH,CAAQA,IAAT,CAAb;AACArB,UAAAA,iBAAiB,CAACsC,EAAE,CAACjB,IAAH,CAAQA,IAAR,CAAa,CAAb,EAAgBN,EAAjB,CAAjB;AACH,SAHD,MAGO;AACHrB,UAAAA,aAAa,CAAC,EAAD,CAAb;AACAM,UAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AAEJ,OAVD,MAUO;AACHJ,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH;AACJ,KAtBD;AAuBH,GAxBD;;AA0BA9I,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACqJ,QAAJ,EAAc;AACV3I,MAAAA,QAAQ,CAAC;AACLkJ,QAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADpB;AAELC,QAAAA,QAAQ,EAAEjJ,cAAc,CAAC4K,MAAf,GAAwB7I,KAAxB,GAAgC/B,cAAc,CAAC6K,QAFpD;AAGLlG,QAAAA,KAHK;AAILwE,QAAAA,MAAM,EAAE;AACJ2B,UAAAA,QAAQ,EAAE9F,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEoE;AADlB;AAJH,OAAD,CAAR,CAOGG,IAPH,CAOQY,GAAG,IAAI;AACX,YAAGA,GAAG,CAACV,MAAJ,KAAe,GAAlB,EAAuB;AAAA;;AACnB3D,UAAAA,aAAa,CAAC,CAAAqE,GAAG,SAAH,IAAAA,GAAG,WAAH,yBAAAA,GAAG,CAAET,IAAL,0EAAWA,IAAX,kEAAiBqB,UAAjB,KAA+B,EAAhC,CAAb;AACH;AACJ,OAXD;AAYH;AACJ,GAfQ,EAeN,EAfM,CAAT;AAiBA5L,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGkH,iBAAiB,IAAI,CAACmC,QAAzB,EAAmC;AAC/BqB,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACA1B,MAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACA1I,MAAAA,QAAQ,CAAC;AACLsJ,QAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADpB;AAELC,QAAAA,QAAQ,EAAEjJ,cAAc,CAAC0K,MAFpB;AAGL/F,QAAAA,KAAK,EAAEA,KAHF;AAILwE,QAAAA,MAAM,EAAE;AACJ6B,UAAAA,KAAK,EAAE,EADH;AAEJ3G,UAAAA,KAAK,EAAG,2BAA0BgC,iBAAiB,CAAC6D,IAAK,EAFrD;AAGJ5E,UAAAA,UAAU,EAAEF;AAHR;AAJH,OAAD,CAAR,CASGmE,IATH,CASQiB,EAAE,IAAI;AACV,YAAGA,EAAE,CAACf,MAAH,KAAc,GAAjB,EAAsB;AAClBtB,UAAAA,0BAA0B,CAAC,KAAD,CAA1B;;AACA,cAAGqC,EAAE,CAACd,IAAH,CAAQU,KAAR,GAAgB,CAAnB,EAAsB;AAClB5D,YAAAA,SAAS,CAACgE,EAAE,CAACd,IAAH,CAAQA,IAAT,CAAT;AACH,WAFD,MAEO;AACHlD,YAAAA,SAAS,CAAC,EAAD,CAAT;AACH;AACJ,SAPD,MAOO;AACHA,UAAAA,SAAS,CAAC,EAAD,CAAT;AACA2B,UAAAA,0BAA0B,CAAC,KAAD,CAA1B;AACH;AACJ,OArBD;AAsBH;AAEJ,GA5BQ,EA4BN,CAAC9B,iBAAD,CA5BM,CAAT;AA8BAlH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2J,MAAM,GAAG,IAAb;;AACA,QAAIA,MAAJ,EAAY;AACR,UAAI7C,SAAJ,EAAe;AACX,eAAOgF,SAAP;AACH;;AAED,UAAGzC,QAAH,EAAa;AACT,YAAI,CAAC0C,MAAM,CAACC,IAAP,CAAYhF,MAAZ,EAAoBiF,MAArB,GAA8B,CAAlC,EAAqC;AACjC3L,UAAAA,QAAQ,CAAC;AACLsJ,YAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADpB;AAELC,YAAAA,QAAQ,EAAEjJ,cAAc,CAACuK,MAFpB;AAGL5F,YAAAA,KAHK;AAILwE,YAAAA,MAAM,EAAE;AACJ9E,cAAAA,KAAK,EAAEpE,aAAa,CAAC;AACjBiK,gBAAAA,IAAI,EAAG;AADU,eAAD,CADhB;AAIJ5E,cAAAA,UAAU,EAAEF,UAJR;AAKJkE,cAAAA,SAAS,EAAE;AALP;AAJH,WAAD,CAAR,CAWGC,IAXH,CAWSC,CAAD,IAAO;AACX,gBAAIA,CAAC,CAACC,MAAF,KAAa,GAAjB,EAAsB;AAClBrD,cAAAA,SAAS,CAACoD,CAAC,CAACE,IAAF,CAAOA,IAAR,CAAT;AACApD,cAAAA,oBAAoB,CAACkD,CAAC,CAACE,IAAF,CAAOA,IAAP,CAAY,CAAZ,CAAD,CAApB;AACH;AACJ,WAhBD;AAiBH;AACJ,OApBD,MAoBO;AACH,YAAGvD,MAAM,CAACiF,MAAP,IAAiB,CAApB,EAAuB;AACnBvL,UAAAA,QAAQ,CAAC;AACLkJ,YAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADpB;AAELC,YAAAA,QAAQ,EAAEjJ,cAAc,CAACqL,SAAf,GAA2BtJ,KAA3B,GAAmC/B,cAAc,CAACsL,IAAlD,GAAyDvJ,KAAzD,GAAiE/B,cAAc,CAACuL,WAFrF;AAGL5G,YAAAA,KAHK;AAILwE,YAAAA,MAAM,EAAE;AACJ7D,cAAAA,UAAU,EAAEF,UADR;AAEJf,cAAAA,KAAK,EAAE;AAFH;AAJH,WAAD,CAAR,CAQGkF,IARH,CAQQY,GAAG,IAAI;AACX,gBAAGA,GAAG,CAACV,MAAJ,KAAe,GAAlB,EAAuB;AACnBrD,cAAAA,SAAS,CAAC+D,GAAG,CAACT,IAAJ,CAASA,IAAV,CAAT;AACApD,cAAAA,oBAAoB,CAAC6D,GAAG,CAACT,IAAJ,CAASA,IAAT,CAAc,CAAd,CAAD,CAApB;AACH;AACJ,WAbD;AAcH;AACJ;;AAED,UAAI,CAACwB,MAAM,CAACC,IAAP,CAAYpF,OAAZ,EAAqBqF,MAAtB,GAA+B,CAA/B,IAAoCpG,UAApC,aAAoCA,UAApC,eAAoCA,UAAU,CAAEoE,EAApD,EAAwD;AACpDP,QAAAA,UAAU,CAACC,MAAD,CAAV;AACH,OAFD,MAEO;AACH5C,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ;;AAED,WAAO,MAAM;AACT4C,MAAAA,MAAM,GAAG,KAAT;AACA5C,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHD;AAIH,GAzDQ,EAyDN,CAAC1B,IAAD,CAzDM,CAAT;AA2DArF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2J,MAAM,GAAG,IAAb;;AACA,QAAIA,MAAJ,EAAY;AACR,UAAI7C,SAAJ,EAAe;AACX,eAAOgF,SAAP;AACH;;AAEDpC,MAAAA,UAAU,CAACC,MAAD,CAAV;AACH;;AACD,WAAO,MAAM;AACTA,MAAAA,MAAM,GAAG,KAAT;AACA5C,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHD;AAIH,GAbQ,EAaN,CAAChC,KAAK,CAACmB,gBAAP,CAbM,CAAT;AAeAlG,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkH,iBAAiB,IAAImC,QAAzB,EAAmC;AAC/B/I,MAAAA,QAAQ,CAAC;AACLsJ,QAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADpB;AAELC,QAAAA,QAAQ,EAAEjJ,cAAc,CAAC0K,MAFpB;AAGL/F,QAAAA,KAHK;AAILwE,QAAAA,MAAM,EAAE;AACJ9E,UAAAA,KAAK,EAAEpE,aAAa,CAAC;AACjBuL,YAAAA,QAAQ,EAAEhD,QAAQ,GAAGnC,iBAAiB,CAAC+C,EAArB,GAA0B/C,iBAAiB,CAAC6D;AAD7C,WAAD,CADhB;AAIJ5E,UAAAA,UAAU,EAAEF,UAJR;AAKJkE,UAAAA,SAAS,EAAE;AALP;AAJH,OAAD,CAAR,CAWGC,IAXH,CAWSC,CAAD,IAAO;AACX,YAAIA,CAAC,CAACC,MAAF,KAAa,GAAjB,EAAsB;AAClBjD,UAAAA,SAAS,CAACgD,CAAC,CAACE,IAAF,CAAOA,IAAR,CAAT;AACH;AACJ,OAfD;AAgBH;AACJ,GAnBQ,EAmBN,CAACrD,iBAAD,CAnBM,CAAT;;AAqBA,QAAMoF,iBAAiB,GAAG,MAAM;AAC5B,QAAIC,YAAY,GAAG,EAAnB;;AAEA,QAAIpD,cAAJ,EAAoB;AAChBoD,MAAAA,YAAY,CAACF,QAAb,GAAwBlD,cAAc,CAACkD,QAAvC;AACH;;AAED,QAAGnF,iBAAH,EAAsB;AAClBqF,MAAAA,YAAY,CAACC,SAAb,GAAyBnD,QAAQ,GAAGnC,iBAAiB,CAACsF,SAArB,GAAiCtF,iBAAiB,CAAC6D,IAApF;AACH;;AAED,QAAIzD,QAAJ,EAAc;AACViF,MAAAA,YAAY,CAACE,QAAb,GAAwBnF,QAAxB;AACH;;AAED,QAAI,CAACJ,iBAAD,IAAsB,CAACI,QAA3B,EAAqC;AACjCiF,MAAAA,YAAY,CAACG,WAAb,GAA2BlF,MAA3B;AACH,KAFD,MAEK;AACD+E,MAAAA,YAAY,CAACG,WAAb,GAA2B,CAAAvD,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEuD,WAAhB,KAA+BlF,MAA/B,IAAyC,EAApE;AACH;;AAED+E,IAAAA,YAAY,CAACI,aAAb,GAA6B9G,UAAU,CAACoE,EAAxC;AACAsC,IAAAA,YAAY,CAACK,IAAb,GAAoBpF,MAApB;AACA+E,IAAAA,YAAY,CAACM,KAAb,GAAqBhH,UAAU,CAACoE,EAAhC;AACAsC,IAAAA,YAAY,CAACpG,UAAb,GAA0BF,UAA1B;AAEA,UAAM6G,YAAY,GAAG;AACjB,gBAAS,CAAA/G,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEgH,MAAZ,KAAsB,EADd;AAEjB,oBAAclH,UAAU,CAACmH,UAAX,IAAyB,EAFtB;AAGjB,iBAAWnI,CAAC,CAAC0H,YAAY,CAACG,WAAd,EAA2B,KAA3B,EAAkC/H,gBAAgB,CAACsI,mBAAnD,CAAD,IAA4E,EAHtE;AAIjB,qBAAeV,YAAY,CAACK,IAAb,IAAqB;AAJnB,KAArB;;AAOA,QAAGM,MAAM,CAACnI,KAAK,CAACmB,gBAAP,CAAN,KAAmCgH,MAAM,CAACnI,KAAK,CAACiB,iBAAN,CAAwBG,UAAzB,CAA5C,EAAiF;AAC7EvB,MAAAA,eAAe,CAACC,CAAC,CAAC,yDAAD,CAAF,EAA+D;AAAEsI,QAAAA,OAAO,EAAE;AAAX,OAA/D,CAAf;AACA,aAAO,KAAP;AACH;;AAED,QAAK,CAACzF,SAAD,IAAc6E,YAAY,CAACK,IAA5B,IAAsClF,SAAS,IAAI6E,YAAY,CAACF,QAA1B,IAAsCE,YAAY,CAACE,QAA7F,EAAwG;AACpG3E,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAvH,MAAAA,MAAM,CAAC;AACHqJ,QAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADtB;AAEHC,QAAAA,QAAQ,EAAEjJ,cAAc,CAACkJ,OAFtB;AAGHvE,QAAAA,KAAK,EAAEA,KAHJ;AAIHwE,QAAAA,MAAM,EAAE;AACJ7D,UAAAA,UAAU,EAAEF;AADR,SAJL;AAOHsE,QAAAA,IAAI,EAAEgC;AAPH,OAAD,CAAN,CAQGnC,IARH,CAQQ,MAAOgD,eAAP,IAA2B;AAC/B,YAAIA,eAAe,CAAC9C,MAAhB,KAA2B,GAA/B,EAAoC;AAChC,cAAIhE,IAAJ,EAAU;AACN9F,YAAAA,MAAM,CAAC;AACHoJ,cAAAA,MAAM,EAAEjF,gBAAgB,CAACkF,SADtB;AAEHrE,cAAAA,KAAK,EAAEA,KAFJ;AAGHwE,cAAAA,MAAM,EAAE;AACJqD,gBAAAA,QAAQ,EAAED,eAAe,CAAC7C,IAAhB,CAAqBA,IAArB,CAA0B+C,GADhC;AAEJC,gBAAAA,SAAS,EAAE,IAFP;AAGJpH,gBAAAA,UAAU,EAAEF;AAHR,eAHL;AAQHuH,cAAAA,KAAK,EAAE,CAAClH,IAAD;AARJ,aAAD,CAAN;AAUH;;AACD1B,UAAAA,eAAe,CAACC,CAAC,CAAC,wBAAD,CAAF,EAA8B;AAAEsI,YAAAA,OAAO,EAAE;AAAX,WAA9B,CAAf;AACA,gBAAMzK,yBAAyB,CAACqD,UAAU,SAAV,IAAAA,UAAU,WAAV,IAAAA,UAAU,CAAE0H,GAAZ,GAAkB,KAAlB,GAA0B,IAA3B,EAAgC,SAAhC,EAA0C,KAA1C,EAAgD5H,UAAU,CAACoE,EAA3D,EAA8DlE,UAAU,SAAV,IAAAA,UAAU,WAAV,IAAAA,UAAU,CAAE0H,GAAZ,GAAkB1H,UAAU,CAAC0H,GAA7B,GAAmC5H,UAAU,CAAC4H,GAA5G,EAAiHX,YAAjH,EAA+H,CAAA/G,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEI,UAAZ,KAA0BxB,gBAAgB,CAACyB,UAA1K,CAA/B;AACAsD,UAAAA,UAAU,CAAC,IAAD,CAAV;AACH,SAhBD,MAgBO;AACH3C,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AACDe,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAb,QAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,QAAAA,oBAAoB,CAAC,KAAD,CAApB;AACAE,QAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,QAAAA,SAAS,CAAC,EAAD,CAAT;AACAlB,QAAAA,OAAO,CAAC,IAAD,CAAP;AACA6C,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAK,QAAAA,WAAW;AACd,OArCD;AAsCH,KAxCD,MAwCO;AACH7E,MAAAA,eAAe,CAACC,CAAC,CAAC,wBAAD,CAAF,EAA8B;AAAEsI,QAAAA,OAAO,EAAE;AAAX,OAA9B,CAAf;AACH;AACJ,GAjFD;;AAmFA,QAAMO,cAAc,GAAG,CACnB;AACIC,IAAAA,KAAK,EAAG,GAAE9I,CAAC,CAAC,WAAD,CAAc,GAD7B;AAEIgG,IAAAA,KAAK,EAAE,SAFX;AAGI+C,IAAAA,WAAW,EAAE;AACT7J,MAAAA,SAAS,EAAE;AADF,KAHjB;AAMI8J,IAAAA,MAAM,EAAG9I,KAAD,IACJ,MAAC,UAAD;AAAY,MAAA,KAAK,EAAE;AAACV,QAAAA,QAAQ,EAAE,SAAX;AAAsBN,QAAAA,SAAS,EAAE;AAAjC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+DgB,KAAK,CAAC+I,OAArE;AAPR,GADmB,EAWnB;AAAEH,IAAAA,KAAK,EAAE9I,CAAC,CAAC,YAAD,CAAV;AACIgG,IAAAA,KAAK,EAAE,QADX;AAEIgD,IAAAA,MAAM,EAAEnJ,KAAK,IACT;AAAK,MAAA,KAAK,EAAE;AAACqJ,QAAAA,OAAO,EAAE,MAAV;AAAkBC,QAAAA,UAAU,EAAE;AAA9B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAejK,QAAAA,MAAM,EAAC,KAAtB;AAA6BkK,QAAAA,YAAY,EAAE,KAA3C;AAAkDC,QAAAA,eAAe,EAAErL,qBAAqB,CAAC4B,KAAK,CAAC0J,WAAP;AAAxF,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,MAAC,UAAD;AAAY,MAAA,KAAK,EAAE;AAACC,QAAAA,WAAW,EAAE,KAAd;AAAqBhK,QAAAA,QAAQ,EAAC,SAA9B;AAAyCiK,QAAAA,KAAK,EAAExL,qBAAqB,CAAC4B,KAAK,CAAC0J,WAAP;AAArE,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+G1J,KAAK,CAAC4F,MAAN,KAAiB,WAAjB,GAA+B,GAA/B,GAAqCzF,CAAC,CAACH,KAAK,CAAC4F,MAAP,CAArJ,CAFJ;AAHR,GAXmB,EAoBnB;AACIqD,IAAAA,KAAK,EAAE9I,CAAC,CAAC,aAAD,CADZ;AAEIgG,IAAAA,KAAK,EAAE,aAFX;AAGIgD,IAAAA,MAAM,EAAEnJ,KAAK;AAAA;;AAAA,aACT,uBAAAA,KAAK,CAACgI,WAAN,0EAAmBT,MAAnB,IAA4B,EAA5B,GACI,MAAC,aAAD;AAAe,QAAA,KAAK,EAAEvH,KAAK,CAACgI,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,UAAD;AAAY,QAAA,SAAS,EAAE5H,OAAO,CAACR,iBAA/B;AAAkD,QAAA,KAAK,EAAE;AAACD,UAAAA,QAAQ,EAAE;AAAX,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiFQ,CAAC,CAACH,KAAK,CAACgI,WAAP,CAAlF,CADJ,CADJ,GAKI,MAAC,UAAD;AAAa,QAAA,KAAK,EAAE;AAACrI,UAAAA,QAAQ,EAAE;AAAX,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4CQ,CAAC,CAACH,KAAK,CAACgI,WAAP,CAA7C,CANK;AAAA;AAHjB,GApBmB,EAiCnB;AACIiB,IAAAA,KAAK,EAAE9I,CAAC,CAAC,iBAAD,CADZ;AAEIgG,IAAAA,KAAK,EAAE,MAFX;AAGIgD,IAAAA,MAAM,EAAEnJ,KAAK;AAAA;;AAAA,aACT,gBAAAA,KAAK,CAACkI,IAAN,4DAAYX,MAAZ,IAAqB,EAArB,GACI,MAAC,aAAD;AAAe,QAAA,KAAK,EAAEvH,KAAK,CAACkI,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,UAAD;AAAY,QAAA,SAAS,EAAE9H,OAAO,CAACR,iBAA/B;AAAkD,QAAA,KAAK,EAAE;AAACD,UAAAA,QAAQ,EAAE;AAAX,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiFK,KAAK,CAACkI,IAAvF,CADJ,CADJ,GAKI,MAAC,UAAD;AAAa,QAAA,KAAK,EAAE;AAACvI,UAAAA,QAAQ,EAAE;AAAX,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4CK,KAAK,CAACkI,IAAlD,CANK;AAAA;AAHjB,GAjCmB,EA8CnB;AAACe,IAAAA,KAAK,EAAE9I,CAAC,CAAC,iBAAD,CAAT;AAA8BgG,IAAAA,KAAK,EAAE,WAArC;AAAkDgD,IAAAA,MAAM,EAAEnJ,KAAK,IAAIA,KAAK,CAAC6J,SAAN,IAAmBpM,MAAM,CAACuC,KAAK,CAAC6J,SAAP,EAAkB,YAAlB,CAAN,CAAsCC,MAAtC,CAA6C,mBAA7C;AAAtF,GA9CmB,CAAvB;AAiDA,SACQ,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAyB,IAAA,KAAK,EAAE;AAAC1K,MAAAA,OAAO,EAAE;AAAV,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEe,CAAC,CAAC,aAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AACI,IAAA,OAAO,EAAE,MAAM;AACX6E,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH,KAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,MAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAC4E,MAAAA,KAAK,EAAC;AAAP,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ,CADJ,CADJ,EAYI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEzJ,CAAC,CAAC,SAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AACI,IAAA,OAAO,EAAE,MAAM0E,iBAAiB,CAAC,IAAD,CADpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,CADJ,CAZJ,CADJ,CADJ,CADJ,CADJ,EA6BI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AACI,IAAA,KAAK,EAAC,EADV;AAEI,IAAA,OAAO,EAAE;AACLqE,MAAAA,WAAW,EAAC;AACRa,QAAAA,MAAM,EAAE,SADA;AAERC,QAAAA,UAAU,EAAC,MAFH;AAGRrK,QAAAA,QAAQ,EAAC,MAHD;AAIRiK,QAAAA,KAAK,EAAC,SAJE;AAKRK,QAAAA,aAAa,EAAC,WALN;AAMRR,QAAAA,eAAe,EAAC,SANR;AAOR/J,QAAAA,UAAU,EAAE,QAPJ;AAQRwK,QAAAA,UAAU,EAAE;AARJ,OADP;AAWLC,MAAAA,SAAS,EAAE;AACPzK,QAAAA,UAAU,EAAE,QADL;AAEPwK,QAAAA,UAAU,EAAE,kCAFL;AAGPvL,QAAAA,QAAQ,EAAE;AAHH,OAXN;AAgBLyL,MAAAA,MAAM,EAAE,KAhBH;AAiBLC,MAAAA,OAAO,EAAE,KAjBJ;AAkBLC,MAAAA,OAAO,EAAE;AAlBJ,KAFb;AAsBI,IAAA,SAAS,EAAElI,SAtBf;AAuBI,IAAA,OAAO,EAAE4G,cAvBb;AAwBI,IAAA,IAAI,EAAE9G,OAxBV;AAyBI,IAAA,YAAY,EAAE/D,yBAzBlB;AA0BI,IAAA,UAAU,EAAE;AACRoM,MAAAA,MAAM,EAAGvK,KAAD,IAAW;AACf,cAAMwK,aAAa,qBAAOxK,KAAP,CAAnB;;AACAwK,QAAAA,aAAa,CAACC,SAAd,GAA0B,KAA1B;AACA,eACI,MAAC,YAAD,eAAmBD,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAGH;AAPO,KA1BhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAqCI,MAAC,MAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,QAAQ,EAAC,IAFb;AAGI,IAAA,IAAI,EAAE7J,IAHV;AAII,IAAA,OAAO,EAAEoE,WAJb;AAKI,uBAAgB,8BALpB;AAMI,wBAAiB,oCANrB;AAOI,IAAA,OAAO,EAAE;AAAE2F,MAAAA,KAAK,EAAE9M,IAAI,CAAC,IAAD,EAAO;AAAE,SAACwC,OAAO,CAACnB,WAAT,GAAuBsB;AAAzB,OAAP;AAAb,KAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASI,MAAC,WAAD;AAAa,IAAA,EAAE,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCJ,CAAC,CAAC,kBAAD,CAAvC,CATJ,EAUI,MAAC,aAAD;AAAe,IAAA,QAAQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK6C,SAAS,IACN,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ,CAAC2B,QAAD,GACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAE3C,UADX;AAEI,IAAA,QAAQ,MAFZ;AAGI,IAAA,SAAS,MAHb;AAII,IAAA,OAAO,EAAE,UAJb;AAKI,IAAA,KAAK,EAAE7B,CAAC,CAAC,aAAD,CALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,GAUI,IAZZ,EAeI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD;AACI,IAAA,KAAK,EAAEqC,iBAAiB,GAAGA,iBAAH,GAAuB,IADnD;AAEI,IAAA,gBAAgB,EAAE,IAFtB;AAGI,IAAA,SAAS,EAAE,IAHf;AAII,IAAA,EAAE,EAAC,cAJP;AAKI,IAAA,OAAO,EAAEF,MALb;AAMI,IAAA,QAAQ,EAAEa,gBANd;AAOI,IAAA,cAAc,EAAGwH,MAAD,IAAYxK,CAAC,CAACwK,MAAM,CAAC3C,WAAR,CAPjC;AAQI,IAAA,iBAAiB,EAAE,CAAC2C,MAAD,EAASC,KAAT,KAAmBD,MAAM,CAACpF,EAAP,KAAcqF,KAAK,CAACrF,EAR9D;AASI,IAAA,OAAO,EAAE,CAACsF,KAAD,EAAQC,QAAR,KAAqB;AAC1B,UAAIA,QAAQ,IAAIA,QAAQ,CAACvF,EAAzB,EAA6B;AACzB;AACA1C,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,QAAAA,oBAAoB,CAACqI,QAAD,CAApB;AACApG,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AACJ,KAhBL;AAiBI,IAAA,SAAS,EAAE,CAACmG,KAAD,EAAQC,QAAR,KAAqB;AAC5B,UAAIA,QAAQ,IAAIA,QAAQ,CAACvF,EAAzB,EAA6B;AACzB;AACA1C,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,QAAAA,oBAAoB,CAACqI,QAAD,CAApB;AACApG,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AACJ,KAxBL;AAyBI,IAAA,QAAQ,EAAE,CAACmG,KAAD,EAAQC,QAAR,KAAqB;AAC3B,UAAIA,QAAQ,IAAIA,QAAQ,CAACvF,EAAzB,EAA6B;AACzB;AACA1C,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,QAAAA,oBAAoB,CAACqI,QAAD,CAApB;AACApG,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AACJ,KAhCL;AAiCI,IAAA,WAAW,EAAGY,MAAD,IACT,MAAC,SAAD,eACQA,MADR;AAEI,MAAA,QAAQ,EAAE,IAFd;AAGI,MAAA,KAAK,EAAEnF,CAAC,CAAC,iBAAD,CAHZ;AAII,MAAA,SAAS,EAAE,IAJf;AAKI,MAAA,OAAO,EAAC,UALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAlCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAfJ,EA4DI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAEwE,QAAQ,GAAG,EAAH,GAAQ,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD;AACI,IAAA,KAAK,EAAEF,cAAc,GAAGA,cAAH,GAAoB,IAD7C;AAEI,IAAA,SAAS,EAAE,IAFf;AAGI,IAAA,QAAQ,EAAE,CAACjC,iBAAD,IAAsBW,gBAAtB,IAA0CkB,uBAHxD;AAII,IAAA,EAAE,EAAC,SAJP;AAKI,IAAA,OAAO,EAAE3B,MALb;AAMI,IAAA,cAAc,EAAGiI,MAAD,IACZhG,QAAQ,GAAGxE,CAAC,CAACwK,MAAM,CAAC3C,WAAR,CAAJ,GAA2B2C,MAAM,CAACI,KAAP,GAAe,KAAf,GAAuBJ,MAAM,CAACK,MAA9B,GAAuC,KAAvC,GAA+C7K,CAAC,CAACwK,MAAM,CAAC3C,WAAR,CAP3F;AASI,IAAA,iBAAiB,EAAE,CAAC2C,MAAD,EAASC,KAAT,KAAmBD,MAAM,CAACpF,EAAP,KAAcqF,KAAK,CAACrF,EAT9D;AAUI,IAAA,OAAO,EAAE,CAACsF,KAAD,EAAQC,QAAR,KAAqB;AAC1B,UAAIA,QAAQ,IAAIA,QAAQ,CAACvF,EAAzB,EAA6B;AACzB1C,QAAAA,WAAW,CAACiI,QAAQ,CAACvF,EAAV,CAAX;AACAb,QAAAA,iBAAiB,CAACoG,QAAD,CAAjB;AACH;AACJ,KAfL;AAgBI,IAAA,SAAS,EAAE,CAACD,KAAD,EAAQC,QAAR,KAAqB;AAC5B,UAAIA,QAAQ,IAAIA,QAAQ,CAACvF,EAAzB,EAA6B;AACzB1C,QAAAA,WAAW,CAACiI,QAAQ,CAACvF,EAAV,CAAX;AACAb,QAAAA,iBAAiB,CAACoG,QAAD,CAAjB;AACH;AACJ,KArBL;AAsBI,IAAA,QAAQ,EAAE,CAACD,KAAD,EAAQC,QAAR,KAAqB;AAC3B,UAAIA,QAAQ,IAAIA,QAAQ,CAACvF,EAAzB,EAA6B;AACzB1C,QAAAA,WAAW,CAACiI,QAAQ,CAACvF,EAAV,CAAX;AACAb,QAAAA,iBAAiB,CAACoG,QAAD,CAAjB;AACH;AACJ,KA3BL;AA4BI,IAAA,WAAW,EAAGxF,MAAD,IACT,MAAC,SAAD,eACQA,MADR;AAEI,MAAA,QAAQ,EAAE,IAFd;AAGI,MAAA,KAAK,EAAEnF,CAAC,CAAC,aAAD,CAHZ;AAII,MAAA,SAAS,EAAE,IAJf;AAKI,MAAA,OAAO,EAAC,UALZ;AAMI,MAAA,UAAU,kCACHmF,MAAM,CAAC2F,UADJ;AAENC,QAAAA,YAAY,EACR,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK7G,uBAAuB,GAAG,MAAC,cAAD;AAAgB,UAAA,IAAI,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAH,GAAkC,IAD9D,EAEKiB,MAAM,CAAC2F,UAAP,CAAkBC,YAFvB;AAHE,QANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA7BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA5DJ,EA6GK,CAACvG,QAAD,IACG,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAe,IAAA,KAAK,EAAExE,CAAC,CAAC,2BAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AACI,IAAA,OAAO,EAAE,MAAMmD,mBAAmB,CAAC,IAAD,CADtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,MAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,CADJ,CA9GR,CAFR,EA4HI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAER,MADX;AAEI,IAAA,QAAQ,EAAE,CAACE,SAFf;AAGI,IAAA,OAAO,EAAGmI,CAAD,IAAOpI,SAAS,CAACoI,CAAC,CAACC,MAAF,CAASR,KAAV,CAH7B;AAII,IAAA,SAAS,EAAGO,CAAD,IAAOpI,SAAS,CAACoI,CAAC,CAACC,MAAF,CAASR,KAAV,CAJ/B;AAKI,IAAA,QAAQ,EAAGO,CAAD,IAAOpI,SAAS,CAACoI,CAAC,CAACC,MAAF,CAASR,KAAV,CAL9B;AAMI,IAAA,QAAQ,EAAG5H,SAAS,IAAI,CAACJ,QAAf,IAA4BO,gBAN1C;AAOI,IAAA,SAAS,MAPb;AAQI,IAAA,OAAO,EAAC,UARZ;AASI,IAAA,EAAE,EAAC,aATP;AAUI,IAAA,KAAK,EAAEhD,CAAC,CAAC,iBAAD,CAVZ;AAWI,IAAA,SAAS,MAXb;AAYI,IAAA,IAAI,EAAE,CAZV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA5HJ,EA4IK6C,SAAS,IACN,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAE,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnB;AAAwC,IAAA,OAAO,EAAE,MAAKjB,aAAa,CAAC,IAAD,CAAnE;AAA2E,IAAA,QAAQ,EAAGiB,SAAS,IAAI,CAACJ,QAAf,IAA4BO,gBAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoIhD,CAAC,CAAC,YAAD,CAArI,CADJ,EAEI,MAAC,cAAD;AACI,IAAA,YAAY,EAAEA,CAAC,CAAC,sBAAD,CADnB;AAEI,IAAA,WAAW,EAAE,EAFjB;AAGI,IAAA,gBAAgB,EAAEA,CAAC,CAAC,YAAD,CAHvB;AAII,IAAA,WAAW,EAAEA,CAAC,CAAC,YAAD,CAJlB;AAKI,IAAA,gBAAgB,EAAEA,CAAC,CAAC,SAAD,CALvB;AAMI,IAAA,QAAQ,EAAG6C,SAAS,IAAI,CAACJ,QAAf,IAA4BO,gBAN1C;AAOI,IAAA,IAAI,EAAErB,UAPV;AAQI,IAAA,MAAM,EAAGF,IAAD,IAAS;AACbG,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,MAAAA,OAAO,CAACD,IAAI,CAAC,CAAD,CAAL,CAAP;AACH,KAXL;AAYI,IAAA,aAAa,EAAE,CACX,YADW,EAEX,WAFW,EAGX,WAHW,EAIX,WAJW,CAZnB;AAkBI,IAAA,YAAY,EAAE,IAlBlB;AAmBI,IAAA,UAAU,EAAE,CAnBhB;AAoBI,IAAA,WAAW,EAAE,OApBjB;AAqBI,IAAA,OAAO,EAAE,MAAMG,aAAa,CAAC,KAAD,CArBhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CA7IR,CADJ,CAVJ,EAqLI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEgD,WAAjB;AAA8B,IAAA,KAAK,EAAC,SAApC;AAA8C,IAAA,QAAQ,EAAE5B,gBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhD,CAAC,CAAC,YAAD,CADN,CADJ,EAII;AAAK,IAAA,SAAS,EAAEC,OAAO,CAAC5B,kBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AACI,IAAA,KAAK,EAAC,SADV;AAEI,IAAA,OAAO,EAAE,WAFb;AAGI,IAAA,OAAO,EAAE,MAAMoJ,iBAAiB,EAHpC;AAII,IAAA,QAAQ,EAAEzE,gBAJd;AAKI,IAAA,SAAS,MALb;AAMI,IAAA,SAAS,EAAE/C,OAAO,CAAC1B,iBANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKyB,CAAC,CAAC,UAAD,CARN,EASKgD,gBAAgB,IACb,MAAC,cAAD;AAAgB,IAAA,IAAI,EAAE,EAAtB;AAA0B,IAAA,SAAS,EAAE/C,OAAO,CAACxB,mBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVR,CADJ,CAJJ,CArLJ,CArCJ,EA+OI,MAAC,MAAD;AACI,IAAA,IAAI,EAAEyE,gBADV;AAEI,IAAA,SAAS,MAFb;AAGI,IAAA,QAAQ,EAAE,IAHd;AAII,IAAA,OAAO,EAAE,MAAMC,mBAAmB,CAAC,KAAD,CAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMI;AAAK,IAAA,KAAK,EAAE;AAAClE,MAAAA,OAAO,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAACO,MAAAA,QAAQ,EAAE;AAAX,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKQ,CAAC,CAAC,YAAD,CADN,CADJ,CADJ,EAMI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAEC,OAAO,CAAClB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAACmK,MAAAA,OAAO,EAAE,OAAV;AAAmBgC,MAAAA,MAAM,EAAE;AAA3B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AACI,IAAA,KAAK,EAAE5H,kBAAkB,GAAGA,kBAAkB,CAAC6H,QAAnB,EAAH,GAAmC,EADhE;AAEI,IAAA,IAAI,EAAE,YAFV;AAGI,IAAA,QAAQ,EAAGH,CAAD,IAAO;AACbnF,MAAAA,QAAQ,CAAC,QAAD,EAAWmF,CAAC,CAACC,MAAF,CAASR,KAApB,CAAR;AACAlH,MAAAA,qBAAqB,CAACyH,CAAC,CAACC,MAAF,CAASR,KAAV,CAArB;AACH,KANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQQrH,cAAc,CAACgE,MAAf,GAAwB,CAAxB,GACIhE,cAAc,CAACgI,GAAf,CAAmB,CAACC,IAAD,EAAOC,CAAP,KACf,MAAC,gBAAD;AAAkB,IAAA,SAAS,EAAErL,OAAO,CAACX,qBAArC;AAA4D,IAAA,EAAE,EAAG,SAAQgM,CAAE,EAA3E;AAA8E,IAAA,IAAI,EAAG,SAAQA,CAAE,EAA/F;AAAkG,IAAA,KAAK,EAAEC,MAAM,CAACF,IAAI,CAACjG,EAAN,CAA/G;AAA0H,IAAA,OAAO,EAAE,MAAC,KAAD;AAAO,MAAA,KAAK,EAAE,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnI;AAAgK,IAAA,KAAK,EAAEiG,IAAI,CAACnF,IAA5K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,GAKI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAalG,CAAC,CAAC,wBAAD,CAAd,CAbZ,CADJ,CADJ,CADJ,CANJ,EA8BI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAEC,OAAO,CAAClB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAACmK,MAAAA,OAAO,EAAE,OAAV;AAAmBgC,MAAAA,MAAM,EAAE;AAA3B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQxH,eAAe,GACX,MAAC,cAAD;AAAgB,IAAA,IAAI,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,GAGX,MAAC,UAAD;AACI,IAAA,KAAK,EAAEE,cAAc,GAAGA,cAAc,CAACuH,QAAf,EAAH,GAA+B,EADxD;AAEI,IAAA,IAAI,EAAE,QAFV;AAGI,IAAA,QAAQ,EAAGH,CAAD,IAAO;AACb3E,MAAAA,SAAS,CAAC,QAAD,EAAW/C,kBAAX,EAA+B0H,CAAC,CAACC,MAAF,CAASR,KAAxC,CAAT;AACA5G,MAAAA,iBAAiB,CAACmH,CAAC,CAACC,MAAF,CAASR,KAAV,CAAjB;AACH,KANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQQjH,UAAU,CAAC4D,MAAX,GAAoB,CAApB,GACI5D,UAAU,CAAC4H,GAAX,CAAe,CAACC,IAAD,EAAOC,CAAP,KACX,MAAC,gBAAD;AAAkB,IAAA,SAAS,EAAErL,OAAO,CAACX,qBAArC;AAA4D,IAAA,EAAE,EAAG,SAAQgM,CAAE,EAA3E;AAA8E,IAAA,IAAI,EAAG,SAAQA,CAAE,EAA/F;AAAkG,IAAA,KAAK,EAAEC,MAAM,CAACF,IAAI,CAACjG,EAAN,CAA/G;AAA0H,IAAA,OAAO,EAAE,MAAC,KAAD;AAAO,MAAA,KAAK,EAAE,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnI;AAAgK,IAAA,KAAK,EAAEiG,IAAI,CAACnF,IAA5K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,GAKI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAalG,CAAC,CAAC,wBAAD,CAAd,CAbZ,CALZ,CADJ,CADJ,CA9BJ,EA2DI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAEC,OAAO,CAAClB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAACmK,MAAAA,OAAO,EAAE,OAAV;AAAmBgC,MAAAA,MAAM,EAAE;AAA3B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQtH,cAAc,IAAI,CAACF,eAAnB,KACIM,eAAe,GACX,MAAC,cAAD;AAAgB,IAAA,IAAI,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,GAGX,MAAC,UAAD;AACI,IAAA,KAAK,EAAEI,cAAc,GAAIA,cAAc,CAAC+G,QAAf,EAAJ,GAAgC,EADzD;AAEI,IAAA,IAAI,EAAE,QAFV;AAGI,IAAA,QAAQ,EAAGH,CAAD,IAAO;AACb3G,MAAAA,iBAAiB,CAAC2G,CAAC,CAACC,MAAF,CAASR,KAAV,CAAjB;AACH,KALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOQ3G,UAAU,CAACsD,MAAX,GAAoB,CAApB,GACItD,UAAU,CAACsH,GAAX,CAAe,CAACC,IAAD,EAAOC,CAAP,KACX,MAAC,gBAAD;AAAkB,IAAA,SAAS,EAAErL,OAAO,CAACX,qBAArC;AAA4D,IAAA,EAAE,EAAG,SAAQgM,CAAE,EAA3E;AAA8E,IAAA,IAAI,EAAG,SAAQA,CAAE,EAA/F;AAAkG,IAAA,KAAK,EAAEC,MAAM,CAACF,IAAI,CAACjG,EAAN,CAA/G;AAA0H,IAAA,OAAO,EAAE,MAAC,KAAD;AAAO,MAAA,KAAK,EAAE,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnI;AAA+J,IAAA,KAAK,EAAEiG,IAAI,CAACnF,IAA3K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,GAKI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAalG,CAAC,CAAC,wBAAD,CAAd,CAZZ,CAJR,CAFR,CADJ,CADJ,CA3DJ,EAyFI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,KAAK,EAAE;AAACd,MAAAA,SAAS,EAAE;AAAZ,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMiE,mBAAmB,CAAC,KAAD,CAA1C;AAAmD,IAAA,KAAK,EAAC,SAAzD;AAAmE,IAAA,QAAQ,EAAEH,gBAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhD,CAAC,CAAC,YAAD,CADN,CADJ,EAII,MAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAM;AACX,YAAMuC,MAAM,GAAGuB,UAAU,CAAC0H,IAAX,CAAgBR,CAAC,IAAIA,CAAC,CAAC5F,EAAF,KAAShB,cAA9B,CAAf;AACAjB,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAoB,MAAAA,iBAAiB,CAAChC,MAAM,IAAIA,MAAX,CAAjB;AACAG,MAAAA,WAAW,CAAC0B,cAAD,CAAX;AACH,KANL;AAOI,IAAA,KAAK,EAAC,SAPV;AAQI,IAAA,OAAO,EAAE,WARb;AASI,IAAA,QAAQ,EAAEpB,gBAAgB,IAAI,CAACA,gBAAD,IAAqB,CAACoB,cATxD;AAUI,IAAA,SAAS,EAAEnE,OAAO,CAAC1B,iBAVvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYKyB,CAAC,CAAC,UAAD,CAZN,EAaKgD,gBAAgB,IACb,MAAC,cAAD;AAAgB,IAAA,IAAI,EAAE,EAAtB;AAA0B,IAAA,SAAS,EAAE/C,OAAO,CAACxB,mBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdR,CAJJ,CAzFJ,CADJ,CANJ,CA/OJ,CA7BJ,CADJ,CADR;AA2YH,CA91BD;;AAg2BA,MAAMgN,eAAe,GAAIvL,KAAD,IAAW;AAC/B,SAAO;AACHA,IAAAA,KAAK,EAAEA,KAAK,CAACwL,WAAN,CAAkBC;AADtB,GAAP;AAGH,CAJD;;AAMA,eAAepO,OAAO,CAACkO,eAAD,EAAkB,IAAlB,CAAP,CAA+B7L,SAA/B,CAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { ViewList, Insert, Upload, List, UseOrest } from '@webcms/orest'\nimport { DEFAULT_OREST_TOKEN, isErrorMsg, OREST_ENDPOINT, useOrestQuery } from 'model/orest/constants'\nimport WebCmsGlobal from 'components/webcms-global'\nimport useNotifications from 'model/notification/useNotifications'\nimport MaterialTable, { MTableHeader }  from 'material-table'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\nimport LoadingSpinner from 'components/LoadingSpinner'\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { useSnackbar } from 'notistack'\nimport clsx from 'clsx'\nimport { useRouter } from 'next/router'\nimport CachedIcon from '@material-ui/icons/Cached';\nimport AddIcon from '@material-ui/icons/Add'\nimport { sendGuestChangeNotifyMail } from '../Base/helper'\nimport {CustomToolTip} from \"../../../user-portal/components/CustomToolTip/CustomToolTip\"\nimport { SLASH } from \"../../../../model/globals\";\nimport MaterialTableLocalization from \"../../../MaterialTableLocalization\"\nimport {decimalColorToHexCode} from \"../../../../@webcms-globals/helpers\"\nimport { DropzoneDialog } from 'material-ui-dropzone'\n\nconst useStyles = makeStyles((theme) => ({\n    saveRequestWrapper: {\n        position: 'relative',\n    },\n    saveRequestButton: {\n        minWidth: 105,\n    },\n    saveRequestProgress: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12,\n    },\n    dialogKiosk: {\n        marginTop: -285\n    },\n    container: {\n        border: \"1px solid #B2CECF\",\n        padding: \"8px\",\n        textAlign: \"center\",\n        height: \"60vh\",\n        maxHeight: \"60vh\",\n        overflow: \"auto\"\n    },\n    formControlLabelStyle: {\n        whiteSpace: \"nowrap\",\n        \"& .MuiFormControlLabel-label\": {\n            fontSize: \"13px\"\n        }\n    },\n    overflowContainer: {\n        maxWidth: '255px',\n        minWidth: '255px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis'\n    }\n}))\n\nconst MyRequest = (props) => {\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const { enqueueSnackbar } = useSnackbar()\n    const { t } = useTranslation()\n    const classes = useStyles()\n    const { state } = props\n    const router = useRouter()\n    const isKiosk = router.query.kiosk === 'true' ? true : false\n    const getOpenForm = router.query.open === 'true' ? true : false\n\n    //redux\n    const { showSuccess, showError } = useNotifications()\n    const token = useSelector((state) => state?.orest?.currentUser?.auth?.access_token || false)\n    const clientBase = useSelector((state) => state?.orest?.state?.client || false)\n    const reservBase = state.clientReservation || false\n    const hotelRefNo = state?.changeHotelRefno || state?.clientReservation?.hotelrefno || GENERAL_SETTINGS.HOTELREFNO\n    const loginfo = useSelector((state) => state.orest.currentUser && state.orest.currentUser.loginfo)\n\n    //state\n    const [file, setFile] = useState(null)\n    const [fileDialog, setFileDialog] = useState(false)\n    const [agencyCode, setAgencyCode] = useState('');\n\n    const [tsTrans, setTsTrans] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n\n    const [tsType, setTsType] = useState([])\n    const [selectedTransType, setSelectedTransType] = useState(false)\n\n    const [tsDesc, setTsDesc] = useState([])\n    const [tsDescId, setTsDescId] = useState(false)\n\n    const [tsNote, setTsNote] = useState('')\n    const [isReqType, setIsReqType] = useState(false)\n\n    const [open, setOpen] = useState(false)\n    const [requestIsLoading, setRequestIsLoading] = useState(false)\n\n    const [openTsDescDialog, setOpenTsDescDialog] = useState(false);\n    const [tsCategoryList, setTsCategoryList] = useState([]);\n    const [selectedTsCategory, setSelectedTsCategory] = useState(null);\n\n    const [tsTypeList, setTsTypeList] = useState([]);\n    const [isTsTypeLoading, setIsTsTypeLoading] = useState(false);\n    const [selectedTsType, setSelectedTsType] = useState(null);\n\n    const [tsDescList, setTsDescList] = useState([]);\n    const [isTsDescLoading, setIsTsDescLoading] = useState(false);\n    const [isTsDescLoadingFromMain, setIsTsDescLoadingFromMain] = useState(false);\n    const [selectedTsDesc, setSelectedTsDesc] = useState(null);\n    const [confirmedValue, setConfirmedValue] = useState(null);\n    const isClient = loginfo.roletype === '6500310'\n\n    useEffect(()=> {\n        if(getOpenForm){\n            handleOpenRequest(true)\n        }\n    }, [])\n\n    const handleOpenRequest = (isreq) => {\n        setIsReqType(isreq)\n        setOpen(true)\n    }\n\n    const handleClose = () => {\n        setOpen(false)\n        setRequestIsLoading(false)\n        setTsType([])\n        setSelectedTransType(false)\n        setTsDesc([])\n        setTsDescId(false)\n        setTsNote('')\n        setIsReqType(false)\n        delete router.query.open\n    }\n\n    const getTsTrans = (active) => {\n        setIsLoading(true)\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.TSTRANS,\n            token,\n            params: {\n                query:`requestedbyid:${clientBase.id},hotelrefno:${hotelRefNo}`,\n                sort:'insdatetime-',\n                allhotels: true\n            },\n        }).then((r) => {\n            if (active) {\n                if (r.status === 200) {\n                    setTsTrans(r.data.data)\n                    setIsLoading(false)\n                } else {\n                    const retErr = isErrorMsg(r)\n                    showError(retErr.errorMsg)\n                    setIsLoading(false)\n                }\n            }\n        })\n    }\n\n    const getTsCat = (type, catId) => {\n        if(type === \"get\") {\n            List({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: \"tscategory\",\n                token: token,\n                params: {\n                    query: \"isactive:true\",\n                    hotelrefno: hotelRefNo,\n                    field: \"transtype\",\n                    text: `${selectedTransType.code},null`\n                }\n            }).then(res => {\n                if(res.status === 200) {\n                    if(res.data.count > 0) {\n                        setSelectedTsCategory(res.data.data[0].id)\n                        setTsCategoryList(res.data.data);\n                        getTsType(\"get\", res.data.data[0].id)\n                    } else {\n                        setSelectedTsCategory(null);\n                    }\n\n                }\n\n            })\n        } else if(type === \"select\") {\n            getTsType(\"get\" ,catId)\n        }\n    }\n\n    const getTsType = (type, catId, tsTypeId) => {\n        if(type === \"get\") {\n            setIsTsTypeLoading(true);\n            List({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.TSTYPE,\n                token: token,\n                params: {\n                    query: `isactive:true,catid:${catId}`,\n                    hotelrefno: hotelRefNo,\n                }\n            }).then(r1 => {\n                if(r1.status === 200) {\n                    setIsTsTypeLoading(false);\n                    if(r1.data.count > 0) {\n                        setSelectedTsType(r1.data.data[0].id)\n                        setTsTypeList(r1.data.data)\n                        getTsDesc(catId, r1.data.data[0].id)\n                    } else {\n                        setSelectedTsType(null);\n                        setSelectedTsDesc(null);\n                        setTsDescList([]);\n                        setTsTypeList([]);\n                        setIsTsDescLoading(false);\n                    }\n                } else {\n                    setIsTsTypeLoading(false);\n                }\n            })\n        } else if(type === \"select\") {\n            setIsTsDescLoading(true);\n            setTsDescList([]);\n            getTsDesc(catId, tsTypeId);\n        }\n    }\n\n    const getTsDesc = (catId, tsTypeId) => {\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.TSDESC,\n            token: token,\n            params: {\n                hotelrefno: hotelRefNo,\n                query: `isactive:true,tscatid${catId},tstypeid:${tsTypeId},transtype:${selectedTransType.code}`\n            }\n        }).then(r2 => {\n            if(r2.status === 200) {\n                setIsTsDescLoading(false);\n                if(r2.data.count > 0) {\n                    setTsDescList(r2.data.data);\n                    setSelectedTsDesc(r2.data.data[0].id);\n                } else {\n                    setTsDescList([]);\n                    setSelectedTsDesc(null);\n                }\n\n            } else {\n                setIsTsDescLoading(false);\n            }\n        })\n    }\n\n    useEffect(() => {\n        if(!isClient) {\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.CLIENT + SLASH + OREST_ENDPOINT.RESERVNO,\n                token,\n                params: {\n                    clientid: clientBase?.id\n                }\n            }).then(res => {\n                if(res.status === 200) {\n                    setAgencyCode(res?.data?.data?.agencycode || '')\n                }\n            })\n        }\n    }, [])\n\n    useEffect(() => {\n        if(selectedTransType && !isClient) {\n            getTsCat(\"get\");\n            setIsTsDescLoadingFromMain(true);\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.TSDESC,\n                token: token,\n                params: {\n                    limit: 25,\n                    query: `isactive:true,transtype:${selectedTransType.code}`,\n                    hotelrefno: hotelRefNo,\n                }\n            }).then(r1 => {\n                if(r1.status === 200) {\n                    setIsTsDescLoadingFromMain(false);\n                    if(r1.data.count > 0) {\n                        setTsDesc(r1.data.data)\n                    } else {\n                        setTsDesc([])\n                    }\n                } else {\n                    setTsDesc([])\n                    setIsTsDescLoadingFromMain(false);\n                }\n            })\n        }\n\n    }, [selectedTransType])\n\n    useEffect(() => {\n        let active = true\n        if (active) {\n            if (isLoading) {\n                return undefined\n            }\n\n            if(isClient) {\n                if (!Object.keys(tsType).length > 0) {\n                    ViewList({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.TSTYPE,\n                        token,\n                        params: {\n                            query: useOrestQuery({\n                                code: `*GUESTAPP.`,\n                            }),\n                            hotelrefno: hotelRefNo,\n                            allhotels: true\n                        },\n                    }).then((r) => {\n                        if (r.status === 200) {\n                            setTsType(r.data.data)\n                            setSelectedTransType(r.data.data[0])\n                        }\n                    })\n                }\n            } else {\n                if(tsType.length <= 0) {\n                    UseOrest({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.TRANSTYPE + SLASH + OREST_ENDPOINT.VIEW + SLASH + OREST_ENDPOINT.TSTRANSTYPE,\n                        token,\n                        params: {\n                            hotelrefno: hotelRefNo,\n                            query: \"isactive:true\"\n                        }\n                    }).then(res => {\n                        if(res.status === 200) {\n                            setTsType(res.data.data)\n                            setSelectedTransType(res.data.data[0])\n                        }\n                    })\n                }\n            }\n\n            if (!Object.keys(tsTrans).length > 0 && clientBase?.id) {\n                getTsTrans(active)\n            } else {\n                setIsLoading(false)\n            }\n        }\n\n        return () => {\n            active = false\n            setIsLoading(false)\n        }\n    }, [open])\n\n    useEffect(() => {\n        let active = true\n        if (active) {\n            if (isLoading) {\n                return undefined\n            }\n\n            getTsTrans(active)\n        }\n        return () => {\n            active = false\n            setIsLoading(false)\n        }\n    }, [state.changeHotelRefno])\n\n    useEffect(() => {\n        if (selectedTransType && isClient) {\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.TSDESC,\n                token,\n                params: {\n                    query: useOrestQuery({\n                        tstypeid: isClient ? selectedTransType.id : selectedTransType.code,\n                    }),\n                    hotelrefno: hotelRefNo,\n                    allhotels: true\n                },\n            }).then((r) => {\n                if (r.status === 200) {\n                    setTsDesc(r.data.data)\n                }\n            })\n        }\n    }, [selectedTransType])\n\n    const handleSaveRequest = () => {\n        let setMyRequest = {}\n\n        if (confirmedValue) {\n            setMyRequest.tstypeid = confirmedValue.tstypeid\n        }\n\n        if(selectedTransType) {\n            setMyRequest.transtype = isClient ? selectedTransType.transtype : selectedTransType.code\n        }\n\n        if (tsDescId) {\n            setMyRequest.tsdescid = tsDescId\n        }\n\n        if (!selectedTransType && !tsDescId) {\n            setMyRequest.description = tsNote\n        }else{\n            setMyRequest.description = confirmedValue?.description || tsNote || \"\"\n        }\n\n        setMyRequest.requestedbyid = clientBase.id\n        setMyRequest.note = tsNote\n        setMyRequest.accid = clientBase.id\n        setMyRequest.hotelrefno = hotelRefNo\n\n        const notifyValues = {\n            \"roomno\":reservBase?.roomno || \"\",\n            \"clientname\": clientBase.clientname || \"\",\n            \"request\": t(setMyRequest.description, false, GENERAL_SETTINGS.hotelLocalLangGCode) || \"\",\n            \"description\": setMyRequest.note || \"\"\n        }\n\n        if(Number(state.changeHotelRefno) !== Number(state.clientReservation.hotelrefno)){\n            enqueueSnackbar(t('str_youCanOnlyCreateARequestFromTheHotelYouAreStayingAt'), { variant: 'warning' })\n            return false\n        }\n\n        if ((!isReqType && setMyRequest.note) || (isReqType && setMyRequest.tstypeid && setMyRequest.tsdescid)) {\n            setRequestIsLoading(true)\n            Insert({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.TSTRANS,\n                token: token,\n                params: {\n                    hotelrefno: hotelRefNo\n                },\n                data: setMyRequest,\n            }).then(async (tsTransResponse) => {\n                if (tsTransResponse.status === 200) {\n                    if (file) {\n                        Upload({\n                            apiUrl: GENERAL_SETTINGS.OREST_URL,\n                            token: token,\n                            params: {\n                                masterid: tsTransResponse.data.data.mid,\n                                orsactive: true,\n                                hotelrefno: hotelRefNo\n                            },\n                            files: [file],\n                        })\n                    }\n                    enqueueSnackbar(t('str_contactMailSendMsg'), { variant: 'success' })\n                    await sendGuestChangeNotifyMail(reservBase?.gid ? false : true,'tstrans','upd',clientBase.id,reservBase?.gid ? reservBase.gid : clientBase.gid, notifyValues, reservBase?.hotelrefno || GENERAL_SETTINGS.HOTELREFNO)\n                    getTsTrans(true)\n                } else {\n                    setIsLoading(false)\n                }\n                setRequestIsLoading(false)\n                setTsType([])\n                setSelectedTransType(false)\n                setTsDesc([])\n                setTsDescId(false)\n                setTsNote('')\n                setFile(null)\n                setConfirmedValue(null)\n                handleClose()\n            })\n        } else {\n            enqueueSnackbar(t('str_fillRequiredFields'), { variant: 'warning' })\n        }\n    }\n\n    const tsTransColumns = [\n        {\n            title: `${t('str_trans')}#`,\n            field: 'transno',\n            headerStyle: {\n                textAlign: 'right'\n            },\n            render: (state) => (\n                <Typography style={{fontSize: 'inherit', textAlign: 'right'}}>{state.transno}</Typography>\n            )\n        },\n        { title: t('str_status'),\n            field: 'status',\n            render: props => (\n                <div style={{display: 'flex', alignItems: 'center'}}>\n                    <div style={{width: '8px', height:'8px', borderRadius: '50%', backgroundColor: decimalColorToHexCode(props.statuscolor)}}/>\n                    <Typography style={{paddingLeft: '4px', fontSize:'inherit', color: decimalColorToHexCode(props.statuscolor)}}>{props.status === \"UNDEFINED\" ? '-' : t(props.status)}</Typography>\n                </div>\n            )\n        },\n        {\n            title: t('str_request'),\n            field: 'description',\n            render: props => (\n                props.description?.length > 35 ? (\n                    <CustomToolTip title={props.description}>\n                        <Typography className={classes.overflowContainer} style={{fontSize: 'inherit'}}>{t(props.description)}</Typography>\n                    </CustomToolTip>\n                ) : (\n                    <Typography  style={{fontSize: 'inherit'}}>{t(props.description)}</Typography>\n                )\n            ),\n        },\n        {\n            title: t('str_explanation'),\n            field: 'note',\n            render: props => (\n                props.note?.length > 35 ? (\n                    <CustomToolTip title={props.note}>\n                        <Typography className={classes.overflowContainer} style={{fontSize: 'inherit'}}>{props.note}</Typography>\n                    </CustomToolTip>\n                ) : (\n                    <Typography  style={{fontSize: 'inherit'}}>{props.note}</Typography>\n                )\n            ),\n        },\n        {title: t('str_requestDate'), field: 'transdate', render: props => props.transdate && moment(props.transdate, 'YYYY-MM-DD').format('ddd, MMM DD, YYYY')},\n    ]\n\n    return (\n            <Container maxWidth=\"xl\" style={{padding: 0}}>\n                <Grid container>\n                    <Grid item xs={12}>\n                        <Grid container>\n                            <Grid item xs={1}>\n                                <Grid container>\n                                    <Grid item xs={6}>\n                                        <CustomToolTip title={t('str_refresh')}>\n                                            <IconButton\n                                                onClick={() => {\n                                                    getTsTrans(true);\n                                                }}\n                                            >\n                                                <CachedIcon style={{color:\"#F16A4B\"}}/>\n                                            </IconButton>\n                                        </CustomToolTip>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <CustomToolTip title={t('str_add')}>\n                                            <IconButton\n                                                onClick={() => handleOpenRequest(true)}\n                                            >\n                                                <AddIcon />\n                                            </IconButton>\n                                        </CustomToolTip>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            title=\"\"\n                            options={{\n                                headerStyle:{\n                                    cursor: 'default',\n                                    fontWeight:\"bold\",\n                                    fontSize:\"12px\",\n                                    color:\"#A3A6B4\",\n                                    textTransform:\"uppercase\",\n                                    backgroundColor:\"#F5F6FA\",\n                                    whiteSpace: 'nowrap',\n                                    borderLeft: '1px solid #FFF',\n                                },\n                                cellStyle: {\n                                    whiteSpace: 'nowrap',\n                                    borderLeft: '1px solid rgba(224, 224, 224, 1)',\n                                    minWidth: '100px'\n                                },\n                                search: false,\n                                toolbar: false,\n                                sorting: false\n                            }}\n                            isLoading={isLoading}\n                            columns={tsTransColumns}\n                            data={tsTrans}\n                            localization={MaterialTableLocalization}\n                            components={{\n                                Header: (props) => {\n                                    const overrideProps = {...props}\n                                    overrideProps.draggable = false\n                                    return(\n                                        <MTableHeader  {...overrideProps}/>\n                                    )\n                                },\n                            }}\n                        />\n                        <Dialog\n                            fullWidth\n                            maxWidth=\"md\"\n                            open={open}\n                            onClose={handleClose}\n                            aria-labelledby=\"add-new-request-dialog-title\"\n                            aria-describedby=\"add-new-request-dialog-description\"\n                            classes={{ paper: clsx(null, { [classes.dialogKiosk]: isKiosk }) }}\n                        >\n                            <DialogTitle id=\"alert-dialog-title\">{t('str_addNewRecord')}</DialogTitle>\n                            <DialogContent dividers>\n                                <Grid container spacing={3}>\n                                    {isReqType && (\n                                        <React.Fragment>\n                                            {\n                                                !isClient ? (\n                                                    <Grid item xs={12}>\n                                                        <TextField\n                                                            value={agencyCode}\n                                                            disabled\n                                                            fullWidth\n                                                            variant={'outlined'}\n                                                            label={t('str_company')}\n                                                        />\n                                                    </Grid>\n                                                ) : null\n\n                                            }\n                                            <Grid item xs={12}>\n                                                <Autocomplete\n                                                    value={selectedTransType ? selectedTransType : null}\n                                                    disableClearable={true}\n                                                    fullWidth={true}\n                                                    id=\"request-type\"\n                                                    options={tsType}\n                                                    disabled={requestIsLoading}\n                                                    getOptionLabel={(option) => t(option.description)}\n                                                    getOptionSelected={(option, value) => option.id === value.id}\n                                                    onKeyUp={(event, newValue) => {\n                                                        if (newValue && newValue.id) {\n                                                            //setTsDesc([])\n                                                            setTsDescId(false)\n                                                            setSelectedTransType(newValue)\n                                                            setConfirmedValue(null)\n                                                        }\n                                                    }}\n                                                    onKeyDown={(event, newValue) => {\n                                                        if (newValue && newValue.id) {\n                                                            //setTsDesc([])\n                                                            setTsDescId(false)\n                                                            setSelectedTransType(newValue)\n                                                            setConfirmedValue(null)\n                                                        }\n                                                    }}\n                                                    onChange={(event, newValue) => {\n                                                        if (newValue && newValue.id) {\n                                                            //setTsDesc([])\n                                                            setTsDescId(false)\n                                                            setSelectedTransType(newValue)\n                                                            setConfirmedValue(null)\n                                                        }\n                                                    }}\n                                                    renderInput={(params) => (\n                                                        <TextField\n                                                            {...params}\n                                                            required={true}\n                                                            label={t('str_requestType')}\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                        />\n                                                    )}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={isClient ? 12 : 11}>\n                                                <Autocomplete\n                                                    value={confirmedValue ? confirmedValue : null}\n                                                    fullWidth={true}\n                                                    disabled={!selectedTransType || requestIsLoading || isTsDescLoadingFromMain}\n                                                    id=\"request\"\n                                                    options={tsDesc}\n                                                    getOptionLabel={(option) =>\n                                                        isClient ? t(option.description) : option.tscat + ' - ' + option.tstype + ' - ' + t(option.description)\n                                                    }\n                                                    getOptionSelected={(option, value) => option.id === value.id}\n                                                    onKeyUp={(event, newValue) => {\n                                                        if (newValue && newValue.id) {\n                                                            setTsDescId(newValue.id)\n                                                            setConfirmedValue(newValue)\n                                                        }\n                                                    }}\n                                                    onKeyDown={(event, newValue) => {\n                                                        if (newValue && newValue.id) {\n                                                            setTsDescId(newValue.id)\n                                                            setConfirmedValue(newValue)\n                                                        }\n                                                    }}\n                                                    onChange={(event, newValue) => {\n                                                        if (newValue && newValue.id) {\n                                                            setTsDescId(newValue.id)\n                                                            setConfirmedValue(newValue)\n                                                        }\n                                                    }}\n                                                    renderInput={(params) => (\n                                                        <TextField\n                                                            {...params}\n                                                            required={true}\n                                                            label={t('str_request')}\n                                                            fullWidth={true}\n                                                            variant=\"outlined\"\n                                                            InputProps={{\n                                                                ...params.InputProps,\n                                                                endAdornment: (\n                                                                    <React.Fragment>\n                                                                        {isTsDescLoadingFromMain ? <LoadingSpinner size={18} /> : null}\n                                                                        {params.InputProps.endAdornment}\n                                                                    </React.Fragment>\n                                                                ),\n                                                            }}\n                                                        />\n                                                    )}\n                                                />\n                                            </Grid>\n                                            {!isClient && (\n                                                <Grid item xs={1}>\n                                                    <CustomToolTip title={t(\"str_selectTaskDescription\")}>\n                                                        <IconButton\n                                                            onClick={() => setOpenTsDescDialog(true)}\n                                                        >\n                                                            <FormatListBulletedIcon/>\n                                                        </IconButton>\n                                                    </CustomToolTip>\n                                                </Grid>\n                                            )}\n                                        </React.Fragment>\n                                    )}\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            value={tsNote}\n                                            required={!isReqType}\n                                            onKeyUp={(e) => setTsNote(e.target.value)}\n                                            onKeyDown={(e) => setTsNote(e.target.value)}\n                                            onChange={(e) => setTsNote(e.target.value)}\n                                            disabled={(isReqType && !tsDescId) || requestIsLoading}\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            id=\"explanation\"\n                                            label={t('str_explanation')}\n                                            multiline\n                                            rows={4}\n                                        />\n                                    </Grid>\n                                    {isReqType && (\n                                        <Grid item xs={12}>\n                                            <Button startIcon={<CloudUploadIcon />} onClick={()=> setFileDialog(true)} disabled={(isReqType && !tsDescId) || requestIsLoading}>{t('str_upload')}</Button>\n                                            <DropzoneDialog\n                                                dropzoneText={t('str_pleaseSelectFile')}\n                                                previewText={''}\n                                                cancelButtonText={t('str_cancel')}\n                                                dialogTitle={t('str_upload')}\n                                                submitButtonText={t('str_add')}\n                                                disabled={(isReqType && !tsDescId) || requestIsLoading}\n                                                open={fileDialog}\n                                                onSave={(file)=> {\n                                                    setFileDialog(false)\n                                                    setFile(file[0])\n                                                }}\n                                                acceptedFiles={[\n                                                    'image/jpeg',\n                                                    'image/png',\n                                                    'image/bmp',\n                                                    'image/gif',\n                                                ]}\n                                                showPreviews={true}\n                                                filesLimit={1}\n                                                maxFileSize={5000000}\n                                                onClose={() => setFileDialog(false)}\n                                            />\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleClose} color=\"primary\" disabled={requestIsLoading}>\n                                    {t('str_cancel')}\n                                </Button>\n                                <div className={classes.saveRequestWrapper}>\n                                    <Button\n                                        color=\"primary\"\n                                        variant={\"contained\"}\n                                        onClick={() => handleSaveRequest()}\n                                        disabled={requestIsLoading}\n                                        fullWidth\n                                        className={classes.saveRequestButton}\n                                    >\n                                        {t('str_save')}\n                                        {requestIsLoading && (\n                                            <LoadingSpinner size={24} className={classes.saveRequestProgress} />\n                                        )}\n                                    </Button>\n                                </div>\n                            </DialogActions>\n                        </Dialog>\n                        <Dialog\n                            open={openTsDescDialog}\n                            fullWidth\n                            maxWidth={\"md\"}\n                            onClose={() => setOpenTsDescDialog(false)}\n                        >\n                            <div style={{padding: \"24px\"}}>\n                                <Grid container spacing={3}>\n                                    <Grid item xs={12}>\n                                        <Typography style={{fontSize: \"24px\"}}>\n                                            {t(\"str_tsDesc\")}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs={12} sm={3}>\n                                        <div className={classes.container}>\n                                            <div style={{display: \"table\", margin: \"auto\"}}>\n                                                <RadioGroup\n                                                    value={selectedTsCategory ? selectedTsCategory.toString() : \"\"}\n                                                    name={\"tsCategory\"}\n                                                    onChange={(e) => {\n                                                        getTsCat(\"select\", e.target.value)\n                                                        setSelectedTsCategory(e.target.value);\n                                                    }}>\n                                                    {\n                                                        tsCategoryList.length > 0 ? (\n                                                            tsCategoryList.map((item, i) => (\n                                                                <FormControlLabel className={classes.formControlLabelStyle} id={`radio-${i}`} name={`radio-${i}`} value={String(item.id)} control={<Radio color={\"primary\"} />} label={item.code} />\n                                                            ))\n                                                        ) : (\n                                                            <Typography>{t(\"str_noRecordsToDisplay\")}</Typography>\n                                                        )\n                                                    }\n                                                </RadioGroup>\n                                            </div>\n                                        </div>\n\n                                    </Grid>\n                                    <Grid item xs={12} sm={3}>\n                                        <div className={classes.container}>\n                                            <div style={{display: \"table\", margin: \"auto\"}}>\n                                                {\n                                                    isTsTypeLoading ? (\n                                                        <LoadingSpinner size={50} />\n                                                    ) : (\n                                                        <RadioGroup\n                                                            value={selectedTsType ? selectedTsType.toString() : \"\"}\n                                                            name={\"tsType\"}\n                                                            onChange={(e) => {\n                                                                getTsType(\"select\", selectedTsCategory, e.target.value)\n                                                                setSelectedTsType(e.target.value);\n                                                            }}>\n                                                            {\n                                                                tsTypeList.length > 0 ? (\n                                                                    tsTypeList.map((item, i) => (\n                                                                        <FormControlLabel className={classes.formControlLabelStyle} id={`radio-${i}`} name={`radio-${i}`} value={String(item.id)} control={<Radio color={\"primary\"} />} label={item.code} />\n                                                                    ))\n                                                                ) : (\n                                                                    <Typography>{t(\"str_noRecordsToDisplay\")}</Typography>\n                                                                )\n                                                            }\n                                                        </RadioGroup>\n                                                    )\n                                                }\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                    <Grid item xs={12} sm={6}>\n                                        <div className={classes.container}>\n                                            <div style={{display: \"table\", margin: \"auto\"}}>\n                                                {\n                                                    selectedTsType && !isTsTypeLoading && (\n                                                        isTsDescLoading ? (\n                                                            <LoadingSpinner size={30} />\n                                                            ) : (\n                                                            <RadioGroup\n                                                                value={selectedTsDesc  ? selectedTsDesc.toString() : \"\"}\n                                                                name={\"tsDesc\"}\n                                                                onChange={(e) => {\n                                                                    setSelectedTsDesc(e.target.value);\n                                                                }}>\n                                                                {\n                                                                    tsDescList.length > 0 ? (\n                                                                        tsDescList.map((item, i) => (\n                                                                            <FormControlLabel className={classes.formControlLabelStyle} id={`radio-${i}`} name={`radio-${i}`} value={String(item.id)} control={<Radio color={\"primary\"}/>} label={item.code} />\n                                                                        ))\n                                                                    ) : (\n                                                                        <Typography>{t(\"str_noRecordsToDisplay\")}</Typography>\n                                                                    )\n                                                                }\n                                                            </RadioGroup>\n                                                        )\n                                                    )\n                                                }\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                    <Grid item xs={12} style={{textAlign: \"right\"}}>\n                                        <Button onClick={() => setOpenTsDescDialog(false)} color=\"primary\" disabled={requestIsLoading}>\n                                            {t('str_cancel')}\n                                        </Button>\n                                        <Button\n                                            onClick={() => {\n                                                const tsDesc = tsDescList.find(e => e.id === selectedTsDesc)\n                                                setOpenTsDescDialog(false);\n                                                setConfirmedValue(tsDesc && tsDesc)\n                                                setTsDescId(selectedTsDesc);\n                                            }}\n                                            color=\"primary\"\n                                            variant={\"contained\"}\n                                            disabled={requestIsLoading || !requestIsLoading && !selectedTsDesc}\n                                            className={classes.saveRequestButton}\n                                        >\n                                            {t('str_save')}\n                                            {requestIsLoading && (\n                                                <LoadingSpinner size={24} className={classes.saveRequestProgress} />\n                                            )}\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Dialog>\n                    </Grid>\n                </Grid>\n            </Container>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nexport default connect(mapStateToProps, null)(MyRequest)\n"]},"metadata":{},"sourceType":"module"}