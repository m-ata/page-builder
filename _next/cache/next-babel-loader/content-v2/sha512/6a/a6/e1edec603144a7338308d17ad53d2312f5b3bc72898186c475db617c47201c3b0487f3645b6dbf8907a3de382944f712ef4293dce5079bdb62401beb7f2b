{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/slider/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n//react imports\nimport React, { useContext, useState, useEffect } from 'react'; //material ui imports\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { makeStyles } from '@material-ui/core/styles'; //redux imports\n\nimport { connect } from 'react-redux';\nimport { updateState } from \"../../../../../state/actions\"; //custom imports\n\nimport SliderModal from \"./SliderModal\";\nimport Slider from \"../page/sections/slider/Slider\";\nimport AlertDialog from \"./AlertDialog\"; //service related imports\n\nimport { Delete, UseOrest, ViewList } from \"@webcms/orest\";\nimport WebCmsGlobal from \"components/webcms-global\";\nimport { isErrorMsg, OREST_ENDPOINT, REQUEST_METHOD_CONST } from \"../../../../../model/orest/constants\";\nimport { toast } from \"react-toastify\";\nimport { COLORS, DELETE_SUCCESS } from \"../../constants\";\nimport { useRouter } from \"next/router\";\nimport Button from \"@material-ui/core/Button\";\nconst useStyles = makeStyles(theme => ({\n  centreContent: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  cursorPointer: {\n    cursor: 'pointer',\n    color: 'silver'\n  },\n  typography: {\n    display: 'flex',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'silver',\n    fontWeight: 'bold'\n  },\n  actionButton: {\n    borderRadius: 20,\n    float: 'right',\n    margin: 8 // marginTop: 8,\n    // marginBottom: 8\n\n  },\n  disableAction: {\n    pointerEvents: \"none\",\n    opacity: 0.5\n  },\n  paageBuilderTypeText: {\n    color: COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary,\n    marginLeft: theme.spacing(1),\n    marginTop: theme.spacing(2)\n  },\n  closeButton: {\n    borderRadius: 20,\n    float: 'right',\n    marginTop: theme.spacing(3),\n    marginRight: theme.spacing(1)\n  }\n}));\nconst defaultProps = {\n  bgcolor: 'background.paper',\n  m: 1,\n  border: 2,\n  borderColor: 'silver'\n};\n\nconst GenericSlider = props => {\n  const {\n    state,\n    updateState\n  } = props;\n  const classes = useStyles(); //local state\n\n  const {\n    0: isRenderDialog,\n    1: setRenderDialog\n  } = useState(false);\n  const {\n    0: dialogType,\n    1: setDialogType\n  } = useState('');\n  const {\n    0: dialogTitle,\n    1: setDialogTitle\n  } = useState('');\n  const {\n    0: isSaving,\n    1: setSaving\n  } = useState(false);\n  const [isAlert, setAlert] = React.useState(false);\n  const router = useRouter();\n  const companyId = router.query.companyID;\n  const {\n    GENERAL_SETTINGS,\n    token\n  } = useContext(WebCmsGlobal);\n  const authToken = token || router.query.authToken;\n  useEffect(() => {\n    if (router.query.masterid) {\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        params: {\n          query: `masterid:${router.query.masterid}`,\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        var _res$data, _res$data$data;\n\n        if ((res === null || res === void 0 ? void 0 : res.status) === 200 && (res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.length) > 0) {\n          var _res$data$data$, _res$data$data$2, _res$data$data$3, _res$data$data$4, _state$assets, _state$assets$colors, _state$assets$colors$, _state$assets2, _state$assets2$colors, _state$assets2$colors2;\n\n          const slider = {\n            title: (_res$data$data$ = res.data.data[0]) === null || _res$data$data$ === void 0 ? void 0 : _res$data$data$.title,\n            description: (_res$data$data$2 = res.data.data[0]) === null || _res$data$data$2 === void 0 ? void 0 : _res$data$data$2.description,\n            cta: (_res$data$data$3 = res.data.data[0]) === null || _res$data$data$3 === void 0 ? void 0 : _res$data$data$3.cta,\n            gid: (_res$data$data$4 = res.data.data[0]) === null || _res$data$data$4 === void 0 ? void 0 : _res$data$data$4.gid,\n            textColor: state === null || state === void 0 ? void 0 : (_state$assets = state.assets) === null || _state$assets === void 0 ? void 0 : (_state$assets$colors = _state$assets.colors) === null || _state$assets$colors === void 0 ? void 0 : (_state$assets$colors$ = _state$assets$colors.slider) === null || _state$assets$colors$ === void 0 ? void 0 : _state$assets$colors$.main,\n            buttonColor: state === null || state === void 0 ? void 0 : (_state$assets2 = state.assets) === null || _state$assets2 === void 0 ? void 0 : (_state$assets2$colors = _state$assets2.colors) === null || _state$assets2$colors === void 0 ? void 0 : (_state$assets2$colors2 = _state$assets2$colors.button) === null || _state$assets2$colors2 === void 0 ? void 0 : _state$assets2$colors2.main\n          };\n          updateState('pageBuilder', 'slider', slider);\n        }\n      });\n    }\n\n    if (router.query.gid) {\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        params: {\n          query: `gid:${router.query.gid}`,\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        var _res$data2, _res$data2$data;\n\n        if ((res === null || res === void 0 ? void 0 : res.status) === 200 && (res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$data = _res$data2.data) === null || _res$data2$data === void 0 ? void 0 : _res$data2$data.length) > 0) {\n          var _res$data$data$5, _res$data$data$6, _res$data$data$7, _res$data$data$8, _state$assets3, _state$assets3$colors, _state$assets3$colors2, _state$assets4, _state$assets4$colors, _state$assets4$colors2;\n\n          const slider = {\n            title: (_res$data$data$5 = res.data.data[0]) === null || _res$data$data$5 === void 0 ? void 0 : _res$data$data$5.title,\n            description: (_res$data$data$6 = res.data.data[0]) === null || _res$data$data$6 === void 0 ? void 0 : _res$data$data$6.description,\n            cta: (_res$data$data$7 = res.data.data[0]) === null || _res$data$data$7 === void 0 ? void 0 : _res$data$data$7.cta,\n            gid: (_res$data$data$8 = res.data.data[0]) === null || _res$data$data$8 === void 0 ? void 0 : _res$data$data$8.gid,\n            textColor: state === null || state === void 0 ? void 0 : (_state$assets3 = state.assets) === null || _state$assets3 === void 0 ? void 0 : (_state$assets3$colors = _state$assets3.colors) === null || _state$assets3$colors === void 0 ? void 0 : (_state$assets3$colors2 = _state$assets3$colors.slider) === null || _state$assets3$colors2 === void 0 ? void 0 : _state$assets3$colors2.main,\n            buttonColor: state === null || state === void 0 ? void 0 : (_state$assets4 = state.assets) === null || _state$assets4 === void 0 ? void 0 : (_state$assets4$colors = _state$assets4.colors) === null || _state$assets4$colors === void 0 ? void 0 : (_state$assets4$colors2 = _state$assets4$colors.button) === null || _state$assets4$colors2 === void 0 ? void 0 : _state$assets4$colors2.main\n          };\n          updateState('pageBuilder', 'slider', slider);\n        }\n      });\n    }\n  }, []);\n\n  const resetRenderDialog = () => {\n    setRenderDialog(false);\n  };\n\n  const handleDeleteSlider = () => {\n    //delete slider from hcmitemsld\n    setSaving(true);\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMSLD,\n      token: authToken,\n      params: {\n        query: `gid:${state.slider.gid}`,\n        hotelrefno: Number(companyId)\n      }\n    }).then(res => {\n      if (res.status === 200 && res.data && res.data.data && res.data.data.length > 0) {\n        ViewList({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG,\n          token: authToken,\n          params: {\n            query: `sliderid:${res.data.data[0].id}`,\n            hotelrefno: Number(companyId)\n          }\n        }).then(res1 => {\n          setSaving(false);\n\n          if (res1.status === 200) {\n            var _res1$data, _res1$data$data;\n\n            if ((res1 === null || res1 === void 0 ? void 0 : (_res1$data = res1.data) === null || _res1$data === void 0 ? void 0 : (_res1$data$data = _res1$data.data) === null || _res1$data$data === void 0 ? void 0 : _res1$data$data.length) > 0) {\n              const gids = [];\n\n              for (let gid in res1.data.data) {\n                gids.push({\n                  gid: res1.data.data[gid].gid\n                });\n              }\n\n              UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.DEL,\n                token: authToken,\n                method: REQUEST_METHOD_CONST.DELETE,\n                data: gids,\n                params: {\n                  hotelrefno: Number(companyId)\n                }\n              }).then(r1 => {\n                if (r1.status === 200) {\n                  Delete({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                    token: authToken,\n                    gid: state.slider.gid,\n                    params: {\n                      hotelrefno: Number(companyId)\n                    }\n                  }).then(r2 => {\n                    if (r2.status === 200) {\n                      setSaving(false);\n                      const updatedSliderObj = {\n                        title: '',\n                        description: '',\n                        cta: '',\n                        gid: ''\n                      };\n                      updateState('pageBuilder', 'slider', updatedSliderObj);\n                      toast.success(DELETE_SUCCESS, {\n                        position: toast.POSITION.TOP_RIGHT\n                      });\n                    } else {\n                      const retErr = isErrorMsg(res);\n                      toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT\n                      });\n                    }\n                  });\n                } else {\n                  const retErr = isErrorMsg(res);\n                  toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                  });\n                }\n              });\n            } else {\n              Delete({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                gid: state.slider.gid,\n                params: {\n                  hotelrefno: Number(companyId)\n                }\n              }).then(r2 => {\n                if (r2.status === 200) {\n                  setSaving(false);\n                  const updatedSliderObj = {\n                    title: '',\n                    description: '',\n                    cta: '',\n                    gid: ''\n                  };\n                  updateState('pageBuilder', 'slider', updatedSliderObj);\n                  toast.success(DELETE_SUCCESS, {\n                    position: toast.POSITION.TOP_RIGHT\n                  });\n                } else {\n                  const retErr = isErrorMsg(res);\n                  toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                  });\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  };\n\n  const handleDelete = isDelete => {\n    if (isDelete) {\n      handleDeleteSlider();\n    }\n\n    setAlert(false);\n  };\n\n  const handleClose = () => {\n    var _window, _window$top;\n\n    (_window = window) === null || _window === void 0 ? void 0 : (_window$top = _window.top) === null || _window$top === void 0 ? void 0 : _window$top.postMessage(\"closePageBuilder\", \"*\");\n  };\n\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 17\n    }\n  }, __jsx(Typography, {\n    className: classes.paageBuilderTypeText,\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 21\n    }\n  }, \"Slider\")), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 21\n    }\n  }, \"CLOSE\"))), __jsx(Box, _extends({}, defaultProps, {\n    className: isSaving ? classes.disableAction : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }), state.slider.gid ? __jsx(Typography, {\n    component: 'div',\n    style: {\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 25\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit item\",\n    color: \"primary\",\n    onClick: () => {\n      setDialogType('edit-slider');\n      setDialogTitle('Edit Slider');\n      setRenderDialog(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 29\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 33\n    }\n  })), !router.query.gid && __jsx(IconButton, {\n    \"aria-label\": \"Delete item\",\n    color: \"primary\",\n    onClick: () => setAlert(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 54\n    }\n  }, __jsx(DeleteIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 37\n    }\n  })), __jsx(Slider, {\n    sliderComponent: state.slider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 29\n    }\n  })) : __jsx(React.Fragment, null, __jsx(Typography, {\n    component: 'div',\n    style: {\n      height: 'auto',\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 25\n    }\n  }, __jsx(\"h3\", {\n    className: classes.centreContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 29\n    }\n  }, __jsx(\"span\", {\n    className: classes.cursorPointer,\n    style: {\n      marginTop: 8\n    },\n    onClick: () => {\n      setDialogType('add-slider');\n      setDialogTitle('Add Slider');\n      setRenderDialog(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 33\n    }\n  }, \"Click to define Slider\"))), __jsx(Divider, {\n    style: {\n      border: 'none',\n      height: 2,\n      backgroundColor: 'silver'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 25\n    }\n  }), __jsx(Typography, {\n    component: 'div',\n    style: {\n      minHeight: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 25\n    }\n  }))), isRenderDialog && __jsx(SliderModal, {\n    type: dialogType,\n    title: dialogTitle,\n    resetRenderDialog: resetRenderDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 35\n    }\n  }), isAlert && __jsx(AlertDialog, {\n    handleDelete: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 28\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.pageBuilder\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenericSlider);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/slider/index.js"],"names":["React","useContext","useState","useEffect","Container","Grid","Box","Typography","Divider","IconButton","BorderColorSharpIcon","DeleteIcon","makeStyles","connect","updateState","SliderModal","Slider","AlertDialog","Delete","UseOrest","ViewList","WebCmsGlobal","isErrorMsg","OREST_ENDPOINT","REQUEST_METHOD_CONST","toast","COLORS","DELETE_SUCCESS","useRouter","Button","useStyles","theme","centreContent","display","justifyContent","cursorPointer","cursor","color","typography","fontWeight","actionButton","borderRadius","float","margin","disableAction","pointerEvents","opacity","paageBuilderTypeText","secondary","marginLeft","spacing","marginTop","closeButton","marginRight","defaultProps","bgcolor","m","border","borderColor","GenericSlider","props","state","classes","isRenderDialog","setRenderDialog","dialogType","setDialogType","dialogTitle","setDialogTitle","isSaving","setSaving","isAlert","setAlert","router","companyId","query","companyID","GENERAL_SETTINGS","token","authToken","masterid","apiUrl","OREST_URL","endpoint","HCMITEMSLD","params","hotelrefno","Number","then","res","status","data","length","slider","title","description","cta","gid","textColor","assets","colors","main","buttonColor","button","resetRenderDialog","handleDeleteSlider","HCMITEMIMG","id","res1","gids","push","LIST","DEL","method","DELETE","r1","r2","updatedSliderObj","success","position","POSITION","TOP_RIGHT","retErr","error","errorMsg","handleDelete","isDelete","handleClose","window","top","postMessage","overflow","height","backgroundColor","minHeight","mapStateToProps","formReducer","pageBuilder","mapDispatchToProps","dispatch","stateType","stateName","value"],"mappings":"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","sourcesContent":["//react imports\nimport React, {useContext, useState, useEffect} from 'react';\n//material ui imports\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport BorderColorSharpIcon from \"@material-ui/icons/BorderColorSharp\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { makeStyles } from '@material-ui/core/styles';\n//redux imports\nimport { connect } from 'react-redux';\nimport {updateState} from \"../../../../../state/actions\";\n//custom imports\nimport SliderModal from \"./SliderModal\";\nimport Slider from \"../page/sections/slider/Slider\";\nimport AlertDialog from \"./AlertDialog\";\n//service related imports\nimport {Delete, UseOrest, ViewList} from \"@webcms/orest\";\nimport WebCmsGlobal from \"components/webcms-global\";\nimport {isErrorMsg, OREST_ENDPOINT, REQUEST_METHOD_CONST} from \"../../../../../model/orest/constants\";\nimport {toast} from \"react-toastify\";\nimport {COLORS, DELETE_SUCCESS} from \"../../constants\";\nimport {useRouter} from \"next/router\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n    centreContent: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    cursorPointer: {\n        cursor: 'pointer',\n        color: 'silver'\n    },\n    typography: {\n        display: 'flex',\n        justifyContent: 'center',\n        cursor: 'pointer',\n        color: 'silver',\n        fontWeight: 'bold'\n    },\n    actionButton: {\n        borderRadius: 20,\n        float: 'right',\n        margin: 8,\n        // marginTop: 8,\n        // marginBottom: 8\n    },\n    disableAction: {\n        pointerEvents: \"none\",\n        opacity: 0.5\n    },\n    paageBuilderTypeText: {\n        color: COLORS?.secondary,\n        marginLeft: theme.spacing(1),\n        marginTop: theme.spacing(2),\n    },\n    closeButton: {\n        borderRadius: 20,\n        float: 'right',\n        marginTop: theme.spacing(3),\n        marginRight: theme.spacing(1),\n    },\n}));\n\nconst defaultProps = {\n    bgcolor: 'background.paper',\n    m: 1,\n    border: 2,\n    borderColor: 'silver',\n};\n\nconst GenericSlider = (props) => {\n\n    const { state, updateState } = props\n\n    const classes = useStyles();\n\n    //local state\n    const [isRenderDialog, setRenderDialog] = useState(false);\n    const [dialogType, setDialogType] = useState('');\n    const [dialogTitle, setDialogTitle] = useState('');\n    const [isSaving, setSaving] = useState(false);\n    const [isAlert, setAlert] = React.useState(false);\n\n    const router = useRouter();\n    const companyId = router.query.companyID;\n    const {GENERAL_SETTINGS, token} = useContext(WebCmsGlobal);\n    const authToken = token || router.query.authToken;\n\n    useEffect(() => {\n\n        if (router.query.masterid) {\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                params: {\n                    query: `masterid:${router.query.masterid}`,\n                    hotelrefno: Number(companyId),\n                },\n            }).then(res => {\n                if (res?.status === 200 && res?.data?.data?.length > 0) {\n                    const slider = {\n                        title: res.data.data[0]?.title,\n                        description: res.data.data[0]?.description,\n                        cta: res.data.data[0]?.cta,\n                        gid: res.data.data[0]?.gid,\n                        textColor: state?.assets?.colors?.slider?.main,\n                        buttonColor: state?.assets?.colors?.button?.main,\n                    }\n                    updateState('pageBuilder', 'slider', slider);\n                }\n            })\n        }\n        if (router.query.gid) {\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                params: {\n                    query: `gid:${router.query.gid}`,\n                    hotelrefno: Number(companyId),\n                },\n            }).then(res => {\n                if (res?.status === 200 && res?.data?.data?.length > 0) {\n                    const slider = {\n                        title: res.data.data[0]?.title,\n                        description: res.data.data[0]?.description,\n                        cta: res.data.data[0]?.cta,\n                        gid: res.data.data[0]?.gid,\n                        textColor: state?.assets?.colors?.slider?.main,\n                        buttonColor: state?.assets?.colors?.button?.main,\n                    }\n                    updateState('pageBuilder', 'slider', slider);\n                }\n            })\n        }\n    }, []);\n\n    const resetRenderDialog = () => {\n        setRenderDialog(false);\n    }\n\n    const handleDeleteSlider = () => { //delete slider from hcmitemsld\n        setSaving(true);\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMSLD,\n            token: authToken,\n            params: {\n                query: `gid:${state.slider.gid}`,\n                hotelrefno:  Number(companyId)\n            }\n        }).then(res => {\n            if (res.status === 200 && res.data && res.data.data && res.data.data.length > 0) {\n                ViewList({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                    token: authToken,\n                    params: {\n                        query: `sliderid:${res.data.data[0].id}`,\n                        hotelrefno:  Number(companyId)\n                    }\n                }).then(res1 => {\n                    setSaving(false);\n                    if (res1.status === 200) {\n                        if (res1?.data?.data?.length > 0) {\n                            const gids = [];\n                            for (let gid in res1.data.data) {\n                                gids.push({ gid: res1.data.data[gid].gid })\n                            }\n                            UseOrest({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.DEL,\n                                token: authToken,\n                                method: REQUEST_METHOD_CONST.DELETE,\n                                data: gids,\n                                params: {\n                                    hotelrefno: Number(companyId)\n                                },\n                            }).then(r1 => {\n                                if (r1.status === 200) {\n                                    Delete({\n                                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                                        token: authToken,\n                                        gid: state.slider.gid,\n                                        params: {\n                                            hotelrefno: Number(companyId)\n                                        }\n                                    }).then(r2 => {\n                                        if (r2.status === 200) {\n                                            setSaving(false);\n                                            const updatedSliderObj = {\n                                                title: '',\n                                                description: '',\n                                                cta: '',\n                                                gid: ''\n                                            }\n                                            updateState('pageBuilder', 'slider', updatedSliderObj)\n                                            toast.success(DELETE_SUCCESS, {\n                                                position: toast.POSITION.TOP_RIGHT\n                                            });\n                                        } else {\n                                            const retErr = isErrorMsg(res);\n                                            toast.error(retErr.errorMsg, {\n                                                position: toast.POSITION.TOP_RIGHT\n                                            });\n                                        }\n                                    })\n                                } else {\n                                    const retErr = isErrorMsg(res);\n                                    toast.error(retErr.errorMsg, {\n                                        position: toast.POSITION.TOP_RIGHT\n                                    });\n                                }\n                            });\n                        } else {\n                            Delete({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                                token: authToken,\n                                gid: state.slider.gid,\n                                params: {\n                                    hotelrefno: Number(companyId)\n                                }\n                            }).then(r2 => {\n                                if (r2.status === 200) {\n                                    setSaving(false);\n                                    const updatedSliderObj = {\n                                        title: '',\n                                        description: '',\n                                        cta: '',\n                                        gid: ''\n                                    }\n                                    updateState('pageBuilder', 'slider', updatedSliderObj)\n                                    toast.success(DELETE_SUCCESS, {\n                                        position: toast.POSITION.TOP_RIGHT\n                                    });\n                                } else {\n                                    const retErr = isErrorMsg(res);\n                                    toast.error(retErr.errorMsg, {\n                                        position: toast.POSITION.TOP_RIGHT\n                                    });\n                                }\n                            })\n                        }\n                    }\n                })\n            }\n        })\n    }\n\n    const handleDelete = (isDelete) => {\n        if (isDelete) {\n            handleDeleteSlider();\n        }\n        setAlert(false)\n    }\n\n    const handleClose = () => {\n        window?.top?.postMessage(\"closePageBuilder\", \"*\");\n    }\n\n    return(\n        <Container>\n            <Grid container>\n                <Grid item xs={6}>\n                    <Typography className={classes.paageBuilderTypeText} variant=\"h4\">\n                        Slider\n                    </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        aria-label=\"close\"\n                        className={classes.closeButton}\n                        onClick={handleClose}\n                    >\n                        CLOSE\n                    </Button>\n                </Grid>\n            </Grid>\n            <Box {...defaultProps} className={isSaving ? classes.disableAction : ''} >\n                {\n                    state.slider.gid ?\n                        <Typography component={'div'} style={{overflow: 'auto'}}>\n                            <IconButton\n                                aria-label=\"Edit item\"\n                                color=\"primary\"\n                                onClick={() => {\n                                    setDialogType('edit-slider');\n                                    setDialogTitle('Edit Slider')\n                                    setRenderDialog(true);\n                                }}\n                            >\n                                <BorderColorSharpIcon color=\"primary\"/>\n                            </IconButton>\n                            {\n                                !router.query.gid && <IconButton\n                                    aria-label=\"Delete item\"\n                                    color=\"primary\"\n                                    onClick={() => setAlert(true)}\n                                >\n                                    <DeleteIcon color=\"primary\"/>\n                                </IconButton>\n                            }\n                            <Slider sliderComponent={state.slider}/>\n                        </Typography>  :\n                        <>\n                        <Typography component={'div'} style={{height: 'auto', overflow: 'auto'}}>\n                            <h3 className={classes.centreContent}>\n                                <span\n                                    className={classes.cursorPointer}\n                                    style={{marginTop: 8}}\n                                    onClick={() => {\n                                        setDialogType('add-slider');\n                                        setDialogTitle('Add Slider')\n                                        setRenderDialog(true);\n                                    }}\n                                >\n                                    Click to define Slider\n                                </span>\n                            </h3>\n                        </Typography>\n                        <Divider style={{border: 'none', height: 2, backgroundColor: 'silver'}} />\n                        <Typography component={'div'} style={{minHeight: 500}}></Typography>\n                    </>\n                }\n            </Box>\n            {\n                isRenderDialog && <SliderModal\n                    type={dialogType}\n                    title={dialogTitle}\n                    resetRenderDialog={resetRenderDialog}\n                />\n            }\n            {\n                isAlert && <AlertDialog handleDelete={handleDelete} />\n            }\n        </Container>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        state: state.formReducer.pageBuilder\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateState: (stateType, stateName, value) => dispatch(updateState(stateType, stateName, value)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(GenericSlider);\n"]},"metadata":{},"sourceType":"module"}