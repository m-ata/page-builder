{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/AddRaTagDialog/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Dialog, Grid, Typography } from \"@material-ui/core\";\nimport RaTagSelect from \"../RaTagSelect\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport { InsertRaTag, PatchRaTag } from \"../../model/orest/components/RaTag\";\nimport { useSnackbar } from \"notistack\";\nimport { isErrorMsg } from \"../../model/orest/constants\";\nimport AddDialogActions from \"../AddDialogActions\";\nimport TrackedChangesDialog from \"../TrackedChangesDialog\";\n\nfunction AddRaTagDialog(props) {\n  const {\n    open,\n    tableName,\n    onClose,\n    mid,\n    token,\n    orestUrl,\n    hotelRefNo,\n    raTagLabel,\n    onSuccess,\n    onError\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    0: selectedList,\n    1: setSelectedList\n  } = useState([]);\n  const {\n    0: selectedListBase,\n    1: setSelectedListBase\n  } = useState([]);\n  const {\n    0: raTagInfo,\n    1: setRaTagInfo\n  } = useState(null);\n  const {\n    0: isSaving,\n    1: setIsSaving\n  } = useState(false); //trackedDialog\n\n  const {\n    0: openTrackedDialog,\n    1: setOpenTrackedDialog\n  } = useState(false);\n\n  const handleSave = () => {\n    setIsSaving(true);\n\n    if (raTagInfo) {\n      PatchRaTag(orestUrl, token, raTagInfo === null || raTagInfo === void 0 ? void 0 : raTagInfo.gid, selectedList, hotelRefNo).then(r1 => {\n        setIsSaving(false);\n\n        if (r1.status === 200) {\n          enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n            variant: 'success'\n          });\n          onClose();\n          onSuccess();\n          handleReset();\n        } else {\n          const error = isErrorMsg(r1);\n          enqueueSnackbar(t(error.errorMsg), {\n            variant: 'error'\n          });\n          onError();\n        }\n      });\n    } else {\n      if (selectedList.length > 0) {\n        InsertRaTag(orestUrl, token, mid, selectedList, hotelRefNo).then(r1 => {\n          setIsSaving(false);\n\n          if (r1.status === 200) {\n            enqueueSnackbar(t('str_processCompletedSuccessfully'), {\n              variant: 'success'\n            });\n            onClose();\n            onSuccess();\n            handleReset();\n          } else {\n            const error = isErrorMsg(r1);\n            enqueueSnackbar(t(error.errorMsg), {\n              variant: 'error'\n            });\n            onError();\n          }\n        });\n      }\n    }\n  };\n\n  const handleOnClose = () => {\n    if (JSON.stringify(selectedList) !== JSON.stringify(selectedListBase)) {\n      setOpenTrackedDialog(true);\n    } else {\n      onClose();\n      handleReset();\n    }\n  };\n\n  const handleReset = () => {\n    setSelectedList([]);\n    setSelectedListBase([]);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(Dialog, {\n    open: open,\n    fullWidth: true,\n    maxWidth: 'sm',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, __jsx(Typography, {\n    style: {\n      fontWeight: 600,\n      fontSize: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }, raTagInfo ? t('str_editTag') : t('str_addTag'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, __jsx(RaTagSelect, {\n    value: selectedList,\n    onChange: (event, newValue) => {\n      setSelectedList(newValue);\n    },\n    onLoad: (raTagInfo, tagList) => {\n      setSelectedList(tagList);\n      setSelectedListBase(tagList);\n      setRaTagInfo(raTagInfo);\n    },\n    disabled: isSaving,\n    mid: mid,\n    tableName: tableName,\n    label: raTagLabel,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, __jsx(AddDialogActions, {\n    align: 'right',\n    loading: isSaving,\n    disabled: isSaving,\n    disabledSave: selectedList.length <= 0,\n    showToolTip: true,\n    toolTipTitle: __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 37\n      }\n    }, __jsx(Typography, {\n      style: {\n        fontWeight: '600',\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 41\n      }\n    }, t('str_invalidFields')), selectedList.length <= 0 && __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 49\n      }\n    }, t('str_label'))),\n    onCancelClick: handleOnClose,\n    onSaveClick: handleSave,\n    cancelButtonLabel: t('str_cancel'),\n    saveButtonLabel: t('str_save'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }))))), __jsx(TrackedChangesDialog, {\n    open: openTrackedDialog,\n    onPressNo: e => {\n      setOpenTrackedDialog(e);\n    },\n    onPressYes: e => {\n      setOpenTrackedDialog(e);\n      onClose();\n      setTimeout(() => {\n        handleReset();\n      }, 50);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default AddRaTagDialog;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/AddRaTagDialog/index.js"],"names":["React","useState","Dialog","Grid","Typography","RaTagSelect","useTranslation","InsertRaTag","PatchRaTag","useSnackbar","isErrorMsg","AddDialogActions","TrackedChangesDialog","AddRaTagDialog","props","open","tableName","onClose","mid","token","orestUrl","hotelRefNo","raTagLabel","onSuccess","onError","t","enqueueSnackbar","selectedList","setSelectedList","selectedListBase","setSelectedListBase","raTagInfo","setRaTagInfo","isSaving","setIsSaving","openTrackedDialog","setOpenTrackedDialog","handleSave","gid","then","r1","status","variant","handleReset","error","errorMsg","length","handleOnClose","JSON","stringify","padding","fontWeight","fontSize","event","newValue","tagList","e","setTimeout"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {\n    Dialog,\n    Grid,\n    Typography\n} from \"@material-ui/core\";\nimport RaTagSelect from \"../RaTagSelect\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport {InsertRaTag, PatchRaTag} from \"../../model/orest/components/RaTag\";\nimport {useSnackbar} from \"notistack\";\nimport {isErrorMsg} from \"../../model/orest/constants\";\nimport AddDialogActions from \"../AddDialogActions\";\nimport TrackedChangesDialog from \"../TrackedChangesDialog\";\n\nfunction AddRaTagDialog(props) {\n    const { open, tableName, onClose, mid, token, orestUrl, hotelRefNo, raTagLabel, onSuccess, onError } = props;\n\n    const { t } = useTranslation();\n    const { enqueueSnackbar } = useSnackbar()\n\n    const [selectedList, setSelectedList] = useState([]);\n    const [selectedListBase, setSelectedListBase] = useState([]);\n    const [raTagInfo, setRaTagInfo] = useState(null);\n    const [isSaving, setIsSaving] = useState(false);\n\n    //trackedDialog\n    const [openTrackedDialog, setOpenTrackedDialog] = useState(false);\n\n\n    const handleSave = () => {\n        setIsSaving(true)\n        if(raTagInfo) {\n           PatchRaTag(orestUrl, token, raTagInfo?.gid, selectedList, hotelRefNo).then(r1 => {\n               setIsSaving(false);\n               if(r1.status === 200) {\n                   enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'});\n                   onClose();\n                   onSuccess();\n                   handleReset();\n               } else {\n                   const error = isErrorMsg(r1);\n                   enqueueSnackbar(t(error.errorMsg), {variant: 'error'});\n                   onError();\n               }\n           })\n        } else {\n            if(selectedList.length > 0) {\n                InsertRaTag(orestUrl, token, mid, selectedList, hotelRefNo).then(r1 => {\n                    setIsSaving(false)\n                    if(r1.status === 200) {\n                        enqueueSnackbar(t('str_processCompletedSuccessfully'), {variant: 'success'});\n                        onClose();\n                        onSuccess();\n                        handleReset();\n                    } else {\n                        const error = isErrorMsg(r1);\n                        enqueueSnackbar(t(error.errorMsg), {variant: 'error'});\n                        onError();\n                    }\n                })\n            }\n        }\n    }\n\n    const handleOnClose = () => {\n        if(JSON.stringify(selectedList) !== JSON.stringify(selectedListBase)) {\n            setOpenTrackedDialog(true);\n        } else {\n            onClose();\n            handleReset();\n        }\n    }\n\n    const handleReset = () => {\n        setSelectedList([]);\n        setSelectedListBase([]);\n    }\n\n    return(\n        <React.Fragment>\n            <Dialog open={open} fullWidth maxWidth={'sm'}>\n                <div style={{padding: '16px'}}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <Typography style={{fontWeight: 600, fontSize: 24}}>{raTagInfo ? t('str_editTag') : t('str_addTag')}</Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <RaTagSelect\n                                value={selectedList}\n                                onChange={(event, newValue) => {\n                                    setSelectedList(newValue)\n                                }}\n                                onLoad={(raTagInfo, tagList) => {\n                                    setSelectedList(tagList);\n                                    setSelectedListBase(tagList)\n                                    setRaTagInfo(raTagInfo);\n                                }}\n                                disabled={isSaving}\n                                mid={mid}\n                                tableName={tableName}\n                                label={raTagLabel}\n                                required\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <AddDialogActions\n                                align={'right'}\n                                loading={isSaving}\n                                disabled={isSaving}\n                                disabledSave={selectedList.length <= 0}\n                                showToolTip\n                                toolTipTitle={\n                                    <div>\n                                        <Typography style={{fontWeight: '600', fontSize: 'inherit'}}>\n                                            {t('str_invalidFields')}\n                                        </Typography>\n                                        {\n                                            selectedList.length <= 0 && (\n                                                <Typography style={{fontSize: 'inherit'}}>\n                                                    {t('str_label')}\n                                                </Typography>\n                                            )\n                                        }\n                                    </div>\n                                }\n                                onCancelClick={handleOnClose}\n                                onSaveClick={handleSave}\n                                cancelButtonLabel={t('str_cancel')}\n                                saveButtonLabel={t('str_save')}\n                            />\n                        </Grid>\n                    </Grid>\n                </div>\n            </Dialog>\n            <TrackedChangesDialog\n                open={openTrackedDialog}\n                onPressNo={(e) => {\n                    setOpenTrackedDialog(e)\n                }}\n                onPressYes={(e) => {\n                    setOpenTrackedDialog(e)\n                    onClose()\n                    setTimeout(() => {\n                        handleReset()\n                    }, 50)\n                }}\n            />\n        </React.Fragment>\n    )\n}\n\nexport default AddRaTagDialog;"]},"metadata":{},"sourceType":"module"}