{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux';\nimport { omit, without } from 'lodash';\nimport { NOTIFICATION_DISMISS, NOTIFICATION_SHOW } from './actionTypes';\n\nfunction notification(state = {}, action) {\n  switch (action.type) {\n    case NOTIFICATION_SHOW:\n      return action.payload;\n\n    case NOTIFICATION_DISMISS:\n      return undefined;\n\n    default:\n      return state;\n  }\n}\n\nfunction allIds(state = [], action) {\n  switch (action.type) {\n    case NOTIFICATION_SHOW:\n      return [...state, action.payload.id];\n\n    case NOTIFICATION_DISMISS:\n      return without(state, action.payload);\n\n    default:\n      return state;\n  }\n}\n\nfunction byId(state = {}, action) {\n  switch (action.type) {\n    case NOTIFICATION_SHOW:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [action.payload.id]: notification(state[action.payload.id], action)\n      });\n\n    case NOTIFICATION_DISMISS:\n      return omit(state, action.payload);\n\n    default:\n      return state;\n  }\n}\n\nexport const notifications = combineReducers({\n  byId,\n  allIds\n});\nexport default notifications;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/model/notification/reducer.js"],"names":["combineReducers","omit","without","NOTIFICATION_DISMISS","NOTIFICATION_SHOW","notification","state","action","type","payload","undefined","allIds","id","byId","notifications"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,QAA9B;AACA,SAASC,oBAAT,EAA+BC,iBAA/B,QAAwD,eAAxD;;AAEA,SAASC,YAAT,CAAsBC,KAAK,GAAG,EAA9B,EAAkCC,MAAlC,EAA0C;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,iBAAL;AACI,aAAOG,MAAM,CAACE,OAAd;;AACJ,SAAKN,oBAAL;AACI,aAAOO,SAAP;;AACJ;AACI,aAAOJ,KAAP;AANR;AAQH;;AAED,SAASK,MAAT,CAAgBL,KAAK,GAAG,EAAxB,EAA4BC,MAA5B,EAAoC;AAChC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,iBAAL;AACI,aAAO,CAAC,GAAGE,KAAJ,EAAWC,MAAM,CAACE,OAAP,CAAeG,EAA1B,CAAP;;AACJ,SAAKT,oBAAL;AACI,aAAOD,OAAO,CAACI,KAAD,EAAQC,MAAM,CAACE,OAAf,CAAd;;AACJ;AACI,aAAOH,KAAP;AANR;AAQH;;AAED,SAASO,IAAT,CAAcP,KAAK,GAAG,EAAtB,EAA0BC,MAA1B,EAAkC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,iBAAL;AACI,6CACOE,KADP;AAEI,SAACC,MAAM,CAACE,OAAP,CAAeG,EAAhB,GAAqBP,YAAY,CAACC,KAAK,CAACC,MAAM,CAACE,OAAP,CAAeG,EAAhB,CAAN,EAA2BL,MAA3B;AAFrC;;AAIJ,SAAKJ,oBAAL;AACI,aAAOF,IAAI,CAACK,KAAD,EAAQC,MAAM,CAACE,OAAf,CAAX;;AACJ;AACI,aAAOH,KAAP;AATR;AAWH;;AAED,OAAO,MAAMQ,aAAa,GAAGd,eAAe,CAAC;AAAEa,EAAAA,IAAF;AAAQF,EAAAA;AAAR,CAAD,CAArC;AAEP,eAAeG,aAAf","sourcesContent":["import { combineReducers } from 'redux'\nimport { omit, without } from 'lodash'\nimport { NOTIFICATION_DISMISS, NOTIFICATION_SHOW } from './actionTypes'\n\nfunction notification(state = {}, action) {\n    switch (action.type) {\n        case NOTIFICATION_SHOW:\n            return action.payload\n        case NOTIFICATION_DISMISS:\n            return undefined\n        default:\n            return state\n    }\n}\n\nfunction allIds(state = [], action) {\n    switch (action.type) {\n        case NOTIFICATION_SHOW:\n            return [...state, action.payload.id]\n        case NOTIFICATION_DISMISS:\n            return without(state, action.payload)\n        default:\n            return state\n    }\n}\n\nfunction byId(state = {}, action) {\n    switch (action.type) {\n        case NOTIFICATION_SHOW:\n            return {\n                ...state,\n                [action.payload.id]: notification(state[action.payload.id], action),\n            }\n        case NOTIFICATION_DISMISS:\n            return omit(state, action.payload)\n        default:\n            return state\n    }\n}\n\nexport const notifications = combineReducers({ byId, allIds })\n\nexport default notifications\n"]},"metadata":{},"sourceType":"module"}