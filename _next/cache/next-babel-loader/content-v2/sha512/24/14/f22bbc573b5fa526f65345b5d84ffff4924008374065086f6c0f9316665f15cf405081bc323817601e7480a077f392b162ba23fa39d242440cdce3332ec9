{"ast":null,"code":"import _extends from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/options/Time.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { SURVEY_INPUT_VARIANT } from '../../../../assets/const';\nimport { LocalizationProvider, TimePicker } from '@material-ui/pickers';\nimport MomentAdapter from '@date-io/moment';\nimport moment from 'moment';\nimport { OREST_ENDPOINT } from '../../../../model/orest/constants';\nimport TextField from '@material-ui/core/TextField';\nimport useSurveyAction from '../../../../model/survey/useSurveyAction';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from '../../style/SurveyOptions.style';\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip';\nvar useStyles = makeStyles(styles);\n\nvar timeToDate = function timeToDate(time) {\n  var times = [];\n  times = time.split(':');\n\n  if (times.length > 0) {\n    var dateValue = new Date();\n    dateValue.setHours(Number(times[0]), Number(times[1]), Number(times[2]));\n    return dateValue;\n  } else {\n    return null;\n  }\n};\n\nexport default function TimeOption(props) {\n  _s();\n\n  var _this = this;\n\n  var option = props.option,\n      optionTyp = props.optionTyp; //style\n\n  var classes = useStyles(); //redux\n\n  var _useSurveyAction = useSurveyAction(),\n      setSurveyAnswerMulti = _useSurveyAction.setSurveyAnswerMulti,\n      deleteSurveyAnswer = _useSurveyAction.deleteSurveyAnswer;\n\n  var surveyTrans = useSelector(function (state) {\n    return state.survey.trans;\n  });\n  var surveyIsValid = useSelector(function (state) {\n    return state.survey.isValid;\n  });\n  var oldAnswer = useSelector(function (state) {\n    return state.survey.answers[surveyTrans] && state.survey.answers[surveyTrans][option.parentid] && state.survey.answers[surveyTrans][option.parentid][option.id];\n  }); //state\n\n  var _useState = useState(oldAnswer ? timeToDate(oldAnswer.valuetime) : null),\n      optionValue = _useState[0],\n      setOptionValue = _useState[1];\n\n  var handleChangeOption = function handleChangeOption(date) {\n    var timeValue = moment(date).format(OREST_ENDPOINT.TIMEFORMAT);\n    setOptionValue(date);\n\n    if (timeValue !== '' && timeValue !== 'Invalid date') {\n      setSurveyAnswerMulti(surveyTrans, option.parentid, option.id, {\n        typ: optionTyp,\n        parentid: option.parentid,\n        valuetime: timeValue\n      });\n    } else {\n      deleteSurveyAnswer(surveyTrans, option.parentid, option.id);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.optionContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(SurveyTooltip, {\n    title: option && option.note || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, __jsx(TimePicker, {\n    onKeyUp: handleChangeOption,\n    onKeyDown: handleChangeOption,\n    onChange: handleChangeOption,\n    ampm: false,\n    views: ['hours', 'minutes', 'seconds'],\n    inputFormat: \"HH:mm:ss\",\n    mask: \"__:__:__\",\n    disabled: surveyIsValid,\n    id: String(option.id),\n    name: String(option.id),\n    label: option.langwordtxt || option.description,\n    value: optionValue,\n    KeyboardButtonProps: {\n      'aria-label': 'change time'\n    },\n    className: classes.textField,\n    InputProps: {\n      classes: {\n        input: classes.textFieldInput\n      }\n    },\n    InputLabelProps: {\n      className: classes.textFieldLabel\n    },\n    renderInput: function renderInput(props) {\n      return __jsx(TextField, _extends({}, props, {\n        variant: SURVEY_INPUT_VARIANT,\n        fullWidth: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 49\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }))));\n}\n\n_s(TimeOption, \"sMrHOpZhZGS1Ha1rMLTIx0sYm+M=\", false, function () {\n  return [useStyles, useSurveyAction, useSelector, useSelector, useSelector];\n});\n\n_c = TimeOption;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeOption\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/options/Time.js"],"names":["React","useState","SURVEY_INPUT_VARIANT","LocalizationProvider","TimePicker","MomentAdapter","moment","OREST_ENDPOINT","TextField","useSurveyAction","useSelector","makeStyles","styles","SurveyTooltip","useStyles","timeToDate","time","times","split","length","dateValue","Date","setHours","Number","TimeOption","props","option","optionTyp","classes","setSurveyAnswerMulti","deleteSurveyAnswer","surveyTrans","state","survey","trans","surveyIsValid","isValid","oldAnswer","answers","parentid","id","valuetime","optionValue","setOptionValue","handleChangeOption","date","timeValue","format","TIMEFORMAT","typ","optionContainer","note","String","langwordtxt","description","textField","input","textFieldInput","className","textFieldLabel"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { SURVEY_INPUT_VARIANT } from '../../../../assets/const'\nimport { LocalizationProvider, TimePicker } from '@material-ui/pickers'\nimport MomentAdapter from '@date-io/moment'\nimport moment from 'moment'\nimport { OREST_ENDPOINT } from '../../../../model/orest/constants'\nimport TextField from '@material-ui/core/TextField'\nimport useSurveyAction from '../../../../model/survey/useSurveyAction'\nimport { useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport styles from '../../style/SurveyOptions.style'\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip'\n\nconst useStyles = makeStyles(styles)\n\nconst timeToDate = (time) => {\n    let times = []\n    times = time.split(':')\n    if (times.length > 0) {\n        const dateValue = new Date()\n        dateValue.setHours(Number(times[0]), Number(times[1]), Number(times[2]))\n\n        return dateValue\n    } else {\n        return null\n    }\n}\n\nexport default function TimeOption(props) {\n    const { option, optionTyp } = props\n\n    //style\n    const classes = useStyles()\n\n    //redux\n    const { setSurveyAnswerMulti, deleteSurveyAnswer } = useSurveyAction()\n    const surveyTrans = useSelector((state) => state.survey.trans)\n    const surveyIsValid = useSelector((state) => state.survey.isValid)\n    const oldAnswer = useSelector(\n        (state) =>\n            state.survey.answers[surveyTrans] &&\n            state.survey.answers[surveyTrans][option.parentid] &&\n            state.survey.answers[surveyTrans][option.parentid][option.id],\n    )\n\n    //state\n    const [optionValue, setOptionValue] = useState(oldAnswer ? timeToDate(oldAnswer.valuetime) : null)\n\n    const handleChangeOption = (date) => {\n        const timeValue = moment(date).format(OREST_ENDPOINT.TIMEFORMAT)\n        setOptionValue(date)\n\n        if (timeValue !== '' && timeValue !== 'Invalid date') {\n            setSurveyAnswerMulti(surveyTrans, option.parentid, option.id, {\n                typ: optionTyp,\n                parentid: option.parentid,\n                valuetime: timeValue,\n            })\n        } else {\n            deleteSurveyAnswer(surveyTrans, option.parentid, option.id)\n        }\n    }\n\n    return (\n        <div className={classes.optionContainer}>\n            <SurveyTooltip title={option && option.note || ''}>\n                <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                    <TimePicker\n                        onKeyUp={handleChangeOption}\n                        onKeyDown={handleChangeOption}\n                        onChange={handleChangeOption}\n                        ampm={false}\n                        views={['hours', 'minutes', 'seconds']}\n                        inputFormat=\"HH:mm:ss\"\n                        mask=\"__:__:__\"\n                        disabled={surveyIsValid}\n                        id={String(option.id)}\n                        name={String(option.id)}\n                        label={option.langwordtxt || option.description}\n                        value={optionValue}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change time',\n                        }}\n                        className={classes.textField}\n                        InputProps={{ classes: { input: classes.textFieldInput } }}\n                        InputLabelProps={{ className: classes.textFieldLabel }}\n                        renderInput={(props) => <TextField {...props} variant={SURVEY_INPUT_VARIANT} fullWidth/>}\n                    />\n                </LocalizationProvider>\n            </SurveyTooltip>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}