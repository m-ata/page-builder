{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/@webcms-ui/core/media-viewer-dialog/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Button, Dialog, DialogContent, DialogActions, Grid } from \"@material-ui/core\";\nimport LoadingSpinner from \"../../../components/LoadingSpinner\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nvar useStyles = makeStyles(function () {\n  return {\n    dialogContent: {\n      padding: 24\n    }\n  };\n});\nvar mimeTypes = {\n  image: 'image',\n  audio: 'audio',\n  video: 'video'\n};\nexport default function MediaViewerDialog(props) {\n  _s();\n\n  var classes = useStyles();\n  var open = props.open,\n      loading = props.loading,\n      maxWidth = props.maxWidth,\n      fullWidth = props.fullWidth,\n      fileType = props.fileType,\n      url = props.url,\n      onClose = props.onClose,\n      t = props.t;\n  return __jsx(Dialog, {\n    open: open,\n    maxWidth: fileType !== mimeTypes.audio ? maxWidth : 'xs',\n    fullWidth: fullWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(DialogContent, {\n    className: classes.dialogContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, loading ? __jsx(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 33\n    }\n  }) : fileType === mimeTypes.video ? __jsx(\"video\", {\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 37\n    }\n  }, __jsx(\"source\", {\n    src: url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 41\n    }\n  })) : fileType === mimeTypes.audio ? __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 37\n    }\n  }, __jsx(\"audio\", {\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 41\n    }\n  }, __jsx(\"source\", {\n    src: url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 45\n    }\n  }))) : __jsx(\"img\", {\n    src: url,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 37\n    }\n  })))), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    color: 'primary',\n    variant: 'outlined',\n    onClick: function onClick() {\n      typeof onClose === 'function' && onClose();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, t('str_close'))));\n}\n\n_s(MediaViewerDialog, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = MediaViewerDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"MediaViewerDialog\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/@webcms-ui/core/media-viewer-dialog/index.js"],"names":["React","Button","Dialog","DialogContent","DialogActions","Grid","LoadingSpinner","makeStyles","useStyles","dialogContent","padding","mimeTypes","image","audio","video","MediaViewerDialog","props","classes","open","loading","maxWidth","fullWidth","fileType","url","onClose","t","textAlign","width"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Button, Dialog, DialogContent, DialogActions, Grid} from \"@material-ui/core\";\nimport LoadingSpinner from \"../../../components/LoadingSpinner\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(() => ({\n    dialogContent: {\n        padding: 24\n    }\n}))\n\nconst mimeTypes = {\n    image: 'image',\n    audio: 'audio',\n    video: 'video'\n}\n\nexport default function MediaViewerDialog(props) {\n    const classes = useStyles()\n    \n    const {open, loading, maxWidth, fullWidth, fileType, url, onClose, t} = props\n\n    return(\n        <Dialog\n            open={open}\n            maxWidth={fileType !== mimeTypes.audio ? maxWidth : 'xs'}\n            fullWidth={fullWidth}\n        >\n            <DialogContent className={classes.dialogContent}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        {\n                            loading ? (\n                                <LoadingSpinner />\n                            ) : (\n                                fileType === mimeTypes.video ? (\n                                    <video controls>\n                                        <source src={url} />\n                                    </video>\n                                ) : fileType === mimeTypes.audio ? (\n                                    <div style={{textAlign: 'center'}}>\n                                        <audio controls>\n                                            <source src={url} />\n                                        </audio>\n                                    </div>\n                                ) : (\n                                    <img src={url} style={{width: '100%'}}/>\n                                )\n                            )\n                        }\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    color={'primary'}\n                    variant={'outlined'}\n                    onClick={() => {typeof onClose === 'function' && onClose()}}\n                >\n                    {t('str_close')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}"]},"metadata":{},"sourceType":"module"}