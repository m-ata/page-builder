{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/reset-password/GuestForgotPasswordAction.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport styles from './style/ForgotPassword.style';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BackToLoginLink from '../../layout/components/BackToLoginLink';\nimport { required, validateEmail } from '../../../state/utils/form';\nimport { isErrorMsg, REQUEST_METHOD_CONST } from '../../../model/orest/constants';\nimport WebCmsGlobal from '../../webcms-global';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { useSnackbar } from 'notistack';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nconst useStyles = makeStyles(styles);\nexport default function GuestForgotPasswordAction(props) {\n  const classes = useStyles();\n  const {\n    isDestinationPortal,\n    setIsDestinationPortal\n  } = props;\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const router = useRouter();\n  const emailParam = router.query.email; //redux\n\n  const {\n    t\n  } = useTranslation(); //state\n\n  const {\n    0: email,\n    1: setEmail\n  } = useState({\n    address: '',\n    isError: false,\n    errorText: ''\n  });\n  const {\n    0: isSending,\n    1: setIsSending\n  } = useState(false);\n  const {\n    0: isSuccess,\n    1: setIsSuccess\n  } = useState(false);\n  useEffect(() => {\n    if (emailParam) {\n      setEmail(_objectSpread(_objectSpread({}, email), {}, {\n        address: emailParam\n      }));\n    }\n  }, []);\n\n  const handleChangeEmail = e => {\n    const value = e.target.value;\n    setEmail(_objectSpread(_objectSpread({}, email), {}, {\n      address: value,\n      isError: !!validateEmail(value),\n      errorText: validateEmail(value)\n    }));\n  };\n\n  const handleClickSend = () => {\n    if (!required(email.address) && !validateEmail(email.address)) {\n      setIsSending(true);\n      axios({\n        url: GENERAL_SETTINGS.BASE_URL + 'api/ors/user/forgot-password',\n        method: REQUEST_METHOD_CONST.POST,\n        data: {\n          email: email.address\n        }\n      }).then(response => {\n        if (response.status === 200 && response.data.success === true) {\n          setIsSuccess(true);\n          enqueueSnackbar(t('str_passwordSuccessfullyReset'), {\n            variant: 'success'\n          });\n        } else {\n          if (response.data.error === 'no_client') {\n            setEmail(_objectSpread(_objectSpread({}, email), {}, {\n              isError: true,\n              errorText: t('str_thereIsNoUserForThisEmailPleaseCheckYourEmail')\n            }));\n            setIsSending(false);\n          } else {\n            enqueueSnackbar(t('str_passwordCloudNotReset'), {\n              variant: 'warning'\n            });\n            setIsSending(false);\n          }\n        }\n      });\n    } else {\n      if (!!required(email.address)) {\n        setEmail(_objectSpread(_objectSpread({}, email), {}, {\n          isError: !!required(email.address),\n          errorText: required(email.address)\n        }));\n      }\n    }\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    className: classes.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    direction: 'column',\n    justify: 'center',\n    alignItems: isDestinationPortal ? 'unset' : 'center',\n    className: classes.gridContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, !isSuccess ? __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, !isDestinationPortal ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 41\n    }\n  }, __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 45\n    }\n  }, t('str_forgotYourPassword'))) : null, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }\n  }, __jsx(TextField, {\n    className: isDestinationPortal ? classes.textFieldDestinationPortal : \"\",\n    required: true,\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    label: \"Email Address\",\n    variant: !isDestinationPortal ? \"filled\" : \"outlined\",\n    color: \"primary\",\n    value: email.address,\n    onKeyUp: handleChangeEmail,\n    onKeyDown: handleChangeEmail,\n    onChange: handleChangeEmail,\n    error: email.isError,\n    helperText: email.isError && email.errorText,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 37\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.gridItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 33\n    }\n  }, __jsx(Button, {\n    onClick: handleClickSend,\n    fullWidth: true,\n    variant: \"contained\",\n    disabled: isSending || email.isError,\n    className: classes.sendButton,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 37\n    }\n  }, t('str_send'))), isDestinationPortal ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 41\n    }\n  }, __jsx(Button, {\n    color: \"primary\",\n    onClick: () => setIsDestinationPortal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 45\n    }\n  }, t(\"str_back\"))) : null) : __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    direction: 'column',\n    justify: 'center',\n    alignItems: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 37\n    }\n  }, __jsx(CheckCircleOutlineIcon, {\n    className: classes.successIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: \"h2\",\n    variant: \"h5\",\n    className: classes.titleSuccess1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 41\n    }\n  }, t('str_weSentYouPasswordCreationMail'))), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 37\n    }\n  }, __jsx(Typography, {\n    component: \"h3\",\n    variant: \"h5\",\n    className: classes.titleSuccess2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 41\n    }\n  }, t('str_pleaseCheckYourMailbox'))))))), !isDestinationPortal ? __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 29\n    }\n  }, __jsx(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 33\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      padding: '12px 12px 24px 12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }\n  }, __jsx(BackToLoginLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 33\n    }\n  }))) : null));\n}","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/reset-password/GuestForgotPasswordAction.js"],"names":["React","useContext","useEffect","useState","Typography","Grid","Button","TextField","Divider","styles","makeStyles","BackToLoginLink","required","validateEmail","isErrorMsg","REQUEST_METHOD_CONST","WebCmsGlobal","CheckCircleOutlineIcon","useRouter","axios","useSnackbar","useTranslation","useStyles","GuestForgotPasswordAction","props","classes","isDestinationPortal","setIsDestinationPortal","enqueueSnackbar","GENERAL_SETTINGS","router","emailParam","query","email","t","setEmail","address","isError","errorText","isSending","setIsSending","isSuccess","setIsSuccess","handleChangeEmail","e","value","target","handleClickSend","url","BASE_URL","method","POST","data","then","response","status","success","variant","error","gridContainer","gridItem","title","textFieldDestinationPortal","sendButton","textAlign","successIcon","titleSuccess1","titleSuccess2","divider","padding"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Divider from '@material-ui/core/Divider'\nimport styles from './style/ForgotPassword.style'\nimport { makeStyles } from '@material-ui/core/styles'\nimport BackToLoginLink from '../../layout/components/BackToLoginLink'\nimport { required, validateEmail } from '../../../state/utils/form'\nimport { isErrorMsg, REQUEST_METHOD_CONST } from '../../../model/orest/constants'\nimport WebCmsGlobal from '../../webcms-global'\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\nimport { useRouter } from 'next/router'\nimport axios from 'axios'\nimport { useSnackbar } from 'notistack'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\n\nconst useStyles = makeStyles(styles)\n\nexport default function GuestForgotPasswordAction(props) {\n    const classes = useStyles();\n    const { isDestinationPortal, setIsDestinationPortal } = props;\n    const { enqueueSnackbar } = useSnackbar()\n\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const router = useRouter()\n    const emailParam = router.query.email\n\n    //redux\n    const { t } = useTranslation()\n\n    //state\n    const [email, setEmail] = useState({ address: '', isError: false, errorText: '' })\n    const [isSending, setIsSending] = useState(false)\n    const [isSuccess, setIsSuccess] = useState(false)\n\n    useEffect(() => {\n        if (emailParam) {\n            setEmail({\n                ...email,\n                address: emailParam,\n            })\n        }\n    }, [])\n\n    const handleChangeEmail = (e) => {\n        const value = e.target.value\n\n        setEmail({\n            ...email,\n            address: value,\n            isError: !!validateEmail(value),\n            errorText: validateEmail(value),\n        })\n    }\n\n    const handleClickSend = () => {\n        if (!required(email.address) && !validateEmail(email.address)) {\n            setIsSending(true)\n            axios({\n                url: GENERAL_SETTINGS.BASE_URL + 'api/ors/user/forgot-password',\n                method: REQUEST_METHOD_CONST.POST,\n                data: {\n                    email: email.address,\n                },\n            }).then((response) => {\n                if (response.status === 200 && response.data.success === true) {\n                    setIsSuccess(true)\n                    enqueueSnackbar(t('str_passwordSuccessfullyReset'), { variant: 'success' })\n                } else {\n                    if (response.data.error === 'no_client') {\n                        setEmail({\n                            ...email,\n                            isError: true,\n                            errorText: t('str_thereIsNoUserForThisEmailPleaseCheckYourEmail')\n                        })\n                        setIsSending(false)\n                    } else {\n                        enqueueSnackbar(t('str_passwordCloudNotReset'), { variant: 'warning' })\n                        setIsSending(false)\n                    }\n                }\n            })\n        } else {\n            if (!!required(email.address)) {\n                setEmail({\n                    ...email,\n                    isError: !!required(email.address),\n                    errorText: required(email.address),\n                })\n            }\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <Grid container spacing={3} className={classes.gridContainer}>\n                <Grid item xs={12}>\n                    <Grid\n                        container\n                        spacing={3}\n                        direction={'column'}\n                        justify={'center'}\n                        alignItems={isDestinationPortal ? 'unset' : 'center'}\n                        className={classes.gridContainer}\n                    >\n                        {!isSuccess ? (\n                            <React.Fragment>\n                                {\n                                    !isDestinationPortal ?\n                                        <Grid item xs={12} className={classes.gridItem}>\n                                            <Typography component=\"h1\" variant=\"h5\" className={classes.title}>\n                                                {t('str_forgotYourPassword')}\n                                            </Typography>\n                                        </Grid> : null\n                                }\n                                <Grid item xs={12} className={classes.gridItem}>\n                                    <TextField\n                                        className={isDestinationPortal ? classes.textFieldDestinationPortal : \"\"}\n                                        required\n                                        id=\"email\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        label=\"Email Address\"\n                                        variant={!isDestinationPortal ? \"filled\" : \"outlined\"}\n                                        color={\"primary\"}\n                                        value={email.address}\n                                        onKeyUp={handleChangeEmail}\n                                        onKeyDown={handleChangeEmail}\n                                        onChange={handleChangeEmail}\n                                        error={email.isError}\n                                        helperText={email.isError && email.errorText}\n                                        fullWidth\n                                    />\n                                </Grid>\n                                <Grid item xs={12} className={classes.gridItem}>\n                                    <Button\n                                        onClick={handleClickSend}\n                                        fullWidth\n                                        variant=\"contained\"\n                                        disabled={isSending || email.isError}\n                                        className={classes.sendButton}\n                                        color=\"primary\"\n                                    >\n                                        {t('str_send')}\n                                    </Button>\n                                </Grid>\n                                {\n                                    isDestinationPortal ?\n                                        <Grid item xs={12} style={{ textAlign: \"right\" }}>\n                                            <Button color={\"primary\"} onClick={() => (setIsDestinationPortal(false))}>{t(\"str_back\")}</Button>\n                                        </Grid> : null\n                                }\n                            </React.Fragment>\n                        ) : (\n                            <Grid item xs={12}>\n                                <Grid\n                                    container\n                                    spacing={3}\n                                    direction={'column'}\n                                    justify={'center'}\n                                    alignItems={'center'}\n                                >\n                                    <Grid item>\n                                        <CheckCircleOutlineIcon className={classes.successIcon} />\n                                    </Grid>\n                                    <Grid item>\n                                        <Typography component=\"h2\" variant=\"h5\" className={classes.titleSuccess1}>\n                                            {t('str_weSentYouPasswordCreationMail')}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Typography component=\"h3\" variant=\"h5\" className={classes.titleSuccess2}>\n                                            {t('str_pleaseCheckYourMailbox')}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n                {\n                    !isDestinationPortal ?\n                        <React.Fragment>\n                            <Grid item xs={12}>\n                                <Divider className={classes.divider} />\n                            </Grid>\n                            <Grid item xs={12} style={{ padding: '12px 12px 24px 12px' }}>\n                                <BackToLoginLink />\n                            </Grid>\n                        </React.Fragment>\n                         : null\n                }\n            </Grid>\n        </React.Fragment>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}