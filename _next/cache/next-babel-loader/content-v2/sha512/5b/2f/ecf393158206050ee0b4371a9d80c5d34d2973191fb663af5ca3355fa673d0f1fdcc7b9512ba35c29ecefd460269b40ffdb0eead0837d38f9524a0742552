{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/CustomAutoComplete/CustomAutoComplete.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState, useRef } from \"react\";\nimport { connect, useSelector } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport WebCmsGlobal from \"../webcms-global\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport { UseOrest } from '@webcms/orest';\nimport PropTypes from 'prop-types';\nimport { useOrestAction } from \"../../model/orest\";\nimport { REQUEST_METHOD_CONST } from \"../../model/orest/constants\";\nimport { setToState } from \"../../state/actions\";\nconst filter = createFilterOptions();\n\nfunction CustomAutoComplete(props) {\n  const {\n    id,\n    name,\n    endpoint,\n    params,\n    disabled,\n    variant,\n    searchParam,\n    label,\n    value,\n    showOptionLabel,\n    initialId,\n    trgValKey,\n    showOption,\n    required,\n    searchInitialParam,\n    onChange,\n    onLoad,\n    freeSolo,\n    helperText,\n    error,\n    triggerValue,\n    onInputChange,\n    useDefaultFilter,\n    onBlur,\n    withoutToken,\n    setToState,\n    withoutTokenData,\n    fullWidth\n  } = props; //context\n\n  const {\n    GENERAL_SETTINGS\n  } = useContext(WebCmsGlobal);\n  const {\n    t\n  } = useTranslation();\n  const {\n    setOrestState\n  } = useOrestAction(); //redux\n\n  const token = useSelector(state => {\n    var _state$orest, _state$orest$currentU;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$currentU = _state$orest.currentUser) === null || _state$orest$currentU === void 0 ? void 0 : _state$orest$currentU.auth.access_token) || false;\n  });\n  const reduxList = useSelector(state => {\n    var _state$formReducer, _state$formReducer$dy;\n\n    return (state === null || state === void 0 ? void 0 : (_state$formReducer = state.formReducer) === null || _state$formReducer === void 0 ? void 0 : (_state$formReducer$dy = _state$formReducer.dynamicList) === null || _state$formReducer$dy === void 0 ? void 0 : _state$formReducer$dy[name]) || false;\n  }); //state\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState('');\n  const {\n    0: reason,\n    1: setReason\n  } = useState('');\n  const {\n    0: list,\n    1: setList\n  } = useState(reduxList || []);\n  const {\n    0: filterList,\n    1: setFilterList\n  } = useState(list);\n  const {\n    0: initialValue,\n    1: setInitialValue\n  } = useState('');\n  const {\n    0: localStateTriggerValue,\n    1: setLocalStateTriggerValue\n  } = useState(false);\n  let baseUrl = GENERAL_SETTINGS === null || GENERAL_SETTINGS === void 0 ? void 0 : GENERAL_SETTINGS.BASE_URL;\n\n  if (withoutToken && baseUrl.length > 0) {\n    if (baseUrl[baseUrl.length - 1] === '/') {\n      baseUrl = baseUrl.substring(0, baseUrl.length - 1);\n    }\n  } //ref\n\n\n  const ref = useRef();\n  useEffect(() => {\n    if (initialId && initialId !== '' && initialValue === 'find' && initialId !== initialValue) {\n      UseOrest({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: endpoint,\n        token,\n        params: {\n          query: `${searchInitialParam ? searchInitialParam : 'id'}:${initialId}`,\n          hotelrefno: params === null || params === void 0 ? void 0 : params.hotelrefno\n        }\n      }).then(r1 => {\n        if (r1.status === 200) {\n          if (typeof onLoad === 'function') {\n            onLoad(r1.data.data[0]);\n          }\n        }\n      });\n    }\n  }, [initialId, initialValue]);\n  useEffect(() => {\n    if (endpoint && params && !reduxList || endpoint && withoutToken && !reduxList) {\n      setLoading(true);\n      UseOrest({\n        apiUrl: withoutToken ? baseUrl : GENERAL_SETTINGS.OREST_URL,\n        endpoint: endpoint,\n        method: withoutToken ? REQUEST_METHOD_CONST.POST : REQUEST_METHOD_CONST.GET,\n        token: withoutToken ? false : token,\n        params: params,\n        data: withoutToken ? withoutTokenData : false\n      }).then(res => {\n        if (res.status === 200 && res.data.success) {\n          setLoading(false);\n          setList(res.data.data);\n          setFilterList(res.data.data);\n          setToState('dynamicList', [name], res.data.data);\n        } else {\n          setLoading(false);\n        }\n      });\n    } else if (reduxList && (reduxList === null || reduxList === void 0 ? void 0 : reduxList.length) > 0) {\n      setList(reduxList);\n    }\n  }, []);\n  useEffect(() => {\n    if (initialId && list.length > 0) {\n      handleFindInitialValue(list);\n    }\n  }, [initialId, list]);\n  useEffect(() => {\n    if (localStateTriggerValue !== (typeof triggerValue === 'object' ? triggerValue[trgValKey] : triggerValue) && triggerValue !== '' && triggerValue) {\n      setLocalStateTriggerValue(triggerValue);\n      setLoading(true);\n      UseOrest({\n        apiUrl: withoutToken ? baseUrl : GENERAL_SETTINGS.OREST_URL,\n        endpoint: endpoint,\n        method: withoutToken ? REQUEST_METHOD_CONST.POST : REQUEST_METHOD_CONST.GET,\n        token: withoutToken ? false : token,\n        params: params,\n        data: withoutToken ? withoutTokenData && withoutTokenData : false\n      }).then(res => {\n        if (res.status === 200) {\n          setList(res.data.data);\n        }\n\n        setLoading(false);\n      });\n    }\n  }, [triggerValue]);\n\n  const handleFindInitialValue = (list = []) => {\n    if (list.length > 0) {\n      if (initialId) {\n        let initialValue;\n\n        if (searchInitialParam) {\n          initialValue = list.find(e => e[searchInitialParam] === initialId);\n        } else {\n          initialValue = list.find(e => e.id === initialId);\n        }\n\n        if (initialValue) {\n          if (typeof onLoad === 'function') {\n            onLoad(initialValue);\n          }\n\n          setInitialValue(typeof initialValue === 'object' ? initialValue[searchInitialParam] : initialValue);\n        } else {\n          const defaultValue = list.find(e => e.isdef === true);\n\n          if (defaultValue) {\n            if (typeof onLoad === 'function') {\n              onLoad(defaultValue && defaultValue);\n            }\n\n            setInitialValue(initialValue);\n          } else {\n            setInitialValue('find');\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!useDefaultFilter) {\n      if (searchText.length > 0 && reason !== 'reset') {\n        const timer = setTimeout(() => {\n          params.text = `*${searchText}`;\n          params.field = searchParam;\n          setLoading(true);\n          UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: endpoint,\n            token,\n            params: params\n          }).then(res => {\n            if (res.status === 200) {\n              setFilterList(res.data.data);\n              setLoading(false);\n            } else {\n              setLoading(false);\n            }\n          });\n        }, 1000);\n        return () => clearTimeout(timer);\n      } else {\n        setFilterList([]);\n      }\n    }\n  }, [searchText]);\n\n  const handleOnBlur = event => {\n    if (typeof onBlur === 'function') onBlur(event);\n  };\n\n  return __jsx(Autocomplete, {\n    id: id,\n    name: name,\n    ref: ref,\n    loading: loading,\n    disabled: disabled || loading,\n    noOptionsText: t(\"str_notFound\"),\n    fullWidth: fullWidth,\n    value: value,\n    variant: variant || 'outlined',\n    onChange: (event, newValue) => {\n      onChange(event, newValue, ref.current.getAttribute(\"name\"));\n    },\n    onInputChange: (e, newInputValue, reason) => {\n      setSearchText(newInputValue.toUpperCase());\n      setReason(reason);\n\n      if (typeof onInputChange === 'function') {\n        onInputChange(newInputValue);\n      }\n    },\n    onBlur: e => handleOnBlur(e),\n    options: searchText.length > 0 && filterList.length > 0 ? filterList : list,\n    filterOptions: (options, params) => useDefaultFilter ? list.length > 0 && filter(options, params) : options,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option[showOption]) {\n        return option[showOption];\n      } // Regular option\n\n\n      return option.code;\n    } //renderOption={(option) => option[showOption ? showOption : 'code']}\n    ,\n    getOptionSelected: (option, value) => option[showOption ? showOption : 'id'] === value[showOption ? showOption : 'id'],\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      required: required,\n      error: error,\n      label: label || '',\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }\n        }, params.InputProps.endAdornment, loading ? __jsx(LoadingSpinner, {\n          size: 18,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 44\n          }\n        }) : params.InputProps.endAdornment)\n      }),\n      variant: variant,\n      helperText: helperText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }\n    })),\n    freeSolo: freeSolo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  });\n}\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomAutoComplete);\nCustomAutoComplete.defaultProps = {\n  showOptionLabel: 'code'\n};\nCustomAutoComplete.propTypes = {\n  endpoint: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/CustomAutoComplete/CustomAutoComplete.js"],"names":["React","useContext","useEffect","useState","useRef","connect","useSelector","TextField","Autocomplete","createFilterOptions","LoadingSpinner","WebCmsGlobal","useTranslation","UseOrest","PropTypes","useOrestAction","REQUEST_METHOD_CONST","setToState","filter","CustomAutoComplete","props","id","name","endpoint","params","disabled","variant","searchParam","label","value","showOptionLabel","initialId","trgValKey","showOption","required","searchInitialParam","onChange","onLoad","freeSolo","helperText","error","triggerValue","onInputChange","useDefaultFilter","onBlur","withoutToken","withoutTokenData","fullWidth","GENERAL_SETTINGS","t","setOrestState","token","state","orest","currentUser","auth","access_token","reduxList","formReducer","dynamicList","loading","setLoading","searchText","setSearchText","reason","setReason","list","setList","filterList","setFilterList","initialValue","setInitialValue","localStateTriggerValue","setLocalStateTriggerValue","baseUrl","BASE_URL","length","substring","ref","apiUrl","OREST_URL","query","hotelrefno","then","r1","status","data","method","POST","GET","res","success","handleFindInitialValue","find","e","defaultValue","isdef","timer","setTimeout","text","field","clearTimeout","handleOnBlur","event","newValue","current","getAttribute","newInputValue","toUpperCase","options","option","code","InputProps","endAdornment","mapStateToProps","guest","mapDispatchToProps","dispatch","stateType","stateName","defaultProps","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState, useRef} from \"react\";\nimport {connect, useSelector} from 'react-redux'\nimport {TextField} from '@material-ui/core'\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport WebCmsGlobal from \"../webcms-global\";\nimport useTranslation from \"../../lib/translations/hooks/useTranslation\";\nimport {UseOrest} from '@webcms/orest'\nimport PropTypes from 'prop-types'\nimport {useOrestAction} from \"../../model/orest\";\nimport { REQUEST_METHOD_CONST } from \"../../model/orest/constants\";\nimport { setToState } from \"../../state/actions\";\n\nconst filter = createFilterOptions();\n\nfunction CustomAutoComplete(props) {\n\n    const { id, name, endpoint, params, disabled, variant, searchParam, label, value, showOptionLabel, initialId, trgValKey, showOption, required, searchInitialParam, onChange, onLoad, freeSolo, helperText, error, triggerValue, onInputChange, useDefaultFilter, onBlur, withoutToken, setToState, withoutTokenData, fullWidth } = props\n\n    //context\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal);\n    const { t } = useTranslation();\n\n    const { setOrestState } = useOrestAction()\n\n    //redux\n    const token = useSelector((state) => state?.orest?.currentUser?.auth.access_token || false);\n    const reduxList = useSelector((state) => state?.formReducer?.dynamicList?.[name] || false);\n\n    //state\n    const [loading, setLoading] = useState(false);\n    const [searchText, setSearchText] = useState('');\n    const [reason, setReason] = useState('');\n    const [list, setList] = useState(reduxList || []);\n    const [filterList, setFilterList] = useState(list)\n    const [initialValue, setInitialValue] = useState('');\n    const [localStateTriggerValue, setLocalStateTriggerValue] = useState(false);\n\n    let baseUrl = GENERAL_SETTINGS?.BASE_URL\n    if(withoutToken && baseUrl.length > 0) {\n        if(baseUrl[baseUrl.length - 1] === '/') {\n            baseUrl = baseUrl.substring(0, baseUrl.length - 1)\n        }\n    }\n\n    //ref\n    const ref = useRef();\n\n    useEffect(() => {\n        if(initialId && initialId !== '' && initialValue === 'find' && initialId !== initialValue) {\n            UseOrest({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: endpoint,\n                token,\n                params: {\n                    query: `${searchInitialParam ? searchInitialParam : 'id'}:${initialId}`,\n                    hotelrefno: params?.hotelrefno\n                }\n            }).then(r1 => {\n                if(r1.status === 200) {\n                    if(typeof onLoad === 'function') {\n                        onLoad(r1.data.data[0])\n                    }\n                }\n            })\n        }\n    }, [initialId, initialValue])\n\n    useEffect(() => {\n        if((endpoint && params && !reduxList) || (endpoint && withoutToken && !reduxList)) {\n            setLoading(true);\n            UseOrest({\n                apiUrl: withoutToken ? baseUrl : GENERAL_SETTINGS.OREST_URL,\n                endpoint: endpoint,\n                method: withoutToken ? REQUEST_METHOD_CONST.POST : REQUEST_METHOD_CONST.GET,\n                token: withoutToken ? false : token,\n                params: params,\n                data: withoutToken ? withoutTokenData : false\n            }).then(res => {\n                if(res.status === 200 && res.data.success) {\n                    setLoading(false);\n                    setList(res.data.data);\n                    setFilterList(res.data.data);\n                    setToState('dynamicList', [name], res.data.data)\n                } else {\n                    setLoading(false);\n                }\n            })\n        } else if(reduxList && reduxList?.length > 0) {\n            setList(reduxList);\n        }\n    }, [])\n\n    useEffect(() => {\n        if(initialId && list.length > 0) {\n            handleFindInitialValue(list)\n        }\n    }, [initialId, list])\n\n\n\n\n    useEffect(() => {\n        if(localStateTriggerValue !== (typeof triggerValue === 'object' ? triggerValue[trgValKey] : triggerValue)  && triggerValue !== '' && triggerValue) {\n            setLocalStateTriggerValue(triggerValue);\n            setLoading(true);\n            UseOrest({\n                apiUrl: withoutToken ? baseUrl : GENERAL_SETTINGS.OREST_URL,\n                endpoint: endpoint,\n                method: withoutToken ? REQUEST_METHOD_CONST.POST : REQUEST_METHOD_CONST.GET,\n                token: withoutToken ? false : token,\n                params: params,\n                data: withoutToken ? withoutTokenData && withoutTokenData : false\n            }).then(res => {\n                if(res.status === 200) {\n                    setList(res.data.data)\n                }\n                setLoading(false);\n            })\n        }\n    }, [triggerValue])\n\n    const handleFindInitialValue = (list = []) => {\n        if(list.length > 0) {\n            if(initialId) {\n                let initialValue;\n                if(searchInitialParam) {\n                    initialValue = list.find(e => e[searchInitialParam] === initialId)\n                } else {\n                    initialValue = list.find(e => e.id === initialId)\n                }\n                if(initialValue){\n                    if(typeof onLoad === 'function') {\n                        onLoad(initialValue)\n                    }\n                    setInitialValue(typeof initialValue === 'object' ? initialValue[searchInitialParam] : initialValue)\n                } else {\n                    const defaultValue = list.find(e => e.isdef === true);\n                    if(defaultValue) {\n                        if(typeof onLoad === 'function') {\n                            onLoad(defaultValue && defaultValue)\n                        }\n                        setInitialValue(initialValue)\n                    } else {\n                        setInitialValue('find')\n                    }\n                }\n            }\n        }\n    }\n\n\n\n\n    useEffect(() => {\n        if(!useDefaultFilter) {\n            if(searchText.length > 0 && reason !== 'reset') {\n                const timer = setTimeout(() => {\n                    params.text = `*${searchText}`;\n                    params.field = searchParam\n                    setLoading(true);\n                    UseOrest({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: endpoint,\n                        token,\n                        params: params\n                    }).then(res => {\n                        if(res.status === 200) {\n                            setFilterList(res.data.data)\n                            setLoading(false)\n                        } else {\n                            setLoading(false);\n                        }\n                    })\n                }, 1000)\n                return () => clearTimeout(timer);\n            } else {\n                setFilterList([])\n            }\n        }\n\n    }, [searchText])\n\n    const handleOnBlur = (event) => {\n       if(typeof onBlur === 'function') onBlur(event)\n    }\n\n    return(\n        <Autocomplete\n            id={id}\n            name={name}\n            ref={ref}\n            loading={loading}\n            disabled={disabled || loading}\n            noOptionsText={t(\"str_notFound\")}\n            fullWidth={fullWidth}\n            value={value}\n            variant={variant || 'outlined'}\n            onChange={(event, newValue) => {\n                onChange(event, newValue, ref.current.getAttribute(\"name\"))\n            }}\n            onInputChange={(e, newInputValue, reason) => {\n                setSearchText(newInputValue.toUpperCase())\n                setReason(reason)\n                if(typeof onInputChange === 'function') {\n                    onInputChange(newInputValue)\n                }\n            }}\n            onBlur={(e) => handleOnBlur(e)}\n            options={searchText.length > 0 && filterList.length > 0 ? filterList : list}\n            filterOptions={(options, params) => useDefaultFilter ? list.length > 0 && filter(options, params) : options}\n            getOptionLabel={(option) => {\n                // Value selected with enter, right from the input\n                if (typeof option === 'string') {\n                    return option;\n                }\n                // Add \"xxx\" option created dynamically\n                if (option[showOption]) {\n                    return option[showOption];\n                }\n                // Regular option\n                return option.code;\n            }}\n            //renderOption={(option) => option[showOption ? showOption : 'code']}\n            getOptionSelected={(option, value) => option[showOption ? showOption : 'id'] === value[showOption ? showOption : 'id']}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    required={required}\n                    error={error}\n                    label={label || ''}\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {params.InputProps.endAdornment}\n                                {loading ? <LoadingSpinner size={18}/> : params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                    variant={variant}\n                    helperText={helperText}\n                />\n            )}\n            freeSolo={freeSolo}\n        />\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomAutoComplete)\n\nCustomAutoComplete.defaultProps = {\n    showOptionLabel: 'code'\n}\n\nCustomAutoComplete.propTypes = {\n    endpoint: PropTypes.string.isRequired,\n\n}"]},"metadata":{},"sourceType":"module"}