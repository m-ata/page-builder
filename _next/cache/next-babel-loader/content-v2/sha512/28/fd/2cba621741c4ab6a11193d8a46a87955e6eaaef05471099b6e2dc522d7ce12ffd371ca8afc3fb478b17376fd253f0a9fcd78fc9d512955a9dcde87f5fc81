{"ast":null,"code":"import _defineProperty from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/survey/surveytree/options/Select.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Select } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SURVEY_INPUT_VARIANT } from '../../../../assets/const';\nimport useSurveyAction from '../../../../model/survey/useSurveyAction';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styles from '../../style/SurveyOptions.style';\nimport OnePageSurvey from '../render-types/OnePageSurvey';\nimport HasNote from './sub-components/HasNote';\nimport HasFile from './sub-components/HasFile';\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip';\nvar useStyles = makeStyles(styles);\n\nfunction getOptionFromOptionValue(options, optionValue) {\n  if (options && options.length > 0) {\n    var data = [];\n    options.map(function (k) {\n      data = _objectSpread(_objectSpread({}, data), {}, _defineProperty({}, k.id, k));\n    });\n    return data[optionValue];\n  } else {\n    return null;\n  }\n}\n\nexport default function SelectOption(props) {\n  _s();\n\n  var _this = this;\n\n  var options = props.options,\n      optionTyp = props.optionTyp,\n      index = props.index; //style\n\n  var classes = useStyles(); //redux\n\n  var _useSurveyAction = useSurveyAction(),\n      setSurveyAnswer = _useSurveyAction.setSurveyAnswer;\n\n  var surveyTrans = useSelector(function (state) {\n    return state.survey.trans;\n  });\n  var surveyIsValid = useSelector(function (state) {\n    return state.survey.isValid;\n  });\n  var oldAnswers = useSelector(function (state) {\n    return state.survey.answers[surveyTrans] && state.survey.answers[surveyTrans][options[0].parentid];\n  });\n  var oldAnswer = oldAnswers && Object.keys(oldAnswers).map(function (k) {\n    return _objectSpread(_objectSpread({}, oldAnswers[k]), {}, {\n      id: k\n    });\n  }).filter(function (j) {\n    return j.typ === optionTyp;\n  }); //state\n\n  var _useState = useState(getOptionFromOptionValue(options, oldAnswer && oldAnswer[0] ? oldAnswer[0].id : '')),\n      option = _useState[0],\n      setOption = _useState[1];\n\n  var _useState2 = useState(oldAnswer && oldAnswer[0] ? oldAnswer[0].id : ''),\n      optionValue = _useState2[0],\n      setOptionValue = _useState2[1];\n\n  var _useState3 = useState(oldAnswer && oldAnswer[0] ? oldAnswer[0].answernote || '' : ''),\n      answerNote = _useState3[0],\n      setAnswerNote = _useState3[1];\n\n  var handleChangeOption = function handleChangeOption(event) {\n    var value = event.target.value;\n    setOption(getOptionFromOptionValue(options, value)); //clear answerNote\n\n    setAnswerNote('');\n    setOptionValue(value);\n\n    if (value && value !== '' && value !== 0) {\n      setSurveyAnswer(surveyTrans, options[0].parentid, value, {\n        typ: optionTyp,\n        parentid: options[0].parentid\n      });\n    }\n  };\n\n  var handleChangeAnswerNote = function handleChangeAnswerNote(event) {\n    var value = event.target.value;\n    setAnswerNote(value);\n    setSurveyAnswer(surveyTrans, options[0].parentid, optionValue, {\n      typ: optionTyp,\n      parentid: options[0].parentid,\n      answernote: value\n    });\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.optionContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, __jsx(SurveyTooltip, {\n    title: option && option.note || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, __jsx(FormControl, {\n    variant: SURVEY_INPUT_VARIANT,\n    fullWidth: true,\n    disabled: surveyIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, __jsx(Select, {\n    \"native\": true,\n    value: optionValue,\n    onChange: handleChangeOption,\n    className: classes.textField,\n    inputProps: {\n      name: 'language-native-select',\n      id: 'language-native-select',\n      className: classes.textFieldInput\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }), options.map(function (option, i) {\n    if (option.typ === optionTyp) {\n      return __jsx(\"option\", {\n        value: String(option.id),\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 41\n        }\n      }, option.langwordtxt || option.description);\n    }\n  }))))), option && option.hasnote && __jsx(HasNote, {\n    labelvisible: option.itemlabelvisible,\n    name: option.id,\n    label: option.customvalue,\n    value: answerNote,\n    onChange: handleChangeAnswerNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }), option && option.hasfile && __jsx(HasFile, {\n    option: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 42\n    }\n  }), option && option.children && __jsx(OnePageSurvey, {\n    options: option.children,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 43\n    }\n  }));\n}\n\n_s(SelectOption, \"xx251I/bspOAvARvlHAPKrmyAL8=\", false, function () {\n  return [useStyles, useSurveyAction, useSelector, useSelector, useSelector];\n});\n\n_c = SelectOption;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectOption\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/survey/surveytree/options/Select.js"],"names":["React","useState","Select","FormControl","SURVEY_INPUT_VARIANT","useSurveyAction","useSelector","makeStyles","styles","OnePageSurvey","HasNote","HasFile","SurveyTooltip","useStyles","getOptionFromOptionValue","options","optionValue","length","data","map","k","id","SelectOption","props","optionTyp","index","classes","setSurveyAnswer","surveyTrans","state","survey","trans","surveyIsValid","isValid","oldAnswers","answers","parentid","oldAnswer","Object","keys","filter","j","typ","option","setOption","setOptionValue","answernote","answerNote","setAnswerNote","handleChangeOption","event","value","target","handleChangeAnswerNote","optionContainer","note","textField","name","className","textFieldInput","i","String","langwordtxt","description","hasnote","itemlabelvisible","customvalue","hasfile","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Select } from '@material-ui/core'\nimport FormControl from '@material-ui/core/FormControl'\nimport { SURVEY_INPUT_VARIANT } from '../../../../assets/const'\nimport useSurveyAction from '../../../../model/survey/useSurveyAction'\nimport { useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport styles from '../../style/SurveyOptions.style'\nimport OnePageSurvey from '../render-types/OnePageSurvey'\nimport HasNote from './sub-components/HasNote'\nimport HasFile from './sub-components/HasFile'\nimport SurveyTooltip from 'components/survey/helper/SurveyTooltip'\n\nconst useStyles = makeStyles(styles)\n\nfunction getOptionFromOptionValue(options, optionValue) {\n    if (options && options.length > 0) {\n        let data = []\n        options.map((k) => {\n            data = { ...data, [k.id]: k }\n        })\n\n        return data[optionValue]\n    } else {\n        return null\n    }\n}\n\nexport default function SelectOption(props) {\n    const { options, optionTyp, index } = props\n\n    //style\n    const classes = useStyles()\n\n    //redux\n    const { setSurveyAnswer } = useSurveyAction()\n    const surveyTrans = useSelector((state) => state.survey.trans)\n    const surveyIsValid = useSelector((state) => state.survey.isValid)\n    const oldAnswers = useSelector(\n        (state) => state.survey.answers[surveyTrans] && state.survey.answers[surveyTrans][options[0].parentid],\n    )\n    const oldAnswer =\n        oldAnswers &&\n        Object.keys(oldAnswers)\n            .map((k) => ({ ...oldAnswers[k], id: k }))\n            .filter((j) => {\n                return j.typ === optionTyp\n            })\n\n    //state\n    const [option, setOption] = useState(\n        getOptionFromOptionValue(options, oldAnswer && oldAnswer[0] ? oldAnswer[0].id : ''),\n    )\n    const [optionValue, setOptionValue] = useState(oldAnswer && oldAnswer[0] ? oldAnswer[0].id : '')\n    const [answerNote, setAnswerNote] = useState(oldAnswer && oldAnswer[0] ? oldAnswer[0].answernote || '' : '')\n\n    const handleChangeOption = (event) => {\n        const value = event.target.value\n        setOption(getOptionFromOptionValue(options, value))\n\n        //clear answerNote\n        setAnswerNote('')\n        setOptionValue(value)\n        if (value && value !== '' && value !== 0) {\n            setSurveyAnswer(surveyTrans, options[0].parentid, value, {\n                typ: optionTyp,\n                parentid: options[0].parentid,\n            })\n        }\n    }\n\n    const handleChangeAnswerNote = (event) => {\n        const value = event.target.value\n        setAnswerNote(value)\n\n        setSurveyAnswer(surveyTrans, options[0].parentid, optionValue, {\n            typ: optionTyp,\n            parentid: options[0].parentid,\n            answernote: value,\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <div className={classes.optionContainer}>\n                <SurveyTooltip title={option && option.note || ''}>\n                    <FormControl variant={SURVEY_INPUT_VARIANT} fullWidth disabled={surveyIsValid}>\n                        <Select\n                            native\n                            value={optionValue}\n                            onChange={handleChangeOption}\n                            className={classes.textField}\n                            inputProps={{\n                                name: 'language-native-select',\n                                id: 'language-native-select',\n                                className: classes.textFieldInput,\n                            }}\n                        >\n                            <option aria-label=\"None\" value=\"\"/>\n                            {options.map((option, i) => {\n                                if (option.typ === optionTyp) {\n                                    return (\n                                        <option value={String(option.id)} key={i}>\n                                            {option.langwordtxt || option.description}\n                                        </option>\n                                    )\n                                }\n                            })}\n                        </Select>\n                    </FormControl>\n                </SurveyTooltip>\n            </div>\n            {option && option.hasnote && (\n                <HasNote\n                    labelvisible={option.itemlabelvisible}\n                    name={option.id}\n                    label={option.customvalue}\n                    value={answerNote}\n                    onChange={handleChangeAnswerNote}\n                />\n            )}\n            {option && option.hasfile && <HasFile option={option}/>}\n            {option && option.children && <OnePageSurvey options={option.children} index={index}/>}\n        </React.Fragment>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}