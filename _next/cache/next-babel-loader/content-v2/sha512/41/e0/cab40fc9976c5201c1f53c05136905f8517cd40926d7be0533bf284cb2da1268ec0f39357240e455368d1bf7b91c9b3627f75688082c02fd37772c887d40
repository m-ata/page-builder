{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mata/app-cloudweb/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/mata/app-cloudweb/components/guest/account/Reservations/ReservationCancelDialog.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport { connect, useSelector } from 'react-redux';\nimport { setToState as _setToState } from 'state/actions';\nimport useTranslation from 'lib/translations/hooks/useTranslation';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport { List, Insert, Patch, UseOrest, ViewList } from '@webcms/orest';\nimport { DEFAULT_OREST_TOKEN, OREST_ENDPOINT, REQUEST_METHOD_CONST } from 'model/orest/constants';\nimport WebCmsGlobal from 'components/webcms-global';\nimport { useSnackbar } from 'notistack';\nimport { sendGuestChangeNotifyMail } from '../Base/helper';\nimport { CustomToolTip } from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport Typography from \"@material-ui/core/Typography\";\n\nvar ReservationCancelDialog = function ReservationCancelDialog(props) {\n  _s();\n\n  var _useContext = useContext(WebCmsGlobal),\n      GENERAL_SETTINGS = _useContext.GENERAL_SETTINGS;\n\n  var state = props.state,\n      reservation = props.reservation,\n      open = props.open,\n      _onClose = props.onClose,\n      getCallbackData = props.getCallbackData,\n      type = props.type,\n      isOnlyUpdate = props.isOnlyUpdate;\n  var token = useSelector(function (state) {\n    return state.orest.currentUser !== null ? state.orest.currentUser.auth.access_token : DEFAULT_OREST_TOKEN;\n  });\n  var hotelRefNo = useSelector(function (state) {\n    var _state$formReducer, _state$formReducer$gu, _state$hotelinfo;\n\n    return (state === null || state === void 0 ? void 0 : (_state$formReducer = state.formReducer) === null || _state$formReducer === void 0 ? void 0 : (_state$formReducer$gu = _state$formReducer.guest) === null || _state$formReducer$gu === void 0 ? void 0 : _state$formReducer$gu.changeHotelRefno) || (state === null || state === void 0 ? void 0 : (_state$hotelinfo = state.hotelinfo) === null || _state$hotelinfo === void 0 ? void 0 : _state$hotelinfo.currentHotelRefNo) || GENERAL_SETTINGS.HOTELREFNO;\n  });\n  var clientBase = useSelector(function (state) {\n    var _state$orest, _state$orest$state;\n\n    return (state === null || state === void 0 ? void 0 : (_state$orest = state.orest) === null || _state$orest === void 0 ? void 0 : (_state$orest$state = _state$orest.state) === null || _state$orest$state === void 0 ? void 0 : _state$orest$state.client) || false;\n  });\n  var reservBase = state.clientReservation || false;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      resxreasonID = _useState2[0],\n      setResxreasonID = _useState2[1];\n\n  var _useState3 = useState(false),\n      resxReasonList = _useState3[0],\n      setResxReasonList = _useState3[1];\n\n  var _useState4 = useState(false),\n      resxReasonUpdateList = _useState4[0],\n      setResxReasonUpdateList = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      resxreasonNote = _useState5[0],\n      setResxreasonNote = _useState5[1];\n\n  var _useState6 = useState([]),\n      renderList = _useState6[0],\n      setRenderList = _useState6[1];\n\n  var _useState7 = useState(false),\n      openToolTip = _useState7[0],\n      setOpenToolTip = _useState7[1];\n\n  useEffect(function () {\n    var active = true;\n\n    if (active) {\n      var array = [{\n        title: 'cancelList',\n        params: type === 'room' && {\n          query: 'isactive:true,isresa:true,isgapp:true',\n          hotelrefno: hotelRefNo\n        }\n      }, {\n        title: 'updateList',\n        params: type === 'room' && {\n          query: 'isactive:true,isresa:true,isupd:true,isgapp:true',\n          hotelrefno: hotelRefNo\n        }\n      }];\n      array.map(function (item, index) {\n        ViewList({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.RESXREASON,\n          token: token,\n          params: item === null || item === void 0 ? void 0 : item.params\n        }).then(function (response) {\n          if (response.status === 200 && response.data.count > 0) {\n            var responseData = response.data.data;\n            setRenderList(responseData);\n\n            if (item.title === 'cancelList') {\n              setResxReasonList(responseData);\n            } else if (item.title === 'updateList') {\n              setResxReasonUpdateList(responseData);\n            }\n          } else {\n            setResxReasonList(false);\n            setResxReasonUpdateList(false);\n          }\n        })[\"catch\"](function () {\n          setResxReasonList(false);\n        });\n      });\n    }\n\n    return function () {\n      setIsLoading(false);\n      active = false;\n    };\n  }, []);\n  useEffect(function () {\n    if (isOnlyUpdate) {\n      setRenderList(resxReasonUpdateList);\n    } else {\n      setRenderList(resxReasonList);\n    }\n  }, [isOnlyUpdate]);\n\n  var cancelEventReservation = function cancelEventReservation() {\n    var reasonForCancel = resxReasonList.find(function (item) {\n      return Number(item.id) === Number(resxreasonID);\n    });\n    var notifyValues = {\n      roomno: (reservBase === null || reservBase === void 0 ? void 0 : reservBase.roomno) || \"-\",\n      clientname: (clientBase === null || clientBase === void 0 ? void 0 : clientBase.clientname) || \"-\",\n      details: JSON.stringify({\n        description: reasonForCancel.description,\n        note: resxreasonNote ? resxreasonNote : \"-\",\n        loc: reservation.description,\n        date: reservation.startdate,\n        time: reservation.starttime,\n        totalpax: reservation.totalpax,\n        totalchd: reservation.totalchd\n      })\n    };\n    Insert({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.RESXREASONLIST,\n      token: token,\n      data: {\n        resxreasonid: resxreasonID,\n        note: resxreasonNote,\n        reservno: reservation.reservno,\n        hotelrefno: reservation.hotelrefno\n      }\n    }).then(function (response) {\n      if (response.status === 200) {\n        Patch({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.RESEVENT,\n          token: token,\n          gid: reservation.gid,\n          params: {\n            hotelrefno: reservation.hotelrefno\n          },\n          data: {\n            status: 'X'\n          }\n        }).then( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!(response.status === 200)) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    getCallbackData();\n                    enqueueSnackbar(t('str_updatedSuccessfully'), {\n                      variant: 'success'\n                    });\n\n                    _onClose(true);\n\n                    setResxreasonID(false);\n                    setResxreasonNote(\"\");\n                    setIsLoading(false);\n                    _context.next = 9;\n                    return sendGuestChangeNotifyMail(reservBase !== null && reservBase !== void 0 && reservBase.gid ? false : true, 'resevent', 'cnl', clientBase.id, reservBase !== null && reservBase !== void 0 && reservBase.gid ? reservBase.gid : clientBase.gid, notifyValues, (reservBase === null || reservBase === void 0 ? void 0 : reservBase.hotelrefno) || GENERAL_SETTINGS.HOTELREFNO);\n\n                  case 9:\n                    _context.next = 14;\n                    break;\n\n                  case 11:\n                    enqueueSnackbar(t('str_unexpectedProblem'), {\n                      variant: 'warning'\n                    });\n\n                    _onClose(true);\n\n                    setIsLoading(false);\n\n                  case 14:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }())[\"catch\"](function () {\n          enqueueSnackbar(t('str_unexpectedProblem'), {\n            variant: 'warning'\n          });\n\n          _onClose(true);\n\n          setIsLoading(false);\n        });\n      } else {\n        enqueueSnackbar(t('str_unexpectedProblem'), {\n          variant: 'warning'\n        });\n\n        _onClose(true);\n\n        setIsLoading(false);\n      }\n    })[\"catch\"](function () {\n      enqueueSnackbar(t('str_unexpectedProblem'), {\n        variant: 'warning'\n      });\n\n      _onClose(true);\n\n      setIsLoading(false);\n    });\n  };\n\n  var cancelRoomReservation = function cancelRoomReservation() {\n    var reasonForCancel = resxReasonList.find(function (item) {\n      return Number(item.id) === Number(resxreasonID);\n    });\n    var notifyValues = {\n      roomno: (reservBase === null || reservBase === void 0 ? void 0 : reservBase.roomno) || \"-\",\n      clientname: (clientBase === null || clientBase === void 0 ? void 0 : clientBase.clientname) || \"-\",\n      details: JSON.stringify({\n        description: reasonForCancel.description,\n        note: resxreasonNote ? resxreasonNote : \"-\",\n        roomtype: (reservation === null || reservation === void 0 ? void 0 : reservation.roomtypedesc) || \"-\",\n        resdate: (reservation === null || reservation === void 0 ? void 0 : reservation.resdate) || \"-\",\n        cidate: (reservation === null || reservation === void 0 ? void 0 : reservation.checkin) || \"-\",\n        codate: (reservation === null || reservation === void 0 ? void 0 : reservation.checkout) || \"-\",\n        totalpax: (reservation === null || reservation === void 0 ? void 0 : reservation.totalpax) || \"-\",\n        totalchd: (reservation === null || reservation === void 0 ? void 0 : reservation.totalchd) || \"-\"\n      })\n    };\n    Insert({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.RESXREASONLIST,\n      token: token,\n      data: {\n        resxreasonid: resxreasonID,\n        note: resxreasonNote,\n        reservno: reservation.reservno,\n        hotelrefno: reservation.hotelrefno\n      }\n    }).then(function (response) {\n      if (response.status === 200) {\n        if (isOnlyUpdate) {\n          getCallbackData();\n          enqueueSnackbar(t('str_updatedSuccessfully'), {\n            variant: 'success'\n          });\n\n          _onClose(true);\n\n          setResxreasonID(false);\n          setResxreasonNote(\"\");\n          setIsLoading(false);\n        } else {\n          UseOrest({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RESERVAT_DOX,\n            method: REQUEST_METHOD_CONST.PUT,\n            token: token,\n            params: {\n              reservno: reservation.reservno,\n              hotelrefno: reservation.hotelrefno\n            }\n          }).then( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      if (!(response.status === 200)) {\n                        _context2.next = 11;\n                        break;\n                      }\n\n                      getCallbackData();\n                      enqueueSnackbar(t('str_updatedSuccessfully'), {\n                        variant: 'success'\n                      });\n\n                      _onClose(true);\n\n                      setResxreasonID(false);\n                      setResxreasonNote(\"\");\n                      setIsLoading(false);\n                      _context2.next = 9;\n                      return sendGuestChangeNotifyMail(reservBase !== null && reservBase !== void 0 && reservBase.gid ? false : true, 'reservat', 'cnl', clientBase.id, reservBase !== null && reservBase !== void 0 && reservBase.gid ? reservBase.gid : clientBase.gid, notifyValues, (reservBase === null || reservBase === void 0 ? void 0 : reservBase.hotelrefno) || GENERAL_SETTINGS.HOTELREFNO);\n\n                    case 9:\n                      _context2.next = 14;\n                      break;\n\n                    case 11:\n                      enqueueSnackbar(t('str_unexpectedProblem'), {\n                        variant: 'warning'\n                      });\n\n                      _onClose(true);\n\n                      setIsLoading(false);\n\n                    case 14:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }())[\"catch\"](function () {\n            enqueueSnackbar(t('str_unexpectedProblem'), {\n              variant: 'warning'\n            });\n\n            _onClose(true);\n\n            setIsLoading(false);\n          });\n        }\n      } else {\n        enqueueSnackbar(t('str_unexpectedProblem'), {\n          variant: 'warning'\n        });\n\n        _onClose(true);\n\n        setIsLoading(false);\n      }\n    })[\"catch\"](function () {\n      enqueueSnackbar(t('str_unexpectedProblem'), {\n        variant: 'warning'\n      });\n\n      _onClose(true);\n\n      setIsLoading(false);\n    });\n  };\n\n  var handleCancelReservation = function handleCancelReservation() {\n    if (!resxreasonID) {\n      enqueueSnackbar(t('str_pleaseSelectCancellationReason'), {\n        variant: 'warning'\n      });\n    } else {\n      setIsLoading(true);\n\n      if (type === \"event\") {\n        cancelEventReservation();\n      } else if (type === \"room\") {\n        cancelRoomReservation();\n      }\n    }\n  };\n\n  var handleCloseDialog = function handleCloseDialog(prop) {\n    typeof _onClose === 'function' && _onClose(prop);\n    handleReset();\n  };\n\n  var handleReset = function handleReset() {\n    setResxreasonID(false);\n    setResxreasonNote('');\n  };\n\n  return __jsx(Dialog, {\n    maxWidth: \"sm\",\n    fullWidth: true,\n    open: open,\n    onClose: function onClose() {\n      return _onClose(true);\n    },\n    \"aria-labelledby\": \"cancellation-reason-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, __jsx(DialogTitle, {\n    id: \"cancellation-reason-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }, isOnlyUpdate ? t('str_changeReason') : t('str_cancellationReason')), __jsx(DialogContent, {\n    dividers: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    p: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }\n  }, __jsx(Container, {\n    maxWidth: \"sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 29\n    }\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    required: true,\n    disabled: isLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 33\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"resxreasonid-select\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 37\n    }\n  }, isOnlyUpdate ? t('str_changeReason') : t('str_cancellationReason')), __jsx(Select, {\n    \"native\": true,\n    value: resxreasonID,\n    onChange: function onChange(e) {\n      return setResxreasonID(e.target.value);\n    },\n    label: isOnlyUpdate ? t('str_changeReason') : t('str_cancellationReason'),\n    inputProps: {\n      name: 'resxreasonid',\n      id: 'resxreasonid-select'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 37\n    }\n  }, __jsx(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 41\n    }\n  }), renderList && renderList.length > 0 && renderList.map(function (item, i) {\n    return __jsx(\"option\", {\n      key: i,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 49\n      }\n    }, item.description);\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 29\n    }\n  }, __jsx(TextField, {\n    disabled: isLoading,\n    fullWidth: true,\n    id: \"resxreason-description\",\n    label: t('str_note'),\n    multiline: true,\n    rows: 4,\n    variant: \"outlined\",\n    value: resxreasonNote,\n    onChange: function onChange(e) {\n      return setResxreasonNote(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 33\n    }\n  })))))), __jsx(DialogActions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return handleCloseDialog(true);\n    },\n    color: \"primary\",\n    variant: 'outlined',\n    disabled: isLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }\n  }, t('str_close')), __jsx(CustomToolTip, {\n    open: openToolTip,\n    onOpen: function onOpen() {\n      return setOpenToolTip(!resxreasonID);\n    },\n    onClose: function onClose() {\n      return setOpenToolTip(false);\n    },\n    title: __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 21\n      }\n    }, !resxreasonID ? __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 33\n      }\n    }, __jsx(Typography, {\n      style: {\n        fontWeight: '600',\n        fontSize: 'inherit'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 37\n      }\n    }, t('str_invalidFields')), __jsx(Typography, {\n      style: {\n        fontSize: 'inherit'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 37\n      }\n    }, isOnlyUpdate ? t('str_changeReason') : t('str_cancellationReason'))) : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 17\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return resxreasonID ? handleCancelReservation() : {};\n    },\n    color: \"primary\",\n    variant: 'contained',\n    disabled: isLoading || !resxreasonID,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 26\n    }\n  }, t('str_save'))))));\n};\n\n_s(ReservationCancelDialog, \"Zs5o2RGNwhmmDH5XjahA3HlClFM=\", false, function () {\n  return [useSelector, useSelector, useSelector, useTranslation, useSnackbar];\n});\n\n_c = ReservationCancelDialog;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state.formReducer.guest\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setToState: function setToState(stateType, stateName, value) {\n      return dispatch(_setToState(stateType, stateName, value));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReservationCancelDialog);\n\nvar _c;\n\n$RefreshReg$(_c, \"ReservationCancelDialog\");","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/guest/account/Reservations/ReservationCancelDialog.js"],"names":["React","useState","useEffect","useContext","Dialog","DialogActions","DialogContent","DialogTitle","Button","connect","useSelector","setToState","useTranslation","InputLabel","FormControl","Select","Grid","Container","Box","TextField","List","Insert","Patch","UseOrest","ViewList","DEFAULT_OREST_TOKEN","OREST_ENDPOINT","REQUEST_METHOD_CONST","WebCmsGlobal","useSnackbar","sendGuestChangeNotifyMail","CustomToolTip","Typography","ReservationCancelDialog","props","GENERAL_SETTINGS","state","reservation","open","onClose","getCallbackData","type","isOnlyUpdate","token","orest","currentUser","auth","access_token","hotelRefNo","formReducer","guest","changeHotelRefno","hotelinfo","currentHotelRefNo","HOTELREFNO","clientBase","client","reservBase","clientReservation","t","enqueueSnackbar","isLoading","setIsLoading","resxreasonID","setResxreasonID","resxReasonList","setResxReasonList","resxReasonUpdateList","setResxReasonUpdateList","resxreasonNote","setResxreasonNote","renderList","setRenderList","openToolTip","setOpenToolTip","active","array","title","params","query","hotelrefno","map","item","index","apiUrl","OREST_URL","endpoint","RESXREASON","then","response","status","data","count","responseData","cancelEventReservation","reasonForCancel","find","Number","id","notifyValues","roomno","clientname","details","JSON","stringify","description","note","loc","date","startdate","time","starttime","totalpax","totalchd","RESXREASONLIST","resxreasonid","reservno","RESEVENT","gid","variant","cancelRoomReservation","roomtype","roomtypedesc","resdate","cidate","checkin","codate","checkout","RESERVAT_DOX","method","PUT","handleCancelReservation","handleCloseDialog","prop","handleReset","e","target","value","name","length","i","fontWeight","fontSize","mapStateToProps","mapDispatchToProps","dispatch","stateType","stateName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Button from '@material-ui/core/Button'\nimport { connect, useSelector } from 'react-redux'\nimport { setToState } from 'state/actions'\nimport useTranslation from 'lib/translations/hooks/useTranslation'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport Grid from '@material-ui/core/Grid'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport {List, Insert, Patch, UseOrest, ViewList} from '@webcms/orest'\nimport { DEFAULT_OREST_TOKEN, OREST_ENDPOINT, REQUEST_METHOD_CONST } from 'model/orest/constants'\nimport WebCmsGlobal from 'components/webcms-global'\nimport { useSnackbar } from 'notistack'\nimport { sendGuestChangeNotifyMail } from '../Base/helper'\nimport {CustomToolTip} from \"../../../user-portal/components/CustomToolTip/CustomToolTip\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst ReservationCancelDialog = (props) =>{\n    const { GENERAL_SETTINGS } = useContext(WebCmsGlobal)\n    const { state, reservation, open, onClose, getCallbackData, type, isOnlyUpdate } = props\n    const token = useSelector((state) => state.orest.currentUser !== null ? state.orest.currentUser.auth.access_token : DEFAULT_OREST_TOKEN)\n    const hotelRefNo = useSelector((state) => state?.formReducer?.guest?.changeHotelRefno || state?.hotelinfo?.currentHotelRefNo || GENERAL_SETTINGS.HOTELREFNO)\n    const clientBase = useSelector((state) => state?.orest?.state?.client || false)\n    const reservBase = state.clientReservation || false\n    const { t } = useTranslation()\n\n    const { enqueueSnackbar } = useSnackbar()\n    const [isLoading, setIsLoading] = useState(false)\n    const [resxreasonID, setResxreasonID] = useState(false)\n    const [resxReasonList, setResxReasonList] = useState(false)\n    const [resxReasonUpdateList, setResxReasonUpdateList] = useState(false)\n    const [resxreasonNote, setResxreasonNote] = useState(\"\")\n    const [renderList, setRenderList] = useState([]);\n    const [openToolTip, setOpenToolTip] = useState(false);\n\n\n    useEffect(() => {\n        let active = true\n\n        if (active) {\n\n            const array = [\n                {\n                    title: 'cancelList',\n                    params: type === 'room' && {query: 'isactive:true,isresa:true,isgapp:true', hotelrefno: hotelRefNo}\n                },\n                {\n                    title: 'updateList',\n                    params: type === 'room' && {query: 'isactive:true,isresa:true,isupd:true,isgapp:true', hotelrefno: hotelRefNo}\n                }\n            ]\n\n            array.map((item, index) => {\n                ViewList({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.RESXREASON,\n                    token: token,\n                    params: item?.params\n                }).then((response) => {\n                        if (response.status === 200 && response.data.count > 0) {\n                            const responseData = response.data.data\n                            setRenderList(responseData)\n                            if(item.title === 'cancelList') {\n                                setResxReasonList(responseData)\n                            } else if(item.title === 'updateList') {\n                                setResxReasonUpdateList(responseData)\n                            }\n                        } else {\n                            setResxReasonList(false)\n                            setResxReasonUpdateList(false);\n                        }\n                    },\n                ).catch(() => {\n                    setResxReasonList(false)\n                })\n            })\n\n        }\n\n        return () => {\n            setIsLoading(false)\n            active = false\n        }\n\n    }, [])\n\n    useEffect(() => {\n        if(isOnlyUpdate) {\n            setRenderList(resxReasonUpdateList);\n        } else {\n            setRenderList(resxReasonList);\n        }\n\n    }, [isOnlyUpdate])\n\n    const cancelEventReservation = () => {\n        const reasonForCancel = resxReasonList.find(item => Number(item.id) === Number(resxreasonID))\n        const notifyValues = {\n            roomno: reservBase?.roomno || \"-\",\n            clientname: clientBase?.clientname || \"-\",\n            details: JSON.stringify({\n                description: reasonForCancel.description,\n                note: resxreasonNote ? resxreasonNote : \"-\",\n                loc: reservation.description,\n                date: reservation.startdate,\n                time: reservation.starttime,\n                totalpax: reservation.totalpax,\n                totalchd: reservation.totalchd\n            })\n        }\n\n        Insert({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RESXREASONLIST,\n            token: token,\n            data: {\n                resxreasonid: resxreasonID,\n                note: resxreasonNote,\n                reservno: reservation.reservno,\n                hotelrefno: reservation.hotelrefno\n            },\n        }).then((response) => {\n                if (response.status === 200) {\n                    Patch({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.RESEVENT,\n                        token: token,\n                        gid: reservation.gid,\n                        params: {\n                            hotelrefno: reservation.hotelrefno\n                        },\n                        data: {\n                            status: 'X',\n                        },\n                    }).then(async (response) => {\n                        if (response.status === 200) {\n                            getCallbackData()\n                            enqueueSnackbar(t('str_updatedSuccessfully'), { variant: 'success' })\n                            onClose(true)\n                            setResxreasonID(false)\n                            setResxreasonNote(\"\")\n                            setIsLoading(false)\n                            await sendGuestChangeNotifyMail(reservBase?.gid ? false : true,'resevent','cnl',clientBase.id,reservBase?.gid ? reservBase.gid : clientBase.gid, notifyValues,reservBase?.hotelrefno || GENERAL_SETTINGS.HOTELREFNO)\n                        } else {\n                            enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n                            onClose(true)\n                            setIsLoading(false)\n                        }\n                    }).catch(() => {\n                        enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n                        onClose(true)\n                        setIsLoading(false)\n                    })\n                } else {\n                    enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n                    onClose(true)\n                    setIsLoading(false)\n                }\n            },\n        ).catch(() => {\n            enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n            onClose(true)\n            setIsLoading(false)\n        })\n    }\n\n    const cancelRoomReservation = () => {\n        const reasonForCancel = resxReasonList.find(item => Number(item.id) === Number(resxreasonID))\n        const notifyValues = {\n            roomno: reservBase?.roomno || \"-\",\n            clientname: clientBase?.clientname || \"-\",\n            details: JSON.stringify({\n                description: reasonForCancel.description,\n                note: resxreasonNote ? resxreasonNote : \"-\",\n                roomtype: reservation?.roomtypedesc || \"-\",\n                resdate: reservation?.resdate || \"-\",\n                cidate: reservation?.checkin || \"-\",\n                codate: reservation?.checkout || \"-\",\n                totalpax: reservation?.totalpax || \"-\",\n                totalchd: reservation?.totalchd || \"-\"\n            })\n        }\n\n        Insert({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RESXREASONLIST,\n            token: token,\n            data: {\n                resxreasonid: resxreasonID,\n                note: resxreasonNote,\n                reservno: reservation.reservno,\n                hotelrefno: reservation.hotelrefno\n            },\n        }).then((response) => {\n            if (response.status === 200) {\n                if(isOnlyUpdate) {\n                    getCallbackData()\n                    enqueueSnackbar(t('str_updatedSuccessfully'), { variant: 'success' })\n                    onClose(true)\n                    setResxreasonID(false)\n                    setResxreasonNote(\"\")\n                    setIsLoading(false)\n                } else {\n                    UseOrest({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.RESERVAT_DOX,\n                        method: REQUEST_METHOD_CONST.PUT,\n                        token: token,\n                        params: {\n                            reservno: reservation.reservno,\n                            hotelrefno: reservation.hotelrefno\n                        },\n                    }).then(async (response) => {\n                        if (response.status === 200) {\n                            getCallbackData()\n                            enqueueSnackbar(t('str_updatedSuccessfully'), { variant: 'success' })\n                            onClose(true)\n                            setResxreasonID(false)\n                            setResxreasonNote(\"\")\n                            setIsLoading(false)\n                            await sendGuestChangeNotifyMail(reservBase?.gid ? false : true,'reservat','cnl',clientBase.id,reservBase?.gid ? reservBase.gid : clientBase.gid, notifyValues,reservBase?.hotelrefno || GENERAL_SETTINGS.HOTELREFNO)\n                        } else {\n                            enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n                            onClose(true)\n                            setIsLoading(false)\n                        }\n                    }).catch(() => {\n                        enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n                        onClose(true)\n                        setIsLoading(false)\n                    })\n                }\n            } else {\n                enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n                onClose(true)\n                setIsLoading(false)\n            }}).catch(() => {\n            enqueueSnackbar(t('str_unexpectedProblem'), { variant: 'warning' })\n            onClose(true)\n            setIsLoading(false)\n        })\n    }\n\n    const handleCancelReservation = () => {\n        if(!resxreasonID){\n            enqueueSnackbar(t('str_pleaseSelectCancellationReason'), { variant: 'warning' })\n        }else{\n            setIsLoading(true)\n            if(type === \"event\"){\n                cancelEventReservation()\n            }else if(type === \"room\"){\n                cancelRoomReservation()\n            }\n        }\n    }\n\n    const handleCloseDialog = (prop) => {\n        typeof onClose === 'function' && onClose(prop)\n        handleReset()\n    }\n\n    const handleReset = () => {\n        setResxreasonID(false)\n        setResxreasonNote('')\n    }\n\n    return (\n        <Dialog\n            maxWidth=\"sm\"\n            fullWidth\n            open={open}\n            onClose={()=> onClose(true)}\n            aria-labelledby=\"cancellation-reason-title\"\n        >\n            <DialogTitle id=\"cancellation-reason-title\">{isOnlyUpdate ? t('str_changeReason') : t('str_cancellationReason')}</DialogTitle>\n            <DialogContent dividers>\n                <Box p={3}>\n                    <Container maxWidth=\"sm\">\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <FormControl variant=\"outlined\" fullWidth required disabled={isLoading}>\n                                    <InputLabel htmlFor=\"resxreasonid-select\">{isOnlyUpdate ? t('str_changeReason') : t('str_cancellationReason')}</InputLabel>\n                                    <Select\n                                        native\n                                        value={resxreasonID}\n                                        onChange={(e) => setResxreasonID(e.target.value)}\n                                        label={isOnlyUpdate ? t('str_changeReason') : t('str_cancellationReason')}\n                                        inputProps={{ name: 'resxreasonid', id: 'resxreasonid-select' }}\n                                    >\n                                        <option aria-label=\"None\" value=\"\" />\n                                        {renderList && renderList.length > 0 && renderList.map((item, i) => {\n                                            return (\n                                                <option key={i} value={item.id}>{item.description}</option>\n                                            )\n                                        })}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    disabled={isLoading}\n                                    fullWidth\n                                    id=\"resxreason-description\"\n                                    label={t('str_note')}\n                                    multiline\n                                    rows={4}\n                                    variant=\"outlined\"\n                                    value={resxreasonNote}\n                                    onChange={(e)=> setResxreasonNote(e.target.value)}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={()=> handleCloseDialog(true)} color=\"primary\" variant={'outlined'} disabled={isLoading} >\n                    {t('str_close')}\n                </Button>\n                <CustomToolTip open={openToolTip} onOpen={() => setOpenToolTip(!resxreasonID)} onClose={() => setOpenToolTip(false)} title={\n                    <div>\n                        {\n                            !resxreasonID ? (\n                                <React.Fragment>\n                                    <Typography style={{fontWeight: '600', fontSize: 'inherit'}}>{t('str_invalidFields')}</Typography>\n                                    <Typography style={{fontSize: 'inherit'}}>\n                                        {isOnlyUpdate ? t('str_changeReason') : t('str_cancellationReason')}\n                                    </Typography>\n                                </React.Fragment>\n                            ) : ('')\n                        }\n                    </div>\n                }>\n                    <span>\n                         <Button onClick={() => resxreasonID ? handleCancelReservation() : {}} color=\"primary\" variant={'contained'} disabled={isLoading || !resxreasonID}>\n                             {t('str_save')}\n                         </Button>\n                    </span>\n                </CustomToolTip>\n\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.guest,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setToState: (stateType, stateName, value) => dispatch(setToState(stateType, stateName, value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReservationCancelDialog)\n"]},"metadata":{},"sourceType":"module"}