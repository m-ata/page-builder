{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider/EditSlider.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//react imports\nimport React, { useState, useEffect, useContext } from 'react'; //material ui imports\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport { FormControlLabel, MenuItem, Radio, RadioGroup } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Divider from '@material-ui/core/Divider';\nimport Switch from '@material-ui/core/Switch';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container'; //dropzone related imports\n\nimport 'regenerator-runtime/runtime';\nimport { DropzoneDialog } from 'material-ui-dropzone';\nimport { useRouter } from 'next/router'; //custom imports\n\nimport WebCmsGlobal from '../../../../../../webcms-global';\nimport { Delete, Insert, Patch, UseOrest, ViewList } from '@webcms/orest';\nimport { COLORS, DELETE_SUCCESS, PERCENTAGE_VALUES, SAVED_SUCCESS, UPLOAD_SUCCESS } from '../../../../constants';\nimport LoadingSpinner from '../../../../../../LoadingSpinner';\nimport { FIELDTYPE, isErrorMsg, OREST_ENDPOINT, OREST_UPLOAD, REQUEST_METHOD_CONST } from '../../../../../../../model/orest/constants';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport validator from 'validator';\nimport axios from 'axios';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport InputColor from 'react-input-color';\nimport { PercentageSlider } from '../../../../../../../model/slider';\nimport { getSliderImages, patchListSliderImage } from '../../../../helpers/slider';\nimport TextEditor from '../text-editor';\nimport BorderColorSharpIcon from '@material-ui/icons/BorderColorSharp';\nimport { toSelfName } from './../../../../../../../lib/helpers/useFunction';\nimport moment from \"moment\";\nimport { DatePicker, LocalizationProvider } from \"@material-ui/pickers\";\nimport MomentAdapter from \"@date-io/moment\";\nconst useStyles = makeStyles(theme => ({\n  submit: {\n    marginRight: theme.spacing(3),\n    marginTop: theme.spacing(1),\n    borderRadius: 20,\n    float: 'right'\n  },\n  paperBlock: {\n    height: 350,\n    border: `2px solid ${COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary}`,\n    overflow: 'auto'\n  },\n  disableEvent: {\n    pointerEvents: 'none',\n    opacity: 0.5\n  },\n  uploadButton: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    borderRadius: 20,\n    float: 'right'\n  },\n  card: {\n    height: 200,\n    width: 320,\n    margin: theme.spacing(1),\n    cursor: 'pointer'\n  },\n  alignText: {\n    textAlign: 'right',\n    color: 'red'\n  },\n  text: {\n    marginTop: 16,\n    fontWeight: 'bold',\n    fontSize: 15\n  }\n}));\n\nconst EditSlider = props => {\n  var _state$assets, _state$assets$meta, _router$query, _router$query2, _router$query3, _router$query4, _router$query5;\n\n  const {\n    sliderComponent,\n    handleCmponent,\n    state,\n    handleApplyDisable,\n    handleSliderValues,\n    otherLangSlider\n  } = props;\n  const {\n    0: sliderImages,\n    1: setSliderImages\n  } = useState([]);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n  const {\n    0: isCta,\n    1: setIsCta\n  } = useState(false);\n  const {\n    0: ctaTitle,\n    1: setCtaTitle\n  } = useState('');\n  const {\n    0: ctaLink,\n    1: setCtaLink\n  } = useState('');\n  const {\n    0: cta,\n    1: setCta\n  } = useState('');\n  const {\n    0: isLoaded,\n    1: setIsLoaded\n  } = useState(false);\n  const {\n    0: isSaving,\n    1: setIsSaving\n  } = useState(false);\n  const {\n    0: isItemDesc,\n    1: setItemDesc\n  } = useState(false);\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false);\n  const {\n    0: selectedIndex,\n    1: setSelectedIndex\n  } = useState();\n  const {\n    0: showDeleteBtn,\n    1: setShowDeleteBtn\n  } = useState(false);\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState();\n  const {\n    0: sliderGID,\n    1: setSliderGID\n  } = useState('');\n  const {\n    0: sliderID,\n    1: setSliderID\n  } = useState('');\n  const {\n    0: imageGID,\n    1: setImageGID\n  } = useState('');\n  const {\n    0: isDialogOpen,\n    1: setDialogOpen\n  } = useState(false);\n  const {\n    0: itemCount,\n    1: setItemCount\n  } = useState(1);\n  const {\n    0: gappID,\n    1: setGappID\n  } = useState('');\n  const {\n    0: otherLangSliderImages,\n    1: setOtherLangSliderImages\n  } = useState([]);\n  const {\n    0: editedSliderComponent,\n    1: setEditedSliderComponent\n  } = useState(sliderComponent);\n  const {\n    0: isImageSelected,\n    1: setImageSelected\n  } = useState(false);\n  const {\n    0: itemDescRequest,\n    1: setItemDescRequest\n  } = useState(false);\n  const {\n    0: isOptimizeImages,\n    1: setOptimizeImages\n  } = useState(false);\n  const {\n    0: quality,\n    1: setQuality\n  } = useState(state !== null && state !== void 0 && (_state$assets = state.assets) !== null && _state$assets !== void 0 && (_state$assets$meta = _state$assets.meta) !== null && _state$assets$meta !== void 0 && _state$assets$meta.imageQuality ? state.assets.meta.imageQuality * 100 : 50);\n  const {\n    0: catId,\n    1: setCatId\n  } = useState(null);\n  const {\n    0: categories,\n    1: setCategories\n  } = useState([]);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: textColor,\n    1: setTextColor\n  } = useState(sliderComponent !== null && sliderComponent !== void 0 && sliderComponent.textColor ? sliderComponent.textColor : '#fff');\n  const {\n    0: buttonColor,\n    1: setButtonColor\n  } = useState(sliderComponent !== null && sliderComponent !== void 0 && sliderComponent.buttonColor ? sliderComponent.buttonColor : '#fff');\n  const {\n    0: localState,\n    1: setLocalState\n  } = useState({\n    isTextEditorDialogOpen: false,\n    editorValue: '',\n    dialogType: '',\n    pageData: [],\n    ctaLinkType: '',\n    expiryDate: moment().format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n  });\n  const {\n    dialogType,\n    editorValue,\n    isTextEditorDialogOpen,\n    ctaLinkType,\n    pageData,\n    expiryDate\n  } = localState;\n  const router = useRouter();\n  const companyId = router.query.companyID;\n  const {\n    GENERAL_SETTINGS,\n    token\n  } = useContext(WebCmsGlobal);\n  const authToken = token || router.query.authToken;\n  const classes = useStyles();\n\n  const openDialog = () => {\n    //it opens dialog for image upload\n    setDialogOpen(true);\n  };\n\n  const closeDialog = () => {\n    ////it closes dialog for image upload\n    setDialogOpen(false);\n  };\n\n  useEffect(() => {\n    if (otherLangSlider && 'sliderImages' in otherLangSlider) {\n      setOtherLangSliderImages(otherLangSlider.sliderImages);\n    }\n  }, [otherLangSlider]);\n  useEffect(() => {\n    if (router.query.sliderOnly) {\n      if (sliderImages.length === 0) {\n        handleApplyDisable(true);\n      } else {\n        handleApplyDisable(false);\n      }\n    } else {\n      if (sliderImages.length > 0) {\n        if (state.langCode === state.defaultLang) {\n          handleCmponent({\n            service: 'hcmitemsld',\n            type: 'slider',\n            gid: editedSliderComponent.gid,\n            width: editedSliderComponent.width,\n            id: editedSliderComponent.id,\n            textColor: textColor,\n            buttonColor: buttonColor\n          });\n        } else {\n          if (!isItemDesc) {\n            handleCmponent({\n              slider: {\n                title: title,\n                description: description,\n                cta: cta\n              }\n            });\n          } else {\n            handleCmponent({\n              sliderImages: otherLangSliderImages\n            });\n          }\n        }\n      }\n    }\n  }, [sliderImages, title, description, cta, otherLangSliderImages, textColor, buttonColor]);\n  useEffect(() => {\n    if (router.query.sliderOnly) {\n      handleSliderValues(title, description, cta, state.slider.gid, textColor, buttonColor);\n    }\n  }, [title, description, cta, textColor, buttonColor]);\n  useEffect(() => {\n    setIsLoaded(false);\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMCAT,\n      token: authToken,\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(res => {\n      if ((res === null || res === void 0 ? void 0 : res.status) === 200) {\n        var _res$data, _res$data$data;\n\n        (res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.length) > 0 && setCategories(res.data.data);\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }); //getting data from rafile\n\n    ViewList({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.RAFILE,\n      token: authToken,\n      params: {\n        hotelrefno: Number(companyId),\n        query: `filetype::WEBPAGE,istemplate::false}`\n      }\n    }).then(res => {\n      var _res$data2;\n\n      setIsLoaded(true);\n\n      if (res.status === 200 && res !== null && res !== void 0 && (_res$data2 = res.data) !== null && _res$data2 !== void 0 && _res$data2.data) {\n        setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          pageData: res.data.data\n        }));\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  }, []);\n  useEffect(() => {\n    // get all slider images against gid\n    setIsLoaded(false);\n\n    if (editedSliderComponent !== null && editedSliderComponent !== void 0 && editedSliderComponent.gid) {\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        params: {\n          query: `gid:${editedSliderComponent.gid}`,\n          hotelrefno: Number(companyId)\n        }\n      }).then(r => {\n        if (r.status === 200) {\n          var _r$data, _r$data$data;\n\n          if ((r === null || r === void 0 ? void 0 : (_r$data = r.data) === null || _r$data === void 0 ? void 0 : (_r$data$data = _r$data.data) === null || _r$data$data === void 0 ? void 0 : _r$data$data.length) > 0) {\n            var _r$data2, _r$data2$data$;\n\n            setGappID(r.data.data[0].itemid);\n            setCatId(r.data.data[0].catid);\n            setIsActive(r.data.data[0].isactive);\n\n            if (state.langCode === state.defaultLang || router.query.sliderOnly) {\n              if (r.data.data[0].title || r.data.data[0].description) {\n                setTitle(r.data.data[0].title);\n                setDescription(r.data.data[0].description);\n              }\n\n              if (r.data.data[0].cta) {\n                setIsCta(true);\n                const matchLink = r.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n                if (matchLink) {\n                  const title = r.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchLink[0], '').replace('>', '').replace('</a>', '').trim();\n                  setCtaLink(matchLink[0]);\n                  setCtaTitle(title);\n                  setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                    ctaLinkType: 'external'\n                  }));\n                } else {\n                  var _r$data$data$0$cta$re;\n\n                  const ctaGid = (_r$data$data$0$cta$re = r.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('>', '').replace('</a>', '').replace('\"', '').trim()) === null || _r$data$data$0$cta$re === void 0 ? void 0 : _r$data$data$0$cta$re.split(' ')[0];\n                  const cta_title = r.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(ctaGid + '\"', '').replace('>', '').replace('</a>', '').trim();\n                  setCtaLink(ctaGid);\n                  setCtaTitle(cta_title);\n                  setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                    ctaLinkType: 'internal'\n                  }));\n                }\n              }\n            } else {\n              if (otherLangSlider && 'slider' in otherLangSlider) {\n                setTitle(otherLangSlider.slider.title);\n                setDescription(otherLangSlider.slider.description);\n\n                if (otherLangSlider.slider.cta) {\n                  setIsCta(true);\n                  const matchLink = otherLangSlider.slider.cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n                  if (matchLink) {\n                    const title = otherLangSlider.slider.cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchLink[0], '').replace('>', '').replace('</a>', '').trim();\n                    setCtaLink(matchLink[0]);\n                    setCtaTitle(title);\n                    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                      ctaLinkType: 'external'\n                    }));\n                  } else {\n                    var _otherLangSlider$slid;\n\n                    const ctaGid = (_otherLangSlider$slid = otherLangSlider.slider.cta.replace(`<a target=\"_blank\" href=\"`, '').replace('>', '').replace('</a>', '').replace('\"', '').trim()) === null || _otherLangSlider$slid === void 0 ? void 0 : _otherLangSlider$slid.split(' ')[0];\n                    const cta_title = otherLangSlider.slider.cta.replace(`<a target=\"_blank\" href=\"`, '').replace(ctaGid + '\"', '').replace('>', '').replace('</a>', '').trim();\n                    setCtaLink(ctaGid);\n                    setCtaTitle(cta_title);\n                    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                      ctaLinkType: 'internal'\n                    }));\n                  }\n                }\n              }\n            }\n\n            setSliderGID(r.data.data[0].gid);\n            setSliderID(r.data.data[0].id);\n            setLocalState(_objectSpread(_objectSpread({}, localState), {}, {\n              expiryDate: r === null || r === void 0 ? void 0 : (_r$data2 = r.data) === null || _r$data2 === void 0 ? void 0 : (_r$data2$data$ = _r$data2.data[0]) === null || _r$data2$data$ === void 0 ? void 0 : _r$data2$data$.expiredt\n            }));\n            ViewList({\n              apiUrl: GENERAL_SETTINGS.OREST_URL,\n              endpoint: OREST_ENDPOINT.HCMITEMIMG,\n              token: authToken,\n              params: {\n                query: `sliderid:${r.data.data[0].id}`,\n                sort: 'orderno',\n                hotelrefno: Number(companyId)\n              }\n            }).then(res => {\n              setIsLoaded(true);\n\n              if (res.status === 200) {\n                let updatedImages = [];\n                res.data.data.map(async (data, index) => {\n                  updatedImages.push(data);\n\n                  if (state.langCode === state.defaultLang) {\n                    if (data.cta || data.title || data.description) {\n                      if (index === 0) {\n                        setItemDesc(true);\n                        setSelectedIndex(index);\n                        setImageGID(data.gid);\n                        ViewList({\n                          apiUrl: GENERAL_SETTINGS.OREST_URL,\n                          endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                          token: authToken,\n                          params: {\n                            query: `gid:${data.gid}`,\n                            sort: 'orderno',\n                            hotelrefno: Number(companyId)\n                          }\n                        }).then(res1 => {\n                          if (res1.status === 200) {\n                            if (res1.data && res1.data.data && res1.data.data.length > 0) {\n                              res1.data.data[0].title ? setTitle(res1.data.data[0].title) : setTitle('');\n                              res1.data.data[0].description ? setDescription(res1.data.data[0].description) : setDescription('');\n                              res1.data.data[0].cta ? setCta(res1.data.data[0].cta) : setCta('');\n\n                              if (res1.data.data[0].cta) {\n                                setIsCta(true);\n                                setCta(res1.data.data[0].cta);\n                                const matchs = res1.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n                                if ((matchs === null || matchs === void 0 ? void 0 : matchs.length) > 0) {\n                                  const cta_title = res1.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n                                  setCtaLink(matchs[0]);\n                                  setCtaTitle(cta_title);\n                                  setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                                    ctaLinkType: 'external'\n                                  }));\n                                } else {\n                                  var _res1$data$data$0$cta;\n\n                                  const ctaGid = (_res1$data$data$0$cta = res1.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('>', '').replace('</a>', '').replace('\"', '').trim()) === null || _res1$data$data$0$cta === void 0 ? void 0 : _res1$data$data$0$cta.split(' ')[0];\n                                  const cta_title = res1.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(ctaGid + '\"', '').replace('>', '').replace('</a>', '').trim();\n                                  setCtaLink(ctaGid);\n                                  setCtaTitle(cta_title);\n                                  setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                                    ctaLinkType: 'internal'\n                                  }));\n                                }\n                              } else {\n                                setIsCta(false);\n                              }\n                            }\n                          } else {\n                            const retErr = isErrorMsg(res1);\n                            toast.error(retErr.errorMsg, {\n                              position: toast.POSITION.TOP_RIGHT\n                            });\n                          }\n                        });\n                      }\n                    }\n                  } else {\n                    if (otherLangSlider && otherLangSlider.sliderImages && otherLangSlider.sliderImages.length > 0) {\n                      setSelectedIndex(0);\n                      setItemDesc(true);\n                      setTitle(otherLangSlider.sliderImages[0].title);\n                      setDescription(otherLangSlider.sliderImages[0].description);\n\n                      if (otherLangSlider.sliderImages[0].cta) {\n                        setIsCta(true);\n                        setCta(otherLangSlider.sliderImages[0].cta);\n                        const matchs = otherLangSlider.sliderImages[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n                        if ((matchs === null || matchs === void 0 ? void 0 : matchs.length) > 0) {\n                          const cta_title = otherLangSlider.sliderImages[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n                          setCtaLink(matchs[0]);\n                          setCtaTitle(cta_title);\n                          setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                            ctaLinkType: 'external'\n                          }));\n                        } else {\n                          var _otherLangSlider$slid2;\n\n                          const ctaGid = (_otherLangSlider$slid2 = otherLangSlider.sliderImages[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('>', '').replace('</a>', '').replace('\"', '').trim()) === null || _otherLangSlider$slid2 === void 0 ? void 0 : _otherLangSlider$slid2.split(' ')[0];\n                          const cta_title = otherLangSlider.sliderImages[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(ctaGid + '\"', '').replace('>', '').replace('</a>', '').trim();\n                          setCtaLink(ctaGid);\n                          setCtaTitle(cta_title);\n                          setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                            ctaLinkType: 'internal'\n                          }));\n                        }\n                      } else {\n                        setIsCta(false);\n                        setCtaTitle('');\n                        setCtaLink('');\n                      }\n                    }\n                  }\n                });\n                setSliderImages(updatedImages);\n                setItemCount(updatedImages + 1);\n              } else {\n                console.log(res);\n              }\n            });\n          } else {\n            setIsLoaded(true);\n          }\n        } else {\n          setIsLoaded(true);\n          const retErr = isErrorMsg(r);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    } else {\n      Insert({\n        // insert slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        data: {\n          itemid: state.hcmItemId,\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        if (res.status === 200 && res.data.data) {\n          setIsLoaded(true);\n\n          const updatedSliderComponent = _objectSpread({}, editedSliderComponent);\n\n          updatedSliderComponent.gid = res.data.data.gid;\n          setEditedSliderComponent(updatedSliderComponent);\n        }\n      });\n    }\n  }, [editedSliderComponent]);\n  useEffect(() => {\n    if (ctaTitle && ctaLink) {\n      setCta(`<a target=\"_blank\" href=\"${ctaLink}\" > ${ctaTitle} </a>`);\n    }\n  }, [ctaTitle, ctaLink]);\n\n  const handleUpdate = () => {\n    // update slider/image descriptions\n    if (state.langCode === state.defaultLang) {\n      if (isItemDesc) {\n        if (isImageSelected) {\n          setIsSaving(true);\n          Patch({\n            // update image\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            gid: imageGID,\n            params: {\n              hotelrefno: Number(companyId)\n            },\n            data: {\n              title: title,\n              description: description,\n              cta: cta\n            }\n          }).then(res => {\n            if (res.status === 200) {\n              setIsSaving(false);\n              toast.success(SAVED_SUCCESS, {\n                position: toast.POSITION.TOP_RIGHT\n              });\n            } else {\n              console.log(res);\n            }\n          });\n        } else {\n          handleResetState();\n          toast.warn('Please Select Image', {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      } else {\n        setIsSaving(true);\n        Patch({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMSLD,\n          token: authToken,\n          gid: sliderGID,\n          params: {\n            hotelrefno: Number(companyId)\n          },\n          data: {\n            title: title,\n            description: description,\n            cta: cta\n          }\n        }).then(res => {\n          setIsSaving(false);\n\n          if (res.status === 200) {\n            toast.success(SAVED_SUCCESS, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          } else {\n            console.log(res);\n          }\n        });\n      }\n    } else {\n      const updateOtherLangSliderImages = [...otherLangSliderImages];\n      updateOtherLangSliderImages[selectedIndex] = {\n        title: title,\n        description: description,\n        cta: cta\n      };\n      setOtherLangSliderImages(updateOtherLangSliderImages);\n      toast.success(SAVED_SUCCESS, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  };\n\n  const handleDeleteImage = imageGid => {\n    // delete image against gid\n    setIsDeleting(true);\n    Delete({\n      apiUrl: GENERAL_SETTINGS.OREST_URL,\n      endpoint: OREST_ENDPOINT.HCMITEMIMG,\n      token: authToken,\n      gid: imageGid,\n      params: {\n        hotelrefno: Number(companyId)\n      }\n    }).then(async res => {\n      setIsDeleting(false);\n\n      if (res.status === 200) {\n        const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n        sldImages.sort((a, b) => a.orderno > b.orderno ? 1 : -1);\n\n        if (sldImages) {\n          let updatedImages = [];\n          sldImages.map((data, index) => {\n            data.orderno = index + 1;\n            updatedImages.push(data);\n          });\n          let requestPassed = true;\n\n          for (const sldImage of sldImages) {\n            const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {\n              orderno: sldImage.orderno\n            }, {\n              hotelrefno: Number(companyId)\n            }, sldImage.gid);\n            updatedSliderImage ? requestPassed = true : requestPassed = false;\n          }\n\n          if (requestPassed) {\n            setSliderImages(updatedImages);\n            setSelectedIndex(null);\n            setItemCount(updatedImages.length + 1);\n            toast.success(DELETE_SUCCESS, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          } else {\n            toast.error('Something went wrong while deleting image. Please check network tab.', {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        } else {\n          toast.error('Something went wrong while deleting image. Please check network tab.', {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      } else {\n        const retErr = isErrorMsg(res);\n        toast.error(retErr.errorMsg, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n        setIsDeleting(false);\n      }\n    });\n  };\n\n  const handleSelectedImage = (index, image) => {\n    if (isItemDesc) {\n      setSelectedIndex(index);\n      setImageSelected(true);\n\n      if (state.langCode === state.defaultLang) {\n        setImageGID(image.gid);\n        setItemDescRequest(true);\n        ViewList({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG,\n          token: authToken,\n          params: {\n            query: `gid:${image.gid}`,\n            sort: 'orderno',\n            hotelrefno: Number(companyId)\n          }\n        }).then(res => {\n          setItemDescRequest(false);\n\n          if (res.status === 200) {\n            if (res.data && res.data.data && res.data.data.length > 0) {\n              res.data.data[0].title ? setTitle(res.data.data[0].title) : setTitle('');\n              res.data.data[0].description ? setDescription(res.data.data[0].description) : setDescription('');\n              res.data.data[0].cta ? setCta(res.data.data[0].cta) : setCta('');\n\n              if (res.data.data[0].cta) {\n                setIsCta(true);\n                setCta(res.data.data[0].cta);\n                const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n                if ((matchs === null || matchs === void 0 ? void 0 : matchs.length) > 0) {\n                  const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n                  setCtaLink(matchs[0]);\n                  setCtaTitle(cta_title);\n                  setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                    ctaLinkType: 'external'\n                  }));\n                } else {\n                  var _res$data$data$0$cta$;\n\n                  const ctaGid = (_res$data$data$0$cta$ = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('>', '').replace('</a>', '').replace('\"', '').trim()) === null || _res$data$data$0$cta$ === void 0 ? void 0 : _res$data$data$0$cta$.split(' ')[0];\n                  const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(ctaGid + '\"', '').replace('>', '').replace('</a>', '').trim();\n                  setCtaLink(ctaGid);\n                  setCtaTitle(cta_title);\n                  setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                    ctaLinkType: 'internal'\n                  }));\n                }\n              } else {\n                setIsCta(false);\n                setCtaTitle('');\n                setCtaLink('');\n              }\n            }\n          } else {\n            const retErr = isErrorMsg(res);\n            toast.error(retErr.errorMsg, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        });\n      } else {\n        if (otherLangSliderImages.length > 0) {\n          setTitle(otherLangSliderImages[index].title);\n          setDescription(otherLangSliderImages[index].description);\n\n          if (otherLangSliderImages[index].cta) {\n            setIsCta(true);\n            setCta(otherLangSliderImages[index].cta);\n            const matchs = otherLangSliderImages[index].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n            if (matchs.length > 0) {\n              const cta_title = otherLangSliderImages[index].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n              setCtaLink(matchs[0]);\n              setCtaTitle(cta_title);\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLinkType: 'external'\n              }));\n            } else {\n              var _otherLangSliderImage;\n\n              const ctaGid = (_otherLangSliderImage = otherLangSliderImages[index - 1].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('>', '').replace('</a>', '').replace('\"', '').trim()) === null || _otherLangSliderImage === void 0 ? void 0 : _otherLangSliderImage.split(' ')[0];\n              const cta_title = otherLangSliderImages[index - 1].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(ctaGid + '\"', '').replace('>', '').replace('</a>', '').trim();\n              setCtaLink(ctaGid);\n              setCtaTitle(cta_title);\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLinkType: 'internal'\n              }));\n            }\n          } else {\n            setIsCta(false);\n            setCtaTitle('');\n            setCtaLink('');\n          }\n        } else {\n          var _otherLangSliderImage2, _otherLangSliderImage3, _otherLangSliderImage4;\n\n          setTitle(otherLangSliderImages === null || otherLangSliderImages === void 0 ? void 0 : (_otherLangSliderImage2 = otherLangSliderImages.sliderImages[index - 1]) === null || _otherLangSliderImage2 === void 0 ? void 0 : _otherLangSliderImage2.title);\n          setDescription(otherLangSliderImages === null || otherLangSliderImages === void 0 ? void 0 : (_otherLangSliderImage3 = otherLangSliderImages.sliderImages[index - 1]) === null || _otherLangSliderImage3 === void 0 ? void 0 : _otherLangSliderImage3.description);\n\n          if (otherLangSliderImages !== null && otherLangSliderImages !== void 0 && (_otherLangSliderImage4 = otherLangSliderImages.sliderImages[0]) !== null && _otherLangSliderImage4 !== void 0 && _otherLangSliderImage4.cta) {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              isCta: true\n            }));\n            const matchs = otherLangSliderImages === null || otherLangSliderImages === void 0 ? void 0 : otherLangSliderImages.sliderImages[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n            if ((matchs === null || matchs === void 0 ? void 0 : matchs.length) > 0) {\n              const cta_title = otherLangSliderImages === null || otherLangSliderImages === void 0 ? void 0 : otherLangSliderImages.sliderImages[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n              setCtaLink(matchs[0]);\n              setCtaTitle(cta_title);\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLinkType: 'external'\n              }));\n            } else {\n              var _otherLangSliderImage5;\n\n              const ctaGid = otherLangSliderImages === null || otherLangSliderImages === void 0 ? void 0 : (_otherLangSliderImage5 = otherLangSliderImages.sliderImages[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace('>', '').replace('</a>', '').replace('\"', '').trim()) === null || _otherLangSliderImage5 === void 0 ? void 0 : _otherLangSliderImage5.split(' ')[0];\n              const cta_title = otherLangSliderImages === null || otherLangSliderImages === void 0 ? void 0 : otherLangSliderImages.sliderImages[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(ctaGid + '\"', '').replace('>', '').replace('</a>', '').trim();\n              setCtaLink(ctaGid);\n              setCtaTitle(cta_title);\n              setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                ctaLinkType: 'internal'\n              }));\n            }\n          } else {\n            setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n              ctaLink: '',\n              ctaTitle: '',\n              isCta: false\n            }));\n          }\n        }\n      }\n    }\n  };\n\n  const handleResetState = () => {\n    setCta('');\n    setCtaTitle('');\n    setCtaLink('');\n    setTitle('');\n    setDescription('');\n    setIsCta(false);\n    setImageSelected(false);\n    setSelectedIndex(null);\n  };\n\n  const handleItemDescription = () => {\n    setItemDesc(!isItemDesc);\n\n    if (isItemDesc) {\n      setItemDescRequest(true);\n      ViewList({\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        params: {\n          query: `gid:${sliderGID}`,\n          sort: 'orderno',\n          hotelrefno: Number(companyId)\n        }\n      }).then(res => {\n        var _res$data3, _res$data3$data;\n\n        setItemDescRequest(false);\n\n        if ((res === null || res === void 0 ? void 0 : res.status) === 200 && (res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$data = _res$data3.data) === null || _res$data3$data === void 0 ? void 0 : _res$data3$data.length) > 0) {\n          var _res$data$data$, _res$data$data$2;\n\n          setTitle((_res$data$data$ = res.data.data[0]) === null || _res$data$data$ === void 0 ? void 0 : _res$data$data$.title);\n          setDescription((_res$data$data$2 = res.data.data[0]) === null || _res$data$data$2 === void 0 ? void 0 : _res$data$data$2.description);\n\n          if (res.data.data[0].cta) {\n            setIsCta(true);\n            setCta(res.data.data[0].cta);\n            const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n            if (matchs.length > 0) {\n              const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n              setCtaLink(matchs[0]);\n              setCtaTitle(cta_title);\n            }\n          } else {\n            setIsCta(false);\n            setCtaTitle('');\n            setCtaLink('');\n            setCta('');\n          }\n        }\n      });\n      handleResetState();\n    } else {\n      setSelectedIndex(0);\n      setImageSelected(true);\n\n      if (state.langCode === state.defaultLang) {\n        var _sliderImages$, _sliderImages$2;\n\n        setImageGID((_sliderImages$ = sliderImages[0]) === null || _sliderImages$ === void 0 ? void 0 : _sliderImages$.gid);\n        setItemDescRequest(true);\n        ViewList({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG,\n          token: authToken,\n          params: {\n            query: `gid:${(_sliderImages$2 = sliderImages[0]) === null || _sliderImages$2 === void 0 ? void 0 : _sliderImages$2.gid}`,\n            sort: 'orderno',\n            hotelrefno: Number(companyId)\n          }\n        }).then(res => {\n          setItemDescRequest(false);\n\n          if (res.status === 200) {\n            if (res.data && res.data.data && res.data.data.length > 0) {\n              res.data.data[0].title ? setTitle(res.data.data[0].title) : setTitle('');\n              res.data.data[0].description ? setDescription(res.data.data[0].description) : setDescription('');\n              res.data.data[0].cta ? setCta(res.data.data[0].cta) : setCta('');\n\n              if (res.data.data[0].cta) {\n                setIsCta(true);\n                setCta(res.data.data[0].cta);\n                const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n                if (matchs.length > 0) {\n                  const cta_title = res.data.data[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n                  setCtaLink(matchs[0]);\n                  setCtaTitle(cta_title);\n                }\n              } else {\n                setIsCta(false);\n                setCtaTitle('');\n                setCtaLink('');\n              }\n            }\n          } else {\n            const retErr = isErrorMsg(res);\n            toast.error(retErr.errorMsg, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        });\n      } else {\n        if ((otherLangSliderImages === null || otherLangSliderImages === void 0 ? void 0 : otherLangSliderImages.length) > 0) {\n          setTitle(otherLangSliderImages[0].title);\n          setDescription(otherLangSliderImages[0].description);\n\n          if (otherLangSliderImages[0].cta) {\n            setIsCta(true);\n            setCta(otherLangSliderImages[0].cta);\n            const matchs = otherLangSliderImages[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi);\n\n            if (matchs.length > 0) {\n              const cta_title = otherLangSliderImages[0].cta.replace(`<a target=\"_blank\" href=\"`, '').replace(matchs[0], '').replace('>', '').replace('</a>', '').trim();\n              setCtaLink(matchs[0]);\n              setCtaTitle(cta_title);\n            }\n          } else {\n            setIsCta(false);\n            setCtaTitle('');\n            setCtaLink('');\n          }\n        }\n      }\n    }\n  };\n\n  const saveImage = files => {\n    setIsLoaded(false);\n    let orderNo = itemCount;\n    let requests = files.map(file => {\n      return new Promise(resolve => {\n        asyncUpload(file, orderNo, resolve);\n        orderNo++;\n      });\n    });\n    Promise.all(requests).then(async () => {\n      const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID);\n      setIsLoaded(true);\n\n      if (sldImages) {\n        let updatedImages = [];\n        sldImages.map(data => {\n          updatedImages.push(data);\n        });\n        setSliderImages(updatedImages);\n        setItemCount(updatedImages.length + 1);\n        toast.success(UPLOAD_SUCCESS, {\n          position: toast.POSITION.TOP_RIGHT\n        });\n        closeDialog();\n      } else {\n        toast.warn('Something went wrong while saving image. Please check network tab.', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    });\n  };\n\n  function asyncUpload(file, itemTreated, callback) {\n    if (router.query.sliderOnly) {\n      if (gappID && editedSliderComponent.gid) {\n        setTimeout(() => {\n          ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMSLD,\n            token: authToken,\n            params: {\n              query: `gid:${editedSliderComponent.gid}`,\n              hotelrefno: Number(companyId)\n            }\n          }).then(r => {\n            if (r.status === 200) {\n              Insert({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                token: authToken,\n                data: {\n                  itemid: gappID,\n                  sliderid: r.data.data[0].id,\n                  imgtype: FIELDTYPE.IMG,\n                  orderno: itemTreated,\n                  hotelrefno: Number(companyId),\n                  masterid: router.query.masterid,\n                  imgquality: quality / 100,\n                  imgscale: quality / 100\n                }\n              }).then(r1 => {\n                if (r1.status === 200) {\n                  ImageUpload(GENERAL_SETTINGS.OREST_URL, OREST_ENDPOINT.RAFILE, authToken, r1.data.data.mid, file).then(r => {\n                    if (r.status === 200) {\n                      callback();\n                    } else {\n                      callback();\n                    }\n                  });\n                } else {\n                  callback();\n                }\n              });\n            }\n          });\n        }, 100);\n      }\n    } else {\n      if (state.hcmItemId && editedSliderComponent.gid) {\n        setTimeout(() => {\n          ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMSLD,\n            token: authToken,\n            params: {\n              query: `gid:${editedSliderComponent.gid}`,\n              hotelrefno: Number(companyId)\n            }\n          }).then(r => {\n            if (r.status === 200) {\n              Insert({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                token: authToken,\n                data: {\n                  itemid: state.hcmItemId,\n                  sliderid: r.data.data[0].id,\n                  imgtype: FIELDTYPE.IMG,\n                  orderno: itemTreated,\n                  hotelrefno: Number(companyId),\n                  imgquality: quality / 100,\n                  imgscale: quality / 100\n                }\n              }).then(r1 => {\n                if (r1.status === 200) {\n                  ImageUpload(GENERAL_SETTINGS.OREST_URL, OREST_ENDPOINT.RAFILE, authToken, r1.data.data.mid, file).then(r => {\n                    if (r.status === 200) {\n                      callback();\n                    } else {\n                      callback();\n                    }\n                  });\n                } else {\n                  callback();\n                }\n              });\n            }\n          });\n        }, 100);\n      }\n    }\n  }\n\n  const ImageUpload = (apiUrl, endPoint, token, masterID, file) => {\n    const url = apiUrl + '/' + endPoint + OREST_UPLOAD;\n    let binaryData = [];\n    binaryData.push(file);\n    let formData = new FormData();\n    formData.append('file', new Blob(binaryData, {\n      type: file.type\n    }), toSelfName(file.name));\n    const options = {\n      url: url,\n      method: 'post',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      },\n      params: {\n        orsactive: true,\n        masterid: masterID,\n        hotelrefno: companyId,\n        quality: quality / 100,\n        scale: quality / 100\n      },\n      data: formData\n    };\n    return axios(options).then(response => {\n      return response;\n    }).catch(error => {\n      return error.response || {\n        status: 0\n      };\n    });\n  };\n\n  const handleUpdateOrderNo = async (gid, orderNo, orderType) => {\n    // update order no of slider images\n    if (orderNo <= 0 || orderNo > sliderImages.length) {\n      setSelectedIndex(null);\n      setImageSelected(false);\n    } else {\n      const tmpSliderImages = [...sliderImages];\n\n      if (orderType === 'increment') {\n        const tmp = tmpSliderImages[orderNo - 1];\n        tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo - 2];\n        tmpSliderImages[orderNo - 2] = tmp;\n      } else {\n        const tmp = tmpSliderImages[orderNo - 1];\n        tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo];\n        tmpSliderImages[orderNo] = tmp;\n      }\n\n      tmpSliderImages.map((data, index) => {\n        data.orderno = index + 1;\n      });\n      setIsDeleting(true);\n      let requestPassed = true;\n\n      for (const sldImage of tmpSliderImages) {\n        const updatedSliderImage = patchListSliderImage(GENERAL_SETTINGS.OREST_URL, authToken, companyId, {\n          orderno: sldImage.orderno\n        }, {\n          hotelrefno: Number(companyId)\n        }, sldImage.gid);\n        updatedSliderImage ? requestPassed = true : requestPassed = false;\n      }\n\n      setIsDeleting(false);\n\n      if (requestPassed) {\n        setSliderImages(tmpSliderImages);\n        setItemCount(sliderImages.length + 1);\n        handleResetState();\n        toast.success('Order No Updated Successfully', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      } else {\n        toast.error('Something went wrong while updating order no. Please check network tab.', {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }\n  };\n\n  const handleImageQualityChange = value => {\n    if (value >= 10 && value <= 100 && value % 10 === 0) {\n      if (sliderImages.length) {\n        setIsLoaded(false);\n        const gids = sliderImages.map(image => {\n          return {\n            gid: image.gid,\n            imgquality: value / 100,\n            imgscale: value / 100\n          };\n        });\n        UseOrest({\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n          token: authToken,\n          method: REQUEST_METHOD_CONST.PATCH,\n          data: gids,\n          params: {\n            hotelrefno: Number(companyId)\n          }\n        }).then(res => {\n          var _res$data4;\n\n          if ((res === null || res === void 0 ? void 0 : res.status) === 200 && res !== null && res !== void 0 && (_res$data4 = res.data) !== null && _res$data4 !== void 0 && _res$data4.data) {\n            setQuality(value);\n            setIsLoaded(true);\n          } else {\n            const retErr = isErrorMsg(res);\n            toast.error(retErr.errorMsg, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        });\n      } else {\n        setQuality(value);\n      }\n    }\n  };\n\n  const handleTextEditorValue = value => {\n    if (dialogType === 'title') {\n      setTitle(value);\n    }\n\n    if (dialogType === 'description') {\n      setDescription(value);\n    }\n\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isTextEditorDialogOpen: false,\n      dialogType: '',\n      editorValue: ''\n    }));\n  };\n\n  const handleCancelEditor = () => {\n    setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      isTextEditorDialogOpen: false,\n      dialogType: '',\n      editorValue: ''\n    }));\n  };\n\n  const handleDialogOpen = type => {\n    if (type === 'title') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isTextEditorDialogOpen: true,\n        dialogType: type,\n        editorValue: title\n      }));\n    }\n\n    if (type === 'description') {\n      setLocalState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isTextEditorDialogOpen: true,\n        dialogType: type,\n        editorValue: description\n      }));\n    }\n  };\n\n  const handleChangeDatePicker = date => {\n    const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE);\n    setLocalState(_objectSpread(_objectSpread({}, localState), {}, {\n      expiryDate: dateValue\n    }));\n\n    if (dateValue !== 'Invalid date') {\n      setIsDeleting(true);\n      Patch({\n        // update slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        gid: sliderGID,\n        params: {\n          hotelrefno: Number(companyId)\n        },\n        data: {\n          expiredt: dateValue\n        }\n      }).then(res => {\n        setIsDeleting(false);\n\n        if (res.status === 200) {\n          toast.success(SAVED_SUCCESS, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        } else {\n          console.log(res);\n        }\n      });\n    }\n  };\n\n  if (!isLoaded) {\n    return __jsx(LoadingSpinner, {\n      style: {\n        color: COLORS.secondary\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1265,\n      columnNumber: 9\n    }\n  }, !router.query.sliderOnly && __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1268,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1269,\n      columnNumber: 25\n    }\n  }, __jsx(LocalizationProvider, {\n    dateLibInstance: moment,\n    dateAdapter: MomentAdapter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1270,\n      columnNumber: 29\n    }\n  }, __jsx(DatePicker, {\n    id: \"sliderExpiryDate\",\n    name: \"sliderExpiryDate\",\n    label: 'Select Expiry',\n    value: expiryDate,\n    inputFormat: \"DD/MM/YYYY\",\n    disablePast: true,\n    onChange: handleChangeDatePicker,\n    renderInput: props => __jsx(TextField, _extends({\n      fullWidth: true\n    }, props, {\n      variant: 'filled',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1279,\n        columnNumber: 61\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1271,\n      columnNumber: 33\n    }\n  })))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1290,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: router !== null && router !== void 0 && (_router$query = router.query) !== null && _router$query !== void 0 && _router$query.sliderOnly ? 8 : 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1291,\n      columnNumber: 17\n    }\n  }, __jsx(FormControlLabel, {\n    disabled: state.langCode !== state.defaultLang && !router.query.sliderOnly,\n    control: __jsx(Checkbox, {\n      checked: isItemDesc,\n      onChange: handleItemDescription,\n      name: \"isitem\",\n      color: \"primary\",\n      disabled: sliderImages.length === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 29\n      }\n    }),\n    label: \"Items Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1292,\n      columnNumber: 21\n    }\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: isOptimizeImages,\n      onChange: () => setOptimizeImages(!isOptimizeImages),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1307,\n        columnNumber: 29\n      }\n    }),\n    label: \"Optimize Images\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1305,\n      columnNumber: 21\n    }\n  }), (router === null || router === void 0 ? void 0 : (_router$query2 = router.query) === null || _router$query2 === void 0 ? void 0 : _router$query2.sliderOnly) && __jsx(React.Fragment, null, __jsx(FormControlLabel, {\n    className: classes.labelFont,\n    control: __jsx(Checkbox, {\n      size: 'small',\n      checked: isActive,\n      onChange: () => {\n        setIsActive(!isActive);\n        Patch({\n          // update slider\n          apiUrl: GENERAL_SETTINGS.OREST_URL,\n          endpoint: OREST_ENDPOINT.HCMITEMSLD,\n          token: authToken,\n          gid: sliderGID,\n          params: {\n            hotelrefno: Number(companyId)\n          },\n          data: {\n            isactive: !isActive\n          }\n        }).then(res => {\n          if (res.status !== 200) {\n            const retErr = isErrorMsg(res);\n            toast.error(retErr.errorMsg, {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n        });\n      },\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320,\n        columnNumber: 37\n      }\n    }),\n    label: \"Active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1317,\n      columnNumber: 29\n    }\n  }), __jsx(FormControl, {\n    size: 'small',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1351,\n      columnNumber: 29\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1352,\n      columnNumber: 33\n    }\n  }, \"Category\"), __jsx(Select, {\n    native: true,\n    name: \"cat_id\",\n    variant: 'outlined',\n    value: catId,\n    onChange: e => {\n      setCatId(e.target.value);\n      Patch({\n        // update slider\n        apiUrl: GENERAL_SETTINGS.OREST_URL,\n        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n        token: authToken,\n        gid: sliderGID,\n        params: {\n          hotelrefno: Number(companyId)\n        },\n        data: {\n          catid: e.target.value\n        }\n      }).then(res => {\n        if (res.status !== 200) {\n          const retErr = isErrorMsg(res);\n          toast.error(retErr.errorMsg, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1353,\n      columnNumber: 33\n    }\n  }, __jsx(\"option\", {\n    style: {\n      display: 'none'\n    },\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1382,\n      columnNumber: 37\n    }\n  }), categories.length > 0 && categories.map(cat => {\n    return __jsx(\"option\", {\n      key: cat.id,\n      value: cat.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 49\n      }\n    }, cat.description);\n  }))))), !(router !== null && router !== void 0 && (_router$query3 = router.query) !== null && _router$query3 !== void 0 && _router$query3.sliderOnly) && __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1397,\n      columnNumber: 21\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1398,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 1,\n    style: {\n      marginTop: 6,\n      marginLeft: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1399,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    style: {\n      marginLeft: -8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1400,\n      columnNumber: 33\n    }\n  }, \"Text\")), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1404,\n      columnNumber: 29\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setTextColor(color.hex),\n    placement: \"right\",\n    initialValue: textColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1405,\n      columnNumber: 33\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1411,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1412,\n      columnNumber: 33\n    }\n  }, \"Button\")), __jsx(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1414,\n      columnNumber: 29\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setButtonColor(color.hex),\n    placement: \"right\",\n    initialValue: buttonColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1415,\n      columnNumber: 33\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: router !== null && router !== void 0 && (_router$query4 = router.query) !== null && _router$query4 !== void 0 && _router$query4.sliderOnly ? 4 : 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1424,\n      columnNumber: 17\n    }\n  }, router !== null && router !== void 0 && (_router$query5 = router.query) !== null && _router$query5 !== void 0 && _router$query5.sliderOnly ? __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1426,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 1,\n    style: {\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1427,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    style: {\n      marginLeft: -8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1428,\n      columnNumber: 33\n    }\n  }, \"Text\")), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1432,\n      columnNumber: 29\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setTextColor(color.hex),\n    placement: \"right\",\n    initialValue: textColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1433,\n      columnNumber: 33\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    style: {\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1439,\n      columnNumber: 29\n    }\n  }, __jsx(Typography, {\n    component: 'span',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1440,\n      columnNumber: 33\n    }\n  }, \"Button\")), __jsx(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1442,\n      columnNumber: 29\n    }\n  }, __jsx(InputColor, {\n    onChange: color => setButtonColor(color.hex),\n    placement: \"right\",\n    initialValue: buttonColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1443,\n      columnNumber: 33\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1449,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    onClick: openDialog,\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"upload\",\n    className: classes.uploadButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1450,\n      columnNumber: 33\n    }\n  }, __jsx(CloudUploadIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1458,\n      columnNumber: 37\n    }\n  }), \"UPLOAD\"))) : __jsx(Button, {\n    onClick: openDialog,\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"upload\",\n    className: classes.uploadButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1464,\n      columnNumber: 25\n    }\n  }, __jsx(CloudUploadIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1472,\n      columnNumber: 29\n    }\n  }), \"UPLOAD\"))), isOptimizeImages && __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1479,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1480,\n      columnNumber: 21\n    }\n  }, __jsx(PercentageSlider, {\n    marks: PERCENTAGE_VALUES,\n    value: quality,\n    onChange: (e, value) => handleImageQualityChange(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1481,\n      columnNumber: 25\n    }\n  }))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    spacing: 3,\n    className: isSaving ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1489,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 5,\n    className: otherLangSlider && 'slider' in otherLangSlider && state.langCode !== state.defaultLang ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1490,\n      columnNumber: 17\n    }\n  }, __jsx(Paper, {\n    className: classes.paperBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1499,\n      columnNumber: 21\n    }\n  }, sliderImages.length > 0 && sliderImages.map((image, index) => {\n    return __jsx(Grid, {\n      key: index,\n      container: true,\n      justify: 'center',\n      className: isDeleting ? classes.disableEvent : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503,\n        columnNumber: 37\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 41\n      }\n    }, __jsx(Card, {\n      className: classes.card,\n      style: {\n        border: index === selectedIndex ? '2px solid red' : `1px solid ${COLORS === null || COLORS === void 0 ? void 0 : COLORS.secondary}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1510,\n        columnNumber: 45\n      }\n    }, __jsx(\"div\", {\n      style: {\n        backgroundImage: `url(${GENERAL_SETTINGS.STATIC_URL + image.fileurl})`,\n        height: '100%',\n        width: '100%',\n        backgroundSize: 'cover',\n        borderRadius: 5\n      },\n      onMouseEnter: () => {\n        setShowDeleteBtn(true);\n        setHoverIndex(index);\n      },\n      onMouseLeave: () => {\n        setShowDeleteBtn(false);\n        setHoverIndex(index);\n      },\n      onClick: () => handleSelectedImage(index, image),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519,\n        columnNumber: 49\n      }\n    }, showDeleteBtn && hoverIndex === index && __jsx(IconButton, {\n      disabled: state.langCode !== state.defaultLang && !router.query.sliderOnly,\n      component: \"span\",\n      color: 'primary',\n      className: index === sliderImages.length - 1 ? classes.disableEvent : '',\n      onClick: () => handleUpdateOrderNo(image.gid, image.orderno + 1, 'increment'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1540,\n        columnNumber: 57\n      }\n    }, __jsx(AddCircleIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1560,\n        columnNumber: 61\n      }\n    })), showDeleteBtn && hoverIndex === index && __jsx(Typography, {\n      component: \"span\",\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564,\n        columnNumber: 57\n      }\n    }, image.orderno), showDeleteBtn && hoverIndex === index && __jsx(IconButton, {\n      disabled: state.langCode !== state.defaultLang && !router.query.sliderOnly,\n      component: \"span\",\n      color: 'primary',\n      className: index === 0 ? classes.disableEvent : '',\n      onClick: () => handleUpdateOrderNo(image.gid, image.orderno - 1, 'decrement'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1569,\n        columnNumber: 57\n      }\n    }, __jsx(RemoveCircleIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1585,\n        columnNumber: 61\n      }\n    })), showDeleteBtn && hoverIndex === index && __jsx(IconButton, {\n      disabled: state.langCode !== state.defaultLang && !router.query.sliderOnly,\n      onClick: () => handleDeleteImage(image.gid),\n      \"aria-label\": \"upload picture\",\n      component: \"span\",\n      style: {\n        float: 'right'\n      },\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1589,\n        columnNumber: 57\n      }\n    }, __jsx(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1600,\n        columnNumber: 61\n      }\n    }))))));\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 7,\n    className: itemDescRequest ? classes.disableEvent : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1611,\n      columnNumber: 17\n    }\n  }, __jsx(Paper, {\n    className: classes.paperBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1612,\n      columnNumber: 21\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1613,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1614,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1615,\n      columnNumber: 33\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1616,\n      columnNumber: 37\n    }\n  }, \"Title\")), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1620,\n      columnNumber: 33\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit Title\",\n    color: \"primary\",\n    onClick: () => handleDialogOpen('title'),\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1621,\n      columnNumber: 37\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1627,\n      columnNumber: 41\n    }\n  }))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1632,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1633,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1634,\n      columnNumber: 33\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1635,\n      columnNumber: 37\n    }\n  }, \"Description\")), __jsx(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1639,\n      columnNumber: 33\n    }\n  }, __jsx(IconButton, {\n    \"aria-label\": \"Edit Title\",\n    color: \"primary\",\n    onClick: () => handleDialogOpen('description'),\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1640,\n      columnNumber: 37\n    }\n  }, __jsx(BorderColorSharpIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1646,\n      columnNumber: 41\n    }\n  }))))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1651,\n      columnNumber: 25\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1652,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1653,\n      columnNumber: 33\n    }\n  }, __jsx(Typography, {\n    component: 'h6',\n    variant: 'h6',\n    className: classes.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1654,\n      columnNumber: 37\n    }\n  }, \"Do you want to add button for slider ?\")), __jsx(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1658,\n      columnNumber: 33\n    }\n  }, __jsx(Typography, {\n    component: 'div',\n    style: {\n      marginTop: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1659,\n      columnNumber: 37\n    }\n  }, __jsx(Switch, {\n    size: 'small',\n    checked: isCta,\n    onChange: () => {\n      setIsCta(!isCta);\n      setCtaTitle('');\n      setCtaLink('');\n      setCta('');\n    },\n    inputProps: {\n      'aria-label': 'secondary checkbox'\n    },\n    color: 'primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1660,\n      columnNumber: 41\n    }\n  }))))), isCta && __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1677,\n      columnNumber: 29\n    }\n  }, __jsx(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1678,\n      columnNumber: 33\n    }\n  }, __jsx(FormControl, {\n    component: \"fieldset\",\n    disabled: (state === null || state === void 0 ? void 0 : state.langCode) !== (state === null || state === void 0 ? void 0 : state.defaultLang),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1679,\n      columnNumber: 37\n    }\n  }, __jsx(RadioGroup, {\n    \"aria-label\": \"link-type\",\n    row: true,\n    value: ctaLinkType,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setLocalState(prev => {\n        var _pageData$;\n\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          ctaLinkType: value,\n          ctaLink: value === 'internal' ? (_pageData$ = pageData[0]) === null || _pageData$ === void 0 ? void 0 : _pageData$.code : ''\n        });\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1680,\n      columnNumber: 41\n    }\n  }, __jsx(FormControlLabel, {\n    value: \"external\",\n    control: __jsx(Radio, {\n      color: 'primary',\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1695,\n        columnNumber: 58\n      }\n    }),\n    label: \"External Link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1693,\n      columnNumber: 45\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"internal\",\n    control: __jsx(Radio, {\n      color: 'primary',\n      size: 'small',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1700,\n        columnNumber: 58\n      }\n    }),\n    label: \"Internal Link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1698,\n      columnNumber: 45\n    }\n  })))), __jsx(Grid, {\n    container: true,\n    justify: 'flex-start',\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1706,\n      columnNumber: 33\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1707,\n      columnNumber: 37\n    }\n  }, __jsx(TextField, {\n    size: 'small',\n    id: \"cta-title\",\n    variant: 'outlined',\n    label: 'Title',\n    fullWidth: true,\n    value: ctaTitle,\n    onChange: e => setCtaTitle(e.target.value),\n    style: {\n      marginTop: 8\n    },\n    helperText: ctaTitle && __jsx(Typography, {\n      variant: \"caption\",\n      className: classes.alignText,\n      display: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1719,\n        columnNumber: 53\n      }\n    }, `${ctaTitle === null || ctaTitle === void 0 ? void 0 : ctaTitle.length} < 100`),\n    inputProps: {\n      maxLength: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1708,\n      columnNumber: 41\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1731,\n      columnNumber: 37\n    }\n  }, ctaLinkType === 'external' && __jsx(TextField, {\n    size: 'small',\n    id: \"cta-link\",\n    variant: 'outlined',\n    label: 'Link',\n    fullWidth: true,\n    value: ctaLink,\n    error: ctaLink ? !validator.isURL(ctaLink) : false,\n    onChange: e => setCtaLink(e.target.value),\n    style: {\n      marginTop: 8\n    },\n    disabled: state.langCode !== state.defaultLang,\n    helperText: ctaLink && __jsx(Typography, {\n      variant: \"caption\",\n      className: classes.alignText,\n      display: \"block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1746,\n        columnNumber: 57\n      }\n    }, `${ctaLink === null || ctaLink === void 0 ? void 0 : ctaLink.length} < 100`),\n    inputProps: {\n      maxLength: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1733,\n      columnNumber: 45\n    }\n  }), ctaLinkType === 'internal' && __jsx(FormControl, {\n    variant: \"outlined\",\n    size: 'small',\n    style: {\n      marginTop: 8\n    },\n    fullWidth: true,\n    disabled: (state === null || state === void 0 ? void 0 : state.langCode) !== (state === null || state === void 0 ? void 0 : state.defaultLang),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1759,\n      columnNumber: 45\n    }\n  }, __jsx(Select, {\n    value: ctaLink,\n    onChange: e => {\n      const {\n        value\n      } = e === null || e === void 0 ? void 0 : e.target;\n      setCtaLink(value);\n    },\n    label: \"Web Pages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1766,\n      columnNumber: 49\n    }\n  }, pageData.map((option, index) => {\n    return __jsx(MenuItem, {\n      value: option.code,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1776,\n        columnNumber: 61\n      }\n    }, ' ', option.code, ' ');\n  })))))), __jsx(Divider, {\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1789,\n      columnNumber: 25\n    }\n  }), __jsx(Button, {\n    onClick: handleUpdate,\n    variant: \"contained\",\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1790,\n      columnNumber: 25\n    }\n  }, \"SUBMIT\")))), __jsx(DropzoneDialog, {\n    open: isDialogOpen,\n    onSave: saveImage,\n    acceptedFiles: ['image/jpeg', 'image/png', 'image/bmp'],\n    showPreviews: true,\n    maxFileSize: 5000000,\n    onClose: closeDialog,\n    filesLimit: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1803,\n      columnNumber: 13\n    }\n  }), isTextEditorDialogOpen && __jsx(TextEditor, {\n    handleSaveTextEditor: handleTextEditorValue,\n    handleCancelTextEditor: handleCancelEditor,\n    data: editorValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1813,\n      columnNumber: 17\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    state: state.formReducer.pageBuilder\n  };\n};\n\nexport default connect(mapStateToProps)(EditSlider);","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/page-builder/PageBuilderSteps/components/page/sections/slider/EditSlider.js"],"names":["React","useState","useEffect","useContext","Paper","Grid","Card","TextField","Typography","CloudUploadIcon","IconButton","AddCircleIcon","RemoveCircleIcon","FormControlLabel","MenuItem","Radio","RadioGroup","Checkbox","CancelIcon","Divider","Switch","makeStyles","Button","Container","DropzoneDialog","useRouter","WebCmsGlobal","Delete","Insert","Patch","UseOrest","ViewList","COLORS","DELETE_SUCCESS","PERCENTAGE_VALUES","SAVED_SUCCESS","UPLOAD_SUCCESS","LoadingSpinner","FIELDTYPE","isErrorMsg","OREST_ENDPOINT","OREST_UPLOAD","REQUEST_METHOD_CONST","connect","toast","validator","axios","FormControl","InputLabel","Select","InputColor","PercentageSlider","getSliderImages","patchListSliderImage","TextEditor","BorderColorSharpIcon","toSelfName","moment","DatePicker","LocalizationProvider","MomentAdapter","useStyles","theme","submit","marginRight","spacing","marginTop","borderRadius","float","paperBlock","height","border","secondary","overflow","disableEvent","pointerEvents","opacity","uploadButton","marginBottom","marginLeft","card","width","margin","cursor","alignText","textAlign","color","text","fontWeight","fontSize","EditSlider","props","sliderComponent","handleCmponent","state","handleApplyDisable","handleSliderValues","otherLangSlider","sliderImages","setSliderImages","title","setTitle","description","setDescription","isCta","setIsCta","ctaTitle","setCtaTitle","ctaLink","setCtaLink","cta","setCta","isLoaded","setIsLoaded","isSaving","setIsSaving","isItemDesc","setItemDesc","isDeleting","setIsDeleting","selectedIndex","setSelectedIndex","showDeleteBtn","setShowDeleteBtn","hoverIndex","setHoverIndex","sliderGID","setSliderGID","sliderID","setSliderID","imageGID","setImageGID","isDialogOpen","setDialogOpen","itemCount","setItemCount","gappID","setGappID","otherLangSliderImages","setOtherLangSliderImages","editedSliderComponent","setEditedSliderComponent","isImageSelected","setImageSelected","itemDescRequest","setItemDescRequest","isOptimizeImages","setOptimizeImages","quality","setQuality","assets","meta","imageQuality","catId","setCatId","categories","setCategories","isActive","setIsActive","textColor","setTextColor","buttonColor","setButtonColor","localState","setLocalState","isTextEditorDialogOpen","editorValue","dialogType","pageData","ctaLinkType","expiryDate","format","DATEFORMAT_LOCALE","router","companyId","query","companyID","GENERAL_SETTINGS","token","authToken","classes","openDialog","closeDialog","sliderOnly","length","langCode","defaultLang","service","type","gid","id","slider","apiUrl","OREST_URL","endpoint","HCMCAT","params","hotelrefno","Number","then","res","status","data","retErr","error","errorMsg","position","POSITION","TOP_RIGHT","RAFILE","prev","HCMITEMSLD","r","itemid","catid","isactive","matchLink","match","replace","trim","ctaGid","split","cta_title","expiredt","HCMITEMIMG","sort","updatedImages","map","index","push","res1","matchs","console","log","hcmItemId","updatedSliderComponent","handleUpdate","success","handleResetState","warn","updateOtherLangSliderImages","handleDeleteImage","imageGid","sldImages","a","b","orderno","requestPassed","sldImage","updatedSliderImage","handleSelectedImage","image","handleItemDescription","saveImage","files","orderNo","requests","file","Promise","resolve","asyncUpload","all","itemTreated","callback","setTimeout","sliderid","imgtype","IMG","masterid","imgquality","imgscale","r1","ImageUpload","mid","endPoint","masterID","url","binaryData","formData","FormData","append","Blob","name","options","method","headers","Authorization","orsactive","scale","response","catch","handleUpdateOrderNo","orderType","tmpSliderImages","tmp","handleImageQualityChange","value","gids","LIST","PATCH","handleTextEditorValue","handleCancelEditor","handleDialogOpen","handleChangeDatePicker","date","dateValue","labelFont","e","target","display","cat","hex","backgroundImage","STATIC_URL","fileurl","backgroundSize","code","maxLength","isURL","option","mapStateToProps","formReducer","pageBuilder"],"mappings":"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","sourcesContent":["//react imports\nimport React, { useState, useEffect, useContext } from 'react'\n//material ui imports\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport IconButton from '@material-ui/core/IconButton'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle'\nimport { FormControlLabel, MenuItem, Radio, RadioGroup } from '@material-ui/core'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport Divider from '@material-ui/core/Divider'\nimport Switch from '@material-ui/core/Switch'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\n//dropzone related imports\nimport 'regenerator-runtime/runtime'\nimport { DropzoneDialog } from 'material-ui-dropzone'\nimport { useRouter } from 'next/router'\n//custom imports\nimport WebCmsGlobal from '../../../../../../webcms-global'\nimport { Delete, Insert, Patch, UseOrest, ViewList } from '@webcms/orest'\nimport { COLORS, DELETE_SUCCESS, PERCENTAGE_VALUES, SAVED_SUCCESS, UPLOAD_SUCCESS } from '../../../../constants'\nimport LoadingSpinner from '../../../../../../LoadingSpinner'\nimport {\n    FIELDTYPE,\n    isErrorMsg,\n    OREST_ENDPOINT,\n    OREST_UPLOAD,\n    REQUEST_METHOD_CONST,\n} from '../../../../../../../model/orest/constants'\nimport { connect } from 'react-redux'\nimport { toast } from 'react-toastify'\nimport validator from 'validator'\nimport axios from 'axios'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport InputColor from 'react-input-color'\nimport { PercentageSlider } from '../../../../../../../model/slider'\nimport { getSliderImages, patchListSliderImage } from '../../../../helpers/slider'\nimport TextEditor from '../text-editor'\nimport BorderColorSharpIcon from '@material-ui/icons/BorderColorSharp'\nimport { toSelfName } from './../../../../../../../lib/helpers/useFunction';\nimport moment from \"moment\";\nimport {DatePicker, LocalizationProvider} from \"@material-ui/pickers\";\nimport MomentAdapter from \"@date-io/moment\";\n\nconst useStyles = makeStyles((theme) => ({\n    submit: {\n        marginRight: theme.spacing(3),\n        marginTop: theme.spacing(1),\n        borderRadius: 20,\n        float: 'right',\n    },\n    paperBlock: {\n        height: 350,\n        border: `2px solid ${COLORS?.secondary}`,\n        overflow: 'auto',\n    },\n    disableEvent: {\n        pointerEvents: 'none',\n        opacity: 0.5,\n    },\n    uploadButton: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n        borderRadius: 20,\n        float: 'right',\n    },\n    card: {\n        height: 200,\n        width: 320,\n        margin: theme.spacing(1),\n        cursor: 'pointer',\n    },\n    alignText: {\n        textAlign: 'right',\n        color: 'red',\n    },\n    text: {\n        marginTop: 16,\n        fontWeight: 'bold',\n        fontSize: 15,\n    },\n}))\n\nconst EditSlider = (props) => {\n    const { sliderComponent, handleCmponent, state, handleApplyDisable, handleSliderValues, otherLangSlider } = props\n\n    const [sliderImages, setSliderImages] = useState([])\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [isCta, setIsCta] = useState(false)\n    const [ctaTitle, setCtaTitle] = useState('')\n    const [ctaLink, setCtaLink] = useState('')\n    const [cta, setCta] = useState('')\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [isSaving, setIsSaving] = useState(false)\n    const [isItemDesc, setItemDesc] = useState(false)\n    const [isDeleting, setIsDeleting] = useState(false)\n    const [selectedIndex, setSelectedIndex] = useState()\n    const [showDeleteBtn, setShowDeleteBtn] = useState(false)\n    const [hoverIndex, setHoverIndex] = useState()\n    const [sliderGID, setSliderGID] = useState('')\n    const [sliderID, setSliderID] = useState('')\n    const [imageGID, setImageGID] = useState('')\n    const [isDialogOpen, setDialogOpen] = useState(false)\n    const [itemCount, setItemCount] = useState(1)\n    const [gappID, setGappID] = useState('')\n    const [otherLangSliderImages, setOtherLangSliderImages] = useState([])\n    const [editedSliderComponent, setEditedSliderComponent] = useState(sliderComponent)\n    const [isImageSelected, setImageSelected] = useState(false)\n    const [itemDescRequest, setItemDescRequest] = useState(false)\n    const [isOptimizeImages, setOptimizeImages] = useState(false)\n    const [quality, setQuality] = useState(\n        state?.assets?.meta?.imageQuality ? state.assets.meta.imageQuality * 100 : 50\n    )\n    const [catId, setCatId] = useState(null)\n    const [categories, setCategories] = useState([])\n    const [isActive, setIsActive] = useState(false)\n    const [textColor, setTextColor] = useState(sliderComponent?.textColor ? sliderComponent.textColor : '#fff')\n    const [buttonColor, setButtonColor] = useState(sliderComponent?.buttonColor ? sliderComponent.buttonColor : '#fff')\n    const [localState, setLocalState] = useState({\n        isTextEditorDialogOpen: false,\n        editorValue: '',\n        dialogType: '',\n        pageData: [],\n        ctaLinkType: '',\n        expiryDate: moment().format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n    })\n\n    const { dialogType, editorValue, isTextEditorDialogOpen, ctaLinkType, pageData, expiryDate } = localState\n\n    const router = useRouter()\n    const companyId = router.query.companyID\n    const { GENERAL_SETTINGS, token } = useContext(WebCmsGlobal)\n    const authToken = token || router.query.authToken\n\n    const classes = useStyles()\n\n    const openDialog = () => {\n        //it opens dialog for image upload\n        setDialogOpen(true)\n    }\n\n    const closeDialog = () => {\n        ////it closes dialog for image upload\n        setDialogOpen(false)\n    }\n\n    useEffect(() => {\n        if (otherLangSlider && 'sliderImages' in otherLangSlider) {\n            setOtherLangSliderImages(otherLangSlider.sliderImages)\n        }\n    }, [otherLangSlider])\n\n    useEffect(() => {\n        if (router.query.sliderOnly) {\n            if (sliderImages.length === 0) {\n                handleApplyDisable(true)\n            } else {\n                handleApplyDisable(false)\n            }\n        } else {\n            if (sliderImages.length > 0) {\n                if (state.langCode === state.defaultLang) {\n                    handleCmponent({\n                        service: 'hcmitemsld',\n                        type: 'slider',\n                        gid: editedSliderComponent.gid,\n                        width: editedSliderComponent.width,\n                        id: editedSliderComponent.id,\n                        textColor: textColor,\n                        buttonColor: buttonColor,\n                    })\n                } else {\n                    if (!isItemDesc) {\n                        handleCmponent({\n                            slider: {\n                                title: title,\n                                description: description,\n                                cta: cta,\n                            },\n                        })\n                    } else {\n                        handleCmponent({\n                            sliderImages: otherLangSliderImages,\n                        })\n                    }\n                }\n            }\n        }\n    }, [sliderImages, title, description, cta, otherLangSliderImages, textColor, buttonColor])\n\n    useEffect(() => {\n        if (router.query.sliderOnly) {\n            handleSliderValues(title, description, cta, state.slider.gid, textColor, buttonColor)\n        }\n    }, [title, description, cta, textColor, buttonColor])\n\n    useEffect(() => {\n        setIsLoaded(false);\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMCAT,\n            token: authToken,\n            params: {\n                hotelrefno: Number(companyId),\n            },\n        }).then((res) => {\n            if (res?.status === 200) {\n                res?.data?.data?.length > 0 && setCategories(res.data.data)\n            } else {\n                const retErr = isErrorMsg(res)\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n            }\n        })\n        //getting data from rafile\n        ViewList({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.RAFILE,\n            token: authToken,\n            params: {\n                hotelrefno: Number(companyId),\n                query: `filetype::WEBPAGE,istemplate::false}`,\n            }\n        }).then(res => {\n            setIsLoaded(true)\n            if (res.status === 200 && res?.data?.data) {\n                setLocalState(prev => ({...prev, pageData: res.data.data}))\n            } else {\n                const retErr = isErrorMsg(res);\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        })\n    }, [])\n\n    useEffect(() => {\n        // get all slider images against gid\n        setIsLoaded(false)\n        if (editedSliderComponent?.gid) {\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                params: {\n                    query: `gid:${editedSliderComponent.gid}`,\n                    hotelrefno: Number(companyId),\n                },\n            }).then((r) => {\n\n                if (r.status === 200) {\n                    if (r?.data?.data?.length > 0) {\n                        setGappID(r.data.data[0].itemid)\n                        setCatId(r.data.data[0].catid)\n                        setIsActive(r.data.data[0].isactive)\n                        if (state.langCode === state.defaultLang || router.query.sliderOnly) {\n                            if (r.data.data[0].title || r.data.data[0].description) {\n                                setTitle(r.data.data[0].title)\n                                setDescription(r.data.data[0].description)\n                            }\n                            if (r.data.data[0].cta) {\n                                setIsCta(true)\n                                const matchLink = r.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                                if (matchLink) {\n                                    const title = r.data.data[0].cta\n                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                        .replace(matchLink[0], '')\n                                        .replace('>', '')\n                                        .replace('</a>', '')\n                                        .trim()\n                                    setCtaLink(matchLink[0])\n                                    setCtaTitle(title)\n                                    setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                                } else {\n                                    const ctaGid = r.data.data[0].cta\n                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                        .replace('>', '')\n                                        .replace('</a>', '')\n                                        .replace('\"', '')\n                                        .trim()\n                                        ?.split(' ')[0]\n                                    const cta_title = r.data.data[0].cta\n                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                        .replace(ctaGid + '\"', '')\n                                        .replace('>', '')\n                                        .replace('</a>', '')\n                                        .trim()\n                                    setCtaLink(ctaGid)\n                                    setCtaTitle(cta_title)\n                                    setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                                }\n                            }\n                        } else {\n                            if (otherLangSlider && 'slider' in otherLangSlider) {\n                                setTitle(otherLangSlider.slider.title)\n                                setDescription(otherLangSlider.slider.description)\n                                if (otherLangSlider.slider.cta) {\n                                    setIsCta(true)\n                                    const matchLink = otherLangSlider.slider.cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                                    if (matchLink) {\n                                        const title = otherLangSlider.slider.cta\n                                            .replace(`<a target=\"_blank\" href=\"`, '')\n                                            .replace(matchLink[0], '')\n                                            .replace('>', '')\n                                            .replace('</a>', '')\n                                            .trim()\n                                        setCtaLink(matchLink[0])\n                                        setCtaTitle(title)\n                                        setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                                    } else {\n                                        const ctaGid = otherLangSlider.slider.cta\n                                            .replace(`<a target=\"_blank\" href=\"`, '')\n                                            .replace('>', '')\n                                            .replace('</a>', '')\n                                            .replace('\"', '')\n                                            .trim()\n                                            ?.split(' ')[0]\n                                        const cta_title = otherLangSlider.slider.cta\n                                            .replace(`<a target=\"_blank\" href=\"`, '')\n                                            .replace(ctaGid + '\"', '')\n                                            .replace('>', '')\n                                            .replace('</a>', '')\n                                            .trim()\n                                        setCtaLink(ctaGid)\n                                        setCtaTitle(cta_title)\n                                        setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                                    }\n                                }\n                            }\n                        }\n                        setSliderGID(r.data.data[0].gid);\n                        setSliderID(r.data.data[0].id);\n                        setLocalState({...localState, expiryDate: r?.data?.data[0]?.expiredt});\n                        ViewList({\n                            apiUrl: GENERAL_SETTINGS.OREST_URL,\n                            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                            token: authToken,\n                            params: {\n                                query: `sliderid:${r.data.data[0].id}`,\n                                sort: 'orderno',\n                                hotelrefno: Number(companyId),\n                            },\n                        }).then((res) => {\n                            setIsLoaded(true)\n                            if (res.status === 200) {\n                                let updatedImages = []\n                                res.data.data.map(async (data, index) => {\n                                    updatedImages.push(data)\n                                    if (state.langCode === state.defaultLang) {\n                                        if (data.cta || data.title || data.description) {\n                                            if (index === 0) {\n                                                setItemDesc(true)\n                                                setSelectedIndex(index)\n                                                setImageGID(data.gid)\n                                                ViewList({\n                                                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                                    endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                                                    token: authToken,\n                                                    params: {\n                                                        query: `gid:${data.gid}`,\n                                                        sort: 'orderno',\n                                                        hotelrefno: Number(companyId),\n                                                    },\n                                                }).then((res1) => {\n                                                    if (res1.status === 200) {\n                                                        if (res1.data && res1.data.data && res1.data.data.length > 0) {\n                                                            res1.data.data[0].title\n                                                                ? setTitle(res1.data.data[0].title)\n                                                                : setTitle('')\n                                                            res1.data.data[0].description\n                                                                ? setDescription(res1.data.data[0].description)\n                                                                : setDescription('')\n                                                            res1.data.data[0].cta\n                                                                ? setCta(res1.data.data[0].cta)\n                                                                : setCta('')\n                                                            if (res1.data.data[0].cta) {\n                                                                setIsCta(true)\n                                                                setCta(res1.data.data[0].cta)\n                                                                const matchs = res1.data.data[0].cta.match(\n                                                                    /\\bhttps?:\\/\\/\\S+/gi\n                                                                )\n                                                                if (matchs?.length > 0) {\n                                                                    const cta_title = res1.data.data[0].cta\n                                                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                                                        .replace(matchs[0], '')\n                                                                        .replace('>', '')\n                                                                        .replace('</a>', '')\n                                                                        .trim()\n                                                                    setCtaLink(matchs[0])\n                                                                    setCtaTitle(cta_title)\n                                                                    setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                                                                } else {\n                                                                    const ctaGid = res1.data.data[0].cta\n                                                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                                                        .replace('>', '')\n                                                                        .replace('</a>', '')\n                                                                        .replace('\"', '')\n                                                                        .trim()\n                                                                        ?.split(' ')[0]\n                                                                    const cta_title = res1.data.data[0].cta\n                                                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                                                        .replace(ctaGid + '\"', '')\n                                                                        .replace('>', '')\n                                                                        .replace('</a>', '')\n                                                                        .trim()\n                                                                    setCtaLink(ctaGid)\n                                                                    setCtaTitle(cta_title)\n                                                                    setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                                                                }\n                                                            } else {\n                                                                setIsCta(false)\n                                                            }\n                                                        }\n                                                    } else {\n                                                        const retErr = isErrorMsg(res1)\n                                                        toast.error(retErr.errorMsg, {\n                                                            position: toast.POSITION.TOP_RIGHT,\n                                                        })\n                                                    }\n                                                })\n                                            }\n                                        }\n                                    } else {\n                                        if (\n                                            otherLangSlider &&\n                                            otherLangSlider.sliderImages &&\n                                            otherLangSlider.sliderImages.length > 0\n                                        ) {\n                                            setSelectedIndex(0)\n                                            setItemDesc(true)\n                                            setTitle(otherLangSlider.sliderImages[0].title)\n                                            setDescription(otherLangSlider.sliderImages[0].description)\n                                            if (otherLangSlider.sliderImages[0].cta) {\n                                                setIsCta(true)\n                                                setCta(otherLangSlider.sliderImages[0].cta)\n                                                const matchs = otherLangSlider.sliderImages[0].cta.match(\n                                                    /\\bhttps?:\\/\\/\\S+/gi\n                                                )\n                                                if (matchs?.length > 0) {\n                                                    const cta_title = otherLangSlider.sliderImages[0].cta\n                                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                                        .replace(matchs[0], '')\n                                                        .replace('>', '')\n                                                        .replace('</a>', '')\n                                                        .trim()\n                                                    setCtaLink(matchs[0])\n                                                    setCtaTitle(cta_title)\n                                                    setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                                                } else {\n                                                    const ctaGid = otherLangSlider.sliderImages[0].cta\n                                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                                        .replace('>', '')\n                                                        .replace('</a>', '')\n                                                        .replace('\"', '')\n                                                        .trim()\n                                                        ?.split(' ')[0]\n                                                    const cta_title = otherLangSlider.sliderImages[0].cta\n                                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                                        .replace(ctaGid + '\"', '')\n                                                        .replace('>', '')\n                                                        .replace('</a>', '')\n                                                        .trim()\n                                                    setCtaLink(ctaGid)\n                                                    setCtaTitle(cta_title)\n                                                    setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                                                }\n                                            } else {\n                                                setIsCta(false)\n                                                setCtaTitle('')\n                                                setCtaLink('')\n                                            }\n                                        }\n                                    }\n                                })\n                                setSliderImages(updatedImages)\n                                setItemCount(updatedImages + 1)\n                            } else {\n                                console.log(res)\n                            }\n                        })\n                    } else {\n                        setIsLoaded(true)\n                    }\n                } else {\n                    setIsLoaded(true)\n                    const retErr = isErrorMsg(r)\n                    toast.error(retErr.errorMsg, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            })\n        } else {\n            Insert({\n                // insert slider\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                data: {\n                    itemid: state.hcmItemId,\n                    hotelrefno: Number(companyId),\n                },\n            }).then((res) => {\n                if (res.status === 200 && res.data.data) {\n                    setIsLoaded(true)\n                    const updatedSliderComponent = { ...editedSliderComponent }\n                    updatedSliderComponent.gid = res.data.data.gid\n                    setEditedSliderComponent(updatedSliderComponent)\n                }\n            })\n        }\n    }, [editedSliderComponent])\n\n    useEffect(() => {\n        if (ctaTitle && ctaLink) {\n            setCta(`<a target=\"_blank\" href=\"${ctaLink}\" > ${ctaTitle} </a>`)\n        }\n    }, [ctaTitle, ctaLink])\n\n    const handleUpdate = () => {\n        // update slider/image descriptions\n        if (state.langCode === state.defaultLang) {\n            if (isItemDesc) {\n                if (isImageSelected) {\n                    setIsSaving(true)\n                    Patch({\n                        // update image\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                        token: authToken,\n                        gid: imageGID,\n                        params: {\n                            hotelrefno: Number(companyId),\n                        },\n                        data: {\n                            title: title,\n                            description: description,\n                            cta: cta,\n                        },\n                    }).then((res) => {\n                        if (res.status === 200) {\n                            setIsSaving(false)\n                            toast.success(SAVED_SUCCESS, {\n                                position: toast.POSITION.TOP_RIGHT,\n                            })\n                        } else {\n                            console.log(res)\n                        }\n                    })\n                } else {\n                    handleResetState()\n                    toast.warn('Please Select Image', {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            } else {\n                setIsSaving(true)\n                Patch({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                    token: authToken,\n                    gid: sliderGID,\n                    params: {\n                        hotelrefno: Number(companyId),\n                    },\n                    data: {\n                        title: title,\n                        description: description,\n                        cta: cta,\n                    },\n                }).then((res) => {\n                    setIsSaving(false)\n                    if (res.status === 200) {\n                        toast.success(SAVED_SUCCESS, {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    } else {\n                        console.log(res)\n                    }\n                })\n            }\n        } else {\n            const updateOtherLangSliderImages = [...otherLangSliderImages]\n            updateOtherLangSliderImages[selectedIndex] = {\n                title: title,\n                description: description,\n                cta: cta,\n            }\n            setOtherLangSliderImages(updateOtherLangSliderImages)\n            toast.success(SAVED_SUCCESS, {\n                position: toast.POSITION.TOP_RIGHT,\n            })\n        }\n    }\n\n    const handleDeleteImage = (imageGid) => {\n        // delete image against gid\n        setIsDeleting(true)\n        Delete({\n            apiUrl: GENERAL_SETTINGS.OREST_URL,\n            endpoint: OREST_ENDPOINT.HCMITEMIMG,\n            token: authToken,\n            gid: imageGid,\n            params: {\n                hotelrefno: Number(companyId),\n            },\n        }).then(async (res) => {\n            setIsDeleting(false)\n            if (res.status === 200) {\n                const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID)\n                sldImages.sort((a, b) => (a.orderno > b.orderno ? 1 : -1))\n                if (sldImages) {\n                    let updatedImages = []\n                    sldImages.map((data, index) => {\n                        data.orderno = index + 1\n                        updatedImages.push(data)\n                    })\n                    let requestPassed = true\n                    for (const sldImage of sldImages) {\n                        const updatedSliderImage = patchListSliderImage(\n                            GENERAL_SETTINGS.OREST_URL,\n                            authToken,\n                            companyId,\n                            { orderno: sldImage.orderno },\n                            { hotelrefno: Number(companyId) },\n                            sldImage.gid\n                        )\n                        updatedSliderImage ? (requestPassed = true) : (requestPassed = false)\n                    }\n                    if (requestPassed) {\n                        setSliderImages(updatedImages)\n                        setSelectedIndex(null)\n                        setItemCount(updatedImages.length + 1)\n                        toast.success(DELETE_SUCCESS, {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    } else {\n                        toast.error('Something went wrong while deleting image. Please check network tab.', {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    }\n                } else {\n                    toast.error('Something went wrong while deleting image. Please check network tab.', {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                }\n            } else {\n                const retErr = isErrorMsg(res)\n                toast.error(retErr.errorMsg, {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n                setIsDeleting(false)\n            }\n        })\n    }\n\n    const handleSelectedImage = (index, image) => {\n        if (isItemDesc) {\n            setSelectedIndex(index)\n            setImageSelected(true)\n            if (state.langCode === state.defaultLang) {\n                setImageGID(image.gid)\n                setItemDescRequest(true)\n                ViewList({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                    token: authToken,\n                    params: {\n                        query: `gid:${image.gid}`,\n                        sort: 'orderno',\n                        hotelrefno: Number(companyId),\n                    },\n                }).then((res) => {\n                    setItemDescRequest(false)\n                    if (res.status === 200) {\n                        if (res.data && res.data.data && res.data.data.length > 0) {\n                            res.data.data[0].title ? setTitle(res.data.data[0].title) : setTitle('')\n                            res.data.data[0].description\n                                ? setDescription(res.data.data[0].description)\n                                : setDescription('')\n                            res.data.data[0].cta ? setCta(res.data.data[0].cta) : setCta('')\n                            if (res.data.data[0].cta) {\n                                setIsCta(true)\n                                setCta(res.data.data[0].cta)\n                                const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                                if (matchs?.length > 0) {\n                                    const cta_title = res.data.data[0].cta\n                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                        .replace(matchs[0], '')\n                                        .replace('>', '')\n                                        .replace('</a>', '')\n                                        .trim()\n                                    setCtaLink(matchs[0])\n                                    setCtaTitle(cta_title)\n                                    setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                                } else {\n                                    const ctaGid = res.data.data[0].cta\n                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                        .replace('>', '')\n                                        .replace('</a>', '')\n                                        .replace('\"', '')\n                                        .trim()\n                                        ?.split(' ')[0]\n                                    const cta_title = res.data.data[0].cta\n                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                        .replace(ctaGid + '\"', '')\n                                        .replace('>', '')\n                                        .replace('</a>', '')\n                                        .trim()\n                                    setCtaLink(ctaGid)\n                                    setCtaTitle(cta_title)\n                                    setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                                }\n                            } else {\n                                setIsCta(false)\n                                setCtaTitle('')\n                                setCtaLink('')\n                            }\n                        }\n                    } else {\n                        const retErr = isErrorMsg(res)\n                        toast.error(retErr.errorMsg, {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    }\n                })\n            } else {\n                if (otherLangSliderImages.length > 0) {\n                    setTitle(otherLangSliderImages[index].title)\n                    setDescription(otherLangSliderImages[index].description)\n                    if (otherLangSliderImages[index].cta) {\n                        setIsCta(true)\n                        setCta(otherLangSliderImages[index].cta)\n                        const matchs = otherLangSliderImages[index].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                        if (matchs.length > 0) {\n                            const cta_title = otherLangSliderImages[index].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace(matchs[0], '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .trim()\n                            setCtaLink(matchs[0])\n                            setCtaTitle(cta_title)\n                            setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                        } else {\n                            const ctaGid = otherLangSliderImages[index - 1].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .replace('\"', '')\n                                .trim()\n                                ?.split(' ')[0]\n                            const cta_title = otherLangSliderImages[index - 1].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace(ctaGid + '\"', '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .trim()\n                            setCtaLink(ctaGid)\n                            setCtaTitle(cta_title)\n                            setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                        }\n                    } else {\n                        setIsCta(false)\n                        setCtaTitle('')\n                        setCtaLink('')\n                    }\n                } else {\n                    setTitle(otherLangSliderImages?.sliderImages[index - 1]?.title)\n                    setDescription(otherLangSliderImages?.sliderImages[index - 1]?.description)\n                    if (otherLangSliderImages?.sliderImages[0]?.cta) {\n                        setLocalState((prev) => ({ ...prev, isCta: true }))\n                        const matchs = otherLangSliderImages?.sliderImages[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                        if (matchs?.length > 0) {\n                            const cta_title = otherLangSliderImages?.sliderImages[0].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace(matchs[0], '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .trim()\n                            setCtaLink(matchs[0])\n                            setCtaTitle(cta_title)\n                            setLocalState((prev) => ({ ...prev, ctaLinkType: 'external' }))\n                        } else {\n                            const ctaGid = otherLangSliderImages?.sliderImages[0].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .replace('\"', '')\n                                .trim()\n                                ?.split(' ')[0]\n                            const cta_title = otherLangSliderImages?.sliderImages[0].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace(ctaGid + '\"', '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .trim()\n                            setCtaLink(ctaGid)\n                            setCtaTitle(cta_title)\n                            setLocalState((prev) => ({ ...prev, ctaLinkType: 'internal' }))\n                        }\n                    } else {\n                        setLocalState((prev) => ({ ...prev, ctaLink: '', ctaTitle: '', isCta: false }))\n                    }\n                }\n            }\n        }\n    }\n\n    const handleResetState = () => {\n        setCta('')\n        setCtaTitle('')\n        setCtaLink('')\n        setTitle('')\n        setDescription('')\n        setIsCta(false)\n        setImageSelected(false)\n        setSelectedIndex(null)\n    }\n\n    const handleItemDescription = () => {\n        setItemDesc(!isItemDesc)\n        if (isItemDesc) {\n            setItemDescRequest(true)\n            ViewList({\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                params: {\n                    query: `gid:${sliderGID}`,\n                    sort: 'orderno',\n                    hotelrefno: Number(companyId),\n                },\n            }).then((res) => {\n                setItemDescRequest(false)\n                if (res?.status === 200 && res?.data?.data?.length > 0) {\n                    setTitle(res.data.data[0]?.title)\n                    setDescription(res.data.data[0]?.description)\n                    if (res.data.data[0].cta) {\n                        setIsCta(true)\n                        setCta(res.data.data[0].cta)\n                        const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                        if (matchs.length > 0) {\n                            const cta_title = res.data.data[0].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace(matchs[0], '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .trim()\n                            setCtaLink(matchs[0])\n                            setCtaTitle(cta_title)\n                        }\n                    } else {\n                        setIsCta(false)\n                        setCtaTitle('')\n                        setCtaLink('')\n                        setCta('')\n                    }\n                }\n            })\n            handleResetState()\n        } else {\n            setSelectedIndex(0)\n            setImageSelected(true)\n            if (state.langCode === state.defaultLang) {\n                setImageGID(sliderImages[0]?.gid)\n                setItemDescRequest(true)\n                ViewList({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                    token: authToken,\n                    params: {\n                        query: `gid:${sliderImages[0]?.gid}`,\n                        sort: 'orderno',\n                        hotelrefno: Number(companyId),\n                    },\n                }).then((res) => {\n                    setItemDescRequest(false)\n                    if (res.status === 200) {\n                        if (res.data && res.data.data && res.data.data.length > 0) {\n                            res.data.data[0].title ? setTitle(res.data.data[0].title) : setTitle('')\n                            res.data.data[0].description\n                                ? setDescription(res.data.data[0].description)\n                                : setDescription('')\n                            res.data.data[0].cta ? setCta(res.data.data[0].cta) : setCta('')\n                            if (res.data.data[0].cta) {\n                                setIsCta(true)\n                                setCta(res.data.data[0].cta)\n                                const matchs = res.data.data[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                                if (matchs.length > 0) {\n                                    const cta_title = res.data.data[0].cta\n                                        .replace(`<a target=\"_blank\" href=\"`, '')\n                                        .replace(matchs[0], '')\n                                        .replace('>', '')\n                                        .replace('</a>', '')\n                                        .trim()\n                                    setCtaLink(matchs[0])\n                                    setCtaTitle(cta_title)\n                                }\n                            } else {\n                                setIsCta(false)\n                                setCtaTitle('')\n                                setCtaLink('')\n                            }\n                        }\n                    } else {\n                        const retErr = isErrorMsg(res)\n                        toast.error(retErr.errorMsg, {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    }\n                })\n            } else {\n                if (otherLangSliderImages?.length > 0) {\n                    setTitle(otherLangSliderImages[0].title)\n                    setDescription(otherLangSliderImages[0].description)\n                    if (otherLangSliderImages[0].cta) {\n                        setIsCta(true)\n                        setCta(otherLangSliderImages[0].cta)\n                        const matchs = otherLangSliderImages[0].cta.match(/\\bhttps?:\\/\\/\\S+/gi)\n                        if (matchs.length > 0) {\n                            const cta_title = otherLangSliderImages[0].cta\n                                .replace(`<a target=\"_blank\" href=\"`, '')\n                                .replace(matchs[0], '')\n                                .replace('>', '')\n                                .replace('</a>', '')\n                                .trim()\n                            setCtaLink(matchs[0])\n                            setCtaTitle(cta_title)\n                        }\n                    } else {\n                        setIsCta(false)\n                        setCtaTitle('')\n                        setCtaLink('')\n                    }\n                }\n            }\n        }\n    }\n\n    const saveImage = (files) => {\n        setIsLoaded(false)\n        let orderNo = itemCount\n        let requests = files.map((file) => {\n            return new Promise((resolve) => {\n                asyncUpload(file, orderNo, resolve)\n                orderNo++\n            })\n        })\n        Promise.all(requests).then(async () => {\n            const sldImages = await getSliderImages(GENERAL_SETTINGS.OREST_URL, authToken, companyId, sliderID)\n            setIsLoaded(true)\n            if (sldImages) {\n                let updatedImages = []\n                sldImages.map((data) => {\n                    updatedImages.push(data)\n                })\n                setSliderImages(updatedImages)\n                setItemCount(updatedImages.length + 1)\n                toast.success(UPLOAD_SUCCESS, {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n                closeDialog()\n            } else {\n                toast.warn('Something went wrong while saving image. Please check network tab.', {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n            }\n        })\n    }\n\n    function asyncUpload(file, itemTreated, callback) {\n        if (router.query.sliderOnly) {\n            if (gappID && editedSliderComponent.gid) {\n                setTimeout(() => {\n                    ViewList({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                        token: authToken,\n                        params: {\n                            query: `gid:${editedSliderComponent.gid}`,\n                            hotelrefno: Number(companyId),\n                        },\n                    }).then((r) => {\n                        if (r.status === 200) {\n                            Insert({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                                token: authToken,\n                                data: {\n                                    itemid: gappID,\n                                    sliderid: r.data.data[0].id,\n                                    imgtype: FIELDTYPE.IMG,\n                                    orderno: itemTreated,\n                                    hotelrefno: Number(companyId),\n                                    masterid: router.query.masterid,\n                                    imgquality: quality / 100,\n                                    imgscale: quality / 100,\n                                },\n                            }).then((r1) => {\n                                if (r1.status === 200) {\n                                    ImageUpload(\n                                        GENERAL_SETTINGS.OREST_URL,\n                                        OREST_ENDPOINT.RAFILE,\n                                        authToken,\n                                        r1.data.data.mid,\n                                        file\n                                    ).then((r) => {\n                                        if (r.status === 200) {\n                                            callback()\n                                        } else {\n                                            callback()\n                                        }\n                                    })\n                                } else {\n                                    callback()\n                                }\n                            })\n                        }\n                    })\n                }, 100)\n            }\n        } else {\n            if (state.hcmItemId && editedSliderComponent.gid) {\n                setTimeout(() => {\n                    ViewList({\n                        apiUrl: GENERAL_SETTINGS.OREST_URL,\n                        endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                        token: authToken,\n                        params: {\n                            query: `gid:${editedSliderComponent.gid}`,\n                            hotelrefno: Number(companyId),\n                        },\n                    }).then((r) => {\n                        if (r.status === 200) {\n                            Insert({\n                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                endpoint: OREST_ENDPOINT.HCMITEMIMG,\n                                token: authToken,\n                                data: {\n                                    itemid: state.hcmItemId,\n                                    sliderid: r.data.data[0].id,\n                                    imgtype: FIELDTYPE.IMG,\n                                    orderno: itemTreated,\n                                    hotelrefno: Number(companyId),\n                                    imgquality: quality / 100,\n                                    imgscale: quality / 100,\n                                },\n                            }).then((r1) => {\n                                if (r1.status === 200) {\n                                    ImageUpload(\n                                        GENERAL_SETTINGS.OREST_URL,\n                                        OREST_ENDPOINT.RAFILE,\n                                        authToken,\n                                        r1.data.data.mid,\n                                        file\n                                    ).then((r) => {\n                                        if (r.status === 200) {\n                                            callback()\n                                        } else {\n                                            callback()\n                                        }\n                                    })\n                                } else {\n                                    callback()\n                                }\n                            })\n                        }\n                    })\n                }, 100)\n            }\n        }\n    }\n\n    const ImageUpload = (apiUrl, endPoint, token, masterID, file) => {\n        const url = apiUrl + '/' + endPoint + OREST_UPLOAD\n        let binaryData = []\n        binaryData.push(file)\n        let formData = new FormData()\n        formData.append('file', new Blob(binaryData, { type: file.type }), toSelfName(file.name));\n\n        const options = {\n            url: url,\n            method: 'post',\n            headers: {\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'multipart/form-data',\n            },\n            params: {\n                orsactive: true,\n                masterid: masterID,\n                hotelrefno: companyId,\n                quality: quality / 100,\n                scale: quality / 100,\n            },\n            data: formData,\n        }\n\n        return axios(options)\n            .then((response) => {\n                return response\n            })\n            .catch((error) => {\n                return error.response || { status: 0 }\n            })\n    }\n\n    const handleUpdateOrderNo = async (gid, orderNo, orderType) => {\n        // update order no of slider images\n\n        if (orderNo <= 0 || orderNo > sliderImages.length) {\n            setSelectedIndex(null)\n            setImageSelected(false)\n        } else {\n            const tmpSliderImages = [...sliderImages]\n            if (orderType === 'increment') {\n                const tmp = tmpSliderImages[orderNo - 1]\n                tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo - 2]\n                tmpSliderImages[orderNo - 2] = tmp\n            } else {\n                const tmp = tmpSliderImages[orderNo - 1]\n                tmpSliderImages[orderNo - 1] = tmpSliderImages[orderNo]\n                tmpSliderImages[orderNo] = tmp\n            }\n            tmpSliderImages.map((data, index) => {\n                data.orderno = index + 1\n            })\n            setIsDeleting(true)\n            let requestPassed = true\n            for (const sldImage of tmpSliderImages) {\n                const updatedSliderImage = patchListSliderImage(\n                    GENERAL_SETTINGS.OREST_URL,\n                    authToken,\n                    companyId,\n                    { orderno: sldImage.orderno },\n                    { hotelrefno: Number(companyId) },\n                    sldImage.gid\n                )\n                updatedSliderImage ? (requestPassed = true) : (requestPassed = false)\n            }\n            setIsDeleting(false)\n            if (requestPassed) {\n                setSliderImages(tmpSliderImages)\n                setItemCount(sliderImages.length + 1)\n                handleResetState()\n                toast.success('Order No Updated Successfully', {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n            } else {\n                toast.error('Something went wrong while updating order no. Please check network tab.', {\n                    position: toast.POSITION.TOP_RIGHT,\n                })\n            }\n        }\n    }\n\n    const handleImageQualityChange = (value) => {\n        if (value >= 10 && value <= 100 && value % 10 === 0) {\n            if (sliderImages.length) {\n                setIsLoaded(false)\n                const gids = sliderImages.map((image) => {\n                    return { gid: image.gid, imgquality: value / 100, imgscale: value / 100 }\n                })\n                UseOrest({\n                    apiUrl: GENERAL_SETTINGS.OREST_URL,\n                    endpoint: OREST_ENDPOINT.HCMITEMIMG + '/' + OREST_ENDPOINT.LIST + '/' + OREST_ENDPOINT.PATCH,\n                    token: authToken,\n                    method: REQUEST_METHOD_CONST.PATCH,\n                    data: gids,\n                    params: {\n                        hotelrefno: Number(companyId),\n                    },\n                }).then((res) => {\n                    if (res?.status === 200 && res?.data?.data) {\n                        setQuality(value)\n                        setIsLoaded(true)\n                    } else {\n                        const retErr = isErrorMsg(res)\n                        toast.error(retErr.errorMsg, {\n                            position: toast.POSITION.TOP_RIGHT,\n                        })\n                    }\n                })\n            } else {\n                setQuality(value)\n            }\n        }\n    }\n\n    const handleTextEditorValue = (value) => {\n        if (dialogType === 'title') {\n            setTitle(value)\n        }\n        if (dialogType === 'description') {\n            setDescription(value)\n        }\n        setLocalState((prev) => ({ ...prev, isTextEditorDialogOpen: false, dialogType: '', editorValue: '' }))\n    }\n\n    const handleCancelEditor = () => {\n        setLocalState((prev) => ({ ...prev, isTextEditorDialogOpen: false, dialogType: '', editorValue: '' }))\n    }\n\n    const handleDialogOpen = (type) => {\n        if (type === 'title') {\n            setLocalState((prev) => ({ ...prev, isTextEditorDialogOpen: true, dialogType: type, editorValue: title }))\n        }\n        if (type === 'description') {\n            setLocalState((prev) => ({\n                ...prev,\n                isTextEditorDialogOpen: true,\n                dialogType: type,\n                editorValue: description,\n            }))\n        }\n    }\n\n    const handleChangeDatePicker = (date) => {\n        const dateValue = moment(date).format(OREST_ENDPOINT.DATEFORMAT_LOCALE)\n        setLocalState({...localState, expiryDate: dateValue});\n        if (dateValue !== 'Invalid date') {\n            setIsDeleting(true);\n            Patch({\n                // update slider\n                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                token: authToken,\n                gid: sliderGID,\n                params: {\n                    hotelrefno: Number(companyId),\n                },\n                data: {\n                    expiredt: dateValue,\n                },\n            }).then((res) => {\n                setIsDeleting(false);\n                if (res.status === 200) {\n                    toast.success(SAVED_SUCCESS, {\n                        position: toast.POSITION.TOP_RIGHT,\n                    })\n                } else {\n                    console.log(res)\n                }\n            })\n        }\n\n    }\n\n    if (!isLoaded) {\n        return <LoadingSpinner style={{ color: COLORS.secondary }} />\n    }\n\n    return (\n        <React.Fragment>\n            {\n                !router.query.sliderOnly && (\n                    <Grid container={true}>\n                        <Grid item xs={4}>\n                            <LocalizationProvider dateLibInstance={moment} dateAdapter={MomentAdapter}>\n                                <DatePicker\n                                    id=\"sliderExpiryDate\"\n                                    name=\"sliderExpiryDate\"\n                                    label={'Select Expiry'}\n                                    value={expiryDate}\n                                    inputFormat=\"DD/MM/YYYY\"\n                                    disablePast\n                                    onChange={handleChangeDatePicker}\n                                    renderInput={(props) => <TextField fullWidth\n                                                                       {...props}\n                                                                       variant={'filled'}\n                                                                       required={true}\n                                    />}\n                                />\n                            </LocalizationProvider>\n                        </Grid>\n                    </Grid>\n                )\n            }\n            <Grid container={true} justify={'flex-start'}>\n                <Grid item xs={router?.query?.sliderOnly ? 8 : 5}>\n                    <FormControlLabel\n                        disabled={state.langCode !== state.defaultLang && !router.query.sliderOnly}\n                        control={\n                            <Checkbox\n                                checked={isItemDesc}\n                                onChange={handleItemDescription}\n                                name=\"isitem\"\n                                color=\"primary\"\n                                disabled={sliderImages.length === 0}\n                            />\n                        }\n                        label=\"Items Description\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={isOptimizeImages}\n                                onChange={() => setOptimizeImages(!isOptimizeImages)}\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Optimize Images\"\n                    />\n                    {router?.query?.sliderOnly && (\n                        <>\n                            <FormControlLabel\n                                className={classes.labelFont}\n                                control={\n                                    <Checkbox\n                                        size={'small'}\n                                        checked={isActive}\n                                        onChange={() => {\n                                            setIsActive(!isActive)\n                                            Patch({\n                                                // update slider\n                                                apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                                endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                                                token: authToken,\n                                                gid: sliderGID,\n                                                params: {\n                                                    hotelrefno: Number(companyId),\n                                                },\n                                                data: {\n                                                    isactive: !isActive,\n                                                },\n                                            }).then((res) => {\n                                                if (res.status !== 200) {\n                                                    const retErr = isErrorMsg(res)\n                                                    toast.error(retErr.errorMsg, {\n                                                        position: toast.POSITION.TOP_RIGHT,\n                                                    })\n                                                }\n                                            })\n                                        }}\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Active\"\n                            />\n                            <FormControl size={'small'}>\n                                <InputLabel htmlFor=\"age-native-simple\">Category</InputLabel>\n                                <Select\n                                    native\n                                    name=\"cat_id\"\n                                    variant={'outlined'}\n                                    value={catId}\n                                    onChange={(e) => {\n                                        setCatId(e.target.value)\n                                        Patch({\n                                            // update slider\n                                            apiUrl: GENERAL_SETTINGS.OREST_URL,\n                                            endpoint: OREST_ENDPOINT.HCMITEMSLD,\n                                            token: authToken,\n                                            gid: sliderGID,\n                                            params: {\n                                                hotelrefno: Number(companyId),\n                                            },\n                                            data: {\n                                                catid: e.target.value,\n                                            },\n                                        }).then((res) => {\n                                            if (res.status !== 200) {\n                                                const retErr = isErrorMsg(res)\n                                                toast.error(retErr.errorMsg, {\n                                                    position: toast.POSITION.TOP_RIGHT,\n                                                })\n                                            }\n                                        })\n                                    }}\n                                >\n                                    <option style={{ display: 'none' }} value=\"\"></option>\n                                    {categories.length > 0 &&\n                                        categories.map((cat) => {\n                                            return (\n                                                <option key={cat.id} value={cat.id}>\n                                                    {cat.description}\n                                                </option>\n                                            )\n                                        })}\n                                </Select>\n                            </FormControl>\n                        </>\n                    )}\n                </Grid>\n                {!router?.query?.sliderOnly && (\n                    <Grid item xs={5}>\n                        <Grid container spacing={1}>\n                            <Grid item xs={1} style={{ marginTop: 6, marginLeft: 16 }}>\n                                <Typography component={'span'} style={{ marginLeft: -8 }}>\n                                    Text\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={2} style={{ marginTop: 8 }}>\n                                <InputColor\n                                    onChange={(color) => setTextColor(color.hex)}\n                                    placement=\"right\"\n                                    initialValue={textColor}\n                                />\n                            </Grid>\n                            <Grid item xs={2} style={{ marginTop: 6 }}>\n                                <Typography component={'span'}>Button</Typography>\n                            </Grid>\n                            <Grid item xs={3} style={{ marginTop: 8 }}>\n                                <InputColor\n                                    onChange={(color) => setButtonColor(color.hex)}\n                                    placement=\"right\"\n                                    initialValue={buttonColor}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                )}\n                <Grid item xs={router?.query?.sliderOnly ? 4 : 2}>\n                    {router?.query?.sliderOnly ? (\n                        <Grid container spacing={1}>\n                            <Grid item xs={1} style={{ marginTop: 6 }}>\n                                <Typography component={'span'} style={{ marginLeft: -8 }}>\n                                    Text\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={2} style={{ marginTop: 8 }}>\n                                <InputColor\n                                    onChange={(color) => setTextColor(color.hex)}\n                                    placement=\"right\"\n                                    initialValue={textColor}\n                                />\n                            </Grid>\n                            <Grid item xs={2} style={{ marginTop: 6 }}>\n                                <Typography component={'span'}>Button</Typography>\n                            </Grid>\n                            <Grid item xs={3} style={{ marginTop: 8 }}>\n                                <InputColor\n                                    onChange={(color) => setButtonColor(color.hex)}\n                                    placement=\"right\"\n                                    initialValue={buttonColor}\n                                />\n                            </Grid>\n                            <Grid item xs={4}>\n                                <Button\n                                    onClick={openDialog}\n                                    variant=\"contained\"\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    aria-label=\"upload\"\n                                    className={classes.uploadButton}\n                                >\n                                    <CloudUploadIcon />\n                                    UPLOAD\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    ) : (\n                        <Button\n                            onClick={openDialog}\n                            variant=\"contained\"\n                            size=\"small\"\n                            color=\"primary\"\n                            aria-label=\"upload\"\n                            className={classes.uploadButton}\n                        >\n                            <CloudUploadIcon />\n                            UPLOAD\n                        </Button>\n                    )}\n                </Grid>\n            </Grid>\n            {isOptimizeImages && (\n                <Grid container>\n                    <Grid item xs={12}>\n                        <PercentageSlider\n                            marks={PERCENTAGE_VALUES}\n                            value={quality}\n                            onChange={(e, value) => handleImageQualityChange(value)}\n                        />\n                    </Grid>\n                </Grid>\n            )}\n            <Grid container={true} justify={'flex-start'} spacing={3} className={isSaving ? classes.disableEvent : ''}>\n                <Grid\n                    item\n                    xs={5}\n                    className={\n                        otherLangSlider && 'slider' in otherLangSlider && state.langCode !== state.defaultLang\n                            ? classes.disableEvent\n                            : ''\n                    }\n                >\n                    <Paper className={classes.paperBlock}>\n                        {sliderImages.length > 0 &&\n                            sliderImages.map((image, index) => {\n                                return (\n                                    <Grid\n                                        key={index}\n                                        container\n                                        justify={'center'}\n                                        className={isDeleting ? classes.disableEvent : ''}\n                                    >\n                                        <Grid item={true}>\n                                            <Card\n                                                className={classes.card}\n                                                style={{\n                                                    border:\n                                                        index === selectedIndex\n                                                            ? '2px solid red'\n                                                            : `1px solid ${COLORS?.secondary}`,\n                                                }}\n                                            >\n                                                <div\n                                                    style={{\n                                                        backgroundImage: `url(${\n                                                            GENERAL_SETTINGS.STATIC_URL + image.fileurl\n                                                        })`,\n                                                        height: '100%',\n                                                        width: '100%',\n                                                        backgroundSize: 'cover',\n                                                        borderRadius: 5,\n                                                    }}\n                                                    onMouseEnter={() => {\n                                                        setShowDeleteBtn(true)\n                                                        setHoverIndex(index)\n                                                    }}\n                                                    onMouseLeave={() => {\n                                                        setShowDeleteBtn(false)\n                                                        setHoverIndex(index)\n                                                    }}\n                                                    onClick={() => handleSelectedImage(index, image)}\n                                                >\n                                                    {showDeleteBtn && hoverIndex === index && (\n                                                        <IconButton\n                                                            disabled={\n                                                                state.langCode !== state.defaultLang &&\n                                                                !router.query.sliderOnly\n                                                            }\n                                                            component=\"span\"\n                                                            color={'primary'}\n                                                            className={\n                                                                index === sliderImages.length - 1\n                                                                    ? classes.disableEvent\n                                                                    : ''\n                                                            }\n                                                            onClick={() =>\n                                                                handleUpdateOrderNo(\n                                                                    image.gid,\n                                                                    image.orderno + 1,\n                                                                    'increment'\n                                                                )\n                                                            }\n                                                        >\n                                                            <AddCircleIcon />\n                                                        </IconButton>\n                                                    )}\n                                                    {showDeleteBtn && hoverIndex === index && (\n                                                        <Typography component=\"span\" color={'primary'}>\n                                                            {image.orderno}\n                                                        </Typography>\n                                                    )}\n                                                    {showDeleteBtn && hoverIndex === index && (\n                                                        <IconButton\n                                                            disabled={\n                                                                state.langCode !== state.defaultLang &&\n                                                                !router.query.sliderOnly\n                                                            }\n                                                            component=\"span\"\n                                                            color={'primary'}\n                                                            className={index === 0 ? classes.disableEvent : ''}\n                                                            onClick={() =>\n                                                                handleUpdateOrderNo(\n                                                                    image.gid,\n                                                                    image.orderno - 1,\n                                                                    'decrement'\n                                                                )\n                                                            }\n                                                        >\n                                                            <RemoveCircleIcon />\n                                                        </IconButton>\n                                                    )}\n                                                    {showDeleteBtn && hoverIndex === index && (\n                                                        <IconButton\n                                                            disabled={\n                                                                state.langCode !== state.defaultLang &&\n                                                                !router.query.sliderOnly\n                                                            }\n                                                            onClick={() => handleDeleteImage(image.gid)}\n                                                            aria-label=\"upload picture\"\n                                                            component=\"span\"\n                                                            style={{ float: 'right' }}\n                                                            color={'primary'}\n                                                        >\n                                                            <CancelIcon />\n                                                        </IconButton>\n                                                    )}\n                                                </div>\n                                            </Card>\n                                        </Grid>\n                                    </Grid>\n                                )\n                            })}\n                    </Paper>\n                </Grid>\n                <Grid item xs={7} className={itemDescRequest ? classes.disableEvent : ''}>\n                    <Paper className={classes.paperBlock}>\n                        <Container>\n                            <Grid container justify={'flex-start'}>\n                                <Grid item xs={3}>\n                                    <Typography component={'h6'} variant={'h6'} className={classes.text}>\n                                        Title\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={9}>\n                                    <IconButton\n                                        aria-label=\"Edit Title\"\n                                        color=\"primary\"\n                                        onClick={() => handleDialogOpen('title')}\n                                        style={{ float: 'right' }}\n                                    >\n                                        <BorderColorSharpIcon color=\"primary\" />\n                                    </IconButton>\n                                </Grid>\n                            </Grid>\n                        </Container>\n                        <Container>\n                            <Grid container justify={'flex-start'}>\n                                <Grid item xs={3}>\n                                    <Typography component={'h6'} variant={'h6'} className={classes.text}>\n                                        Description\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={9}>\n                                    <IconButton\n                                        aria-label=\"Edit Title\"\n                                        color=\"primary\"\n                                        onClick={() => handleDialogOpen('description')}\n                                        style={{ float: 'right' }}\n                                    >\n                                        <BorderColorSharpIcon color=\"primary\" />\n                                    </IconButton>\n                                </Grid>\n                            </Grid>\n                        </Container>\n                        <Container>\n                            <Grid container justify={'flex-start'}>\n                                <Grid item xs={11}>\n                                    <Typography component={'h6'} variant={'h6'} className={classes.text}>\n                                        Do you want to add button for slider ?\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <Typography component={'div'} style={{ marginTop: 16 }}>\n                                        <Switch\n                                            size={'small'}\n                                            checked={isCta}\n                                            onChange={() => {\n                                                setIsCta(!isCta)\n                                                setCtaTitle('')\n                                                setCtaLink('')\n                                                setCta('')\n                                            }}\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                            color={'primary'}\n                                        />\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </Container>\n                        {isCta && (\n                            <Container>\n                                <Grid container>\n                                    <FormControl component=\"fieldset\" disabled={state?.langCode !== state?.defaultLang}>\n                                        <RadioGroup\n                                            aria-label=\"link-type\"\n                                            row\n                                            value={ctaLinkType}\n                                            onChange={(e) => {\n                                                const { value } = e?.target\n                                                setLocalState((prev) => ({\n                                                    ...prev,\n                                                    ctaLinkType: value,\n                                                    ctaLink: value === 'internal' ? pageData[0]?.code : '',\n                                                }))\n                                            }}\n                                        >\n                                            <FormControlLabel\n                                                value=\"external\"\n                                                control={<Radio color={'primary'} size={'small'} />}\n                                                label=\"External Link\"\n                                            />\n                                            <FormControlLabel\n                                                value=\"internal\"\n                                                control={<Radio color={'primary'} size={'small'} />}\n                                                label=\"Internal Link\"\n                                            />\n                                        </RadioGroup>\n                                    </FormControl>\n                                </Grid>\n                                <Grid container justify={'flex-start'} spacing={1}>\n                                    <Grid item xs={6}>\n                                        <TextField\n                                            size={'small'}\n                                            id=\"cta-title\"\n                                            variant={'outlined'}\n                                            label={'Title'}\n                                            fullWidth\n                                            value={ctaTitle}\n                                            onChange={(e) => setCtaTitle(e.target.value)}\n                                            style={{ marginTop: 8 }}\n                                            helperText={\n                                                ctaTitle && (\n                                                    <Typography\n                                                        variant=\"caption\"\n                                                        className={classes.alignText}\n                                                        display=\"block\"\n                                                    >\n                                                        {`${ctaTitle?.length} < 100`}\n                                                    </Typography>\n                                                )\n                                            }\n                                            inputProps={{ maxLength: 99 }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        {ctaLinkType === 'external' && (\n                                            <TextField\n                                                size={'small'}\n                                                id=\"cta-link\"\n                                                variant={'outlined'}\n                                                label={'Link'}\n                                                fullWidth\n                                                value={ctaLink}\n                                                error={ctaLink ? !validator.isURL(ctaLink) : false}\n                                                onChange={(e) => setCtaLink(e.target.value)}\n                                                style={{ marginTop: 8 }}\n                                                disabled={state.langCode !== state.defaultLang}\n                                                helperText={\n                                                    ctaLink && (\n                                                        <Typography\n                                                            variant=\"caption\"\n                                                            className={classes.alignText}\n                                                            display=\"block\"\n                                                        >\n                                                            {`${ctaLink?.length} < 100`}\n                                                        </Typography>\n                                                    )\n                                                }\n                                                inputProps={{ maxLength: 99 }}\n                                            />\n                                        )}\n                                        {ctaLinkType === 'internal' && (\n                                            <FormControl\n                                                variant=\"outlined\"\n                                                size={'small'}\n                                                style={{ marginTop: 8 }}\n                                                fullWidth\n                                                disabled={state?.langCode !== state?.defaultLang}\n                                            >\n                                                <Select\n                                                    value={ctaLink}\n                                                    onChange={(e) => {\n                                                        const { value } = e?.target\n                                                        setCtaLink(value);\n                                                    }}\n                                                    label=\"Web Pages\"\n                                                >\n                                                    {pageData.map((option, index) => {\n                                                        return (\n                                                            <MenuItem value={option.code} key={index}>\n                                                                {' '}\n                                                                {option.code}{' '}\n                                                            </MenuItem>\n                                                        )\n                                                    })}\n                                                </Select>\n                                            </FormControl>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </Container>\n                        )}\n                        <Divider style={{ marginTop: 8 }} />\n                        <Button\n                            onClick={handleUpdate}\n                            variant=\"contained\"\n                            size=\"small\"\n                            color=\"primary\"\n                            aria-label=\"add\"\n                            className={classes.submit}\n                        >\n                            SUBMIT\n                        </Button>\n                    </Paper>\n                </Grid>\n            </Grid>\n            <DropzoneDialog\n                open={isDialogOpen}\n                onSave={saveImage}\n                acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\n                showPreviews={true}\n                maxFileSize={5000000}\n                onClose={closeDialog}\n                filesLimit={5}\n            />\n            {isTextEditorDialogOpen && (\n                <TextEditor\n                    handleSaveTextEditor={handleTextEditorValue}\n                    handleCancelTextEditor={handleCancelEditor}\n                    data={editorValue}\n                />\n            )}\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.formReducer.pageBuilder,\n    }\n}\n\nexport default connect(mapStateToProps)(EditSlider)\n"]},"metadata":{},"sourceType":"module"}