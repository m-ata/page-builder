{"ast":null,"code":"var _jsxFileName = \"/Users/mata/app-cloudweb/model/google/components/GoogleLogin/GoogleLogin.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport GoogleButton from '../../../../components/cloud-wiki/GoogleButton/GoogleButton';\nimport useGoogle from '../../useGoogle';\nimport { useSelector } from 'react-redux';\nimport useNotifications from '../../../notification/useNotifications';\n\nfunction GoogleLogin() {\n  var _currentUser$loginfo;\n\n  // REDUX\n  const {\n    showSuccess\n  } = useNotifications();\n  const {\n    setGoogleUserInfo,\n    deleteGoogleUserInfo,\n    deleteGoogleAuthInfo,\n    setGoogleIsInitializing,\n    setGoogleIsInitialized\n  } = useGoogle();\n  const isGoogleLoggedIn = useSelector(state => state.google.currentUser !== null);\n  const currentUser = useSelector(state => state.google.currentUser !== null ? state.google.currentUser : null);\n  const auth = useSelector(state => state.google.authInfo !== null ? state.google.authInfo : null); //HOOKS STATE\n\n  const {\n    0: isSignedIn,\n    1: setIsSignedIn\n  } = useState(false);\n  useEffect(() => {}, []);\n\n  const handleSignIn = () => {\n    if (auth) {\n      setGoogleIsInitializing(true);\n      auth.signIn().then(res => {\n        const currentUser = {\n          auth: {\n            token_type: res.getAuthResponse().token_type,\n            access_token: res.getAuthResponse().access_token,\n            scope: res.getAuthResponse().scope,\n            login_hint: res.getAuthResponse().login_hint,\n            expires_in: res.getAuthResponse().expires_in,\n            id_token: res.getAuthResponse().id_token,\n            session_state: res.getAuthResponse().session_state,\n            first_issued_at: res.getAuthResponse().first_issued_at,\n            expires_at: res.getAuthResponse().expires_at,\n            idpId: res.getAuthResponse().idpId\n          },\n          loginfo: {\n            id: res.getBasicProfile().getId(),\n            fullName: res.getBasicProfile().getName(0),\n            email: res.getBasicProfile().getEmail(),\n            profilePicture: res.getBasicProfile().getImageUrl()\n          }\n        };\n        setGoogleUserInfo(currentUser);\n        setIsSignedIn(true);\n        setGoogleIsInitialized(true);\n        const userName = res.getBasicProfile().getName(0) || 'User';\n        showSuccess('Welcome ' + userName);\n        setGoogleIsInitializing(false);\n      });\n    }\n  };\n\n  const handleSignOut = () => {\n    setGoogleIsInitializing(true);\n    auth.signOut().then(() => {\n      setIsSignedIn(false);\n      deleteGoogleUserInfo();\n      setGoogleIsInitialized(false);\n      setGoogleIsInitializing(false);\n      showSuccess('Signout Success');\n    });\n  };\n\n  return __jsx(React.Fragment, null, isGoogleLoggedIn ? __jsx(GoogleButton, {\n    handleClick: handleSignOut,\n    label: `Sign Out From ${currentUser === null ? 'Google' : currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$loginfo = currentUser.loginfo) === null || _currentUser$loginfo === void 0 ? void 0 : _currentUser$loginfo.fullName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }) : __jsx(GoogleButton, {\n    handleClick: handleSignIn,\n    label: `Sign In With Google`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }));\n}\n\nexport default GoogleLogin;","map":{"version":3,"sources":["/Users/mata/app-cloudweb/model/google/components/GoogleLogin/GoogleLogin.js"],"names":["React","useEffect","useState","GoogleButton","useGoogle","useSelector","useNotifications","GoogleLogin","showSuccess","setGoogleUserInfo","deleteGoogleUserInfo","deleteGoogleAuthInfo","setGoogleIsInitializing","setGoogleIsInitialized","isGoogleLoggedIn","state","google","currentUser","auth","authInfo","isSignedIn","setIsSignedIn","handleSignIn","signIn","then","res","token_type","getAuthResponse","access_token","scope","login_hint","expires_in","id_token","session_state","first_issued_at","expires_at","idpId","loginfo","id","getBasicProfile","getId","fullName","getName","email","getEmail","profilePicture","getImageUrl","userName","handleSignOut","signOut"],"mappings":"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","sourcesContent":["import React, {\n    useEffect,\n    useState\n} from 'react';\nimport GoogleButton from '../../../../components/cloud-wiki/GoogleButton/GoogleButton';\nimport useGoogle from '../../useGoogle';\nimport {useSelector} from 'react-redux';\nimport useNotifications from '../../../notification/useNotifications';\n\n\nfunction GoogleLogin(){\n    // REDUX\n    const {showSuccess} = useNotifications();\n    const {setGoogleUserInfo, deleteGoogleUserInfo, deleteGoogleAuthInfo, setGoogleIsInitializing, setGoogleIsInitialized} = useGoogle();\n    const isGoogleLoggedIn = useSelector(state => state.google.currentUser !== null);\n    const currentUser = useSelector(state => state.google.currentUser !== null ? state.google.currentUser : null );\n    const auth = useSelector(state => state.google.authInfo !== null ? state.google.authInfo : null)\n    \n    //HOOKS STATE\n    const [isSignedIn, setIsSignedIn] = useState(false);\n    \n    useEffect(() => {\n    },[])\n    \n    const handleSignIn = () => {\n        if (auth) {\n            setGoogleIsInitializing(true);\n            auth.signIn().then(res => {\n                const currentUser = {\n                    auth: {\n                        token_type: res.getAuthResponse().token_type,\n                        access_token: res.getAuthResponse().access_token,\n                        scope: res.getAuthResponse().scope,\n                        login_hint: res.getAuthResponse().login_hint,\n                        expires_in: res.getAuthResponse().expires_in,\n                        id_token: res.getAuthResponse().id_token,\n                        session_state: res.getAuthResponse().session_state,\n                        first_issued_at: res.getAuthResponse().first_issued_at,\n                        expires_at: res.getAuthResponse().expires_at,\n                        idpId: res.getAuthResponse().idpId,\n                    },\n                    loginfo: {\n                        id: res.getBasicProfile().getId(),\n                        fullName: res.getBasicProfile().getName(0),\n                        email: res.getBasicProfile().getEmail(),\n                        profilePicture: res.getBasicProfile().getImageUrl()\n                    }\n\n                }\n                setGoogleUserInfo(currentUser);\n                setIsSignedIn(true);\n                setGoogleIsInitialized(true);\n                const userName = res.getBasicProfile().getName(0) || 'User';\n                showSuccess('Welcome ' + userName);\n                setGoogleIsInitializing(false);\n\n            });\n        }\n    }\n    \n    const handleSignOut = () => {\n        setGoogleIsInitializing(true);\n        auth.signOut().then(() => {\n            setIsSignedIn(false);\n            deleteGoogleUserInfo();\n            setGoogleIsInitialized(false);\n            setGoogleIsInitializing(false);\n            showSuccess('Signout Success');\n        });\n    };\n    \n    return(\n        <>\n            { isGoogleLoggedIn ?\n                <GoogleButton\n                    handleClick={handleSignOut}\n                    label={`Sign Out From ${currentUser === null ? 'Google' :  currentUser?.loginfo?.fullName}`}\n                />\n                :\n                <GoogleButton\n                    handleClick={handleSignIn}\n                    label={`Sign In With Google`}\n                />\n            }\n        </>\n    );\n\n    \n}\n\nexport default GoogleLogin;"]},"metadata":{},"sourceType":"module"}