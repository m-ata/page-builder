{"ast":null,"code":"import Payment from './payment';\n\nfunction clearNumber(value = '') {\n  return value.replace(/\\D+/g, '');\n}\n\nexport function formatCreditCardNumber(value) {\n  if (!value) {\n    return value;\n  }\n\n  const issuer = Payment.fns.cardType(value);\n  const clearValue = clearNumber(value);\n  let nextValue;\n\n  switch (issuer) {\n    case 'amex':\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 15)}`;\n      break;\n\n    case 'dinersclub':\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 14)}`;\n      break;\n\n    default:\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 8)} ${clearValue.slice(8, 12)} ${clearValue.slice(12, 19)}`;\n      break;\n  }\n\n  return nextValue.trim();\n}\nexport function formatCVC(value, prevValue, allValues = {}) {\n  const clearValue = clearNumber(value);\n  let maxLength = 4;\n\n  if (allValues.number) {\n    const issuer = Payment.fns.cardType(allValues.number);\n    maxLength = issuer === 'amex' ? 4 : 3;\n  }\n\n  return clearValue.slice(0, maxLength);\n}\nexport function formatExpirationDate(value) {\n  const clearValue = clearNumber(value);\n\n  if (clearValue.length >= 3) {\n    return `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`;\n  }\n\n  return clearValue;\n}\nexport function formatFormData(data) {\n  return Object.keys(data).map(d => `${d}: ${data[d]}`);\n}","map":{"version":3,"sources":["/Users/mata/app-cloudweb/components/payment/credit-card/utils.js"],"names":["Payment","clearNumber","value","replace","formatCreditCardNumber","issuer","fns","cardType","clearValue","nextValue","slice","trim","formatCVC","prevValue","allValues","maxLength","number","formatExpirationDate","length","formatFormData","data","Object","keys","map","d"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,WAAT,CAAqBC,KAAK,GAAG,EAA7B,EAAiC;AAC7B,SAAOA,KAAK,CAACC,OAAN,CAAc,MAAd,EAAsB,EAAtB,CAAP;AACH;;AAED,OAAO,SAASC,sBAAT,CAAgCF,KAAhC,EAAuC;AAC1C,MAAI,CAACA,KAAL,EAAY;AACR,WAAOA,KAAP;AACH;;AAED,QAAMG,MAAM,GAAGL,OAAO,CAACM,GAAR,CAAYC,QAAZ,CAAqBL,KAArB,CAAf;AACA,QAAMM,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;AACA,MAAIO,SAAJ;;AAEA,UAAQJ,MAAR;AACI,SAAK,MAAL;AACII,MAAAA,SAAS,GAAI,GAAED,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CAAwB,IAAGF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAAyB,EAA7F;AACA;;AACJ,SAAK,YAAL;AACID,MAAAA,SAAS,GAAI,GAAED,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CAAwB,IAAGF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAAyB,EAA7F;AACA;;AACJ;AACID,MAAAA,SAAS,GAAI,GAAED,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CAC/D,CAD+D,EAE/D,EAF+D,CAGjE,IAAGF,UAAU,CAACE,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAAyB,EAH9B;AAIA;AAZR;;AAeA,SAAOD,SAAS,CAACE,IAAV,EAAP;AACH;AAED,OAAO,SAASC,SAAT,CAAmBV,KAAnB,EAA0BW,SAA1B,EAAqCC,SAAS,GAAG,EAAjD,EAAqD;AACxD,QAAMN,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;AACA,MAAIa,SAAS,GAAG,CAAhB;;AAEA,MAAID,SAAS,CAACE,MAAd,EAAsB;AAClB,UAAMX,MAAM,GAAGL,OAAO,CAACM,GAAR,CAAYC,QAAZ,CAAqBO,SAAS,CAACE,MAA/B,CAAf;AACAD,IAAAA,SAAS,GAAGV,MAAM,KAAK,MAAX,GAAoB,CAApB,GAAwB,CAApC;AACH;;AAED,SAAOG,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoBK,SAApB,CAAP;AACH;AAED,OAAO,SAASE,oBAAT,CAA8Bf,KAA9B,EAAqC;AACxC,QAAMM,UAAU,GAAGP,WAAW,CAACC,KAAD,CAA9B;;AAEA,MAAIM,UAAU,CAACU,MAAX,IAAqB,CAAzB,EAA4B;AACxB,WAAQ,GAAEV,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,IAAGF,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAmB,CAAnB,CAAsB,EAA1D;AACH;;AAED,SAAOF,UAAP;AACH;AAED,OAAO,SAASW,cAAT,CAAwBC,IAAxB,EAA8B;AACjC,SAAOC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,GAAlB,CAAuBC,CAAD,IAAQ,GAAEA,CAAE,KAAIJ,IAAI,CAACI,CAAD,CAAI,EAA9C,CAAP;AACH","sourcesContent":["import Payment from './payment'\n\nfunction clearNumber(value = '') {\n    return value.replace(/\\D+/g, '')\n}\n\nexport function formatCreditCardNumber(value) {\n    if (!value) {\n        return value\n    }\n\n    const issuer = Payment.fns.cardType(value)\n    const clearValue = clearNumber(value)\n    let nextValue\n\n    switch (issuer) {\n        case 'amex':\n            nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 15)}`\n            break\n        case 'dinersclub':\n            nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 14)}`\n            break\n        default:\n            nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 8)} ${clearValue.slice(\n                8,\n                12\n            )} ${clearValue.slice(12, 19)}`\n            break\n    }\n\n    return nextValue.trim()\n}\n\nexport function formatCVC(value, prevValue, allValues = {}) {\n    const clearValue = clearNumber(value)\n    let maxLength = 4\n\n    if (allValues.number) {\n        const issuer = Payment.fns.cardType(allValues.number)\n        maxLength = issuer === 'amex' ? 4 : 3\n    }\n\n    return clearValue.slice(0, maxLength)\n}\n\nexport function formatExpirationDate(value) {\n    const clearValue = clearNumber(value)\n\n    if (clearValue.length >= 3) {\n        return `${clearValue.slice(0, 2)}/${clearValue.slice(2,4)}`\n    }\n\n    return clearValue\n}\n\nexport function formatFormData(data) {\n    return Object.keys(data).map((d) => `${d}: ${data[d]}`)\n}\n"]},"metadata":{},"sourceType":"module"}